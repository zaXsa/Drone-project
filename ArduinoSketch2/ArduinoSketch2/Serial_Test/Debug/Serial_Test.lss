
Serial_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00000698  0000072c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000698  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a6  0080012e  0080012e  0000075a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000075a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000078c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  000007cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006e27  00000000  00000000  000009fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000015b5  00000000  00000000  00007823  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013a2  00000000  00000000  00008dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006ac  00000000  00000000  0000a17c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001d65  00000000  00000000  0000a828  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002565  00000000  00000000  0000c58d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000200  00000000  00000000  0000eaf2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 9d 02 	jmp	0x53a	; 0x53a <__vector_16>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 a9 01 	jmp	0x352	; 0x352 <__vector_18>
  4c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__vector_19>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
  68:	0b 02       	muls	r16, r27

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	e8 e9       	ldi	r30, 0x98	; 152
  7e:	f6 e0       	ldi	r31, 0x06	; 6
  80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0
  86:	ae 32       	cpi	r26, 0x2E	; 46
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
  8c:	21 e0       	ldi	r18, 0x01	; 1
  8e:	ae e2       	ldi	r26, 0x2E	; 46
  90:	b1 e0       	ldi	r27, 0x01	; 1
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	a4 3d       	cpi	r26, 0xD4	; 212
  98:	b2 07       	cpc	r27, r18
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
  9c:	10 e0       	ldi	r17, 0x00	; 0
  9e:	c5 e3       	ldi	r28, 0x35	; 53
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
  a4:	21 97       	sbiw	r28, 0x01	; 1
  a6:	fe 01       	movw	r30, r28
  a8:	0e 94 44 03 	call	0x688	; 0x688 <__tablejump2__>
  ac:	c4 33       	cpi	r28, 0x34	; 52
  ae:	d1 07       	cpc	r29, r17
  b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
  b2:	0e 94 39 02 	call	0x472	; 0x472 <main>
  b6:	0c 94 4a 03 	jmp	0x694	; 0x694 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
  be:	26 e0       	ldi	r18, 0x06	; 6
  c0:	40 e8       	ldi	r20, 0x80	; 128
  c2:	55 e2       	ldi	r21, 0x25	; 37
  c4:	60 e0       	ldi	r22, 0x00	; 0
  c6:	70 e0       	ldi	r23, 0x00	; 0
  c8:	8e e2       	ldi	r24, 0x2E	; 46
  ca:	91 e0       	ldi	r25, 0x01	; 1
  cc:	0e 94 44 01 	call	0x288	; 0x288 <_ZN14HardwareSerial5beginEmh>

void setup()                    // run once, when the sketch starts
{
  Serial.begin(9600);           // set up Serial library at 9600 bps
  
  Serial.println("Hello world!");  // prints hello with ending line break 
  d0:	60 e0       	ldi	r22, 0x00	; 0
  d2:	71 e0       	ldi	r23, 0x01	; 1
  d4:	8e e2       	ldi	r24, 0x2E	; 46
  d6:	91 e0       	ldi	r25, 0x01	; 1
  d8:	0c 94 8b 02 	jmp	0x516	; 0x516 <_ZN5Print7printlnEPKc>

000000dc <loop>:
}

void loop()                       // run over and over again
{
  if (Serial.available()) {
  dc:	8e e2       	ldi	r24, 0x2E	; 46
  de:	91 e0       	ldi	r25, 0x01	; 1
  e0:	0e 94 7e 00 	call	0xfc	; 0xfc <_ZN14HardwareSerial9availableEv>
  e4:	89 2b       	or	r24, r25
  e6:	49 f0       	breq	.+18     	; 0xfa <loop+0x1e>
    Serial.write(Serial.read());
  e8:	8e e2       	ldi	r24, 0x2E	; 46
  ea:	91 e0       	ldi	r25, 0x01	; 1
  ec:	0e 94 98 00 	call	0x130	; 0x130 <_ZN14HardwareSerial4readEv>
    virtual void flush(void);
    virtual size_t write(uint8_t);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
  f0:	68 2f       	mov	r22, r24
  f2:	8e e2       	ldi	r24, 0x2E	; 46
  f4:	91 e0       	ldi	r25, 0x01	; 1
  f6:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <_ZN14HardwareSerial5writeEh>
  fa:	08 95       	ret

000000fc <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
  fc:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
  fe:	91 8d       	ldd	r25, Z+25	; 0x19
 100:	22 8d       	ldd	r18, Z+26	; 0x1a
 102:	89 2f       	mov	r24, r25
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	80 5c       	subi	r24, 0xC0	; 192
 108:	9f 4f       	sbci	r25, 0xFF	; 255
 10a:	82 1b       	sub	r24, r18
 10c:	91 09       	sbc	r25, r1
}
 10e:	8f 73       	andi	r24, 0x3F	; 63
 110:	99 27       	eor	r25, r25
 112:	08 95       	ret

00000114 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 114:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 116:	91 8d       	ldd	r25, Z+25	; 0x19
 118:	82 8d       	ldd	r24, Z+26	; 0x1a
 11a:	98 17       	cp	r25, r24
 11c:	31 f0       	breq	.+12     	; 0x12a <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 11e:	82 8d       	ldd	r24, Z+26	; 0x1a
 120:	e8 0f       	add	r30, r24
 122:	f1 1d       	adc	r31, r1
 124:	85 8d       	ldd	r24, Z+29	; 0x1d
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 12a:	8f ef       	ldi	r24, 0xFF	; 255
 12c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 12e:	08 95       	ret

00000130 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 130:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 132:	91 8d       	ldd	r25, Z+25	; 0x19
 134:	82 8d       	ldd	r24, Z+26	; 0x1a
 136:	98 17       	cp	r25, r24
 138:	61 f0       	breq	.+24     	; 0x152 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 13a:	82 8d       	ldd	r24, Z+26	; 0x1a
 13c:	df 01       	movw	r26, r30
 13e:	a8 0f       	add	r26, r24
 140:	b1 1d       	adc	r27, r1
 142:	5d 96       	adiw	r26, 0x1d	; 29
 144:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 146:	92 8d       	ldd	r25, Z+26	; 0x1a
 148:	9f 5f       	subi	r25, 0xFF	; 255
 14a:	9f 73       	andi	r25, 0x3F	; 63
 14c:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 152:	8f ef       	ldi	r24, 0xFF	; 255
 154:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 156:	08 95       	ret

00000158 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	92 e0       	ldi	r25, 0x02	; 2
 15c:	89 2b       	or	r24, r25
 15e:	49 f0       	breq	.+18     	; 0x172 <_Z14serialEventRunv+0x1a>
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	89 2b       	or	r24, r25
 166:	29 f0       	breq	.+10     	; 0x172 <_Z14serialEventRunv+0x1a>
 168:	0e 94 01 02 	call	0x402	; 0x402 <_Z17Serial0_availablev>
 16c:	81 11       	cpse	r24, r1
 16e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 172:	08 95       	ret

00000174 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 174:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 176:	84 8d       	ldd	r24, Z+28	; 0x1c
 178:	df 01       	movw	r26, r30
 17a:	a8 0f       	add	r26, r24
 17c:	b1 1d       	adc	r27, r1
 17e:	a3 5a       	subi	r26, 0xA3	; 163
 180:	bf 4f       	sbci	r27, 0xFF	; 255
 182:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 184:	84 8d       	ldd	r24, Z+28	; 0x1c
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	01 96       	adiw	r24, 0x01	; 1
 18a:	8f 73       	andi	r24, 0x3F	; 63
 18c:	99 27       	eor	r25, r25
 18e:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 190:	a6 89       	ldd	r26, Z+22	; 0x16
 192:	b7 89       	ldd	r27, Z+23	; 0x17
 194:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 196:	a0 89       	ldd	r26, Z+16	; 0x10
 198:	b1 89       	ldd	r27, Z+17	; 0x11
 19a:	8c 91       	ld	r24, X
 19c:	80 64       	ori	r24, 0x40	; 64
 19e:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 1a0:	93 8d       	ldd	r25, Z+27	; 0x1b
 1a2:	84 8d       	ldd	r24, Z+28	; 0x1c
 1a4:	98 13       	cpse	r25, r24
 1a6:	06 c0       	rjmp	.+12     	; 0x1b4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 1a8:	02 88       	ldd	r0, Z+18	; 0x12
 1aa:	f3 89       	ldd	r31, Z+19	; 0x13
 1ac:	e0 2d       	mov	r30, r0
 1ae:	80 81       	ld	r24, Z
 1b0:	8f 7d       	andi	r24, 0xDF	; 223
 1b2:	80 83       	st	Z, r24
 1b4:	08 95       	ret

000001b6 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
 1b6:	ef 92       	push	r14
 1b8:	ff 92       	push	r15
 1ba:	0f 93       	push	r16
 1bc:	1f 93       	push	r17
 1be:	cf 93       	push	r28
 1c0:	df 93       	push	r29
 1c2:	ec 01       	movw	r28, r24
  _written = true;
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 1c8:	9b 8d       	ldd	r25, Y+27	; 0x1b
 1ca:	8c 8d       	ldd	r24, Y+28	; 0x1c
 1cc:	98 13       	cpse	r25, r24
 1ce:	05 c0       	rjmp	.+10     	; 0x1da <_ZN14HardwareSerial5writeEh+0x24>
 1d0:	e8 89       	ldd	r30, Y+16	; 0x10
 1d2:	f9 89       	ldd	r31, Y+17	; 0x11
 1d4:	80 81       	ld	r24, Z
 1d6:	85 fd       	sbrc	r24, 5
 1d8:	24 c0       	rjmp	.+72     	; 0x222 <_ZN14HardwareSerial5writeEh+0x6c>
 1da:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 1dc:	0b 8d       	ldd	r16, Y+27	; 0x1b
 1de:	10 e0       	ldi	r17, 0x00	; 0
 1e0:	0f 5f       	subi	r16, 0xFF	; 255
 1e2:	1f 4f       	sbci	r17, 0xFF	; 255
 1e4:	0f 73       	andi	r16, 0x3F	; 63
 1e6:	11 27       	eor	r17, r17
 1e8:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 1ea:	8c 8d       	ldd	r24, Y+28	; 0x1c
 1ec:	e8 12       	cpse	r14, r24
 1ee:	0c c0       	rjmp	.+24     	; 0x208 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
 1f0:	0f b6       	in	r0, 0x3f	; 63
 1f2:	07 fc       	sbrc	r0, 7
 1f4:	fa cf       	rjmp	.-12     	; 0x1ea <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 1f6:	e8 89       	ldd	r30, Y+16	; 0x10
 1f8:	f9 89       	ldd	r31, Y+17	; 0x11
 1fa:	80 81       	ld	r24, Z
 1fc:	85 ff       	sbrs	r24, 5
 1fe:	f5 cf       	rjmp	.-22     	; 0x1ea <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 200:	ce 01       	movw	r24, r28
 202:	0e 94 ba 00 	call	0x174	; 0x174 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 206:	f1 cf       	rjmp	.-30     	; 0x1ea <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 208:	8b 8d       	ldd	r24, Y+27	; 0x1b
 20a:	fe 01       	movw	r30, r28
 20c:	e8 0f       	add	r30, r24
 20e:	f1 1d       	adc	r31, r1
 210:	e3 5a       	subi	r30, 0xA3	; 163
 212:	ff 4f       	sbci	r31, 0xFF	; 255
 214:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
 216:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 218:	ea 89       	ldd	r30, Y+18	; 0x12
 21a:	fb 89       	ldd	r31, Y+19	; 0x13
 21c:	80 81       	ld	r24, Z
 21e:	80 62       	ori	r24, 0x20	; 32
 220:	07 c0       	rjmp	.+14     	; 0x230 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 222:	ee 89       	ldd	r30, Y+22	; 0x16
 224:	ff 89       	ldd	r31, Y+23	; 0x17
 226:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 228:	e8 89       	ldd	r30, Y+16	; 0x10
 22a:	f9 89       	ldd	r31, Y+17	; 0x11
 22c:	80 81       	ld	r24, Z
 22e:	80 64       	ori	r24, 0x40	; 64
 230:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	df 91       	pop	r29
 238:	cf 91       	pop	r28
 23a:	1f 91       	pop	r17
 23c:	0f 91       	pop	r16
 23e:	ff 90       	pop	r15
 240:	ef 90       	pop	r14
 242:	08 95       	ret

00000244 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 244:	cf 93       	push	r28
 246:	df 93       	push	r29
 248:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 24a:	88 8d       	ldd	r24, Y+24	; 0x18
 24c:	88 23       	and	r24, r24
 24e:	c9 f0       	breq	.+50     	; 0x282 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 250:	ea 89       	ldd	r30, Y+18	; 0x12
 252:	fb 89       	ldd	r31, Y+19	; 0x13
 254:	80 81       	ld	r24, Z
 256:	85 fd       	sbrc	r24, 5
 258:	05 c0       	rjmp	.+10     	; 0x264 <_ZN14HardwareSerial5flushEv+0x20>
 25a:	a8 89       	ldd	r26, Y+16	; 0x10
 25c:	b9 89       	ldd	r27, Y+17	; 0x11
 25e:	8c 91       	ld	r24, X
 260:	86 fd       	sbrc	r24, 6
 262:	0f c0       	rjmp	.+30     	; 0x282 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 264:	0f b6       	in	r0, 0x3f	; 63
 266:	07 fc       	sbrc	r0, 7
 268:	f5 cf       	rjmp	.-22     	; 0x254 <_ZN14HardwareSerial5flushEv+0x10>
 26a:	80 81       	ld	r24, Z
 26c:	85 ff       	sbrs	r24, 5
 26e:	f2 cf       	rjmp	.-28     	; 0x254 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 270:	a8 89       	ldd	r26, Y+16	; 0x10
 272:	b9 89       	ldd	r27, Y+17	; 0x11
 274:	8c 91       	ld	r24, X
 276:	85 ff       	sbrs	r24, 5
 278:	ed cf       	rjmp	.-38     	; 0x254 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 27a:	ce 01       	movw	r24, r28
 27c:	0e 94 ba 00 	call	0x174	; 0x174 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 280:	e7 cf       	rjmp	.-50     	; 0x250 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 282:	df 91       	pop	r29
 284:	cf 91       	pop	r28
 286:	08 95       	ret

00000288 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 288:	cf 92       	push	r12
 28a:	df 92       	push	r13
 28c:	ef 92       	push	r14
 28e:	ff 92       	push	r15
 290:	1f 93       	push	r17
 292:	cf 93       	push	r28
 294:	df 93       	push	r29
 296:	ec 01       	movw	r28, r24
 298:	6a 01       	movw	r12, r20
 29a:	7b 01       	movw	r14, r22
 29c:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 29e:	e8 89       	ldd	r30, Y+16	; 0x10
 2a0:	f9 89       	ldd	r31, Y+17	; 0x11
 2a2:	82 e0       	ldi	r24, 0x02	; 2
 2a4:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 2a6:	41 15       	cp	r20, r1
 2a8:	51 4e       	sbci	r21, 0xE1	; 225
 2aa:	61 05       	cpc	r22, r1
 2ac:	71 05       	cpc	r23, r1
 2ae:	b1 f0       	breq	.+44     	; 0x2dc <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 2b0:	60 e0       	ldi	r22, 0x00	; 0
 2b2:	79 e0       	ldi	r23, 0x09	; 9
 2b4:	8d e3       	ldi	r24, 0x3D	; 61
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	a7 01       	movw	r20, r14
 2ba:	96 01       	movw	r18, r12
 2bc:	0e 94 22 03 	call	0x644	; 0x644 <__udivmodsi4>
 2c0:	da 01       	movw	r26, r20
 2c2:	c9 01       	movw	r24, r18
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	a1 09       	sbc	r26, r1
 2c8:	b1 09       	sbc	r27, r1
 2ca:	b6 95       	lsr	r27
 2cc:	a7 95       	ror	r26
 2ce:	97 95       	ror	r25
 2d0:	87 95       	ror	r24
 2d2:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 2d4:	21 15       	cp	r18, r1
 2d6:	80 e1       	ldi	r24, 0x10	; 16
 2d8:	38 07       	cpc	r19, r24
 2da:	a8 f0       	brcs	.+42     	; 0x306 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
 2dc:	e8 89       	ldd	r30, Y+16	; 0x10
 2de:	f9 89       	ldd	r31, Y+17	; 0x11
 2e0:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 2e2:	60 e8       	ldi	r22, 0x80	; 128
 2e4:	74 e8       	ldi	r23, 0x84	; 132
 2e6:	8e e1       	ldi	r24, 0x1E	; 30
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	a7 01       	movw	r20, r14
 2ec:	96 01       	movw	r18, r12
 2ee:	0e 94 22 03 	call	0x644	; 0x644 <__udivmodsi4>
 2f2:	da 01       	movw	r26, r20
 2f4:	c9 01       	movw	r24, r18
 2f6:	01 97       	sbiw	r24, 0x01	; 1
 2f8:	a1 09       	sbc	r26, r1
 2fa:	b1 09       	sbc	r27, r1
 2fc:	b6 95       	lsr	r27
 2fe:	a7 95       	ror	r26
 300:	97 95       	ror	r25
 302:	87 95       	ror	r24
 304:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 306:	ec 85       	ldd	r30, Y+12	; 0x0c
 308:	fd 85       	ldd	r31, Y+13	; 0x0d
 30a:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
 30c:	ee 85       	ldd	r30, Y+14	; 0x0e
 30e:	ff 85       	ldd	r31, Y+15	; 0x0f
 310:	20 83       	st	Z, r18

  _written = false;
 312:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 314:	ec 89       	ldd	r30, Y+20	; 0x14
 316:	fd 89       	ldd	r31, Y+21	; 0x15
 318:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
 31a:	ea 89       	ldd	r30, Y+18	; 0x12
 31c:	fb 89       	ldd	r31, Y+19	; 0x13
 31e:	80 81       	ld	r24, Z
 320:	80 61       	ori	r24, 0x10	; 16
 322:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 324:	ea 89       	ldd	r30, Y+18	; 0x12
 326:	fb 89       	ldd	r31, Y+19	; 0x13
 328:	80 81       	ld	r24, Z
 32a:	88 60       	ori	r24, 0x08	; 8
 32c:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 32e:	ea 89       	ldd	r30, Y+18	; 0x12
 330:	fb 89       	ldd	r31, Y+19	; 0x13
 332:	80 81       	ld	r24, Z
 334:	80 68       	ori	r24, 0x80	; 128
 336:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 338:	ea 89       	ldd	r30, Y+18	; 0x12
 33a:	fb 89       	ldd	r31, Y+19	; 0x13
 33c:	80 81       	ld	r24, Z
 33e:	8f 7d       	andi	r24, 0xDF	; 223
 340:	80 83       	st	Z, r24
}
 342:	df 91       	pop	r29
 344:	cf 91       	pop	r28
 346:	1f 91       	pop	r17
 348:	ff 90       	pop	r15
 34a:	ef 90       	pop	r14
 34c:	df 90       	pop	r13
 34e:	cf 90       	pop	r12
 350:	08 95       	ret

00000352 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 352:	1f 92       	push	r1
 354:	0f 92       	push	r0
 356:	0f b6       	in	r0, 0x3f	; 63
 358:	0f 92       	push	r0
 35a:	11 24       	eor	r1, r1
 35c:	2f 93       	push	r18
 35e:	8f 93       	push	r24
 360:	9f 93       	push	r25
 362:	ef 93       	push	r30
 364:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 366:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <__data_end+0x10>
 36a:	f0 91 3f 01 	lds	r31, 0x013F	; 0x80013f <__data_end+0x11>
 36e:	80 81       	ld	r24, Z
 370:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <__data_end+0x16>
 374:	f0 91 45 01 	lds	r31, 0x0145	; 0x800145 <__data_end+0x17>
 378:	82 fd       	sbrc	r24, 2
 37a:	12 c0       	rjmp	.+36     	; 0x3a0 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 37c:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 37e:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <__data_end+0x19>
 382:	8f 5f       	subi	r24, 0xFF	; 255
 384:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 386:	20 91 48 01 	lds	r18, 0x0148	; 0x800148 <__data_end+0x1a>
 38a:	82 17       	cp	r24, r18
 38c:	51 f0       	breq	.+20     	; 0x3a2 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
 38e:	e0 91 47 01 	lds	r30, 0x0147	; 0x800147 <__data_end+0x19>
 392:	f0 e0       	ldi	r31, 0x00	; 0
 394:	e2 5d       	subi	r30, 0xD2	; 210
 396:	fe 4f       	sbci	r31, 0xFE	; 254
 398:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 39a:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <__data_end+0x19>
 39e:	01 c0       	rjmp	.+2      	; 0x3a2 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 3a0:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 3a2:	ff 91       	pop	r31
 3a4:	ef 91       	pop	r30
 3a6:	9f 91       	pop	r25
 3a8:	8f 91       	pop	r24
 3aa:	2f 91       	pop	r18
 3ac:	0f 90       	pop	r0
 3ae:	0f be       	out	0x3f, r0	; 63
 3b0:	0f 90       	pop	r0
 3b2:	1f 90       	pop	r1
 3b4:	18 95       	reti

000003b6 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 3b6:	1f 92       	push	r1
 3b8:	0f 92       	push	r0
 3ba:	0f b6       	in	r0, 0x3f	; 63
 3bc:	0f 92       	push	r0
 3be:	11 24       	eor	r1, r1
 3c0:	2f 93       	push	r18
 3c2:	3f 93       	push	r19
 3c4:	4f 93       	push	r20
 3c6:	5f 93       	push	r21
 3c8:	6f 93       	push	r22
 3ca:	7f 93       	push	r23
 3cc:	8f 93       	push	r24
 3ce:	9f 93       	push	r25
 3d0:	af 93       	push	r26
 3d2:	bf 93       	push	r27
 3d4:	ef 93       	push	r30
 3d6:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 3d8:	8e e2       	ldi	r24, 0x2E	; 46
 3da:	91 e0       	ldi	r25, 0x01	; 1
 3dc:	0e 94 ba 00 	call	0x174	; 0x174 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 3e0:	ff 91       	pop	r31
 3e2:	ef 91       	pop	r30
 3e4:	bf 91       	pop	r27
 3e6:	af 91       	pop	r26
 3e8:	9f 91       	pop	r25
 3ea:	8f 91       	pop	r24
 3ec:	7f 91       	pop	r23
 3ee:	6f 91       	pop	r22
 3f0:	5f 91       	pop	r21
 3f2:	4f 91       	pop	r20
 3f4:	3f 91       	pop	r19
 3f6:	2f 91       	pop	r18
 3f8:	0f 90       	pop	r0
 3fa:	0f be       	out	0x3f, r0	; 63
 3fc:	0f 90       	pop	r0
 3fe:	1f 90       	pop	r1
 400:	18 95       	reti

00000402 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 402:	8e e2       	ldi	r24, 0x2E	; 46
 404:	91 e0       	ldi	r25, 0x01	; 1
 406:	0e 94 7e 00 	call	0xfc	; 0xfc <_ZN14HardwareSerial9availableEv>
 40a:	21 e0       	ldi	r18, 0x01	; 1
 40c:	89 2b       	or	r24, r25
 40e:	09 f4       	brne	.+2      	; 0x412 <_Z17Serial0_availablev+0x10>
 410:	20 e0       	ldi	r18, 0x00	; 0
}
 412:	82 2f       	mov	r24, r18
 414:	08 95       	ret

00000416 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 416:	ee e2       	ldi	r30, 0x2E	; 46
 418:	f1 e0       	ldi	r31, 0x01	; 1
 41a:	13 82       	std	Z+3, r1	; 0x03
 41c:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 41e:	88 ee       	ldi	r24, 0xE8	; 232
 420:	93 e0       	ldi	r25, 0x03	; 3
 422:	a0 e0       	ldi	r26, 0x00	; 0
 424:	b0 e0       	ldi	r27, 0x00	; 0
 426:	84 83       	std	Z+4, r24	; 0x04
 428:	95 83       	std	Z+5, r25	; 0x05
 42a:	a6 83       	std	Z+6, r26	; 0x06
 42c:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 42e:	81 e1       	ldi	r24, 0x11	; 17
 430:	91 e0       	ldi	r25, 0x01	; 1
 432:	91 83       	std	Z+1, r25	; 0x01
 434:	80 83       	st	Z, r24
 436:	85 ec       	ldi	r24, 0xC5	; 197
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	95 87       	std	Z+13, r25	; 0x0d
 43c:	84 87       	std	Z+12, r24	; 0x0c
 43e:	84 ec       	ldi	r24, 0xC4	; 196
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	97 87       	std	Z+15, r25	; 0x0f
 444:	86 87       	std	Z+14, r24	; 0x0e
 446:	80 ec       	ldi	r24, 0xC0	; 192
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	91 8b       	std	Z+17, r25	; 0x11
 44c:	80 8b       	std	Z+16, r24	; 0x10
 44e:	81 ec       	ldi	r24, 0xC1	; 193
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	93 8b       	std	Z+19, r25	; 0x13
 454:	82 8b       	std	Z+18, r24	; 0x12
 456:	82 ec       	ldi	r24, 0xC2	; 194
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	95 8b       	std	Z+21, r25	; 0x15
 45c:	84 8b       	std	Z+20, r24	; 0x14
 45e:	86 ec       	ldi	r24, 0xC6	; 198
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	97 8b       	std	Z+23, r25	; 0x17
 464:	86 8b       	std	Z+22, r24	; 0x16
 466:	11 8e       	std	Z+25, r1	; 0x19
 468:	12 8e       	std	Z+26, r1	; 0x1a
 46a:	13 8e       	std	Z+27, r1	; 0x1b
 46c:	14 8e       	std	Z+28, r1	; 0x1c
 46e:	08 95       	ret

00000470 <initVariant>:
 470:	08 95       	ret

00000472 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 472:	0e 94 e7 02 	call	0x5ce	; 0x5ce <init>

	initVariant();
 476:	0e 94 38 02 	call	0x470	; 0x470 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 47a:	0e 94 5f 00 	call	0xbe	; 0xbe <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 47e:	cc ea       	ldi	r28, 0xAC	; 172
 480:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 482:	0e 94 6e 00 	call	0xdc	; 0xdc <loop>
		if (serialEventRun) serialEventRun();
 486:	20 97       	sbiw	r28, 0x00	; 0
 488:	e1 f3       	breq	.-8      	; 0x482 <main+0x10>
 48a:	0e 94 ac 00 	call	0x158	; 0x158 <_Z14serialEventRunv>
 48e:	f9 cf       	rjmp	.-14     	; 0x482 <main+0x10>

00000490 <_ZN5Print5writeEPKhj>:
size_t Print::println(const String &s)
{
  size_t n = print(s);
  n += println();
  return n;
}
 490:	cf 92       	push	r12
 492:	df 92       	push	r13
 494:	ef 92       	push	r14
 496:	ff 92       	push	r15
 498:	0f 93       	push	r16
 49a:	1f 93       	push	r17
 49c:	cf 93       	push	r28
 49e:	df 93       	push	r29
 4a0:	6c 01       	movw	r12, r24
 4a2:	7a 01       	movw	r14, r20
 4a4:	8b 01       	movw	r16, r22
 4a6:	c0 e0       	ldi	r28, 0x00	; 0
 4a8:	d0 e0       	ldi	r29, 0x00	; 0
 4aa:	ce 15       	cp	r28, r14
 4ac:	df 05       	cpc	r29, r15
 4ae:	81 f0       	breq	.+32     	; 0x4d0 <_ZN5Print5writeEPKhj+0x40>
 4b0:	d8 01       	movw	r26, r16
 4b2:	6d 91       	ld	r22, X+
 4b4:	8d 01       	movw	r16, r26
 4b6:	d6 01       	movw	r26, r12
 4b8:	ed 91       	ld	r30, X+
 4ba:	fc 91       	ld	r31, X
 4bc:	01 90       	ld	r0, Z+
 4be:	f0 81       	ld	r31, Z
 4c0:	e0 2d       	mov	r30, r0
 4c2:	c6 01       	movw	r24, r12
 4c4:	09 95       	icall
 4c6:	89 2b       	or	r24, r25
 4c8:	11 f0       	breq	.+4      	; 0x4ce <_ZN5Print5writeEPKhj+0x3e>
 4ca:	21 96       	adiw	r28, 0x01	; 1
 4cc:	ee cf       	rjmp	.-36     	; 0x4aa <_ZN5Print5writeEPKhj+0x1a>
 4ce:	7e 01       	movw	r14, r28
 4d0:	c7 01       	movw	r24, r14
 4d2:	df 91       	pop	r29
 4d4:	cf 91       	pop	r28
 4d6:	1f 91       	pop	r17
 4d8:	0f 91       	pop	r16
 4da:	ff 90       	pop	r15
 4dc:	ef 90       	pop	r14
 4de:	df 90       	pop	r13
 4e0:	cf 90       	pop	r12
 4e2:	08 95       	ret

000004e4 <_ZN5Print5writeEPKc>:
 4e4:	61 15       	cp	r22, r1
 4e6:	71 05       	cpc	r23, r1
 4e8:	79 f0       	breq	.+30     	; 0x508 <_ZN5Print5writeEPKc+0x24>
 4ea:	fb 01       	movw	r30, r22
 4ec:	01 90       	ld	r0, Z+
 4ee:	00 20       	and	r0, r0
 4f0:	e9 f7       	brne	.-6      	; 0x4ec <_ZN5Print5writeEPKc+0x8>
 4f2:	31 97       	sbiw	r30, 0x01	; 1
 4f4:	af 01       	movw	r20, r30
 4f6:	46 1b       	sub	r20, r22
 4f8:	57 0b       	sbc	r21, r23
 4fa:	dc 01       	movw	r26, r24
 4fc:	ed 91       	ld	r30, X+
 4fe:	fc 91       	ld	r31, X
 500:	02 80       	ldd	r0, Z+2	; 0x02
 502:	f3 81       	ldd	r31, Z+3	; 0x03
 504:	e0 2d       	mov	r30, r0
 506:	09 94       	ijmp
 508:	80 e0       	ldi	r24, 0x00	; 0
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	08 95       	ret

0000050e <_ZN5Print7printlnEv>:
 50e:	6d e1       	ldi	r22, 0x1D	; 29
 510:	71 e0       	ldi	r23, 0x01	; 1
 512:	0c 94 72 02 	jmp	0x4e4	; 0x4e4 <_ZN5Print5writeEPKc>

00000516 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 516:	0f 93       	push	r16
 518:	1f 93       	push	r17
 51a:	cf 93       	push	r28
 51c:	df 93       	push	r29
 51e:	ec 01       	movw	r28, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
 520:	0e 94 72 02 	call	0x4e4	; 0x4e4 <_ZN5Print5writeEPKc>
 524:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 526:	ce 01       	movw	r24, r28
 528:	0e 94 87 02 	call	0x50e	; 0x50e <_ZN5Print7printlnEv>
  return n;
}
 52c:	80 0f       	add	r24, r16
 52e:	91 1f       	adc	r25, r17
 530:	df 91       	pop	r29
 532:	cf 91       	pop	r28
 534:	1f 91       	pop	r17
 536:	0f 91       	pop	r16
 538:	08 95       	ret

0000053a <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 53a:	1f 92       	push	r1
 53c:	0f 92       	push	r0
 53e:	0f b6       	in	r0, 0x3f	; 63
 540:	0f 92       	push	r0
 542:	11 24       	eor	r1, r1
 544:	2f 93       	push	r18
 546:	3f 93       	push	r19
 548:	8f 93       	push	r24
 54a:	9f 93       	push	r25
 54c:	af 93       	push	r26
 54e:	bf 93       	push	r27
 550:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <timer0_millis>
 554:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <timer0_millis+0x1>
 558:	a0 91 ce 01 	lds	r26, 0x01CE	; 0x8001ce <timer0_millis+0x2>
 55c:	b0 91 cf 01 	lds	r27, 0x01CF	; 0x8001cf <timer0_millis+0x3>
 560:	30 91 cb 01 	lds	r19, 0x01CB	; 0x8001cb <timer0_fract>
 564:	23 e0       	ldi	r18, 0x03	; 3
 566:	23 0f       	add	r18, r19
 568:	2d 37       	cpi	r18, 0x7D	; 125
 56a:	20 f4       	brcc	.+8      	; 0x574 <__vector_16+0x3a>
 56c:	01 96       	adiw	r24, 0x01	; 1
 56e:	a1 1d       	adc	r26, r1
 570:	b1 1d       	adc	r27, r1
 572:	05 c0       	rjmp	.+10     	; 0x57e <__vector_16+0x44>
 574:	26 e8       	ldi	r18, 0x86	; 134
 576:	23 0f       	add	r18, r19
 578:	02 96       	adiw	r24, 0x02	; 2
 57a:	a1 1d       	adc	r26, r1
 57c:	b1 1d       	adc	r27, r1
 57e:	20 93 cb 01 	sts	0x01CB, r18	; 0x8001cb <timer0_fract>
 582:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <timer0_millis>
 586:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <timer0_millis+0x1>
 58a:	a0 93 ce 01 	sts	0x01CE, r26	; 0x8001ce <timer0_millis+0x2>
 58e:	b0 93 cf 01 	sts	0x01CF, r27	; 0x8001cf <timer0_millis+0x3>
 592:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <timer0_overflow_count>
 596:	90 91 d1 01 	lds	r25, 0x01D1	; 0x8001d1 <timer0_overflow_count+0x1>
 59a:	a0 91 d2 01 	lds	r26, 0x01D2	; 0x8001d2 <timer0_overflow_count+0x2>
 59e:	b0 91 d3 01 	lds	r27, 0x01D3	; 0x8001d3 <timer0_overflow_count+0x3>
 5a2:	01 96       	adiw	r24, 0x01	; 1
 5a4:	a1 1d       	adc	r26, r1
 5a6:	b1 1d       	adc	r27, r1
 5a8:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <timer0_overflow_count>
 5ac:	90 93 d1 01 	sts	0x01D1, r25	; 0x8001d1 <timer0_overflow_count+0x1>
 5b0:	a0 93 d2 01 	sts	0x01D2, r26	; 0x8001d2 <timer0_overflow_count+0x2>
 5b4:	b0 93 d3 01 	sts	0x01D3, r27	; 0x8001d3 <timer0_overflow_count+0x3>
 5b8:	bf 91       	pop	r27
 5ba:	af 91       	pop	r26
 5bc:	9f 91       	pop	r25
 5be:	8f 91       	pop	r24
 5c0:	3f 91       	pop	r19
 5c2:	2f 91       	pop	r18
 5c4:	0f 90       	pop	r0
 5c6:	0f be       	out	0x3f, r0	; 63
 5c8:	0f 90       	pop	r0
 5ca:	1f 90       	pop	r1
 5cc:	18 95       	reti

000005ce <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 5ce:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 5d0:	84 b5       	in	r24, 0x24	; 36
 5d2:	82 60       	ori	r24, 0x02	; 2
 5d4:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 5d6:	84 b5       	in	r24, 0x24	; 36
 5d8:	81 60       	ori	r24, 0x01	; 1
 5da:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 5dc:	85 b5       	in	r24, 0x25	; 37
 5de:	82 60       	ori	r24, 0x02	; 2
 5e0:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 5e2:	85 b5       	in	r24, 0x25	; 37
 5e4:	81 60       	ori	r24, 0x01	; 1
 5e6:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 5e8:	ee e6       	ldi	r30, 0x6E	; 110
 5ea:	f0 e0       	ldi	r31, 0x00	; 0
 5ec:	80 81       	ld	r24, Z
 5ee:	81 60       	ori	r24, 0x01	; 1
 5f0:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 5f2:	e1 e8       	ldi	r30, 0x81	; 129
 5f4:	f0 e0       	ldi	r31, 0x00	; 0
 5f6:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 5f8:	80 81       	ld	r24, Z
 5fa:	82 60       	ori	r24, 0x02	; 2
 5fc:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 5fe:	80 81       	ld	r24, Z
 600:	81 60       	ori	r24, 0x01	; 1
 602:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 604:	e0 e8       	ldi	r30, 0x80	; 128
 606:	f0 e0       	ldi	r31, 0x00	; 0
 608:	80 81       	ld	r24, Z
 60a:	81 60       	ori	r24, 0x01	; 1
 60c:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 60e:	e1 eb       	ldi	r30, 0xB1	; 177
 610:	f0 e0       	ldi	r31, 0x00	; 0
 612:	80 81       	ld	r24, Z
 614:	84 60       	ori	r24, 0x04	; 4
 616:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 618:	e0 eb       	ldi	r30, 0xB0	; 176
 61a:	f0 e0       	ldi	r31, 0x00	; 0
 61c:	80 81       	ld	r24, Z
 61e:	81 60       	ori	r24, 0x01	; 1
 620:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 622:	ea e7       	ldi	r30, 0x7A	; 122
 624:	f0 e0       	ldi	r31, 0x00	; 0
 626:	80 81       	ld	r24, Z
 628:	84 60       	ori	r24, 0x04	; 4
 62a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 62c:	80 81       	ld	r24, Z
 62e:	82 60       	ori	r24, 0x02	; 2
 630:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 632:	80 81       	ld	r24, Z
 634:	81 60       	ori	r24, 0x01	; 1
 636:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 638:	80 81       	ld	r24, Z
 63a:	80 68       	ori	r24, 0x80	; 128
 63c:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 63e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 642:	08 95       	ret

00000644 <__udivmodsi4>:
 644:	a1 e2       	ldi	r26, 0x21	; 33
 646:	1a 2e       	mov	r1, r26
 648:	aa 1b       	sub	r26, r26
 64a:	bb 1b       	sub	r27, r27
 64c:	fd 01       	movw	r30, r26
 64e:	0d c0       	rjmp	.+26     	; 0x66a <__udivmodsi4_ep>

00000650 <__udivmodsi4_loop>:
 650:	aa 1f       	adc	r26, r26
 652:	bb 1f       	adc	r27, r27
 654:	ee 1f       	adc	r30, r30
 656:	ff 1f       	adc	r31, r31
 658:	a2 17       	cp	r26, r18
 65a:	b3 07       	cpc	r27, r19
 65c:	e4 07       	cpc	r30, r20
 65e:	f5 07       	cpc	r31, r21
 660:	20 f0       	brcs	.+8      	; 0x66a <__udivmodsi4_ep>
 662:	a2 1b       	sub	r26, r18
 664:	b3 0b       	sbc	r27, r19
 666:	e4 0b       	sbc	r30, r20
 668:	f5 0b       	sbc	r31, r21

0000066a <__udivmodsi4_ep>:
 66a:	66 1f       	adc	r22, r22
 66c:	77 1f       	adc	r23, r23
 66e:	88 1f       	adc	r24, r24
 670:	99 1f       	adc	r25, r25
 672:	1a 94       	dec	r1
 674:	69 f7       	brne	.-38     	; 0x650 <__udivmodsi4_loop>
 676:	60 95       	com	r22
 678:	70 95       	com	r23
 67a:	80 95       	com	r24
 67c:	90 95       	com	r25
 67e:	9b 01       	movw	r18, r22
 680:	ac 01       	movw	r20, r24
 682:	bd 01       	movw	r22, r26
 684:	cf 01       	movw	r24, r30
 686:	08 95       	ret

00000688 <__tablejump2__>:
 688:	ee 0f       	add	r30, r30
 68a:	ff 1f       	adc	r31, r31
 68c:	05 90       	lpm	r0, Z+
 68e:	f4 91       	lpm	r31, Z
 690:	e0 2d       	mov	r30, r0
 692:	09 94       	ijmp

00000694 <_exit>:
 694:	f8 94       	cli

00000696 <__stop_program>:
 696:	ff cf       	rjmp	.-2      	; 0x696 <__stop_program>
