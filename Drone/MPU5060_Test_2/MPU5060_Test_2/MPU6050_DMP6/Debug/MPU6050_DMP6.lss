
MPU6050_DMP6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  00004fb8  0000504c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004fb8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000200  00800142  00800142  0000508e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000508e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000050c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000db8  00000000  00000000  00005100  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00019657  00000000  00000000  00005eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000028d9  00000000  00000000  0001f50f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005643  00000000  00000000  00021de8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000319c  00000000  00000000  0002742c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000764b  00000000  00000000  0002a5c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000f870  00000000  00000000  00031c13  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000d88  00000000  00000000  00041483  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d4 09 	jmp	0x13a8	; 0x13a8 <__ctors_end>
       4:	0c 94 8a 23 	jmp	0x4714	; 0x4714 <__vector_1>
       8:	0c 94 b1 23 	jmp	0x4762	; 0x4762 <__vector_2>
       c:	0c 94 fc 09 	jmp	0x13f8	; 0x13f8 <__bad_interrupt>
      10:	0c 94 fc 09 	jmp	0x13f8	; 0x13f8 <__bad_interrupt>
      14:	0c 94 fc 09 	jmp	0x13f8	; 0x13f8 <__bad_interrupt>
      18:	0c 94 fc 09 	jmp	0x13f8	; 0x13f8 <__bad_interrupt>
      1c:	0c 94 fc 09 	jmp	0x13f8	; 0x13f8 <__bad_interrupt>
      20:	0c 94 fc 09 	jmp	0x13f8	; 0x13f8 <__bad_interrupt>
      24:	0c 94 fc 09 	jmp	0x13f8	; 0x13f8 <__bad_interrupt>
      28:	0c 94 fc 09 	jmp	0x13f8	; 0x13f8 <__bad_interrupt>
      2c:	0c 94 fc 09 	jmp	0x13f8	; 0x13f8 <__bad_interrupt>
      30:	0c 94 fc 09 	jmp	0x13f8	; 0x13f8 <__bad_interrupt>
      34:	0c 94 fc 09 	jmp	0x13f8	; 0x13f8 <__bad_interrupt>
      38:	0c 94 fc 09 	jmp	0x13f8	; 0x13f8 <__bad_interrupt>
      3c:	0c 94 fc 09 	jmp	0x13f8	; 0x13f8 <__bad_interrupt>
      40:	0c 94 d8 23 	jmp	0x47b0	; 0x47b0 <__vector_16>
      44:	0c 94 fc 09 	jmp	0x13f8	; 0x13f8 <__bad_interrupt>
      48:	0c 94 62 20 	jmp	0x40c4	; 0x40c4 <__vector_18>
      4c:	0c 94 94 20 	jmp	0x4128	; 0x4128 <__vector_19>
      50:	0c 94 fc 09 	jmp	0x13f8	; 0x13f8 <__bad_interrupt>
      54:	0c 94 fc 09 	jmp	0x13f8	; 0x13f8 <__bad_interrupt>
      58:	0c 94 fc 09 	jmp	0x13f8	; 0x13f8 <__bad_interrupt>
      5c:	0c 94 fc 09 	jmp	0x13f8	; 0x13f8 <__bad_interrupt>
      60:	0c 94 cd 19 	jmp	0x339a	; 0x339a <__vector_24>
      64:	0c 94 fc 09 	jmp	0x13f8	; 0x13f8 <__bad_interrupt>
      68:	08 4a       	sbci	r16, 0xA8	; 168
      6a:	d7 3b       	cpi	r29, 0xB7	; 183
      6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
      6e:	01 6e       	ori	r16, 0xE1	; 225
      70:	84 bc       	out	0x24, r8	; 36
      72:	bf fd       	.word	0xfdbf	; ????
      74:	c1 2f       	mov	r28, r17
      76:	3d 6c       	ori	r19, 0xCD	; 205
      78:	74 31       	cpi	r23, 0x14	; 20
      7a:	9a bd       	out	0x2a, r25	; 42
      7c:	56 83       	std	Z+6, r21	; 0x06
      7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
      80:	3d 00       	.word	0x003d	; ????
      82:	c7 7f       	andi	r28, 0xF7	; 247
      84:	11 be       	out	0x31, r1	; 49
      86:	d9 e4       	ldi	r29, 0x49	; 73
      88:	bb 4c       	sbci	r27, 0xCB	; 203
      8a:	3e 91       	ld	r19, -X
      8c:	6b aa       	std	Y+51, r6	; 0x33
      8e:	aa be       	out	0x3a, r10	; 58
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	3f 00       	.word	0x003f	; ????

00000096 <__trampolines_end>:
      96:	46 49       	sbci	r20, 0x96	; 150
      98:	46 4f       	sbci	r20, 0xF6	; 246
      9a:	20 6f       	ori	r18, 0xF0	; 240
      9c:	76 65       	ori	r23, 0x56	; 86
      9e:	72 66       	ori	r23, 0x62	; 98
      a0:	6c 6f       	ori	r22, 0xFC	; 252
      a2:	77 21       	and	r23, r7
	...

000000a5 <_ZZ5setupE3__c_9>:
      a5:	29 00                                               ).

000000a7 <_ZZ5setupE3__c_8>:
      a7:	44 4d 50 20 49 6e 69 74 69 61 6c 69 7a 61 74 69     DMP Initializati
      b7:	6f 6e 20 66 61 69 6c 65 64 20 28 63 6f 64 65 20     on failed (code 
	...

000000c8 <_ZZ5setupE3__c_7>:
      c8:	44 4d 50 20 72 65 61 64 79 21 20 57 61 69 74 69     DMP ready! Waiti
      d8:	6e 67 20 66 6f 72 20 66 69 72 73 74 20 69 6e 74     ng for first int
      e8:	65 72 72 75 70 74 2e 2e 2e 00                       errupt....

000000f2 <_ZZ5setupE3__c_6>:
      f2:	45 6e 61 62 6c 69 6e 67 20 69 6e 74 65 72 72 75     Enabling interru
     102:	70 74 20 64 65 74 65 63 74 69 6f 6e 20 28 41 72     pt detection (Ar
     112:	64 75 69 6e 6f 20 65 78 74 65 72 6e 61 6c 20 69     duino external i
     122:	6e 74 65 72 72 75 70 74 20 30 29 2e 2e 2e 00        nterrupt 0)....

00000131 <_ZZ5setupE3__c_5>:
     131:	45 6e 61 62 6c 69 6e 67 20 44 4d 50 2e 2e 2e 00     Enabling DMP....

00000141 <_ZZ5setupE3__c_4>:
     141:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 44 4d 50     Initializing DMP
     151:	2e 2e 2e 00                                         ....

00000155 <_ZZ5setupE3__c_3>:
     155:	0a 53 65 6e 64 20 61 6e 79 20 63 68 61 72 61 63     .Send any charac
     165:	74 65 72 20 74 6f 20 62 65 67 69 6e 20 44 4d 50     ter to begin DMP
     175:	20 70 72 6f 67 72 61 6d 6d 69 6e 67 20 61 6e 64      programming and
     185:	20 64 65 6d 6f 3a 20 00                              demo: .

0000018d <_ZZ5setupE3__c_2>:
     18d:	4d 50 55 36 30 35 30 20 63 6f 6e 6e 65 63 74 69     MPU6050 connecti
     19d:	6f 6e 20 66 61 69 6c 65 64 00                       on failed.

000001a7 <_ZZ5setupE3__c_1>:
     1a7:	4d 50 55 36 30 35 30 20 63 6f 6e 6e 65 63 74 69     MPU6050 connecti
     1b7:	6f 6e 20 73 75 63 63 65 73 73 66 75 6c 00           on successful.

000001c5 <_ZZ5setupE3__c_0>:
     1c5:	54 65 73 74 69 6e 67 20 64 65 76 69 63 65 20 63     Testing device c
     1d5:	6f 6e 6e 65 63 74 69 6f 6e 73 2e 2e 2e 00           onnections....

000001e3 <_ZZ5setupE3__c>:
     1e3:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 49 32 43     Initializing I2C
     1f3:	20 64 65 76 69 63 65 73 2e 2e 2e 00                  devices....

000001ff <_ZZN7MPU605013dmpInitializeEvE3__c_66>:
     1ff:	45 52 52 4f 52 21 20 44 4d 50 20 63 6f 64 65 20     ERROR! DMP code 
     20f:	76 65 72 69 66 69 63 61 74 69 6f 6e 20 66 61 69     verification fai
     21f:	6c 65 64 2e 00                                      led..

00000224 <_ZZN7MPU605013dmpInitializeEvE3__c_65>:
     224:	45 52 52 4f 52 21 20 44 4d 50 20 63 6f 6e 66 69     ERROR! DMP confi
     234:	67 75 72 61 74 69 6f 6e 20 76 65 72 69 66 69 63     guration verific
     244:	61 74 69 6f 6e 20 66 61 69 6c 65 64 2e 00           ation failed..

00000252 <_ZZN7MPU605013dmpInitializeEvE3__c_64>:
     252:	52 65 73 65 74 74 69 6e 67 20 46 49 46 4f 20 61     Resetting FIFO a
     262:	6e 64 20 63 6c 65 61 72 69 6e 67 20 49 4e 54 20     nd clearing INT 
     272:	73 74 61 74 75 73 20 6f 6e 65 20 6c 61 73 74 20     status one last 
     282:	74 69 6d 65 2e 2e 2e 00                             time....

0000028a <_ZZN7MPU605013dmpInitializeEvE3__c_63>:
     28a:	53 65 74 74 69 6e 67 20 75 70 20 69 6e 74 65 72     Setting up inter
     29a:	6e 61 6c 20 34 32 2d 62 79 74 65 20 28 64 65 66     nal 42-byte (def
     2aa:	61 75 6c 74 29 20 44 4d 50 20 70 61 63 6b 65 74     ault) DMP packet
     2ba:	20 62 75 66 66 65 72 2e 2e 2e 00                     buffer....

000002c5 <_ZZN7MPU605013dmpInitializeEvE3__c_62>:
     2c5:	44 69 73 61 62 6c 69 6e 67 20 44 4d 50 20 28 79     Disabling DMP (y
     2d5:	6f 75 20 74 75 72 6e 20 69 74 20 6f 6e 20 6c 61     ou turn it on la
     2e5:	74 65 72 29 2e 2e 2e 00                             ter)....

000002ed <_ZZN7MPU605013dmpInitializeEvE3__c_61>:
     2ed:	44 4d 50 20 69 73 20 67 6f 6f 64 20 74 6f 20 67     DMP is good to g
     2fd:	6f 21 20 46 69 6e 61 6c 6c 79 2e 00                 o! Finally..

00000309 <_ZZN7MPU605013dmpInitializeEvE3__c_60>:
     309:	57 72 69 74 69 6e 67 20 66 69 6e 61 6c 20 6d 65     Writing final me
     319:	6d 6f 72 79 20 75 70 64 61 74 65 20 37 2f 37 20     mory update 7/7 
     329:	28 66 75 6e 63 74 69 6f 6e 20 75 6e 6b 6e 6f 77     (function unknow
     339:	6e 29 2e 2e 2e 00                                   n)....

0000033f <_ZZN7MPU605013dmpInitializeEvE3__c_59>:
     33f:	43 75 72 72 65 6e 74 20 69 6e 74 65 72 72 75 70     Current interrup
     34f:	74 20 73 74 61 74 75 73 3d 00                       t status=.

00000359 <_ZZN7MPU605013dmpInitializeEvE3__c_58>:
     359:	52 65 61 64 69 6e 67 20 69 6e 74 65 72 72 75 70     Reading interrup
     369:	74 20 73 74 61 74 75 73 2e 2e 2e 00                 t status....

00000375 <_ZZN7MPU605013dmpInitializeEvE3__c_57>:
     375:	52 65 61 64 69 6e 67 20 46 49 46 4f 20 64 61 74     Reading FIFO dat
     385:	61 2e 2e 2e 00                                      a....

0000038a <_ZZN7MPU605013dmpInitializeEvE3__c_56>:
     38a:	43 75 72 72 65 6e 74 20 46 49 46 4f 20 63 6f 75     Current FIFO cou
     39a:	6e 74 3d 00                                         nt=.

0000039e <_ZZN7MPU605013dmpInitializeEvE3__c_55>:
     39e:	57 61 69 74 69 6e 67 20 66 6f 72 20 46 49 46 4f     Waiting for FIFO
     3ae:	20 63 6f 75 6e 74 20 3e 20 32 2e 2e 2e 00            count > 2....

000003bc <_ZZN7MPU605013dmpInitializeEvE3__c_54>:
     3bc:	52 65 61 64 69 6e 67 20 66 69 6e 61 6c 20 6d 65     Reading final me
     3cc:	6d 6f 72 79 20 75 70 64 61 74 65 20 36 2f 37 20     mory update 6/7 
     3dc:	28 66 75 6e 63 74 69 6f 6e 20 75 6e 6b 6e 6f 77     (function unknow
     3ec:	6e 29 2e 2e 2e 00                                   n)....

000003f2 <_ZZN7MPU605013dmpInitializeEvE3__c_53>:
     3f2:	43 75 72 72 65 6e 74 20 69 6e 74 65 72 72 75 70     Current interrup
     402:	74 20 73 74 61 74 75 73 3d 00                       t status=.

0000040c <_ZZN7MPU605013dmpInitializeEvE3__c_52>:
     40c:	52 65 61 64 69 6e 67 20 69 6e 74 65 72 72 75 70     Reading interrup
     41c:	74 20 73 74 61 74 75 73 2e 2e 2e 00                 t status....

00000428 <_ZZN7MPU605013dmpInitializeEvE3__c_51>:
     428:	52 65 61 64 69 6e 67 20 46 49 46 4f 20 64 61 74     Reading FIFO dat
     438:	61 2e 2e 2e 00                                      a....

0000043d <_ZZN7MPU605013dmpInitializeEvE3__c_50>:
     43d:	43 75 72 72 65 6e 74 20 46 49 46 4f 20 63 6f 75     Current FIFO cou
     44d:	6e 74 3d 00                                         nt=.

00000451 <_ZZN7MPU605013dmpInitializeEvE3__c_49>:
     451:	57 61 69 74 69 6e 67 20 66 6f 72 20 46 49 46 4f     Waiting for FIFO
     461:	20 63 6f 75 6e 74 20 3e 20 32 2e 2e 2e 00            count > 2....

0000046f <_ZZN7MPU605013dmpInitializeEvE3__c_48>:
     46f:	57 72 69 74 69 6e 67 20 66 69 6e 61 6c 20 6d 65     Writing final me
     47f:	6d 6f 72 79 20 75 70 64 61 74 65 20 35 2f 37 20     mory update 5/7 
     48f:	28 66 75 6e 63 74 69 6f 6e 20 75 6e 6b 6e 6f 77     (function unknow
     49f:	6e 29 2e 2e 2e 00                                   n)....

000004a5 <_ZZN7MPU605013dmpInitializeEvE3__c_47>:
     4a5:	57 72 69 74 69 6e 67 20 66 69 6e 61 6c 20 6d 65     Writing final me
     4b5:	6d 6f 72 79 20 75 70 64 61 74 65 20 34 2f 37 20     mory update 4/7 
     4c5:	28 66 75 6e 63 74 69 6f 6e 20 75 6e 6b 6e 6f 77     (function unknow
     4d5:	6e 29 2e 2e 2e 00                                   n)....

000004db <_ZZN7MPU605013dmpInitializeEvE3__c_46>:
     4db:	57 72 69 74 69 6e 67 20 66 69 6e 61 6c 20 6d 65     Writing final me
     4eb:	6d 6f 72 79 20 75 70 64 61 74 65 20 33 2f 37 20     mory update 3/7 
     4fb:	28 66 75 6e 63 74 69 6f 6e 20 75 6e 6b 6e 6f 77     (function unknow
     50b:	6e 29 2e 2e 2e 00                                   n)....

00000511 <_ZZN7MPU605013dmpInitializeEvE3__c_45>:
     511:	52 65 73 65 74 74 69 6e 67 20 44 4d 50 2e 2e 2e     Resetting DMP...
	...

00000522 <_ZZN7MPU605013dmpInitializeEvE3__c_44>:
     522:	45 6e 61 62 6c 69 6e 67 20 44 4d 50 2e 2e 2e 00     Enabling DMP....

00000532 <_ZZN7MPU605013dmpInitializeEvE3__c_43>:
     532:	45 6e 61 62 6c 69 6e 67 20 46 49 46 4f 2e 2e 2e     Enabling FIFO...
	...

00000543 <_ZZN7MPU605013dmpInitializeEvE3__c_42>:
     543:	52 65 73 65 74 74 69 6e 67 20 46 49 46 4f 2e 2e     Resetting FIFO..
     553:	2e 00                                               ..

00000555 <_ZZN7MPU605013dmpInitializeEvE3__c_41>:
     555:	53 65 74 74 69 6e 67 20 7a 65 72 6f 2d 6d 6f 74     Setting zero-mot
     565:	69 6f 6e 20 64 65 74 65 63 74 69 6f 6e 20 64 75     ion detection du
     575:	72 61 74 69 6f 6e 20 74 6f 20 30 2e 2e 2e 00        ration to 0....

00000584 <_ZZN7MPU605013dmpInitializeEvE3__c_40>:
     584:	53 65 74 74 69 6e 67 20 6d 6f 74 69 6f 6e 20 64     Setting motion d
     594:	65 74 65 63 74 69 6f 6e 20 64 75 72 61 74 69 6f     etection duratio
     5a4:	6e 20 74 6f 20 38 30 2e 2e 2e 00                    n to 80....

000005af <_ZZN7MPU605013dmpInitializeEvE3__c_39>:
     5af:	53 65 74 74 69 6e 67 20 7a 65 72 6f 2d 6d 6f 74     Setting zero-mot
     5bf:	69 6f 6e 20 64 65 74 65 63 74 69 6f 6e 20 74 68     ion detection th
     5cf:	72 65 73 68 6f 6c 64 20 74 6f 20 31 35 36 2e 2e     reshold to 156..
     5df:	2e 00                                               ..

000005e1 <_ZZN7MPU605013dmpInitializeEvE3__c_38>:
     5e1:	53 65 74 74 69 6e 67 20 6d 6f 74 69 6f 6e 20 64     Setting motion d
     5f1:	65 74 65 63 74 69 6f 6e 20 74 68 72 65 73 68 6f     etection thresho
     601:	6c 64 20 74 6f 20 32 2e 2e 2e 00                    ld to 2....

0000060c <_ZZN7MPU605013dmpInitializeEvE3__c_37>:
     60c:	43 75 72 72 65 6e 74 20 46 49 46 4f 20 63 6f 75     Current FIFO cou
     61c:	6e 74 3d 00                                         nt=.

00000620 <_ZZN7MPU605013dmpInitializeEvE3__c_36>:
     620:	52 65 61 64 69 6e 67 20 46 49 46 4f 20 63 6f 75     Reading FIFO cou
     630:	6e 74 2e 2e 2e 00                                   nt....

00000636 <_ZZN7MPU605013dmpInitializeEvE3__c_35>:
     636:	52 65 73 65 74 74 69 6e 67 20 46 49 46 4f 2e 2e     Resetting FIFO..
     646:	2e 00                                               ..

00000648 <_ZZN7MPU605013dmpInitializeEvE3__c_34>:
     648:	57 72 69 74 69 6e 67 20 66 69 6e 61 6c 20 6d 65     Writing final me
     658:	6d 6f 72 79 20 75 70 64 61 74 65 20 32 2f 37 20     mory update 2/7 
     668:	28 66 75 6e 63 74 69 6f 6e 20 75 6e 6b 6e 6f 77     (function unknow
     678:	6e 29 2e 2e 2e 00                                   n)....

0000067e <_ZZN7MPU605013dmpInitializeEvE3__c_33>:
     67e:	57 72 69 74 69 6e 67 20 66 69 6e 61 6c 20 6d 65     Writing final me
     68e:	6d 6f 72 79 20 75 70 64 61 74 65 20 31 2f 37 20     mory update 1/7 
     69e:	28 66 75 6e 63 74 69 6f 6e 20 75 6e 6b 6e 6f 77     (function unknow
     6ae:	6e 29 2e 2e 2e 00                                   n)....

000006b4 <_ZZN7MPU605013dmpInitializeEvE3__c_32>:
     6b4:	53 65 74 74 69 6e 67 20 58 2f 59 2f 5a 20 67 79     Setting X/Y/Z gy
     6c4:	72 6f 20 6f 66 66 73 65 74 20 54 43 73 20 74 6f     ro offset TCs to
     6d4:	20 70 72 65 76 69 6f 75 73 20 76 61 6c 75 65 73      previous values
     6e4:	2e 2e 2e 00                                         ....

000006e8 <_ZZN7MPU605013dmpInitializeEvE3__c_31>:
     6e8:	43 6c 65 61 72 69 6e 67 20 4f 54 50 20 42 61 6e     Clearing OTP Ban
     6f8:	6b 20 66 6c 61 67 2e 2e 2e 00                       k flag....

00000702 <_ZZN7MPU605013dmpInitializeEvE3__c_30>:
     702:	53 65 74 74 69 6e 67 20 44 4d 50 20 63 6f 6e 66     Setting DMP conf
     712:	69 67 75 72 61 74 69 6f 6e 20 62 79 74 65 73 20     iguration bytes 
     722:	28 66 75 6e 63 74 69 6f 6e 20 75 6e 6b 6e 6f 77     (function unknow
     732:	6e 29 2e 2e 2e 00                                   n)....

00000738 <_ZZN7MPU605013dmpInitializeEvE3__c_29>:
     738:	53 65 74 74 69 6e 67 20 67 79 72 6f 20 73 65 6e     Setting gyro sen
     748:	73 69 74 69 76 69 74 79 20 74 6f 20 2b 2f 2d 20     sitivity to +/- 
     758:	32 30 30 30 20 64 65 67 2f 73 65 63 2e 2e 2e 00     2000 deg/sec....

00000768 <_ZZN7MPU605013dmpInitializeEvE3__c_28>:
     768:	53 65 74 74 69 6e 67 20 44 4c 50 46 20 62 61 6e     Setting DLPF ban
     778:	64 77 69 64 74 68 20 74 6f 20 34 32 48 7a 2e 2e     dwidth to 42Hz..
     788:	2e 00                                               ..

0000078a <_ZZN7MPU605013dmpInitializeEvE3__c_27>:
     78a:	53 65 74 74 69 6e 67 20 65 78 74 65 72 6e 61 6c     Setting external
     79a:	20 66 72 61 6d 65 20 73 79 6e 63 20 74 6f 20 54      frame sync to T
     7aa:	45 4d 50 5f 4f 55 54 5f 4c 5b 30 5d 2e 2e 2e 00     EMP_OUT_L[0]....

000007ba <_ZZN7MPU605013dmpInitializeEvE3__c_26>:
     7ba:	53 65 74 74 69 6e 67 20 73 61 6d 70 6c 65 20 72     Setting sample r
     7ca:	61 74 65 20 74 6f 20 32 30 30 48 7a 2e 2e 2e 00     ate to 200Hz....

000007da <_ZZN7MPU605013dmpInitializeEvE3__c_25>:
     7da:	53 65 74 74 69 6e 67 20 44 4d 50 20 61 6e 64 20     Setting DMP and 
     7ea:	46 49 46 4f 5f 4f 46 4c 4f 57 20 69 6e 74 65 72     FIFO_OFLOW inter
     7fa:	72 75 70 74 73 20 65 6e 61 62 6c 65 64 2e 2e 2e     rupts enabled...
	...

0000080b <_ZZN7MPU605013dmpInitializeEvE3__c_24>:
     80b:	53 65 74 74 69 6e 67 20 63 6c 6f 63 6b 20 73 6f     Setting clock so
     81b:	75 72 63 65 20 74 6f 20 5a 20 47 79 72 6f 2e 2e     urce to Z Gyro..
     82b:	2e 00                                               ..

0000082d <_ZZN7MPU605013dmpInitializeEvE3__c_23>:
     82d:	53 75 63 63 65 73 73 21 20 44 4d 50 20 63 6f 6e     Success! DMP con
     83d:	66 69 67 75 72 61 74 69 6f 6e 20 77 72 69 74 74     figuration writt
     84d:	65 6e 20 61 6e 64 20 76 65 72 69 66 69 65 64 2e     en and verified.
	...

0000085e <_ZZN7MPU605013dmpInitializeEvE3__c_22>:
     85e:	20 62 79 74 65 73 20 69 6e 20 63 6f 6e 66 69 67      bytes in config
     86e:	20 64 65 66 29 00                                    def).

00000874 <_ZZN7MPU605013dmpInitializeEvE3__c_21>:
     874:	57 72 69 74 69 6e 67 20 44 4d 50 20 63 6f 6e 66     Writing DMP conf
     884:	69 67 75 72 61 74 69 6f 6e 20 74 6f 20 4d 50 55     iguration to MPU
     894:	20 6d 65 6d 6f 72 79 20 62 61 6e 6b 73 20 28 00      memory banks (.

000008a4 <_ZZN7MPU605013dmpInitializeEvE3__c_20>:
     8a4:	53 75 63 63 65 73 73 21 20 44 4d 50 20 63 6f 64     Success! DMP cod
     8b4:	65 20 77 72 69 74 74 65 6e 20 61 6e 64 20 76 65     e written and ve
     8c4:	72 69 66 69 65 64 2e 00                             rified..

000008cc <_ZZN7MPU605013dmpInitializeEvE3__c_19>:
     8cc:	20 62 79 74 65 73 29 00                              bytes).

000008d4 <_ZZN7MPU605013dmpInitializeEvE3__c_18>:
     8d4:	57 72 69 74 69 6e 67 20 44 4d 50 20 63 6f 64 65     Writing DMP code
     8e4:	20 74 6f 20 4d 50 55 20 6d 65 6d 6f 72 79 20 62      to MPU memory b
     8f4:	61 6e 6b 73 20 28 00                                anks (.

000008fb <_ZZN7MPU605013dmpInitializeEvE3__c_17>:
     8fb:	52 65 73 65 74 74 69 6e 67 20 49 32 43 20 4d 61     Resetting I2C Ma
     90b:	73 74 65 72 20 63 6f 6e 74 72 6f 6c 2e 2e 2e 00     ster control....

0000091b <_ZZN7MPU605013dmpInitializeEvE3__c_16>:
     91b:	53 65 74 74 69 6e 67 20 73 6c 61 76 65 20 30 20     Setting slave 0 
     92b:	61 64 64 72 65 73 73 20 74 6f 20 30 78 36 38 20     address to 0x68 
     93b:	28 73 65 6c 66 29 2e 2e 2e 00                       (self)....

00000945 <_ZZN7MPU605013dmpInitializeEvE3__c_15>:
     945:	44 69 73 61 62 6c 69 6e 67 20 49 32 43 20 4d 61     Disabling I2C Ma
     955:	73 74 65 72 20 6d 6f 64 65 2e 2e 2e 00              ster mode....

00000962 <_ZZN7MPU605013dmpInitializeEvE3__c_14>:
     962:	53 65 74 74 69 6e 67 20 73 6c 61 76 65 20 30 20     Setting slave 0 
     972:	61 64 64 72 65 73 73 20 74 6f 20 30 78 37 46 2e     address to 0x7F.
     982:	2e 2e 00                                            ...

00000985 <_ZZN7MPU605013dmpInitializeEvE3__c_13>:
     985:	5a 20 67 79 72 6f 20 6f 66 66 73 65 74 20 3d 20     Z gyro offset = 
	...

00000996 <_ZZN7MPU605013dmpInitializeEvE3__c_12>:
     996:	59 20 67 79 72 6f 20 6f 66 66 73 65 74 20 3d 20     Y gyro offset = 
	...

000009a7 <_ZZN7MPU605013dmpInitializeEvE3__c_11>:
     9a7:	58 20 67 79 72 6f 20 6f 66 66 73 65 74 20 3d 20     X gyro offset = 
	...

000009b8 <_ZZN7MPU605013dmpInitializeEvE3__c_10>:
     9b8:	52 65 61 64 69 6e 67 20 67 79 72 6f 20 6f 66 66     Reading gyro off
     9c8:	73 65 74 20 54 43 20 76 61 6c 75 65 73 2e 2e 2e     set TC values...
	...

000009d9 <_ZZN7MPU605013dmpInitializeEvE3__c_9>:
     9d9:	69 6e 76 61 6c 69 64 21 00                          invalid!.

000009e2 <_ZZN7MPU605013dmpInitializeEvE3__c_8>:
     9e2:	76 61 6c 69 64 21 00                                valid!.

000009e9 <_ZZN7MPU605013dmpInitializeEvE3__c_7>:
     9e9:	4f 54 50 20 62 61 6e 6b 20 69 73 20 00              OTP bank is .

000009f6 <_ZZN7MPU605013dmpInitializeEvE3__c_6>:
     9f6:	52 65 61 64 69 6e 67 20 4f 54 50 20 62 61 6e 6b     Reading OTP bank
     a06:	20 76 61 6c 69 64 20 66 6c 61 67 2e 2e 2e 00         valid flag....

00000a15 <_ZZN7MPU605013dmpInitializeEvE3__c_5>:
     a15:	52 65 73 65 74 74 69 6e 67 20 6d 65 6d 6f 72 79     Resetting memory
     a25:	20 62 61 6e 6b 20 73 65 6c 65 63 74 69 6f 6e 20      bank selection 
     a35:	74 6f 20 30 2e 2e 2e 00                             to 0....

00000a3d <_ZZN7MPU605013dmpInitializeEvE3__c_4>:
     a3d:	52 65 76 69 73 69 6f 6e 20 40 20 75 73 65 72 5b     Revision @ user[
     a4d:	31 36 5d 5b 36 5d 20 3d 20 00                       16][6] = .

00000a57 <_ZZN7MPU605013dmpInitializeEvE3__c_3>:
     a57:	43 68 65 63 6b 69 6e 67 20 68 61 72 64 77 61 72     Checking hardwar
     a67:	65 20 72 65 76 69 73 69 6f 6e 2e 2e 2e 00           e revision....

00000a75 <_ZZN7MPU605013dmpInitializeEvE3__c_2>:
     a75:	53 65 6c 65 63 74 69 6e 67 20 6d 65 6d 6f 72 79     Selecting memory
     a85:	20 62 79 74 65 20 36 2e 2e 2e 00                     byte 6....

00000a90 <_ZZN7MPU605013dmpInitializeEvE3__c_1>:
     a90:	53 65 6c 65 63 74 69 6e 67 20 75 73 65 72 20 62     Selecting user b
     aa0:	61 6e 6b 20 31 36 2e 2e 2e 00                       ank 16....

00000aaa <_ZZN7MPU605013dmpInitializeEvE3__c_0>:
     aaa:	44 69 73 61 62 6c 69 6e 67 20 73 6c 65 65 70 20     Disabling sleep 
     aba:	6d 6f 64 65 2e 2e 2e 00                             mode....

00000ac2 <_ZZN7MPU605013dmpInitializeEvE3__c>:
     ac2:	0a 0a 52 65 73 65 74 74 69 6e 67 20 4d 50 55 36     ..Resetting MPU6
     ad2:	30 35 30 2e 2e 2e 00                                050....

00000ad9 <_ZL10dmpUpdates>:
     ad9:	01 b2 02 ff ff 01 90 04 09 23 a1 35 01 6a 02 06     .........#.5.j..
     ae9:	00 01 60 08 00 00 00 00 00 00 00 00 00 60 04 40     ..`..........`.@
     af9:	00 00 00 01 62 02 00 00 00 60 04 00 40 00 00        ....b....`..@..

00000b08 <_ZL9dmpConfig>:
     b08:	03 7b 03 4c cd 6c 03 ab 03 36 56 76 00 68 04 02     .{.L.l...6Vv.h..
     b18:	cb 47 a2 02 18 04 00 05 8b c1 01 0c 04 00 00 00     .G..............
     b28:	00 03 7f 06 0c c9 2c 97 97 97 03 89 03 26 46 66     ......,......&Ff
     b38:	00 6c 02 20 00 02 40 04 00 00 00 00 02 44 04 00     .l. ..@......D..
     b48:	00 00 00 02 48 04 00 00 00 00 02 4c 04 00 00 00     ....H......L....
     b58:	00 02 50 04 00 00 00 00 02 54 04 00 00 00 00 02     ..P......T......
     b68:	58 04 00 00 00 00 02 5c 04 00 00 00 00 02 bc 04     X......\........
     b78:	00 00 00 00 01 ec 04 00 00 40 00 03 7f 06 0c c9     .........@......
     b88:	2c 97 97 97 04 02 03 0d 35 5d 04 09 04 87 2d 35     ,.......5]....-5
     b98:	3d 00 a3 01 00 00 00 00 01 07 86 01 fe 07 41 05     =.............A.
     ba8:	f1 20 28 30 38 07 7e 01 30 07 46 01 9a 07 47 04     . (08.~.0.F...G.
     bb8:	f1 28 30 38 07 6c 04 f1 28 30 38 02 16 02 00 02     .(08.l..(08.....

00000bc8 <_ZL9dmpMemory>:
     bc8:	fb 00 00 3e 00 0b 00 36 00 01 00 02 00 03 00 00     ...>...6........
     bd8:	00 65 00 54 ff ef 00 00 fa 80 00 0b 12 82 00 01     .e.T............
     be8:	00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     bf8:	00 28 00 00 ff ff 45 81 ff ff fa 72 00 00 00 00     .(....E....r....
     c08:	00 00 03 e8 00 00 00 01 00 01 7f ff ff fe 80 01     ................
     c18:	00 1b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     c28:	00 3e 03 30 40 00 00 00 02 ca e3 09 3e 80 00 00     .>.0@.......>...
     c38:	20 00 00 00 00 00 00 00 40 00 00 00 60 00 00 00      .......@...`...
     c48:	41 ff 00 00 00 00 0b 2a 00 00 16 55 00 00 21 82     A......*...U..!.
     c58:	fd 87 26 50 fd 80 00 00 00 1f 00 00 00 05 80 00     ..&P............
     c68:	00 00 00 00 00 01 00 00 00 02 00 00 00 03 00 00     ................
     c78:	40 00 00 00 00 00 04 6f 00 02 65 32 00 00 5e c0     @......o..e2..^.
     c88:	40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     @...............
     c98:	fb 8c 6f 5d fd 5d 08 d9 00 7c 73 3b 00 6c 12 cc     ..o].]...|s;.l..
     ca8:	32 00 13 9d 32 00 d0 d6 32 00 08 00 40 00 01 f4     2...2...2...@...
     cb8:	ff e6 80 79 02 00 00 00 00 00 d0 d6 00 00 27 10     ...y..........'.
     cc8:	fb 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00     ....@...........
     cd8:	00 00 00 01 00 00 00 00 00 00 01 00 01 00 00 00     ................
     ce8:	00 00 fa 36 ff bc 30 8e 00 05 fb f0 ff d9 5b c8     ...6..0.......[.
     cf8:	ff d0 9a be 00 00 10 a9 ff f4 1e b2 00 ce bb f7     ................
     d08:	00 00 00 01 00 00 00 04 00 02 00 02 02 00 00 0c     ................
     d18:	ff c2 80 00 00 01 80 00 00 cf 80 00 40 00 00 00     ............@...
     d28:	00 00 00 01 00 00 00 00 00 00 06 00 00 00 00 14     ................
	...
     d6c:	03 3f 68 b6 79 35 28 bc c6 7e d1 6c 80 00 00 00     .?h.y5(..~.l....
     d7c:	40 00 00 00 00 00 b2 6a 00 00 00 00 00 00 00 00     @......j........
     d8c:	00 00 00 00 00 00 3f f0 00 00 00 30 00 00 00 00     ......?....0....
	...
     db8:	00 00 25 4d 00 2f 70 6d 00 00 05 ae 00 0c 02 d0     ..%M./pm........
     dc8:	00 00 00 00 00 65 00 54 ff ef 00 00 00 00 00 00     .....e.T........
     dd8:	00 00 01 00 00 44 00 00 00 00 0c 00 00 00 01 00     .....D..........
     de8:	00 00 00 00 00 65 00 00 00 54 00 00 ff ef 00 00     .....e...T......
	...
     e08:	40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     @...............
     e18:	40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     @...............
     e28:	00 00 00 01 00 00 00 02 00 00 00 00 00 00 00 00     ................
	...
     e58:	00 1b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     e84:	40 00 00 00 00 1b 00 00 00 00 00 00 00 00 00 00     @...............
	...
     ec8:	d8 dc ba a2 f1 de b2 b8 b4 a8 81 91 f7 4a 90 7f     .............J..
     ed8:	91 6a f3 f9 db a8 f9 b0 ba a0 80 f2 ce 81 f3 c2     .j..............
     ee8:	f1 c1 f2 c3 f3 cc a2 b2 80 f1 c6 d8 80 ba a7 df     ................
     ef8:	df df f2 a7 c3 cb c5 b6 f0 87 a2 94 24 48 70 3c     ............$Hp<
     f08:	95 40 68 34 58 9b 78 a2 f1 83 92 2d 55 7d d8 b1     .@h4X.x....-U}..
     f18:	b4 b8 a1 d0 91 80 f2 70 f3 70 f2 7c 80 a8 f1 01     .......p.p.|....
     f28:	b0 98 87 d9 43 d8 86 c9 88 ba a1 f2 0e b8 97 80     ....C...........
     f38:	f1 a9 df df df aa df df df f2 aa c5 cd c7 a9 0c     ................
     f48:	c9 2c 97 97 97 97 f1 a9 89 26 46 66 b0 b4 ba 80     .,.......&Ff....
     f58:	ac de f2 ca f1 b2 8c 02 a9 b6 98 00 89 0e 16 1e     ................
     f68:	b8 a9 b4 99 2c 54 7c b0 8a a8 96 36 56 76 f1 b9     ....,T|....6Vv..
     f78:	af b4 b0 83 c0 b8 a8 97 11 b1 8f 98 b9 af f0 24     ...............$
     f88:	08 44 10 64 18 f1 a3 29 55 7d af 83 b5 93 af f0     .D.d...)U}......
     f98:	00 28 50 f1 a3 86 9f 61 a6 da de df d9 fa a3 86     .(P....a........
     fa8:	96 db 31 a6 d9 f8 df ba a6 8f c2 c5 c7 b2 8c c1     ..1.............
     fb8:	b8 a2 df df df a3 df df df d8 d8 f1 b8 a8 b2 86     ................
     fc8:	b4 98 0d 35 5d b8 aa 98 b0 87 2d 35 3d b2 b6 ba     ...5].....-5=...
     fd8:	af 8c 96 19 8f 9f a7 0e 16 1e b4 9a b8 aa 87 2c     ...............,
     fe8:	54 7c b9 a3 de df df a3 b1 80 f2 c4 cd c9 f1 b8     T|..............
     ff8:	a9 b4 99 83 0d 35 5d 89 b9 a3 2d 55 7d b5 93 a3     .....5]...-U}...
    1008:	0e 16 1e a9 2c 54 7c b8 b4 b0 f1 97 83 a8 11 84     ....,T|.........
    1018:	a5 09 98 a3 83 f0 da 24 08 44 10 64 18 d8 f1 a5     .......$.D.d....
    1028:	29 55 7d a5 85 95 02 1a 2e 3a 56 5a 40 48 f9 f3     )U}......:VZ@H..
    1038:	a3 d9 f8 f0 98 83 24 08 44 10 64 18 97 82 a8 f1     ......$.D.d.....
    1048:	11 f0 98 a2 24 08 44 10 64 18 da f3 de d8 83 a5     ....$.D.d.......
    1058:	94 01 d9 a3 02 f1 a2 c3 c5 c7 d8 f1 84 92 a2 4d     ...............M
    1068:	da 2a d8 48 69 d9 2a d8 68 55 da 32 d8 50 71 d9     .*.Hi.*.hU.2.Pq.
    1078:	32 d8 70 5d da 3a d8 58 79 d9 3a d8 78 93 a3 4d     2.p].:.Xy.:.x..M
    1088:	da 2a d8 48 69 d9 2a d8 68 55 da 32 d8 50 71 d9     .*.Hi.*.hU.2.Pq.
    1098:	32 d8 70 5d da 3a d8 58 79 d9 3a d8 78 a8 8a 9a     2.p].:.Xy.:.x...
    10a8:	f0 28 50 78 9e f3 88 18 f1 9f 1d 98 a8 d9 08 d8     .(Px............
    10b8:	c8 9f 12 9e f3 15 a8 da 12 10 d8 f1 af c8 97 87     ................
    10c8:	34 b5 b9 94 a4 21 f3 d9 22 d8 f2 2d f3 d9 2a d8     4....!.."..-..*.
    10d8:	f2 35 f3 d9 32 d8 81 a4 60 60 61 d9 61 d8 6c 68     .5..2...``a.a.lh
    10e8:	69 d9 69 d8 74 70 71 d9 71 d8 b1 a3 84 19 3d 5d     i.i.tpq.q.....=]
    10f8:	a3 83 1a 3e 5e 93 10 30 81 10 11 b8 b0 af 8f 94     ...>^..0........
    1108:	f2 da 3e d8 b4 9a a8 87 29 da f8 d8 87 9a 35 da     ..>.....).....5.
    1118:	f8 d8 87 9a 3d da f8 d8 b1 b9 a4 98 85 02 2e 56     ....=..........V
    1128:	a5 81 00 0c 14 a3 97 b0 8a f1 2d d9 28 d8 4d d9     ..........-.(.M.
    1138:	48 d8 6d d9 68 d8 b1 84 0d da 0e d8 a3 29 83 da     H.m.h........)..
    1148:	2c 0e d8 a3 84 49 83 da 2c 4c 0e d8 b8 b0 a8 8a     ,....I..,L......
    1158:	9a f5 20 aa da df d8 a8 40 aa d0 da de d8 a8 60     .. .....@......`
    1168:	aa da d0 df d8 f1 97 86 a8 31 9b 06 99 07 ab 97     .........1......
    1178:	28 88 9b f0 0c 20 14 40 b8 b0 b4 a8 8c 9c f0 04     (.... .@........
    1188:	28 51 79 1d 30 14 38 b2 82 ab d0 98 2c 50 50 78     (Qy.0.8.....,PPx
    1198:	78 9b f1 1a b0 f0 8a 9c a8 29 51 79 8b 29 51 79     x........)Qy.)Qy
    11a8:	8a 24 70 59 8b 20 58 71 8a 44 69 38 8b 39 40 68     .$pY. Xq.Di8.9@h
    11b8:	8a 64 48 31 8b 30 49 60 a5 88 20 09 71 58 44 68     .dH1.0I`.. .qXDh
    11c8:	11 39 64 49 30 19 f1 ac 00 2c 54 7c f0 8c a8 04     .9dI0....,T|....
    11d8:	28 50 78 f1 88 97 26 a8 59 98 ac 8c 02 26 46 66     (Px...&.Y....&Ff
    11e8:	f0 89 9c a8 29 51 79 24 70 59 44 69 38 64 48 31     ....)Qy$pYDi8dH1
    11f8:	a9 88 09 20 59 70 ab 11 38 40 69 a8 19 31 48 60     ... Yp..8@i..1H`
    1208:	8c a8 3c 41 5c 20 7c 00 f1 87 98 19 86 a8 6e 76     ..<A\ |.......nv
    1218:	7e a9 99 88 2d 55 7d 9e b9 a3 8a 22 8a 6e 8a 56     ~...-U}....".n.V
    1228:	8a 5e 9f b1 83 06 26 46 66 0e 2e 4e 6e 9d b8 ad     .^....&Ff..Nn...
    1238:	00 2c 54 7c f2 b1 8c b4 99 b9 a3 2d 55 7d 81 91     .,T|.......-U}..
    1248:	ac 38 ad 3a b5 83 91 ac 2d d9 28 d8 4d d9 48 d8     .8.:....-.(.M.H.
    1258:	6d d9 68 d8 8c 9d ae 29 d9 04 ae d8 51 d9 04 ae     m.h....)....Q...
    1268:	d8 79 d9 04 d8 81 f3 9d ad 00 8d ae 19 81 ad d9     .y..............
    1278:	01 d8 f2 ae da 26 d8 8e 91 29 83 a7 d9 ad ad ad     .....&...)......
    1288:	ad f3 2a d8 d8 f1 b0 ac 89 91 3e 5e 76 f3 ac 2e     ..*.......>^v...
    1298:	2e f1 b1 8c 5a 9c ac 2c 28 28 28 9c ac 30 18 a8     ....Z..,(((..0..
    12a8:	98 81 28 34 3c 97 24 a7 28 34 3c 9c 24 f2 b0 89     ..(4<.$.(4<.$...
    12b8:	ac 91 2c 4c 6c 8a 9b 2d d9 d8 d8 51 d9 d8 d8 79     ..,Ll..-...Q...y
    12c8:	d9 d8 d8 f1 9e 88 a3 31 da d8 d8 91 2d d9 28 d8     .......1....-.(.
    12d8:	4d d9 48 d8 6d d9 68 d8 b1 83 93 35 3d 80 25 da     M.H.m.h....5=.%.
    12e8:	d8 d8 85 69 da d8 d8 b4 93 81 a3 28 34 3c f3 ab     ...i.......(4<..
    12f8:	8b f8 a3 91 b6 09 b4 d9 ab de fa b0 87 9c b9 a3     ................
    1308:	dd f1 a3 a3 a3 a3 95 f1 a3 a3 a3 9d f1 a3 a3 a3     ................
    1318:	a3 f2 a3 b4 90 80 f2 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    1328:	a3 b2 a3 a3 a3 a3 a3 a3 b0 87 b5 99 f1 a3 a3 a3     ................
    1338:	98 f1 a3 a3 a3 a3 97 a3 a3 a3 a3 f3 9b a3 a3 dc     ................
    1348:	b9 a7 f1 26 26 26 d8 d8 ff                          ...&&&...

00001351 <digital_pin_to_timer_PGM>:
    1351:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
    1361:	00 00 00 00                                         ....

00001365 <digital_pin_to_bit_mask_PGM>:
    1365:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
    1375:	04 08 10 20                                         ... 

00001379 <digital_pin_to_port_PGM>:
    1379:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
    1389:	03 03 03 03                                         ....

0000138d <port_to_output_PGM>:
    138d:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00001397 <port_to_mode_PGM>:
    1397:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

000013a2 <__ctors_start>:
    13a2:	e4 17       	cp	r30, r20
    13a4:	23 1c       	adc	r2, r3
    13a6:	c4 20       	and	r12, r4

000013a8 <__ctors_end>:
    13a8:	11 24       	eor	r1, r1
    13aa:	1f be       	out	0x3f, r1	; 63
    13ac:	cf ef       	ldi	r28, 0xFF	; 255
    13ae:	d8 e0       	ldi	r29, 0x08	; 8
    13b0:	de bf       	out	0x3e, r29	; 62
    13b2:	cd bf       	out	0x3d, r28	; 61

000013b4 <__do_copy_data>:
    13b4:	11 e0       	ldi	r17, 0x01	; 1
    13b6:	a0 e0       	ldi	r26, 0x00	; 0
    13b8:	b1 e0       	ldi	r27, 0x01	; 1
    13ba:	e8 eb       	ldi	r30, 0xB8	; 184
    13bc:	ff e4       	ldi	r31, 0x4F	; 79
    13be:	02 c0       	rjmp	.+4      	; 0x13c4 <__do_copy_data+0x10>
    13c0:	05 90       	lpm	r0, Z+
    13c2:	0d 92       	st	X+, r0
    13c4:	a2 34       	cpi	r26, 0x42	; 66
    13c6:	b1 07       	cpc	r27, r17
    13c8:	d9 f7       	brne	.-10     	; 0x13c0 <__do_copy_data+0xc>

000013ca <__do_clear_bss>:
    13ca:	23 e0       	ldi	r18, 0x03	; 3
    13cc:	a2 e4       	ldi	r26, 0x42	; 66
    13ce:	b1 e0       	ldi	r27, 0x01	; 1
    13d0:	01 c0       	rjmp	.+2      	; 0x13d4 <.do_clear_bss_start>

000013d2 <.do_clear_bss_loop>:
    13d2:	1d 92       	st	X+, r1

000013d4 <.do_clear_bss_start>:
    13d4:	a2 34       	cpi	r26, 0x42	; 66
    13d6:	b2 07       	cpc	r27, r18
    13d8:	e1 f7       	brne	.-8      	; 0x13d2 <.do_clear_bss_loop>

000013da <__do_global_ctors>:
    13da:	19 e0       	ldi	r17, 0x09	; 9
    13dc:	c4 ed       	ldi	r28, 0xD4	; 212
    13de:	d9 e0       	ldi	r29, 0x09	; 9
    13e0:	04 c0       	rjmp	.+8      	; 0x13ea <__do_global_ctors+0x10>
    13e2:	21 97       	sbiw	r28, 0x01	; 1
    13e4:	fe 01       	movw	r30, r28
    13e6:	0e 94 a0 25 	call	0x4b40	; 0x4b40 <__tablejump2__>
    13ea:	c1 3d       	cpi	r28, 0xD1	; 209
    13ec:	d1 07       	cpc	r29, r17
    13ee:	c9 f7       	brne	.-14     	; 0x13e2 <__do_global_ctors+0x8>
    13f0:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <main>
    13f4:	0c 94 da 27 	jmp	0x4fb4	; 0x4fb4 <_exit>

000013f8 <__bad_interrupt>:
    13f8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000013fc <_ZN6I2Cdev10writeBytesEhhhPh>:
 * @param regAddr First register address to write to
 * @param length Number of bytes to write
 * @param data Buffer to copy new data from
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t* data) {
    13fc:	ff 92       	push	r15
    13fe:	0f 93       	push	r16
    1400:	1f 93       	push	r17
    1402:	cf 93       	push	r28
    1404:	df 93       	push	r29
    1406:	c6 2f       	mov	r28, r22
    1408:	14 2f       	mov	r17, r20
    140a:	f2 2e       	mov	r15, r18
    140c:	03 2f       	mov	r16, r19
    uint8_t status = 0;
    #if ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO < 100) || I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_NBWIRE)
        Wire.beginTransmission(devAddr);
        Wire.send((uint8_t) regAddr); // send address
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100)
        Wire.beginTransmission(devAddr);
    140e:	68 2f       	mov	r22, r24
    1410:	86 e4       	ldi	r24, 0x46	; 70
    1412:	92 e0       	ldi	r25, 0x02	; 2
    1414:	0e 94 9c 1b 	call	0x3738	; 0x3738 <_ZN7TwoWire17beginTransmissionEh>
        Wire.write((uint8_t) regAddr); // send address
    1418:	6c 2f       	mov	r22, r28
    141a:	86 e4       	ldi	r24, 0x46	; 70
    141c:	92 e0       	ldi	r25, 0x02	; 2
    141e:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <_ZN7TwoWire5writeEh>
    1422:	cf 2d       	mov	r28, r15
    1424:	d0 2f       	mov	r29, r16
    1426:	ce 01       	movw	r24, r28
    1428:	81 0f       	add	r24, r17
    142a:	91 1d       	adc	r25, r1
    142c:	8c 01       	movw	r16, r24
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE)
        Fastwire::beginTransmission(devAddr);
        Fastwire::write(regAddr);
    #endif
    for (uint8_t i = 0; i < length; i++) {
    142e:	c0 17       	cp	r28, r16
    1430:	d1 07       	cpc	r29, r17
    1432:	31 f0       	breq	.+12     	; 0x1440 <_ZN6I2Cdev10writeBytesEhhhPh+0x44>
            if (i + 1 < length) Serial.print(" ");
        #endif
        #if ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO < 100) || I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_NBWIRE)
            Wire.send((uint8_t) data[i]);
        #elif (I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100)
            Wire.write((uint8_t) data[i]);
    1434:	69 91       	ld	r22, Y+
    1436:	86 e4       	ldi	r24, 0x46	; 70
    1438:	92 e0       	ldi	r25, 0x02	; 2
    143a:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <_ZN7TwoWire5writeEh>
        Wire.write((uint8_t) regAddr); // send address
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE)
        Fastwire::beginTransmission(devAddr);
        Fastwire::write(regAddr);
    #endif
    for (uint8_t i = 0; i < length; i++) {
    143e:	f7 cf       	rjmp	.-18     	; 0x142e <_ZN6I2Cdev10writeBytesEhhhPh+0x32>
        #endif
    }
    #if ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO < 100) || I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_NBWIRE)
        Wire.endTransmission();
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100)
        status = Wire.endTransmission();
    1440:	86 e4       	ldi	r24, 0x46	; 70
    1442:	92 e0       	ldi	r25, 0x02	; 2
    1444:	0e 94 20 1c 	call	0x3840	; 0x3840 <_ZN7TwoWire15endTransmissionEv>
        //status = Fastwire::endTransmission();
    #endif
    #ifdef I2CDEV_SERIAL_DEBUG
        Serial.println(". Done.");
    #endif
    return status == 0;
    1448:	91 e0       	ldi	r25, 0x01	; 1
    144a:	81 11       	cpse	r24, r1
    144c:	90 e0       	ldi	r25, 0x00	; 0
}
    144e:	89 2f       	mov	r24, r25
    1450:	df 91       	pop	r29
    1452:	cf 91       	pop	r28
    1454:	1f 91       	pop	r17
    1456:	0f 91       	pop	r16
    1458:	ff 90       	pop	r15
    145a:	08 95       	ret

0000145c <_ZN6I2Cdev9writeByteEhhh>:
 * @param devAddr I2C slave device address
 * @param regAddr Register address to write to
 * @param data New byte value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data) {
    145c:	cf 93       	push	r28
    145e:	df 93       	push	r29
    1460:	1f 92       	push	r1
    1462:	cd b7       	in	r28, 0x3d	; 61
    1464:	de b7       	in	r29, 0x3e	; 62
    1466:	49 83       	std	Y+1, r20	; 0x01
    return writeBytes(devAddr, regAddr, 1, &data);
    1468:	9e 01       	movw	r18, r28
    146a:	2f 5f       	subi	r18, 0xFF	; 255
    146c:	3f 4f       	sbci	r19, 0xFF	; 255
    146e:	41 e0       	ldi	r20, 0x01	; 1
    1470:	0e 94 fe 09 	call	0x13fc	; 0x13fc <_ZN6I2Cdev10writeBytesEhhhPh>
}
    1474:	0f 90       	pop	r0
    1476:	df 91       	pop	r29
    1478:	cf 91       	pop	r28
    147a:	08 95       	ret

0000147c <_ZN6I2Cdev10writeWordsEhhhPj>:
 * @param regAddr First register address to write to
 * @param length Number of words to write
 * @param data Buffer to copy new data from
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeWords(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint16_t* data) {
    147c:	cf 92       	push	r12
    147e:	df 92       	push	r13
    1480:	ff 92       	push	r15
    1482:	0f 93       	push	r16
    1484:	1f 93       	push	r17
    1486:	cf 93       	push	r28
    1488:	df 93       	push	r29
    148a:	c6 2f       	mov	r28, r22
    148c:	04 2f       	mov	r16, r20
    148e:	69 01       	movw	r12, r18
    uint8_t status = 0;
    #if ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO < 100) || I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_NBWIRE)
        Wire.beginTransmission(devAddr);
        Wire.send(regAddr); // send address
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100)
        Wire.beginTransmission(devAddr);
    1490:	68 2f       	mov	r22, r24
    1492:	86 e4       	ldi	r24, 0x46	; 70
    1494:	92 e0       	ldi	r25, 0x02	; 2
    1496:	0e 94 9c 1b 	call	0x3738	; 0x3738 <_ZN7TwoWire17beginTransmissionEh>
        Wire.write(regAddr); // send address
    149a:	6c 2f       	mov	r22, r28
    149c:	86 e4       	ldi	r24, 0x46	; 70
    149e:	92 e0       	ldi	r25, 0x02	; 2
    14a0:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <_ZN7TwoWire5writeEh>
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE)
        Fastwire::beginTransmission(devAddr);
        Fastwire::write(regAddr);
    #endif
    for (uint8_t i = 0; i < length * 2; i++) {
    14a4:	10 e0       	ldi	r17, 0x00	; 0
    14a6:	00 0f       	add	r16, r16
    14a8:	11 1f       	adc	r17, r17
    14aa:	f1 2c       	mov	r15, r1
    14ac:	cf 2d       	mov	r28, r15
    14ae:	d0 e0       	ldi	r29, 0x00	; 0
    14b0:	c0 17       	cp	r28, r16
    14b2:	d1 07       	cpc	r29, r17
    14b4:	8c f4       	brge	.+34     	; 0x14d8 <_ZN6I2Cdev10writeWordsEhhhPj+0x5c>
        #endif
        #if ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO < 100) || I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_NBWIRE)
            Wire.send((uint8_t)(data[i] >> 8));     // send MSB
            Wire.send((uint8_t)data[i++]);          // send LSB
        #elif (I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100)
            Wire.write((uint8_t)(data[i] >> 8));    // send MSB
    14b6:	cc 0f       	add	r28, r28
    14b8:	dd 1f       	adc	r29, r29
    14ba:	cc 0d       	add	r28, r12
    14bc:	dd 1d       	adc	r29, r13
    14be:	69 81       	ldd	r22, Y+1	; 0x01
    14c0:	86 e4       	ldi	r24, 0x46	; 70
    14c2:	92 e0       	ldi	r25, 0x02	; 2
    14c4:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <_ZN7TwoWire5writeEh>
            Wire.write((uint8_t)data[i++]);         // send LSB
    14c8:	68 81       	ld	r22, Y
    14ca:	86 e4       	ldi	r24, 0x46	; 70
    14cc:	92 e0       	ldi	r25, 0x02	; 2
    14ce:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <_ZN7TwoWire5writeEh>
        Wire.write(regAddr); // send address
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE)
        Fastwire::beginTransmission(devAddr);
        Fastwire::write(regAddr);
    #endif
    for (uint8_t i = 0; i < length * 2; i++) {
    14d2:	f3 94       	inc	r15
    14d4:	f3 94       	inc	r15
    14d6:	ea cf       	rjmp	.-44     	; 0x14ac <_ZN6I2Cdev10writeWordsEhhhPj+0x30>
        #endif
    }
    #if ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO < 100) || I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_NBWIRE)
        Wire.endTransmission();
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100)
        status = Wire.endTransmission();
    14d8:	86 e4       	ldi	r24, 0x46	; 70
    14da:	92 e0       	ldi	r25, 0x02	; 2
    14dc:	0e 94 20 1c 	call	0x3840	; 0x3840 <_ZN7TwoWire15endTransmissionEv>
        //status = Fastwire::endTransmission();
    #endif
    #ifdef I2CDEV_SERIAL_DEBUG
        Serial.println(". Done.");
    #endif
    return status == 0;
    14e0:	91 e0       	ldi	r25, 0x01	; 1
    14e2:	81 11       	cpse	r24, r1
    14e4:	90 e0       	ldi	r25, 0x00	; 0
}
    14e6:	89 2f       	mov	r24, r25
    14e8:	df 91       	pop	r29
    14ea:	cf 91       	pop	r28
    14ec:	1f 91       	pop	r17
    14ee:	0f 91       	pop	r16
    14f0:	ff 90       	pop	r15
    14f2:	df 90       	pop	r13
    14f4:	cf 90       	pop	r12
    14f6:	08 95       	ret

000014f8 <_ZN6I2Cdev9writeWordEhhj>:
 * @param devAddr I2C slave device address
 * @param regAddr Register address to write to
 * @param data New word value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeWord(uint8_t devAddr, uint8_t regAddr, uint16_t data) {
    14f8:	cf 93       	push	r28
    14fa:	df 93       	push	r29
    14fc:	00 d0       	rcall	.+0      	; 0x14fe <_ZN6I2Cdev9writeWordEhhj+0x6>
    14fe:	cd b7       	in	r28, 0x3d	; 61
    1500:	de b7       	in	r29, 0x3e	; 62
    1502:	5a 83       	std	Y+2, r21	; 0x02
    1504:	49 83       	std	Y+1, r20	; 0x01
    return writeWords(devAddr, regAddr, 1, &data);
    1506:	9e 01       	movw	r18, r28
    1508:	2f 5f       	subi	r18, 0xFF	; 255
    150a:	3f 4f       	sbci	r19, 0xFF	; 255
    150c:	41 e0       	ldi	r20, 0x01	; 1
    150e:	0e 94 3e 0a 	call	0x147c	; 0x147c <_ZN6I2Cdev10writeWordsEhhhPj>
}
    1512:	0f 90       	pop	r0
    1514:	0f 90       	pop	r0
    1516:	df 91       	pop	r29
    1518:	cf 91       	pop	r28
    151a:	08 95       	ret

0000151c <_ZN6I2Cdev9readBytesEhhhPhj>:
 * @param length Number of bytes to read
 * @param data Buffer to store read data in
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Number of bytes read (-1 indicates failure)
 */
int8_t I2Cdev::readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data, uint16_t timeout) {
    151c:	3f 92       	push	r3
    151e:	4f 92       	push	r4
    1520:	5f 92       	push	r5
    1522:	6f 92       	push	r6
    1524:	7f 92       	push	r7
    1526:	8f 92       	push	r8
    1528:	9f 92       	push	r9
    152a:	af 92       	push	r10
    152c:	bf 92       	push	r11
    152e:	cf 92       	push	r12
    1530:	df 92       	push	r13
    1532:	ef 92       	push	r14
    1534:	ff 92       	push	r15
    1536:	0f 93       	push	r16
    1538:	1f 93       	push	r17
    153a:	cf 93       	push	r28
    153c:	df 93       	push	r29
    153e:	00 d0       	rcall	.+0      	; 0x1540 <_ZN6I2Cdev9readBytesEhhhPhj+0x24>
    1540:	00 d0       	rcall	.+0      	; 0x1542 <_ZN6I2Cdev9readBytesEhhhPhj+0x26>
    1542:	00 d0       	rcall	.+0      	; 0x1544 <_ZN6I2Cdev9readBytesEhhhPhj+0x28>
    1544:	cd b7       	in	r28, 0x3d	; 61
    1546:	de b7       	in	r29, 0x3e	; 62
    1548:	d8 2e       	mov	r13, r24
    154a:	c6 2e       	mov	r12, r22
    154c:	4d 83       	std	Y+5, r20	; 0x05
    154e:	79 01       	movw	r14, r18
        Serial.print(regAddr, HEX);
        Serial.print("...");
    #endif

    int8_t count = 0;
    uint32_t t1 = millis();
    1550:	0e 94 22 24 	call	0x4844	; 0x4844 <millis>
    1554:	4b 01       	movw	r8, r22
    1556:	5c 01       	movw	r10, r24
            // Adds official support for repeated start condition, yay!

            // I2C/TWI subsystem uses internal buffer that breaks with large data requests
            // so if user requests more than BUFFER_LENGTH bytes, we have to do it in
            // smaller chunks instead of all at once
            for (uint8_t k = 0; k < length; k += min(length, BUFFER_LENGTH)) {
    1558:	31 2c       	mov	r3, r1
        Serial.print(" bytes from 0x");
        Serial.print(regAddr, HEX);
        Serial.print("...");
    #endif

    int8_t count = 0;
    155a:	1e 82       	std	Y+6, r1	; 0x06
            for (uint8_t k = 0; k < length; k += min(length, BUFFER_LENGTH)) {
                Wire.beginTransmission(devAddr);
                Wire.write(regAddr);
                Wire.endTransmission();
                Wire.beginTransmission(devAddr);
                Wire.requestFrom(devAddr, (uint8_t)min(length - k, BUFFER_LENGTH));
    155c:	9d 81       	ldd	r25, Y+5	; 0x05
    155e:	89 2f       	mov	r24, r25
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	9c 83       	std	Y+4, r25	; 0x04
    1564:	8b 83       	std	Y+3, r24	; 0x03
        
                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {
    1566:	28 01       	movw	r4, r16
    1568:	61 2c       	mov	r6, r1
    156a:	71 2c       	mov	r7, r1
            // Adds official support for repeated start condition, yay!

            // I2C/TWI subsystem uses internal buffer that breaks with large data requests
            // so if user requests more than BUFFER_LENGTH bytes, we have to do it in
            // smaller chunks instead of all at once
            for (uint8_t k = 0; k < length; k += min(length, BUFFER_LENGTH)) {
    156c:	ed 81       	ldd	r30, Y+5	; 0x05
    156e:	3e 16       	cp	r3, r30
    1570:	c8 f5       	brcc	.+114    	; 0x15e4 <_ZN6I2Cdev9readBytesEhhhPhj+0xc8>
                Wire.beginTransmission(devAddr);
    1572:	6d 2d       	mov	r22, r13
    1574:	86 e4       	ldi	r24, 0x46	; 70
    1576:	92 e0       	ldi	r25, 0x02	; 2
    1578:	0e 94 9c 1b 	call	0x3738	; 0x3738 <_ZN7TwoWire17beginTransmissionEh>
                Wire.write(regAddr);
    157c:	6c 2d       	mov	r22, r12
    157e:	86 e4       	ldi	r24, 0x46	; 70
    1580:	92 e0       	ldi	r25, 0x02	; 2
    1582:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <_ZN7TwoWire5writeEh>
                Wire.endTransmission();
    1586:	86 e4       	ldi	r24, 0x46	; 70
    1588:	92 e0       	ldi	r25, 0x02	; 2
    158a:	0e 94 20 1c 	call	0x3840	; 0x3840 <_ZN7TwoWire15endTransmissionEv>
                Wire.beginTransmission(devAddr);
    158e:	6d 2d       	mov	r22, r13
    1590:	86 e4       	ldi	r24, 0x46	; 70
    1592:	92 e0       	ldi	r25, 0x02	; 2
    1594:	0e 94 9c 1b 	call	0x3738	; 0x3738 <_ZN7TwoWire17beginTransmissionEh>
                Wire.requestFrom(devAddr, (uint8_t)min(length - k, BUFFER_LENGTH));
    1598:	4b 81       	ldd	r20, Y+3	; 0x03
    159a:	5c 81       	ldd	r21, Y+4	; 0x04
    159c:	43 19       	sub	r20, r3
    159e:	51 09       	sbc	r21, r1
    15a0:	41 32       	cpi	r20, 0x21	; 33
    15a2:	51 05       	cpc	r21, r1
    15a4:	14 f0       	brlt	.+4      	; 0x15aa <_ZN6I2Cdev9readBytesEhhhPhj+0x8e>
    15a6:	40 e2       	ldi	r20, 0x20	; 32
    15a8:	50 e0       	ldi	r21, 0x00	; 0
    15aa:	6d 2d       	mov	r22, r13
    15ac:	86 e4       	ldi	r24, 0x46	; 70
    15ae:	92 e0       	ldi	r25, 0x02	; 2
    15b0:	0e 94 1d 1c 	call	0x383a	; 0x383a <_ZN7TwoWire11requestFromEhh>
        
                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {
    15b4:	86 e4       	ldi	r24, 0x46	; 70
    15b6:	92 e0       	ldi	r25, 0x02	; 2
    15b8:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <_ZN7TwoWire9availableEv>
    15bc:	89 2b       	or	r24, r25
    15be:	09 f4       	brne	.+2      	; 0x15c2 <_ZN6I2Cdev9readBytesEhhhPhj+0xa6>
    15c0:	43 c0       	rjmp	.+134    	; 0x1648 <_ZN6I2Cdev9readBytesEhhhPhj+0x12c>
    15c2:	01 15       	cp	r16, r1
    15c4:	11 05       	cpc	r17, r1
    15c6:	69 f1       	breq	.+90     	; 0x1622 <_ZN6I2Cdev9readBytesEhhhPhj+0x106>
    15c8:	0e 94 22 24 	call	0x4844	; 0x4844 <millis>
    15cc:	dc 01       	movw	r26, r24
    15ce:	cb 01       	movw	r24, r22
    15d0:	88 19       	sub	r24, r8
    15d2:	99 09       	sbc	r25, r9
    15d4:	aa 09       	sbc	r26, r10
    15d6:	bb 09       	sbc	r27, r11
    15d8:	84 15       	cp	r24, r4
    15da:	95 05       	cpc	r25, r5
    15dc:	a6 05       	cpc	r26, r6
    15de:	b7 05       	cpc	r27, r7
    15e0:	00 f1       	brcs	.+64     	; 0x1622 <_ZN6I2Cdev9readBytesEhhhPhj+0x106>
    15e2:	32 c0       	rjmp	.+100    	; 0x1648 <_ZN6I2Cdev9readBytesEhhhPhj+0x12c>
        }

    #endif

    // check for timeout
    if (timeout > 0 && millis() - t1 >= timeout && count < length) count = -1; // timeout
    15e4:	01 15       	cp	r16, r1
    15e6:	11 05       	cpc	r17, r1
    15e8:	a9 f1       	breq	.+106    	; 0x1654 <_ZN6I2Cdev9readBytesEhhhPhj+0x138>
    15ea:	0e 94 22 24 	call	0x4844	; 0x4844 <millis>
    15ee:	dc 01       	movw	r26, r24
    15f0:	cb 01       	movw	r24, r22
    15f2:	88 19       	sub	r24, r8
    15f4:	99 09       	sbc	r25, r9
    15f6:	aa 09       	sbc	r26, r10
    15f8:	bb 09       	sbc	r27, r11
    15fa:	20 e0       	ldi	r18, 0x00	; 0
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	80 17       	cp	r24, r16
    1600:	91 07       	cpc	r25, r17
    1602:	a2 07       	cpc	r26, r18
    1604:	b3 07       	cpc	r27, r19
    1606:	30 f1       	brcs	.+76     	; 0x1654 <_ZN6I2Cdev9readBytesEhhhPhj+0x138>
    1608:	fd 81       	ldd	r31, Y+5	; 0x05
    160a:	2f 2f       	mov	r18, r31
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	4e 81       	ldd	r20, Y+6	; 0x06
    1610:	84 2f       	mov	r24, r20
    1612:	44 0f       	add	r20, r20
    1614:	99 0b       	sbc	r25, r25
    1616:	82 17       	cp	r24, r18
    1618:	93 07       	cpc	r25, r19
    161a:	e4 f4       	brge	.+56     	; 0x1654 <_ZN6I2Cdev9readBytesEhhhPhj+0x138>
    161c:	8f ef       	ldi	r24, 0xFF	; 255
    161e:	8e 83       	std	Y+6, r24	; 0x06
        Serial.print(". Done (");
        Serial.print(count, DEC);
        Serial.println(" read).");
    #endif

    return count;
    1620:	19 c0       	rjmp	.+50     	; 0x1654 <_ZN6I2Cdev9readBytesEhhhPhj+0x138>
                Wire.endTransmission();
                Wire.beginTransmission(devAddr);
                Wire.requestFrom(devAddr, (uint8_t)min(length - k, BUFFER_LENGTH));
        
                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {
                    data[count] = Wire.read();
    1622:	f7 01       	movw	r30, r14
    1624:	2e 81       	ldd	r18, Y+6	; 0x06
    1626:	e2 0f       	add	r30, r18
    1628:	f1 1d       	adc	r31, r1
    162a:	27 fd       	sbrc	r18, 7
    162c:	fa 95       	dec	r31
    162e:	fa 83       	std	Y+2, r31	; 0x02
    1630:	e9 83       	std	Y+1, r30	; 0x01
    1632:	86 e4       	ldi	r24, 0x46	; 70
    1634:	92 e0       	ldi	r25, 0x02	; 2
    1636:	0e 94 02 1b 	call	0x3604	; 0x3604 <_ZN7TwoWire4readEv>
    163a:	e9 81       	ldd	r30, Y+1	; 0x01
    163c:	fa 81       	ldd	r31, Y+2	; 0x02
    163e:	80 83       	st	Z, r24
    1640:	fe 81       	ldd	r31, Y+6	; 0x06
    1642:	ff 5f       	subi	r31, 0xFF	; 255
    1644:	fe 83       	std	Y+6, r31	; 0x06
                Wire.write(regAddr);
                Wire.endTransmission();
                Wire.beginTransmission(devAddr);
                Wire.requestFrom(devAddr, (uint8_t)min(length - k, BUFFER_LENGTH));
        
                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {
    1646:	b6 cf       	rjmp	.-148    	; 0x15b4 <_ZN6I2Cdev9readBytesEhhhPhj+0x98>
            // Adds official support for repeated start condition, yay!

            // I2C/TWI subsystem uses internal buffer that breaks with large data requests
            // so if user requests more than BUFFER_LENGTH bytes, we have to do it in
            // smaller chunks instead of all at once
            for (uint8_t k = 0; k < length; k += min(length, BUFFER_LENGTH)) {
    1648:	8d 81       	ldd	r24, Y+5	; 0x05
    164a:	81 32       	cpi	r24, 0x21	; 33
    164c:	08 f0       	brcs	.+2      	; 0x1650 <_ZN6I2Cdev9readBytesEhhhPhj+0x134>
    164e:	80 e2       	ldi	r24, 0x20	; 32
    1650:	38 0e       	add	r3, r24
    1652:	8c cf       	rjmp	.-232    	; 0x156c <_ZN6I2Cdev9readBytesEhhhPhj+0x50>
        Serial.print(count, DEC);
        Serial.println(" read).");
    #endif

    return count;
}
    1654:	8e 81       	ldd	r24, Y+6	; 0x06
    1656:	26 96       	adiw	r28, 0x06	; 6
    1658:	0f b6       	in	r0, 0x3f	; 63
    165a:	f8 94       	cli
    165c:	de bf       	out	0x3e, r29	; 62
    165e:	0f be       	out	0x3f, r0	; 63
    1660:	cd bf       	out	0x3d, r28	; 61
    1662:	df 91       	pop	r29
    1664:	cf 91       	pop	r28
    1666:	1f 91       	pop	r17
    1668:	0f 91       	pop	r16
    166a:	ff 90       	pop	r15
    166c:	ef 90       	pop	r14
    166e:	df 90       	pop	r13
    1670:	cf 90       	pop	r12
    1672:	bf 90       	pop	r11
    1674:	af 90       	pop	r10
    1676:	9f 90       	pop	r9
    1678:	8f 90       	pop	r8
    167a:	7f 90       	pop	r7
    167c:	6f 90       	pop	r6
    167e:	5f 90       	pop	r5
    1680:	4f 90       	pop	r4
    1682:	3f 90       	pop	r3
    1684:	08 95       	ret

00001686 <_ZN6I2Cdev8readByteEhhPhj>:
 * @param regAddr Register regAddr to read from
 * @param data Container for byte value read from device
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Status of read operation (true = success)
 */
int8_t I2Cdev::readByte(uint8_t devAddr, uint8_t regAddr, uint8_t *data, uint16_t timeout) {
    1686:	0f 93       	push	r16
    1688:	1f 93       	push	r17
    return readBytes(devAddr, regAddr, 1, data, timeout);
    168a:	89 01       	movw	r16, r18
    168c:	9a 01       	movw	r18, r20
    168e:	41 e0       	ldi	r20, 0x01	; 1
    1690:	0e 94 8e 0a 	call	0x151c	; 0x151c <_ZN6I2Cdev9readBytesEhhhPhj>
}
    1694:	1f 91       	pop	r17
    1696:	0f 91       	pop	r16
    1698:	08 95       	ret

0000169a <_ZN6I2Cdev7readBitEhhhPhj>:
 * @param bitNum Bit position to read (0-7)
 * @param data Container for single bit value
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Status of read operation (true = success)
 */
int8_t I2Cdev::readBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t *data, uint16_t timeout) {
    169a:	df 92       	push	r13
    169c:	ef 92       	push	r14
    169e:	ff 92       	push	r15
    16a0:	0f 93       	push	r16
    16a2:	1f 93       	push	r17
    16a4:	cf 93       	push	r28
    16a6:	df 93       	push	r29
    16a8:	1f 92       	push	r1
    16aa:	cd b7       	in	r28, 0x3d	; 61
    16ac:	de b7       	in	r29, 0x3e	; 62
    16ae:	d4 2e       	mov	r13, r20
    16b0:	79 01       	movw	r14, r18
    16b2:	98 01       	movw	r18, r16
    uint8_t b;
    uint8_t count = readByte(devAddr, regAddr, &b, timeout);
    16b4:	ae 01       	movw	r20, r28
    16b6:	4f 5f       	subi	r20, 0xFF	; 255
    16b8:	5f 4f       	sbci	r21, 0xFF	; 255
    16ba:	0e 94 43 0b 	call	0x1686	; 0x1686 <_ZN6I2Cdev8readByteEhhPhj>
    *data = b & (1 << bitNum);
    16be:	21 e0       	ldi	r18, 0x01	; 1
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	01 c0       	rjmp	.+2      	; 0x16c6 <_ZN6I2Cdev7readBitEhhhPhj+0x2c>
    16c4:	22 0f       	add	r18, r18
    16c6:	da 94       	dec	r13
    16c8:	ea f7       	brpl	.-6      	; 0x16c4 <_ZN6I2Cdev7readBitEhhhPhj+0x2a>
    16ca:	99 81       	ldd	r25, Y+1	; 0x01
    16cc:	29 23       	and	r18, r25
    16ce:	f7 01       	movw	r30, r14
    16d0:	20 83       	st	Z, r18
    return count;
}
    16d2:	0f 90       	pop	r0
    16d4:	df 91       	pop	r29
    16d6:	cf 91       	pop	r28
    16d8:	1f 91       	pop	r17
    16da:	0f 91       	pop	r16
    16dc:	ff 90       	pop	r15
    16de:	ef 90       	pop	r14
    16e0:	df 90       	pop	r13
    16e2:	08 95       	ret

000016e4 <_ZN6I2Cdev8readBitsEhhhhPhj>:
 * @param length Number of bits to read (not more than 8)
 * @param data Container for right-aligned value (i.e. '101' read from any bitStart position will equal 0x05)
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Status of read operation (true = success)
 */
int8_t I2Cdev::readBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t *data, uint16_t timeout) {
    16e4:	cf 92       	push	r12
    16e6:	df 92       	push	r13
    16e8:	ef 92       	push	r14
    16ea:	ff 92       	push	r15
    16ec:	0f 93       	push	r16
    16ee:	1f 93       	push	r17
    16f0:	cf 93       	push	r28
    16f2:	df 93       	push	r29
    16f4:	1f 92       	push	r1
    16f6:	cd b7       	in	r28, 0x3d	; 61
    16f8:	de b7       	in	r29, 0x3e	; 62
    16fa:	d4 2e       	mov	r13, r20
    16fc:	c2 2e       	mov	r12, r18
    16fe:	97 01       	movw	r18, r14
    // 76543210 bit numbers
    //    xxx   args: bitStart=4, length=3
    //    010   masked
    //   -> 010 shifted
    uint8_t count, b;
    if ((count = readByte(devAddr, regAddr, &b, timeout)) != 0) {
    1700:	ae 01       	movw	r20, r28
    1702:	4f 5f       	subi	r20, 0xFF	; 255
    1704:	5f 4f       	sbci	r21, 0xFF	; 255
    1706:	0e 94 43 0b 	call	0x1686	; 0x1686 <_ZN6I2Cdev8readByteEhhPhj>
    170a:	88 23       	and	r24, r24
    170c:	f1 f0       	breq	.+60     	; 0x174a <_ZN6I2Cdev8readBitsEhhhhPhj+0x66>
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
    170e:	4d 2d       	mov	r20, r13
    1710:	50 e0       	ldi	r21, 0x00	; 0
    1712:	4c 19       	sub	r20, r12
    1714:	51 09       	sbc	r21, r1
    1716:	4f 5f       	subi	r20, 0xFF	; 255
    1718:	5f 4f       	sbci	r21, 0xFF	; 255
        b &= mask;
        b >>= (bitStart - length + 1);
        *data = b;
    171a:	21 e0       	ldi	r18, 0x01	; 1
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	02 c0       	rjmp	.+4      	; 0x1724 <_ZN6I2Cdev8readBitsEhhhhPhj+0x40>
    1720:	22 0f       	add	r18, r18
    1722:	33 1f       	adc	r19, r19
    1724:	ca 94       	dec	r12
    1726:	e2 f7       	brpl	.-8      	; 0x1720 <_ZN6I2Cdev8readBitsEhhhhPhj+0x3c>
    1728:	21 50       	subi	r18, 0x01	; 1
    172a:	31 09       	sbc	r19, r1
    172c:	04 2e       	mov	r0, r20
    172e:	01 c0       	rjmp	.+2      	; 0x1732 <_ZN6I2Cdev8readBitsEhhhhPhj+0x4e>
    1730:	22 0f       	add	r18, r18
    1732:	0a 94       	dec	r0
    1734:	ea f7       	brpl	.-6      	; 0x1730 <_ZN6I2Cdev8readBitsEhhhhPhj+0x4c>
    1736:	99 81       	ldd	r25, Y+1	; 0x01
    1738:	29 23       	and	r18, r25
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	02 c0       	rjmp	.+4      	; 0x1742 <_ZN6I2Cdev8readBitsEhhhhPhj+0x5e>
    173e:	35 95       	asr	r19
    1740:	27 95       	ror	r18
    1742:	4a 95       	dec	r20
    1744:	e2 f7       	brpl	.-8      	; 0x173e <_ZN6I2Cdev8readBitsEhhhhPhj+0x5a>
    1746:	f8 01       	movw	r30, r16
    1748:	20 83       	st	Z, r18
    }
    return count;
}
    174a:	0f 90       	pop	r0
    174c:	df 91       	pop	r29
    174e:	cf 91       	pop	r28
    1750:	1f 91       	pop	r17
    1752:	0f 91       	pop	r16
    1754:	ff 90       	pop	r15
    1756:	ef 90       	pop	r14
    1758:	df 90       	pop	r13
    175a:	cf 90       	pop	r12
    175c:	08 95       	ret

0000175e <_ZN6I2Cdev8writeBitEhhhh>:
 * @param regAddr Register regAddr to write to
 * @param bitNum Bit position to write (0-7)
 * @param value New bit value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
    175e:	ef 92       	push	r14
    1760:	ff 92       	push	r15
    1762:	0f 93       	push	r16
    1764:	1f 93       	push	r17
    1766:	cf 93       	push	r28
    1768:	df 93       	push	r29
    176a:	1f 92       	push	r1
    176c:	cd b7       	in	r28, 0x3d	; 61
    176e:	de b7       	in	r29, 0x3e	; 62
    1770:	18 2f       	mov	r17, r24
    1772:	06 2f       	mov	r16, r22
    1774:	f4 2e       	mov	r15, r20
    1776:	e2 2e       	mov	r14, r18
    uint8_t b;
    readByte(devAddr, regAddr, &b);
    1778:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <_ZN6I2Cdev11readTimeoutE>
    177c:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <_ZN6I2Cdev11readTimeoutE+0x1>
    1780:	ae 01       	movw	r20, r28
    1782:	4f 5f       	subi	r20, 0xFF	; 255
    1784:	5f 4f       	sbci	r21, 0xFF	; 255
    1786:	0e 94 43 0b 	call	0x1686	; 0x1686 <_ZN6I2Cdev8readByteEhhPhj>
    178a:	89 81       	ldd	r24, Y+1	; 0x01
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
    178c:	41 e0       	ldi	r20, 0x01	; 1
    178e:	50 e0       	ldi	r21, 0x00	; 0
    1790:	01 c0       	rjmp	.+2      	; 0x1794 <_ZN6I2Cdev8writeBitEhhhh+0x36>
    1792:	44 0f       	add	r20, r20
    1794:	fa 94       	dec	r15
    1796:	ea f7       	brpl	.-6      	; 0x1792 <_ZN6I2Cdev8writeBitEhhhh+0x34>
    1798:	ee 20       	and	r14, r14
    179a:	11 f0       	breq	.+4      	; 0x17a0 <_ZN6I2Cdev8writeBitEhhhh+0x42>
    179c:	48 2b       	or	r20, r24
    179e:	02 c0       	rjmp	.+4      	; 0x17a4 <_ZN6I2Cdev8writeBitEhhhh+0x46>
    17a0:	40 95       	com	r20
    17a2:	48 23       	and	r20, r24
    17a4:	49 83       	std	Y+1, r20	; 0x01
    return writeByte(devAddr, regAddr, b);
    17a6:	60 2f       	mov	r22, r16
    17a8:	81 2f       	mov	r24, r17
    17aa:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN6I2Cdev9writeByteEhhh>
}
    17ae:	0f 90       	pop	r0
    17b0:	df 91       	pop	r29
    17b2:	cf 91       	pop	r28
    17b4:	1f 91       	pop	r17
    17b6:	0f 91       	pop	r16
    17b8:	ff 90       	pop	r15
    17ba:	ef 90       	pop	r14
    17bc:	08 95       	ret

000017be <_ZN6I2Cdev9writeBitsEhhhhh>:
 * @param bitStart First bit position to write (0-7)
 * @param length Number of bits to write (not more than 8)
 * @param data Right-aligned value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
    17be:	df 92       	push	r13
    17c0:	ef 92       	push	r14
    17c2:	ff 92       	push	r15
    17c4:	0f 93       	push	r16
    17c6:	1f 93       	push	r17
    17c8:	cf 93       	push	r28
    17ca:	df 93       	push	r29
    17cc:	1f 92       	push	r1
    17ce:	cd b7       	in	r28, 0x3d	; 61
    17d0:	de b7       	in	r29, 0x3e	; 62
    17d2:	18 2f       	mov	r17, r24
    17d4:	f6 2e       	mov	r15, r22
    17d6:	e4 2e       	mov	r14, r20
    17d8:	d2 2e       	mov	r13, r18
    // 00011100 mask byte
    // 10101111 original value (sample)
    // 10100011 original & ~mask
    // 10101011 masked | value
    uint8_t b;
    if (readByte(devAddr, regAddr, &b) != 0) {
    17da:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <_ZN6I2Cdev11readTimeoutE>
    17de:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <_ZN6I2Cdev11readTimeoutE+0x1>
    17e2:	ae 01       	movw	r20, r28
    17e4:	4f 5f       	subi	r20, 0xFF	; 255
    17e6:	5f 4f       	sbci	r21, 0xFF	; 255
    17e8:	0e 94 43 0b 	call	0x1686	; 0x1686 <_ZN6I2Cdev8readByteEhhPhj>
    17ec:	88 23       	and	r24, r24
    17ee:	39 f1       	breq	.+78     	; 0x183e <_ZN6I2Cdev9writeBitsEhhhhh+0x80>
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
    17f0:	2e 2d       	mov	r18, r14
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	2d 19       	sub	r18, r13
    17f6:	31 09       	sbc	r19, r1
    17f8:	2f 5f       	subi	r18, 0xFF	; 255
    17fa:	3f 4f       	sbci	r19, 0xFF	; 255
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	02 c0       	rjmp	.+4      	; 0x1806 <_ZN6I2Cdev9writeBitsEhhhhh+0x48>
    1802:	88 0f       	add	r24, r24
    1804:	99 1f       	adc	r25, r25
    1806:	da 94       	dec	r13
    1808:	e2 f7       	brpl	.-8      	; 0x1802 <_ZN6I2Cdev9writeBitsEhhhhh+0x44>
    180a:	01 97       	sbiw	r24, 0x01	; 1
    180c:	02 2e       	mov	r0, r18
    180e:	01 c0       	rjmp	.+2      	; 0x1812 <_ZN6I2Cdev9writeBitsEhhhhh+0x54>
    1810:	88 0f       	add	r24, r24
    1812:	0a 94       	dec	r0
    1814:	ea f7       	brpl	.-6      	; 0x1810 <_ZN6I2Cdev9writeBitsEhhhhh+0x52>
        data <<= (bitStart - length + 1); // shift data into correct position
    1816:	40 2f       	mov	r20, r16
    1818:	50 e0       	ldi	r21, 0x00	; 0
    181a:	ba 01       	movw	r22, r20
    181c:	02 c0       	rjmp	.+4      	; 0x1822 <_ZN6I2Cdev9writeBitsEhhhhh+0x64>
    181e:	66 0f       	add	r22, r22
    1820:	77 1f       	adc	r23, r23
    1822:	2a 95       	dec	r18
    1824:	e2 f7       	brpl	.-8      	; 0x181e <_ZN6I2Cdev9writeBitsEhhhhh+0x60>
        data &= mask; // zero all non-important bits in data
        b &= ~(mask); // zero all important bits in existing byte
        b |= data; // combine data with existing byte
    1826:	48 2f       	mov	r20, r24
    1828:	40 95       	com	r20
    182a:	99 81       	ldd	r25, Y+1	; 0x01
    182c:	49 23       	and	r20, r25
    182e:	86 23       	and	r24, r22
    1830:	48 2b       	or	r20, r24
    1832:	49 83       	std	Y+1, r20	; 0x01
        return writeByte(devAddr, regAddr, b);
    1834:	6f 2d       	mov	r22, r15
    1836:	81 2f       	mov	r24, r17
    1838:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN6I2Cdev9writeByteEhhh>
    183c:	01 c0       	rjmp	.+2      	; 0x1840 <_ZN6I2Cdev9writeBitsEhhhhh+0x82>
    } else {
        return false;
    183e:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    1840:	0f 90       	pop	r0
    1842:	df 91       	pop	r29
    1844:	cf 91       	pop	r28
    1846:	1f 91       	pop	r17
    1848:	0f 91       	pop	r16
    184a:	ff 90       	pop	r15
    184c:	ef 90       	pop	r14
    184e:	df 90       	pop	r13
    1850:	08 95       	ret

00001852 <_ZN7MPU6050C1Ev>:
// DMP_CFG_2 register

uint8_t MPU6050::getDMPConfig2() {
    I2Cdev::readByte(devAddr, MPU6050_RA_DMP_CFG_2, buffer);
    return buffer[0];
}
    1852:	28 e6       	ldi	r18, 0x68	; 104
    1854:	fc 01       	movw	r30, r24
    1856:	20 83       	st	Z, r18
    1858:	08 95       	ret

0000185a <_ZN7MPU60507setRateEh>:
    185a:	46 2f       	mov	r20, r22
    185c:	69 e1       	ldi	r22, 0x19	; 25
    185e:	fc 01       	movw	r30, r24
    1860:	80 81       	ld	r24, Z
    1862:	0c 94 2e 0a 	jmp	0x145c	; 0x145c <_ZN6I2Cdev9writeByteEhhh>

00001866 <_ZN7MPU605020setExternalFrameSyncEh>:
    1866:	0f 93       	push	r16
    1868:	06 2f       	mov	r16, r22
    186a:	23 e0       	ldi	r18, 0x03	; 3
    186c:	45 e0       	ldi	r20, 0x05	; 5
    186e:	6a e1       	ldi	r22, 0x1A	; 26
    1870:	fc 01       	movw	r30, r24
    1872:	80 81       	ld	r24, Z
    1874:	0e 94 df 0b 	call	0x17be	; 0x17be <_ZN6I2Cdev9writeBitsEhhhhh>
    1878:	0f 91       	pop	r16
    187a:	08 95       	ret

0000187c <_ZN7MPU605011setDLPFModeEh>:
    187c:	0f 93       	push	r16
    187e:	06 2f       	mov	r16, r22
    1880:	23 e0       	ldi	r18, 0x03	; 3
    1882:	42 e0       	ldi	r20, 0x02	; 2
    1884:	6a e1       	ldi	r22, 0x1A	; 26
    1886:	fc 01       	movw	r30, r24
    1888:	80 81       	ld	r24, Z
    188a:	0e 94 df 0b 	call	0x17be	; 0x17be <_ZN6I2Cdev9writeBitsEhhhhh>
    188e:	0f 91       	pop	r16
    1890:	08 95       	ret

00001892 <_ZN7MPU605021setFullScaleGyroRangeEh>:
    1892:	0f 93       	push	r16
    1894:	06 2f       	mov	r16, r22
    1896:	22 e0       	ldi	r18, 0x02	; 2
    1898:	44 e0       	ldi	r20, 0x04	; 4
    189a:	6b e1       	ldi	r22, 0x1B	; 27
    189c:	fc 01       	movw	r30, r24
    189e:	80 81       	ld	r24, Z
    18a0:	0e 94 df 0b 	call	0x17be	; 0x17be <_ZN6I2Cdev9writeBitsEhhhhh>
    18a4:	0f 91       	pop	r16
    18a6:	08 95       	ret

000018a8 <_ZN7MPU605022setFullScaleAccelRangeEh>:
    18a8:	0f 93       	push	r16
    18aa:	06 2f       	mov	r16, r22
    18ac:	22 e0       	ldi	r18, 0x02	; 2
    18ae:	44 e0       	ldi	r20, 0x04	; 4
    18b0:	6c e1       	ldi	r22, 0x1C	; 28
    18b2:	fc 01       	movw	r30, r24
    18b4:	80 81       	ld	r24, Z
    18b6:	0e 94 df 0b 	call	0x17be	; 0x17be <_ZN6I2Cdev9writeBitsEhhhhh>
    18ba:	0f 91       	pop	r16
    18bc:	08 95       	ret

000018be <_ZN7MPU605027setMotionDetectionThresholdEh>:
    18be:	46 2f       	mov	r20, r22
    18c0:	6f e1       	ldi	r22, 0x1F	; 31
    18c2:	fc 01       	movw	r30, r24
    18c4:	80 81       	ld	r24, Z
    18c6:	0c 94 2e 0a 	jmp	0x145c	; 0x145c <_ZN6I2Cdev9writeByteEhhh>

000018ca <_ZN7MPU605026setMotionDetectionDurationEh>:
    18ca:	46 2f       	mov	r20, r22
    18cc:	60 e2       	ldi	r22, 0x20	; 32
    18ce:	fc 01       	movw	r30, r24
    18d0:	80 81       	ld	r24, Z
    18d2:	0c 94 2e 0a 	jmp	0x145c	; 0x145c <_ZN6I2Cdev9writeByteEhhh>

000018d6 <_ZN7MPU605031setZeroMotionDetectionThresholdEh>:
    18d6:	46 2f       	mov	r20, r22
    18d8:	61 e2       	ldi	r22, 0x21	; 33
    18da:	fc 01       	movw	r30, r24
    18dc:	80 81       	ld	r24, Z
    18de:	0c 94 2e 0a 	jmp	0x145c	; 0x145c <_ZN6I2Cdev9writeByteEhhh>

000018e2 <_ZN7MPU605030setZeroMotionDetectionDurationEh>:
    18e2:	46 2f       	mov	r20, r22
    18e4:	62 e2       	ldi	r22, 0x22	; 34
    18e6:	fc 01       	movw	r30, r24
    18e8:	80 81       	ld	r24, Z
    18ea:	0c 94 2e 0a 	jmp	0x145c	; 0x145c <_ZN6I2Cdev9writeByteEhhh>

000018ee <_ZN7MPU605015setSlaveAddressEhh>:
    18ee:	64 30       	cpi	r22, 0x04	; 4
    18f0:	40 f4       	brcc	.+16     	; 0x1902 <_ZN7MPU605015setSlaveAddressEhh+0x14>
    18f2:	26 2f       	mov	r18, r22
    18f4:	22 0f       	add	r18, r18
    18f6:	62 0f       	add	r22, r18
    18f8:	6b 5d       	subi	r22, 0xDB	; 219
    18fa:	fc 01       	movw	r30, r24
    18fc:	80 81       	ld	r24, Z
    18fe:	0c 94 2e 0a 	jmp	0x145c	; 0x145c <_ZN6I2Cdev9writeByteEhhh>
    1902:	08 95       	ret

00001904 <_ZN7MPU605013setIntEnabledEh>:
    1904:	46 2f       	mov	r20, r22
    1906:	68 e3       	ldi	r22, 0x38	; 56
    1908:	fc 01       	movw	r30, r24
    190a:	80 81       	ld	r24, Z
    190c:	0c 94 2e 0a 	jmp	0x145c	; 0x145c <_ZN6I2Cdev9writeByteEhhh>

00001910 <_ZN7MPU605012getIntStatusEv>:
    1910:	cf 93       	push	r28
    1912:	df 93       	push	r29
    1914:	ec 01       	movw	r28, r24
    1916:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <_ZN6I2Cdev11readTimeoutE>
    191a:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <_ZN6I2Cdev11readTimeoutE+0x1>
    191e:	ac 01       	movw	r20, r24
    1920:	4f 5f       	subi	r20, 0xFF	; 255
    1922:	5f 4f       	sbci	r21, 0xFF	; 255
    1924:	6a e3       	ldi	r22, 0x3A	; 58
    1926:	88 81       	ld	r24, Y
    1928:	0e 94 43 0b 	call	0x1686	; 0x1686 <_ZN6I2Cdev8readByteEhhPhj>
    192c:	89 81       	ldd	r24, Y+1	; 0x01
    192e:	df 91       	pop	r29
    1930:	cf 91       	pop	r28
    1932:	08 95       	ret

00001934 <_ZN7MPU605014setFIFOEnabledEb>:
    1934:	26 2f       	mov	r18, r22
    1936:	46 e0       	ldi	r20, 0x06	; 6
    1938:	6a e6       	ldi	r22, 0x6A	; 106
    193a:	fc 01       	movw	r30, r24
    193c:	80 81       	ld	r24, Z
    193e:	0c 94 af 0b 	jmp	0x175e	; 0x175e <_ZN6I2Cdev8writeBitEhhhh>

00001942 <_ZN7MPU605023setI2CMasterModeEnabledEb>:
    1942:	26 2f       	mov	r18, r22
    1944:	45 e0       	ldi	r20, 0x05	; 5
    1946:	6a e6       	ldi	r22, 0x6A	; 106
    1948:	fc 01       	movw	r30, r24
    194a:	80 81       	ld	r24, Z
    194c:	0c 94 af 0b 	jmp	0x175e	; 0x175e <_ZN6I2Cdev8writeBitEhhhh>

00001950 <_ZN7MPU60509resetFIFOEv>:
    1950:	21 e0       	ldi	r18, 0x01	; 1
    1952:	42 e0       	ldi	r20, 0x02	; 2
    1954:	6a e6       	ldi	r22, 0x6A	; 106
    1956:	fc 01       	movw	r30, r24
    1958:	80 81       	ld	r24, Z
    195a:	0c 94 af 0b 	jmp	0x175e	; 0x175e <_ZN6I2Cdev8writeBitEhhhh>

0000195e <_ZN7MPU605014resetI2CMasterEv>:
    195e:	21 e0       	ldi	r18, 0x01	; 1
    1960:	41 e0       	ldi	r20, 0x01	; 1
    1962:	6a e6       	ldi	r22, 0x6A	; 106
    1964:	fc 01       	movw	r30, r24
    1966:	80 81       	ld	r24, Z
    1968:	0c 94 af 0b 	jmp	0x175e	; 0x175e <_ZN6I2Cdev8writeBitEhhhh>

0000196c <_ZN7MPU60505resetEv>:
    196c:	21 e0       	ldi	r18, 0x01	; 1
    196e:	47 e0       	ldi	r20, 0x07	; 7
    1970:	6b e6       	ldi	r22, 0x6B	; 107
    1972:	fc 01       	movw	r30, r24
    1974:	80 81       	ld	r24, Z
    1976:	0c 94 af 0b 	jmp	0x175e	; 0x175e <_ZN6I2Cdev8writeBitEhhhh>

0000197a <_ZN7MPU605015setSleepEnabledEb>:
    197a:	26 2f       	mov	r18, r22
    197c:	46 e0       	ldi	r20, 0x06	; 6
    197e:	6b e6       	ldi	r22, 0x6B	; 107
    1980:	fc 01       	movw	r30, r24
    1982:	80 81       	ld	r24, Z
    1984:	0c 94 af 0b 	jmp	0x175e	; 0x175e <_ZN6I2Cdev8writeBitEhhhh>

00001988 <_ZN7MPU605014setClockSourceEh>:
    1988:	0f 93       	push	r16
    198a:	06 2f       	mov	r16, r22
    198c:	23 e0       	ldi	r18, 0x03	; 3
    198e:	42 e0       	ldi	r20, 0x02	; 2
    1990:	6b e6       	ldi	r22, 0x6B	; 107
    1992:	fc 01       	movw	r30, r24
    1994:	80 81       	ld	r24, Z
    1996:	0e 94 df 0b 	call	0x17be	; 0x17be <_ZN6I2Cdev9writeBitsEhhhhh>
    199a:	0f 91       	pop	r16
    199c:	08 95       	ret

0000199e <_ZN7MPU605010initializeEv>:
    199e:	cf 93       	push	r28
    19a0:	df 93       	push	r29
    19a2:	ec 01       	movw	r28, r24
    19a4:	61 e0       	ldi	r22, 0x01	; 1
    19a6:	0e 94 c4 0c 	call	0x1988	; 0x1988 <_ZN7MPU605014setClockSourceEh>
    19aa:	60 e0       	ldi	r22, 0x00	; 0
    19ac:	ce 01       	movw	r24, r28
    19ae:	0e 94 49 0c 	call	0x1892	; 0x1892 <_ZN7MPU605021setFullScaleGyroRangeEh>
    19b2:	60 e0       	ldi	r22, 0x00	; 0
    19b4:	ce 01       	movw	r24, r28
    19b6:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <_ZN7MPU605022setFullScaleAccelRangeEh>
    19ba:	60 e0       	ldi	r22, 0x00	; 0
    19bc:	ce 01       	movw	r24, r28
    19be:	df 91       	pop	r29
    19c0:	cf 91       	pop	r28
    19c2:	0c 94 bd 0c 	jmp	0x197a	; 0x197a <_ZN7MPU605015setSleepEnabledEb>

000019c6 <_ZN7MPU605012getFIFOCountEv>:
    19c6:	0f 93       	push	r16
    19c8:	1f 93       	push	r17
    19ca:	cf 93       	push	r28
    19cc:	df 93       	push	r29
    19ce:	ec 01       	movw	r28, r24
    19d0:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <_ZN6I2Cdev11readTimeoutE>
    19d4:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <_ZN6I2Cdev11readTimeoutE+0x1>
    19d8:	9c 01       	movw	r18, r24
    19da:	2f 5f       	subi	r18, 0xFF	; 255
    19dc:	3f 4f       	sbci	r19, 0xFF	; 255
    19de:	42 e0       	ldi	r20, 0x02	; 2
    19e0:	62 e7       	ldi	r22, 0x72	; 114
    19e2:	88 81       	ld	r24, Y
    19e4:	0e 94 8e 0a 	call	0x151c	; 0x151c <_ZN6I2Cdev9readBytesEhhhPhj>
    19e8:	89 81       	ldd	r24, Y+1	; 0x01
    19ea:	9a 81       	ldd	r25, Y+2	; 0x02
    19ec:	98 27       	eor	r25, r24
    19ee:	89 27       	eor	r24, r25
    19f0:	98 27       	eor	r25, r24
    19f2:	df 91       	pop	r29
    19f4:	cf 91       	pop	r28
    19f6:	1f 91       	pop	r17
    19f8:	0f 91       	pop	r16
    19fa:	08 95       	ret

000019fc <_ZN7MPU605012getFIFOBytesEPhh>:
    19fc:	0f 93       	push	r16
    19fe:	1f 93       	push	r17
    1a00:	9b 01       	movw	r18, r22
    1a02:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <_ZN6I2Cdev11readTimeoutE>
    1a06:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <_ZN6I2Cdev11readTimeoutE+0x1>
    1a0a:	64 e7       	ldi	r22, 0x74	; 116
    1a0c:	fc 01       	movw	r30, r24
    1a0e:	80 81       	ld	r24, Z
    1a10:	0e 94 8e 0a 	call	0x151c	; 0x151c <_ZN6I2Cdev9readBytesEhhhPhj>
    1a14:	1f 91       	pop	r17
    1a16:	0f 91       	pop	r16
    1a18:	08 95       	ret

00001a1a <_ZN7MPU605011getDeviceIDEv>:
    1a1a:	ef 92       	push	r14
    1a1c:	ff 92       	push	r15
    1a1e:	0f 93       	push	r16
    1a20:	1f 93       	push	r17
    1a22:	cf 93       	push	r28
    1a24:	df 93       	push	r29
    1a26:	ec 01       	movw	r28, r24
    1a28:	e0 90 06 01 	lds	r14, 0x0106	; 0x800106 <_ZN6I2Cdev11readTimeoutE>
    1a2c:	f0 90 07 01 	lds	r15, 0x0107	; 0x800107 <_ZN6I2Cdev11readTimeoutE+0x1>
    1a30:	8c 01       	movw	r16, r24
    1a32:	0f 5f       	subi	r16, 0xFF	; 255
    1a34:	1f 4f       	sbci	r17, 0xFF	; 255
    1a36:	26 e0       	ldi	r18, 0x06	; 6
    1a38:	46 e0       	ldi	r20, 0x06	; 6
    1a3a:	65 e7       	ldi	r22, 0x75	; 117
    1a3c:	88 81       	ld	r24, Y
    1a3e:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <_ZN6I2Cdev8readBitsEhhhhPhj>
    1a42:	89 81       	ldd	r24, Y+1	; 0x01
    1a44:	df 91       	pop	r29
    1a46:	cf 91       	pop	r28
    1a48:	1f 91       	pop	r17
    1a4a:	0f 91       	pop	r16
    1a4c:	ff 90       	pop	r15
    1a4e:	ef 90       	pop	r14
    1a50:	08 95       	ret

00001a52 <_ZN7MPU605014testConnectionEv>:
    1a52:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <_ZN7MPU605011getDeviceIDEv>
    1a56:	91 e0       	ldi	r25, 0x01	; 1
    1a58:	84 33       	cpi	r24, 0x34	; 52
    1a5a:	09 f0       	breq	.+2      	; 0x1a5e <_ZN7MPU605014testConnectionEv+0xc>
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	89 2f       	mov	r24, r25
    1a60:	08 95       	ret

00001a62 <_ZN7MPU605015getOTPBankValidEv>:
    1a62:	0f 93       	push	r16
    1a64:	1f 93       	push	r17
    1a66:	cf 93       	push	r28
    1a68:	df 93       	push	r29
    1a6a:	ec 01       	movw	r28, r24
    1a6c:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <_ZN6I2Cdev11readTimeoutE>
    1a70:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <_ZN6I2Cdev11readTimeoutE+0x1>
    1a74:	9c 01       	movw	r18, r24
    1a76:	2f 5f       	subi	r18, 0xFF	; 255
    1a78:	3f 4f       	sbci	r19, 0xFF	; 255
    1a7a:	40 e0       	ldi	r20, 0x00	; 0
    1a7c:	60 e0       	ldi	r22, 0x00	; 0
    1a7e:	88 81       	ld	r24, Y
    1a80:	0e 94 4d 0b 	call	0x169a	; 0x169a <_ZN6I2Cdev7readBitEhhhPhj>
    1a84:	89 81       	ldd	r24, Y+1	; 0x01
    1a86:	df 91       	pop	r29
    1a88:	cf 91       	pop	r28
    1a8a:	1f 91       	pop	r17
    1a8c:	0f 91       	pop	r16
    1a8e:	08 95       	ret

00001a90 <_ZN7MPU605015setOTPBankValidEb>:
    1a90:	26 2f       	mov	r18, r22
    1a92:	40 e0       	ldi	r20, 0x00	; 0
    1a94:	60 e0       	ldi	r22, 0x00	; 0
    1a96:	fc 01       	movw	r30, r24
    1a98:	80 81       	ld	r24, Z
    1a9a:	0c 94 af 0b 	jmp	0x175e	; 0x175e <_ZN6I2Cdev8writeBitEhhhh>

00001a9e <_ZN7MPU605016getXGyroOffsetTCEv>:
    1a9e:	ef 92       	push	r14
    1aa0:	ff 92       	push	r15
    1aa2:	0f 93       	push	r16
    1aa4:	1f 93       	push	r17
    1aa6:	cf 93       	push	r28
    1aa8:	df 93       	push	r29
    1aaa:	ec 01       	movw	r28, r24
    1aac:	e0 90 06 01 	lds	r14, 0x0106	; 0x800106 <_ZN6I2Cdev11readTimeoutE>
    1ab0:	f0 90 07 01 	lds	r15, 0x0107	; 0x800107 <_ZN6I2Cdev11readTimeoutE+0x1>
    1ab4:	8c 01       	movw	r16, r24
    1ab6:	0f 5f       	subi	r16, 0xFF	; 255
    1ab8:	1f 4f       	sbci	r17, 0xFF	; 255
    1aba:	26 e0       	ldi	r18, 0x06	; 6
    1abc:	46 e0       	ldi	r20, 0x06	; 6
    1abe:	60 e0       	ldi	r22, 0x00	; 0
    1ac0:	88 81       	ld	r24, Y
    1ac2:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <_ZN6I2Cdev8readBitsEhhhhPhj>
    1ac6:	89 81       	ldd	r24, Y+1	; 0x01
    1ac8:	df 91       	pop	r29
    1aca:	cf 91       	pop	r28
    1acc:	1f 91       	pop	r17
    1ace:	0f 91       	pop	r16
    1ad0:	ff 90       	pop	r15
    1ad2:	ef 90       	pop	r14
    1ad4:	08 95       	ret

00001ad6 <_ZN7MPU605016setXGyroOffsetTCEa>:
    1ad6:	0f 93       	push	r16
    1ad8:	06 2f       	mov	r16, r22
    1ada:	26 e0       	ldi	r18, 0x06	; 6
    1adc:	46 e0       	ldi	r20, 0x06	; 6
    1ade:	60 e0       	ldi	r22, 0x00	; 0
    1ae0:	fc 01       	movw	r30, r24
    1ae2:	80 81       	ld	r24, Z
    1ae4:	0e 94 df 0b 	call	0x17be	; 0x17be <_ZN6I2Cdev9writeBitsEhhhhh>
    1ae8:	0f 91       	pop	r16
    1aea:	08 95       	ret

00001aec <_ZN7MPU605016getYGyroOffsetTCEv>:
    1aec:	ef 92       	push	r14
    1aee:	ff 92       	push	r15
    1af0:	0f 93       	push	r16
    1af2:	1f 93       	push	r17
    1af4:	cf 93       	push	r28
    1af6:	df 93       	push	r29
    1af8:	ec 01       	movw	r28, r24
    1afa:	e0 90 06 01 	lds	r14, 0x0106	; 0x800106 <_ZN6I2Cdev11readTimeoutE>
    1afe:	f0 90 07 01 	lds	r15, 0x0107	; 0x800107 <_ZN6I2Cdev11readTimeoutE+0x1>
    1b02:	8c 01       	movw	r16, r24
    1b04:	0f 5f       	subi	r16, 0xFF	; 255
    1b06:	1f 4f       	sbci	r17, 0xFF	; 255
    1b08:	26 e0       	ldi	r18, 0x06	; 6
    1b0a:	46 e0       	ldi	r20, 0x06	; 6
    1b0c:	61 e0       	ldi	r22, 0x01	; 1
    1b0e:	88 81       	ld	r24, Y
    1b10:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <_ZN6I2Cdev8readBitsEhhhhPhj>
    1b14:	89 81       	ldd	r24, Y+1	; 0x01
    1b16:	df 91       	pop	r29
    1b18:	cf 91       	pop	r28
    1b1a:	1f 91       	pop	r17
    1b1c:	0f 91       	pop	r16
    1b1e:	ff 90       	pop	r15
    1b20:	ef 90       	pop	r14
    1b22:	08 95       	ret

00001b24 <_ZN7MPU605016setYGyroOffsetTCEa>:
    1b24:	0f 93       	push	r16
    1b26:	06 2f       	mov	r16, r22
    1b28:	26 e0       	ldi	r18, 0x06	; 6
    1b2a:	46 e0       	ldi	r20, 0x06	; 6
    1b2c:	61 e0       	ldi	r22, 0x01	; 1
    1b2e:	fc 01       	movw	r30, r24
    1b30:	80 81       	ld	r24, Z
    1b32:	0e 94 df 0b 	call	0x17be	; 0x17be <_ZN6I2Cdev9writeBitsEhhhhh>
    1b36:	0f 91       	pop	r16
    1b38:	08 95       	ret

00001b3a <_ZN7MPU605016getZGyroOffsetTCEv>:
    1b3a:	ef 92       	push	r14
    1b3c:	ff 92       	push	r15
    1b3e:	0f 93       	push	r16
    1b40:	1f 93       	push	r17
    1b42:	cf 93       	push	r28
    1b44:	df 93       	push	r29
    1b46:	ec 01       	movw	r28, r24
    1b48:	e0 90 06 01 	lds	r14, 0x0106	; 0x800106 <_ZN6I2Cdev11readTimeoutE>
    1b4c:	f0 90 07 01 	lds	r15, 0x0107	; 0x800107 <_ZN6I2Cdev11readTimeoutE+0x1>
    1b50:	8c 01       	movw	r16, r24
    1b52:	0f 5f       	subi	r16, 0xFF	; 255
    1b54:	1f 4f       	sbci	r17, 0xFF	; 255
    1b56:	26 e0       	ldi	r18, 0x06	; 6
    1b58:	46 e0       	ldi	r20, 0x06	; 6
    1b5a:	62 e0       	ldi	r22, 0x02	; 2
    1b5c:	88 81       	ld	r24, Y
    1b5e:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <_ZN6I2Cdev8readBitsEhhhhPhj>
    1b62:	89 81       	ldd	r24, Y+1	; 0x01
    1b64:	df 91       	pop	r29
    1b66:	cf 91       	pop	r28
    1b68:	1f 91       	pop	r17
    1b6a:	0f 91       	pop	r16
    1b6c:	ff 90       	pop	r15
    1b6e:	ef 90       	pop	r14
    1b70:	08 95       	ret

00001b72 <_ZN7MPU605016setZGyroOffsetTCEa>:
    1b72:	0f 93       	push	r16
    1b74:	06 2f       	mov	r16, r22
    1b76:	26 e0       	ldi	r18, 0x06	; 6
    1b78:	46 e0       	ldi	r20, 0x06	; 6
    1b7a:	62 e0       	ldi	r22, 0x02	; 2
    1b7c:	fc 01       	movw	r30, r24
    1b7e:	80 81       	ld	r24, Z
    1b80:	0e 94 df 0b 	call	0x17be	; 0x17be <_ZN6I2Cdev9writeBitsEhhhhh>
    1b84:	0f 91       	pop	r16
    1b86:	08 95       	ret

00001b88 <_ZN7MPU605015setZAccelOffsetEi>:
    1b88:	ab 01       	movw	r20, r22
    1b8a:	6a e0       	ldi	r22, 0x0A	; 10
    1b8c:	fc 01       	movw	r30, r24
    1b8e:	80 81       	ld	r24, Z
    1b90:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <_ZN6I2Cdev9writeWordEhhj>

00001b94 <_ZN7MPU605014setXGyroOffsetEi>:
    1b94:	ab 01       	movw	r20, r22
    1b96:	63 e1       	ldi	r22, 0x13	; 19
    1b98:	fc 01       	movw	r30, r24
    1b9a:	80 81       	ld	r24, Z
    1b9c:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <_ZN6I2Cdev9writeWordEhhj>

00001ba0 <_ZN7MPU605014setYGyroOffsetEi>:
    1ba0:	ab 01       	movw	r20, r22
    1ba2:	65 e1       	ldi	r22, 0x15	; 21
    1ba4:	fc 01       	movw	r30, r24
    1ba6:	80 81       	ld	r24, Z
    1ba8:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <_ZN6I2Cdev9writeWordEhhj>

00001bac <_ZN7MPU605014setZGyroOffsetEi>:
    1bac:	ab 01       	movw	r20, r22
    1bae:	67 e1       	ldi	r22, 0x17	; 23
    1bb0:	fc 01       	movw	r30, r24
    1bb2:	80 81       	ld	r24, Z
    1bb4:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <_ZN6I2Cdev9writeWordEhhj>

00001bb8 <_ZN7MPU605013setDMPEnabledEb>:
    1bb8:	26 2f       	mov	r18, r22
    1bba:	47 e0       	ldi	r20, 0x07	; 7
    1bbc:	6a e6       	ldi	r22, 0x6A	; 106
    1bbe:	fc 01       	movw	r30, r24
    1bc0:	80 81       	ld	r24, Z
    1bc2:	0c 94 af 0b 	jmp	0x175e	; 0x175e <_ZN6I2Cdev8writeBitEhhhh>

00001bc6 <_ZN7MPU60508resetDMPEv>:
    1bc6:	21 e0       	ldi	r18, 0x01	; 1
    1bc8:	43 e0       	ldi	r20, 0x03	; 3
    1bca:	6a e6       	ldi	r22, 0x6A	; 106
    1bcc:	fc 01       	movw	r30, r24
    1bce:	80 81       	ld	r24, Z
    1bd0:	0c 94 af 0b 	jmp	0x175e	; 0x175e <_ZN6I2Cdev8writeBitEhhhh>

00001bd4 <_ZN7MPU605013setMemoryBankEhbb>:
    1bd4:	6f 71       	andi	r22, 0x1F	; 31
    1bd6:	21 11       	cpse	r18, r1
    1bd8:	60 62       	ori	r22, 0x20	; 32
    1bda:	41 11       	cpse	r20, r1
    1bdc:	60 64       	ori	r22, 0x40	; 64
    1bde:	46 2f       	mov	r20, r22
    1be0:	6d e6       	ldi	r22, 0x6D	; 109
    1be2:	fc 01       	movw	r30, r24
    1be4:	80 81       	ld	r24, Z
    1be6:	0c 94 2e 0a 	jmp	0x145c	; 0x145c <_ZN6I2Cdev9writeByteEhhh>

00001bea <_ZN7MPU605021setMemoryStartAddressEh>:
    1bea:	46 2f       	mov	r20, r22
    1bec:	6e e6       	ldi	r22, 0x6E	; 110
    1bee:	fc 01       	movw	r30, r24
    1bf0:	80 81       	ld	r24, Z
    1bf2:	0c 94 2e 0a 	jmp	0x145c	; 0x145c <_ZN6I2Cdev9writeByteEhhh>

00001bf6 <_ZN7MPU605014readMemoryByteEv>:
    1bf6:	cf 93       	push	r28
    1bf8:	df 93       	push	r29
    1bfa:	ec 01       	movw	r28, r24
    1bfc:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <_ZN6I2Cdev11readTimeoutE>
    1c00:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <_ZN6I2Cdev11readTimeoutE+0x1>
    1c04:	ac 01       	movw	r20, r24
    1c06:	4f 5f       	subi	r20, 0xFF	; 255
    1c08:	5f 4f       	sbci	r21, 0xFF	; 255
    1c0a:	6f e6       	ldi	r22, 0x6F	; 111
    1c0c:	88 81       	ld	r24, Y
    1c0e:	0e 94 43 0b 	call	0x1686	; 0x1686 <_ZN6I2Cdev8readByteEhhPhj>
    1c12:	89 81       	ldd	r24, Y+1	; 0x01
    1c14:	df 91       	pop	r29
    1c16:	cf 91       	pop	r28
    1c18:	08 95       	ret

00001c1a <_ZN7MPU605015readMemoryBlockEPhjhh>:
    1c1a:	5f 92       	push	r5
    1c1c:	6f 92       	push	r6
    1c1e:	7f 92       	push	r7
    1c20:	8f 92       	push	r8
    1c22:	9f 92       	push	r9
    1c24:	af 92       	push	r10
    1c26:	bf 92       	push	r11
    1c28:	cf 92       	push	r12
    1c2a:	df 92       	push	r13
    1c2c:	ef 92       	push	r14
    1c2e:	ff 92       	push	r15
    1c30:	0f 93       	push	r16
    1c32:	1f 93       	push	r17
    1c34:	cf 93       	push	r28
    1c36:	df 93       	push	r29
    1c38:	7c 01       	movw	r14, r24
    1c3a:	5b 01       	movw	r10, r22
    1c3c:	6a 01       	movw	r12, r20
    1c3e:	52 2e       	mov	r5, r18
    1c40:	c0 2f       	mov	r28, r16
    1c42:	20 e0       	ldi	r18, 0x00	; 0
    1c44:	40 e0       	ldi	r20, 0x00	; 0
    1c46:	65 2d       	mov	r22, r5
    1c48:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <_ZN7MPU605013setMemoryBankEhbb>
    1c4c:	60 2f       	mov	r22, r16
    1c4e:	c7 01       	movw	r24, r14
    1c50:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <_ZN7MPU605021setMemoryStartAddressEh>
    1c54:	61 2c       	mov	r6, r1
    1c56:	71 2c       	mov	r7, r1
    1c58:	81 2c       	mov	r8, r1
    1c5a:	99 24       	eor	r9, r9
    1c5c:	93 94       	inc	r9
    1c5e:	6c 14       	cp	r6, r12
    1c60:	7d 04       	cpc	r7, r13
    1c62:	a0 f5       	brcc	.+104    	; 0x1ccc <_ZN7MPU605015readMemoryBlockEPhjhh+0xb2>
    1c64:	c3 01       	movw	r24, r6
    1c66:	40 96       	adiw	r24, 0x10	; 16
    1c68:	c8 16       	cp	r12, r24
    1c6a:	d9 06       	cpc	r13, r25
    1c6c:	18 f4       	brcc	.+6      	; 0x1c74 <_ZN7MPU605015readMemoryBlockEPhjhh+0x5a>
    1c6e:	dc 2d       	mov	r29, r12
    1c70:	d6 19       	sub	r29, r6
    1c72:	01 c0       	rjmp	.+2      	; 0x1c76 <_ZN7MPU605015readMemoryBlockEPhjhh+0x5c>
    1c74:	d0 e1       	ldi	r29, 0x10	; 16
    1c76:	8d 2f       	mov	r24, r29
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	94 01       	movw	r18, r8
    1c7c:	2c 1b       	sub	r18, r28
    1c7e:	31 09       	sbc	r19, r1
    1c80:	28 17       	cp	r18, r24
    1c82:	39 07       	cpc	r19, r25
    1c84:	14 f4       	brge	.+4      	; 0x1c8a <_ZN7MPU605015readMemoryBlockEPhjhh+0x70>
    1c86:	dc 2f       	mov	r29, r28
    1c88:	d1 95       	neg	r29
    1c8a:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <_ZN6I2Cdev11readTimeoutE>
    1c8e:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <_ZN6I2Cdev11readTimeoutE+0x1>
    1c92:	95 01       	movw	r18, r10
    1c94:	26 0d       	add	r18, r6
    1c96:	37 1d       	adc	r19, r7
    1c98:	4d 2f       	mov	r20, r29
    1c9a:	6f e6       	ldi	r22, 0x6F	; 111
    1c9c:	f7 01       	movw	r30, r14
    1c9e:	80 81       	ld	r24, Z
    1ca0:	0e 94 8e 0a 	call	0x151c	; 0x151c <_ZN6I2Cdev9readBytesEhhhPhj>
    1ca4:	6d 0e       	add	r6, r29
    1ca6:	71 1c       	adc	r7, r1
    1ca8:	cd 0f       	add	r28, r29
    1caa:	6c 14       	cp	r6, r12
    1cac:	7d 04       	cpc	r7, r13
    1cae:	b8 f6       	brcc	.-82     	; 0x1c5e <_ZN7MPU605015readMemoryBlockEPhjhh+0x44>
    1cb0:	c1 11       	cpse	r28, r1
    1cb2:	01 c0       	rjmp	.+2      	; 0x1cb6 <_ZN7MPU605015readMemoryBlockEPhjhh+0x9c>
    1cb4:	53 94       	inc	r5
    1cb6:	20 e0       	ldi	r18, 0x00	; 0
    1cb8:	40 e0       	ldi	r20, 0x00	; 0
    1cba:	65 2d       	mov	r22, r5
    1cbc:	c7 01       	movw	r24, r14
    1cbe:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <_ZN7MPU605013setMemoryBankEhbb>
    1cc2:	6c 2f       	mov	r22, r28
    1cc4:	c7 01       	movw	r24, r14
    1cc6:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <_ZN7MPU605021setMemoryStartAddressEh>
    1cca:	c9 cf       	rjmp	.-110    	; 0x1c5e <_ZN7MPU605015readMemoryBlockEPhjhh+0x44>
    1ccc:	df 91       	pop	r29
    1cce:	cf 91       	pop	r28
    1cd0:	1f 91       	pop	r17
    1cd2:	0f 91       	pop	r16
    1cd4:	ff 90       	pop	r15
    1cd6:	ef 90       	pop	r14
    1cd8:	df 90       	pop	r13
    1cda:	cf 90       	pop	r12
    1cdc:	bf 90       	pop	r11
    1cde:	af 90       	pop	r10
    1ce0:	9f 90       	pop	r9
    1ce2:	8f 90       	pop	r8
    1ce4:	7f 90       	pop	r7
    1ce6:	6f 90       	pop	r6
    1ce8:	5f 90       	pop	r5
    1cea:	08 95       	ret

00001cec <_ZN7MPU605016writeMemoryBlockEPKhjhhbb>:
    1cec:	2f 92       	push	r2
    1cee:	3f 92       	push	r3
    1cf0:	4f 92       	push	r4
    1cf2:	5f 92       	push	r5
    1cf4:	6f 92       	push	r6
    1cf6:	7f 92       	push	r7
    1cf8:	8f 92       	push	r8
    1cfa:	9f 92       	push	r9
    1cfc:	af 92       	push	r10
    1cfe:	bf 92       	push	r11
    1d00:	cf 92       	push	r12
    1d02:	df 92       	push	r13
    1d04:	ef 92       	push	r14
    1d06:	ff 92       	push	r15
    1d08:	0f 93       	push	r16
    1d0a:	1f 93       	push	r17
    1d0c:	cf 93       	push	r28
    1d0e:	df 93       	push	r29
    1d10:	00 d0       	rcall	.+0      	; 0x1d12 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x26>
    1d12:	00 d0       	rcall	.+0      	; 0x1d14 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x28>
    1d14:	1f 92       	push	r1
    1d16:	cd b7       	in	r28, 0x3d	; 61
    1d18:	de b7       	in	r29, 0x3e	; 62
    1d1a:	9d 83       	std	Y+5, r25	; 0x05
    1d1c:	8c 83       	std	Y+4, r24	; 0x04
    1d1e:	1b 01       	movw	r2, r22
    1d20:	3a 01       	movw	r6, r20
    1d22:	d2 2e       	mov	r13, r18
    1d24:	50 2e       	mov	r5, r16
    1d26:	e9 82       	std	Y+1, r14	; 0x01
    1d28:	20 e0       	ldi	r18, 0x00	; 0
    1d2a:	40 e0       	ldi	r20, 0x00	; 0
    1d2c:	6d 2d       	mov	r22, r13
    1d2e:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <_ZN7MPU605013setMemoryBankEhbb>
    1d32:	60 2f       	mov	r22, r16
    1d34:	8c 81       	ldd	r24, Y+4	; 0x04
    1d36:	9d 81       	ldd	r25, Y+5	; 0x05
    1d38:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <_ZN7MPU605021setMemoryStartAddressEh>
    1d3c:	e9 80       	ldd	r14, Y+1	; 0x01
    1d3e:	ee 20       	and	r14, r14
    1d40:	29 f0       	breq	.+10     	; 0x1d4c <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x60>
    1d42:	80 e1       	ldi	r24, 0x10	; 16
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	0e 94 a6 25 	call	0x4b4c	; 0x4b4c <malloc>
    1d4a:	4c 01       	movw	r8, r24
    1d4c:	cc 20       	and	r12, r12
    1d4e:	29 f0       	breq	.+10     	; 0x1d5a <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x6e>
    1d50:	80 e1       	ldi	r24, 0x10	; 16
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	0e 94 a6 25 	call	0x4b4c	; 0x4b4c <malloc>
    1d58:	5c 01       	movw	r10, r24
    1d5a:	e1 2c       	mov	r14, r1
    1d5c:	f1 2c       	mov	r15, r1
    1d5e:	e6 14       	cp	r14, r6
    1d60:	f7 04       	cpc	r15, r7
    1d62:	08 f0       	brcs	.+2      	; 0x1d66 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x7a>
    1d64:	7c c0       	rjmp	.+248    	; 0x1e5e <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x172>
    1d66:	c7 01       	movw	r24, r14
    1d68:	40 96       	adiw	r24, 0x10	; 16
    1d6a:	68 16       	cp	r6, r24
    1d6c:	79 06       	cpc	r7, r25
    1d6e:	18 f4       	brcc	.+6      	; 0x1d76 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x8a>
    1d70:	46 2c       	mov	r4, r6
    1d72:	4e 18       	sub	r4, r14
    1d74:	02 c0       	rjmp	.+4      	; 0x1d7a <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x8e>
    1d76:	80 e1       	ldi	r24, 0x10	; 16
    1d78:	48 2e       	mov	r4, r24
    1d7a:	84 2d       	mov	r24, r4
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	20 e0       	ldi	r18, 0x00	; 0
    1d80:	31 e0       	ldi	r19, 0x01	; 1
    1d82:	25 19       	sub	r18, r5
    1d84:	31 09       	sbc	r19, r1
    1d86:	28 17       	cp	r18, r24
    1d88:	39 07       	cpc	r19, r25
    1d8a:	14 f4       	brge	.+4      	; 0x1d90 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0xa4>
    1d8c:	45 2c       	mov	r4, r5
    1d8e:	41 94       	neg	r4
    1d90:	cc 20       	and	r12, r12
    1d92:	71 f0       	breq	.+28     	; 0x1db0 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0xc4>
    1d94:	d5 01       	movw	r26, r10
    1d96:	80 e0       	ldi	r24, 0x00	; 0
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	84 15       	cp	r24, r4
    1d9c:	60 f4       	brcc	.+24     	; 0x1db6 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0xca>
    1d9e:	f7 01       	movw	r30, r14
    1da0:	e8 0f       	add	r30, r24
    1da2:	f9 1f       	adc	r31, r25
    1da4:	e2 0d       	add	r30, r2
    1da6:	f3 1d       	adc	r31, r3
    1da8:	e4 91       	lpm	r30, Z
    1daa:	ed 93       	st	X+, r30
    1dac:	01 96       	adiw	r24, 0x01	; 1
    1dae:	f5 cf       	rjmp	.-22     	; 0x1d9a <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0xae>
    1db0:	51 01       	movw	r10, r2
    1db2:	ae 0c       	add	r10, r14
    1db4:	bf 1c       	adc	r11, r15
    1db6:	95 01       	movw	r18, r10
    1db8:	44 2d       	mov	r20, r4
    1dba:	6f e6       	ldi	r22, 0x6F	; 111
    1dbc:	ec 81       	ldd	r30, Y+4	; 0x04
    1dbe:	fd 81       	ldd	r31, Y+5	; 0x05
    1dc0:	80 81       	ld	r24, Z
    1dc2:	0e 94 fe 09 	call	0x13fc	; 0x13fc <_ZN6I2Cdev10writeBytesEhhhPh>
    1dc6:	84 2d       	mov	r24, r4
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	9b 83       	std	Y+3, r25	; 0x03
    1dcc:	8a 83       	std	Y+2, r24	; 0x02
    1dce:	99 81       	ldd	r25, Y+1	; 0x01
    1dd0:	99 23       	and	r25, r25
    1dd2:	61 f1       	breq	.+88     	; 0x1e2c <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x140>
    1dd4:	81 14       	cp	r8, r1
    1dd6:	91 04       	cpc	r9, r1
    1dd8:	49 f1       	breq	.+82     	; 0x1e2c <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x140>
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	40 e0       	ldi	r20, 0x00	; 0
    1dde:	6d 2d       	mov	r22, r13
    1de0:	8c 81       	ldd	r24, Y+4	; 0x04
    1de2:	9d 81       	ldd	r25, Y+5	; 0x05
    1de4:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <_ZN7MPU605013setMemoryBankEhbb>
    1de8:	65 2d       	mov	r22, r5
    1dea:	8c 81       	ldd	r24, Y+4	; 0x04
    1dec:	9d 81       	ldd	r25, Y+5	; 0x05
    1dee:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <_ZN7MPU605021setMemoryStartAddressEh>
    1df2:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <_ZN6I2Cdev11readTimeoutE>
    1df6:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <_ZN6I2Cdev11readTimeoutE+0x1>
    1dfa:	94 01       	movw	r18, r8
    1dfc:	44 2d       	mov	r20, r4
    1dfe:	6f e6       	ldi	r22, 0x6F	; 111
    1e00:	ec 81       	ldd	r30, Y+4	; 0x04
    1e02:	fd 81       	ldd	r31, Y+5	; 0x05
    1e04:	80 81       	ld	r24, Z
    1e06:	0e 94 8e 0a 	call	0x151c	; 0x151c <_ZN6I2Cdev9readBytesEhhhPhj>
    1e0a:	4a 81       	ldd	r20, Y+2	; 0x02
    1e0c:	5b 81       	ldd	r21, Y+3	; 0x03
    1e0e:	b4 01       	movw	r22, r8
    1e10:	c5 01       	movw	r24, r10
    1e12:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <memcmp>
    1e16:	89 2b       	or	r24, r25
    1e18:	49 f0       	breq	.+18     	; 0x1e2c <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x140>
    1e1a:	c4 01       	movw	r24, r8
    1e1c:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <free>
    1e20:	cc 20       	and	r12, r12
    1e22:	49 f1       	breq	.+82     	; 0x1e76 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x18a>
    1e24:	c5 01       	movw	r24, r10
    1e26:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <free>
    1e2a:	25 c0       	rjmp	.+74     	; 0x1e76 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x18a>
    1e2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e30:	e8 0e       	add	r14, r24
    1e32:	f9 1e       	adc	r15, r25
    1e34:	54 0c       	add	r5, r4
    1e36:	e6 14       	cp	r14, r6
    1e38:	f7 04       	cpc	r15, r7
    1e3a:	08 f0       	brcs	.+2      	; 0x1e3e <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x152>
    1e3c:	90 cf       	rjmp	.-224    	; 0x1d5e <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x72>
    1e3e:	51 10       	cpse	r5, r1
    1e40:	01 c0       	rjmp	.+2      	; 0x1e44 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x158>
    1e42:	d3 94       	inc	r13
    1e44:	20 e0       	ldi	r18, 0x00	; 0
    1e46:	40 e0       	ldi	r20, 0x00	; 0
    1e48:	6d 2d       	mov	r22, r13
    1e4a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e4c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e4e:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <_ZN7MPU605013setMemoryBankEhbb>
    1e52:	65 2d       	mov	r22, r5
    1e54:	8c 81       	ldd	r24, Y+4	; 0x04
    1e56:	9d 81       	ldd	r25, Y+5	; 0x05
    1e58:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <_ZN7MPU605021setMemoryStartAddressEh>
    1e5c:	80 cf       	rjmp	.-256    	; 0x1d5e <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x72>
    1e5e:	99 81       	ldd	r25, Y+1	; 0x01
    1e60:	99 23       	and	r25, r25
    1e62:	19 f0       	breq	.+6      	; 0x1e6a <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x17e>
    1e64:	c4 01       	movw	r24, r8
    1e66:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <free>
    1e6a:	cc 20       	and	r12, r12
    1e6c:	31 f0       	breq	.+12     	; 0x1e7a <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x18e>
    1e6e:	c5 01       	movw	r24, r10
    1e70:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <free>
    1e74:	02 c0       	rjmp	.+4      	; 0x1e7a <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x18e>
    1e76:	80 e0       	ldi	r24, 0x00	; 0
    1e78:	01 c0       	rjmp	.+2      	; 0x1e7c <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x190>
    1e7a:	81 e0       	ldi	r24, 0x01	; 1
    1e7c:	0f 90       	pop	r0
    1e7e:	0f 90       	pop	r0
    1e80:	0f 90       	pop	r0
    1e82:	0f 90       	pop	r0
    1e84:	0f 90       	pop	r0
    1e86:	df 91       	pop	r29
    1e88:	cf 91       	pop	r28
    1e8a:	1f 91       	pop	r17
    1e8c:	0f 91       	pop	r16
    1e8e:	ff 90       	pop	r15
    1e90:	ef 90       	pop	r14
    1e92:	df 90       	pop	r13
    1e94:	cf 90       	pop	r12
    1e96:	bf 90       	pop	r11
    1e98:	af 90       	pop	r10
    1e9a:	9f 90       	pop	r9
    1e9c:	8f 90       	pop	r8
    1e9e:	7f 90       	pop	r7
    1ea0:	6f 90       	pop	r6
    1ea2:	5f 90       	pop	r5
    1ea4:	4f 90       	pop	r4
    1ea6:	3f 90       	pop	r3
    1ea8:	2f 90       	pop	r2
    1eaa:	08 95       	ret

00001eac <_ZN7MPU605020writeProgMemoryBlockEPKhjhhb>:
    1eac:	cf 92       	push	r12
    1eae:	ef 92       	push	r14
    1eb0:	0f 93       	push	r16
    1eb2:	cc 24       	eor	r12, r12
    1eb4:	c3 94       	inc	r12
    1eb6:	0e 94 76 0e 	call	0x1cec	; 0x1cec <_ZN7MPU605016writeMemoryBlockEPKhjhhbb>
    1eba:	0f 91       	pop	r16
    1ebc:	ef 90       	pop	r14
    1ebe:	cf 90       	pop	r12
    1ec0:	08 95       	ret

00001ec2 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb>:
    1ec2:	3f 92       	push	r3
    1ec4:	4f 92       	push	r4
    1ec6:	5f 92       	push	r5
    1ec8:	6f 92       	push	r6
    1eca:	7f 92       	push	r7
    1ecc:	8f 92       	push	r8
    1ece:	9f 92       	push	r9
    1ed0:	af 92       	push	r10
    1ed2:	bf 92       	push	r11
    1ed4:	cf 92       	push	r12
    1ed6:	df 92       	push	r13
    1ed8:	ef 92       	push	r14
    1eda:	ff 92       	push	r15
    1edc:	0f 93       	push	r16
    1ede:	1f 93       	push	r17
    1ee0:	cf 93       	push	r28
    1ee2:	df 93       	push	r29
    1ee4:	3c 01       	movw	r6, r24
    1ee6:	4b 01       	movw	r8, r22
    1ee8:	2a 01       	movw	r4, r20
    1eea:	d2 2e       	mov	r13, r18
    1eec:	22 23       	and	r18, r18
    1eee:	31 f0       	breq	.+12     	; 0x1efc <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x3a>
    1ef0:	88 e0       	ldi	r24, 0x08	; 8
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	0e 94 a6 25 	call	0x4b4c	; 0x4b4c <malloc>
    1ef8:	18 2f       	mov	r17, r24
    1efa:	f9 2e       	mov	r15, r25
    1efc:	c0 e0       	ldi	r28, 0x00	; 0
    1efe:	d0 e0       	ldi	r29, 0x00	; 0
    1f00:	c4 15       	cp	r28, r4
    1f02:	d5 05       	cpc	r29, r5
    1f04:	08 f0       	brcs	.+2      	; 0x1f08 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x46>
    1f06:	55 c0       	rjmp	.+170    	; 0x1fb2 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0xf0>
    1f08:	f4 01       	movw	r30, r8
    1f0a:	ec 0f       	add	r30, r28
    1f0c:	fd 1f       	adc	r31, r29
    1f0e:	ce 01       	movw	r24, r28
    1f10:	03 96       	adiw	r24, 0x03	; 3
    1f12:	5c 01       	movw	r10, r24
    1f14:	dd 20       	and	r13, r13
    1f16:	71 f0       	breq	.+28     	; 0x1f34 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x72>
    1f18:	34 90       	lpm	r3, Z
    1f1a:	fe 01       	movw	r30, r28
    1f1c:	31 96       	adiw	r30, 0x01	; 1
    1f1e:	e8 0d       	add	r30, r8
    1f20:	f9 1d       	adc	r31, r9
    1f22:	04 91       	lpm	r16, Z
    1f24:	fe 01       	movw	r30, r28
    1f26:	32 96       	adiw	r30, 0x02	; 2
    1f28:	e8 0d       	add	r30, r8
    1f2a:	f9 1d       	adc	r31, r9
    1f2c:	e4 90       	lpm	r14, Z
    1f2e:	e1 10       	cpse	r14, r1
    1f30:	0d c0       	rjmp	.+26     	; 0x1f4c <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x8a>
    1f32:	4a c0       	rjmp	.+148    	; 0x1fc8 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x106>
    1f34:	e2 80       	ldd	r14, Z+2	; 0x02
    1f36:	d4 01       	movw	r26, r8
    1f38:	a8 0f       	add	r26, r24
    1f3a:	b9 1f       	adc	r27, r25
    1f3c:	ee 20       	and	r14, r14
    1f3e:	09 f4       	brne	.+2      	; 0x1f42 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x80>
    1f40:	51 c0       	rjmp	.+162    	; 0x1fe4 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x122>
    1f42:	30 80       	ld	r3, Z
    1f44:	01 81       	ldd	r16, Z+1	; 0x01
    1f46:	1a 2f       	mov	r17, r26
    1f48:	fb 2e       	mov	r15, r27
    1f4a:	1c c0       	rjmp	.+56     	; 0x1f84 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0xc2>
    1f4c:	ce 2d       	mov	r28, r14
    1f4e:	d0 e0       	ldi	r29, 0x00	; 0
    1f50:	92 e0       	ldi	r25, 0x02	; 2
    1f52:	9e 15       	cp	r25, r14
    1f54:	38 f4       	brcc	.+14     	; 0x1f64 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0xa2>
    1f56:	be 01       	movw	r22, r28
    1f58:	81 2f       	mov	r24, r17
    1f5a:	9f 2d       	mov	r25, r15
    1f5c:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <realloc>
    1f60:	18 2f       	mov	r17, r24
    1f62:	f9 2e       	mov	r15, r25
    1f64:	a1 2f       	mov	r26, r17
    1f66:	bf 2d       	mov	r27, r15
    1f68:	80 e0       	ldi	r24, 0x00	; 0
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	8c 17       	cp	r24, r28
    1f6e:	9d 07       	cpc	r25, r29
    1f70:	48 f4       	brcc	.+18     	; 0x1f84 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0xc2>
    1f72:	fc 01       	movw	r30, r24
    1f74:	ea 0d       	add	r30, r10
    1f76:	fb 1d       	adc	r31, r11
    1f78:	e8 0d       	add	r30, r8
    1f7a:	f9 1d       	adc	r31, r9
    1f7c:	e4 91       	lpm	r30, Z
    1f7e:	ed 93       	st	X+, r30
    1f80:	01 96       	adiw	r24, 0x01	; 1
    1f82:	f4 cf       	rjmp	.-24     	; 0x1f6c <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0xaa>
    1f84:	ce 2d       	mov	r28, r14
    1f86:	d0 e0       	ldi	r29, 0x00	; 0
    1f88:	c1 2c       	mov	r12, r1
    1f8a:	ee 24       	eor	r14, r14
    1f8c:	e3 94       	inc	r14
    1f8e:	23 2d       	mov	r18, r3
    1f90:	ae 01       	movw	r20, r28
    1f92:	61 2f       	mov	r22, r17
    1f94:	7f 2d       	mov	r23, r15
    1f96:	c3 01       	movw	r24, r6
    1f98:	0e 94 76 0e 	call	0x1cec	; 0x1cec <_ZN7MPU605016writeMemoryBlockEPKhjhhbb>
    1f9c:	ca 0d       	add	r28, r10
    1f9e:	db 1d       	adc	r29, r11
    1fa0:	81 11       	cpse	r24, r1
    1fa2:	ae cf       	rjmp	.-164    	; 0x1f00 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x3e>
    1fa4:	dd 20       	and	r13, r13
    1fa6:	61 f0       	breq	.+24     	; 0x1fc0 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0xfe>
    1fa8:	81 2f       	mov	r24, r17
    1faa:	9f 2d       	mov	r25, r15
    1fac:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <free>
    1fb0:	07 c0       	rjmp	.+14     	; 0x1fc0 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0xfe>
    1fb2:	dd 20       	and	r13, r13
    1fb4:	39 f0       	breq	.+14     	; 0x1fc4 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x102>
    1fb6:	81 2f       	mov	r24, r17
    1fb8:	9f 2d       	mov	r25, r15
    1fba:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <free>
    1fbe:	02 c0       	rjmp	.+4      	; 0x1fc4 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x102>
    1fc0:	80 e0       	ldi	r24, 0x00	; 0
    1fc2:	13 c0       	rjmp	.+38     	; 0x1fea <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x128>
    1fc4:	81 e0       	ldi	r24, 0x01	; 1
    1fc6:	11 c0       	rjmp	.+34     	; 0x1fea <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x128>
    1fc8:	24 96       	adiw	r28, 0x04	; 4
    1fca:	f4 01       	movw	r30, r8
    1fcc:	e8 0f       	add	r30, r24
    1fce:	f9 1f       	adc	r31, r25
    1fd0:	e4 91       	lpm	r30, Z
    1fd2:	e1 30       	cpi	r30, 0x01	; 1
    1fd4:	39 f7       	brne	.-50     	; 0x1fa4 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0xe2>
    1fd6:	42 e3       	ldi	r20, 0x32	; 50
    1fd8:	68 e3       	ldi	r22, 0x38	; 56
    1fda:	f3 01       	movw	r30, r6
    1fdc:	80 81       	ld	r24, Z
    1fde:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN6I2Cdev9writeByteEhhh>
    1fe2:	8e cf       	rjmp	.-228    	; 0x1f00 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x3e>
    1fe4:	24 96       	adiw	r28, 0x04	; 4
    1fe6:	ec 91       	ld	r30, X
    1fe8:	f4 cf       	rjmp	.-24     	; 0x1fd2 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x110>
    1fea:	df 91       	pop	r29
    1fec:	cf 91       	pop	r28
    1fee:	1f 91       	pop	r17
    1ff0:	0f 91       	pop	r16
    1ff2:	ff 90       	pop	r15
    1ff4:	ef 90       	pop	r14
    1ff6:	df 90       	pop	r13
    1ff8:	cf 90       	pop	r12
    1ffa:	bf 90       	pop	r11
    1ffc:	af 90       	pop	r10
    1ffe:	9f 90       	pop	r9
    2000:	8f 90       	pop	r8
    2002:	7f 90       	pop	r7
    2004:	6f 90       	pop	r6
    2006:	5f 90       	pop	r5
    2008:	4f 90       	pop	r4
    200a:	3f 90       	pop	r3
    200c:	08 95       	ret

0000200e <_ZN7MPU605028writeProgDMPConfigurationSetEPKhj>:
    200e:	21 e0       	ldi	r18, 0x01	; 1
    2010:	0c 94 61 0f 	jmp	0x1ec2	; 0x1ec2 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb>

00002014 <_ZN7MPU605013setDMPConfig1Eh>:
    2014:	46 2f       	mov	r20, r22
    2016:	60 e7       	ldi	r22, 0x70	; 112
    2018:	fc 01       	movw	r30, r24
    201a:	80 81       	ld	r24, Z
    201c:	0c 94 2e 0a 	jmp	0x145c	; 0x145c <_ZN6I2Cdev9writeByteEhhh>

00002020 <_ZN7MPU605013setDMPConfig2Eh>:
void MPU6050::setDMPConfig2(uint8_t config) {
    2020:	46 2f       	mov	r20, r22
    I2Cdev::writeByte(devAddr, MPU6050_RA_DMP_CFG_2, config);
    2022:	61 e7       	ldi	r22, 0x71	; 113
    2024:	fc 01       	movw	r30, r24
    2026:	80 81       	ld	r24, Z
    2028:	0c 94 2e 0a 	jmp	0x145c	; 0x145c <_ZN6I2Cdev9writeByteEhhh>

0000202c <_Z12dmpDataReadyv>:
// uint32_t MPU6050::dmpGetGyroSumOfSquare();
// uint32_t MPU6050::dmpGetAccelSumOfSquare();
// void MPU6050::dmpOverrideQuaternion(long *q);
uint16_t MPU6050::dmpGetFIFOPacketSize() {
    return dmpPacketSize;
}
    202c:	81 e0       	ldi	r24, 0x01	; 1
    202e:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__data_end>
    2032:	08 95       	ret

00002034 <_ZN7MPU605013dmpInitializeEv>:
    2034:	8f 92       	push	r8
    2036:	9f 92       	push	r9
    2038:	af 92       	push	r10
    203a:	bf 92       	push	r11
    203c:	cf 92       	push	r12
    203e:	ef 92       	push	r14
    2040:	0f 93       	push	r16
    2042:	1f 93       	push	r17
    2044:	cf 93       	push	r28
    2046:	df 93       	push	r29
    2048:	cd b7       	in	r28, 0x3d	; 61
    204a:	de b7       	in	r29, 0x3e	; 62
    204c:	c0 59       	subi	r28, 0x90	; 144
    204e:	d1 09       	sbc	r29, r1
    2050:	0f b6       	in	r0, 0x3f	; 63
    2052:	f8 94       	cli
    2054:	de bf       	out	0x3e, r29	; 62
    2056:	0f be       	out	0x3f, r0	; 63
    2058:	cd bf       	out	0x3d, r28	; 61
    205a:	5c 01       	movw	r10, r24
    205c:	62 ec       	ldi	r22, 0xC2	; 194
    205e:	7a e0       	ldi	r23, 0x0A	; 10
    2060:	88 e9       	ldi	r24, 0x98	; 152
    2062:	92 e0       	ldi	r25, 0x02	; 2
    2064:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2068:	c5 01       	movw	r24, r10
    206a:	0e 94 b6 0c 	call	0x196c	; 0x196c <_ZN7MPU60505resetEv>
    206e:	6e e1       	ldi	r22, 0x1E	; 30
    2070:	70 e0       	ldi	r23, 0x00	; 0
    2072:	80 e0       	ldi	r24, 0x00	; 0
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	0e 94 53 24 	call	0x48a6	; 0x48a6 <delay>
    207a:	6a ea       	ldi	r22, 0xAA	; 170
    207c:	7a e0       	ldi	r23, 0x0A	; 10
    207e:	88 e9       	ldi	r24, 0x98	; 152
    2080:	92 e0       	ldi	r25, 0x02	; 2
    2082:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2086:	60 e0       	ldi	r22, 0x00	; 0
    2088:	c5 01       	movw	r24, r10
    208a:	0e 94 bd 0c 	call	0x197a	; 0x197a <_ZN7MPU605015setSleepEnabledEb>
    208e:	60 e9       	ldi	r22, 0x90	; 144
    2090:	7a e0       	ldi	r23, 0x0A	; 10
    2092:	88 e9       	ldi	r24, 0x98	; 152
    2094:	92 e0       	ldi	r25, 0x02	; 2
    2096:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    209a:	21 e0       	ldi	r18, 0x01	; 1
    209c:	41 e0       	ldi	r20, 0x01	; 1
    209e:	60 e1       	ldi	r22, 0x10	; 16
    20a0:	c5 01       	movw	r24, r10
    20a2:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <_ZN7MPU605013setMemoryBankEhbb>
    20a6:	65 e7       	ldi	r22, 0x75	; 117
    20a8:	7a e0       	ldi	r23, 0x0A	; 10
    20aa:	88 e9       	ldi	r24, 0x98	; 152
    20ac:	92 e0       	ldi	r25, 0x02	; 2
    20ae:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    20b2:	66 e0       	ldi	r22, 0x06	; 6
    20b4:	c5 01       	movw	r24, r10
    20b6:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <_ZN7MPU605021setMemoryStartAddressEh>
    20ba:	67 e5       	ldi	r22, 0x57	; 87
    20bc:	7a e0       	ldi	r23, 0x0A	; 10
    20be:	88 e9       	ldi	r24, 0x98	; 152
    20c0:	92 e0       	ldi	r25, 0x02	; 2
    20c2:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    20c6:	c5 01       	movw	r24, r10
    20c8:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <_ZN7MPU605014readMemoryByteEv>
    20cc:	18 2f       	mov	r17, r24
    20ce:	6d e3       	ldi	r22, 0x3D	; 61
    20d0:	7a e0       	ldi	r23, 0x0A	; 10
    20d2:	88 e9       	ldi	r24, 0x98	; 152
    20d4:	92 e0       	ldi	r25, 0x02	; 2
    20d6:	0e 94 40 21 	call	0x4280	; 0x4280 <_ZN5Print5printEPK19__FlashStringHelper>
    20da:	40 e1       	ldi	r20, 0x10	; 16
    20dc:	50 e0       	ldi	r21, 0x00	; 0
    20de:	61 2f       	mov	r22, r17
    20e0:	88 e9       	ldi	r24, 0x98	; 152
    20e2:	92 e0       	ldi	r25, 0x02	; 2
    20e4:	0e 94 ed 21 	call	0x43da	; 0x43da <_ZN5Print7printlnEhi>
    20e8:	65 e1       	ldi	r22, 0x15	; 21
    20ea:	7a e0       	ldi	r23, 0x0A	; 10
    20ec:	88 e9       	ldi	r24, 0x98	; 152
    20ee:	92 e0       	ldi	r25, 0x02	; 2
    20f0:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	40 e0       	ldi	r20, 0x00	; 0
    20f8:	60 e0       	ldi	r22, 0x00	; 0
    20fa:	c5 01       	movw	r24, r10
    20fc:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <_ZN7MPU605013setMemoryBankEhbb>
    2100:	66 ef       	ldi	r22, 0xF6	; 246
    2102:	79 e0       	ldi	r23, 0x09	; 9
    2104:	88 e9       	ldi	r24, 0x98	; 152
    2106:	92 e0       	ldi	r25, 0x02	; 2
    2108:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    210c:	c5 01       	movw	r24, r10
    210e:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <_ZN7MPU605015getOTPBankValidEv>
    2112:	18 2f       	mov	r17, r24
    2114:	69 ee       	ldi	r22, 0xE9	; 233
    2116:	79 e0       	ldi	r23, 0x09	; 9
    2118:	88 e9       	ldi	r24, 0x98	; 152
    211a:	92 e0       	ldi	r25, 0x02	; 2
    211c:	0e 94 40 21 	call	0x4280	; 0x4280 <_ZN5Print5printEPK19__FlashStringHelper>
    2120:	11 23       	and	r17, r17
    2122:	19 f0       	breq	.+6      	; 0x212a <_ZN7MPU605013dmpInitializeEv+0xf6>
    2124:	62 ee       	ldi	r22, 0xE2	; 226
    2126:	79 e0       	ldi	r23, 0x09	; 9
    2128:	02 c0       	rjmp	.+4      	; 0x212e <_ZN7MPU605013dmpInitializeEv+0xfa>
    212a:	69 ed       	ldi	r22, 0xD9	; 217
    212c:	79 e0       	ldi	r23, 0x09	; 9
    212e:	88 e9       	ldi	r24, 0x98	; 152
    2130:	92 e0       	ldi	r25, 0x02	; 2
    2132:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2136:	68 eb       	ldi	r22, 0xB8	; 184
    2138:	79 e0       	ldi	r23, 0x09	; 9
    213a:	88 e9       	ldi	r24, 0x98	; 152
    213c:	92 e0       	ldi	r25, 0x02	; 2
    213e:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2142:	c5 01       	movw	r24, r10
    2144:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <_ZN7MPU605016getXGyroOffsetTCEv>
    2148:	88 2e       	mov	r8, r24
    214a:	c5 01       	movw	r24, r10
    214c:	0e 94 76 0d 	call	0x1aec	; 0x1aec <_ZN7MPU605016getYGyroOffsetTCEv>
    2150:	98 2e       	mov	r9, r24
    2152:	c5 01       	movw	r24, r10
    2154:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <_ZN7MPU605016getZGyroOffsetTCEv>
    2158:	18 2f       	mov	r17, r24
    215a:	67 ea       	ldi	r22, 0xA7	; 167
    215c:	79 e0       	ldi	r23, 0x09	; 9
    215e:	88 e9       	ldi	r24, 0x98	; 152
    2160:	92 e0       	ldi	r25, 0x02	; 2
    2162:	0e 94 40 21 	call	0x4280	; 0x4280 <_ZN5Print5printEPK19__FlashStringHelper>
    2166:	68 2d       	mov	r22, r8
    2168:	08 2c       	mov	r0, r8
    216a:	00 0c       	add	r0, r0
    216c:	77 0b       	sbc	r23, r23
    216e:	4a e0       	ldi	r20, 0x0A	; 10
    2170:	50 e0       	ldi	r21, 0x00	; 0
    2172:	88 e9       	ldi	r24, 0x98	; 152
    2174:	92 e0       	ldi	r25, 0x02	; 2
    2176:	0e 94 66 22 	call	0x44cc	; 0x44cc <_ZN5Print7printlnEii>
    217a:	66 e9       	ldi	r22, 0x96	; 150
    217c:	79 e0       	ldi	r23, 0x09	; 9
    217e:	88 e9       	ldi	r24, 0x98	; 152
    2180:	92 e0       	ldi	r25, 0x02	; 2
    2182:	0e 94 40 21 	call	0x4280	; 0x4280 <_ZN5Print5printEPK19__FlashStringHelper>
    2186:	69 2d       	mov	r22, r9
    2188:	09 2c       	mov	r0, r9
    218a:	00 0c       	add	r0, r0
    218c:	77 0b       	sbc	r23, r23
    218e:	4a e0       	ldi	r20, 0x0A	; 10
    2190:	50 e0       	ldi	r21, 0x00	; 0
    2192:	88 e9       	ldi	r24, 0x98	; 152
    2194:	92 e0       	ldi	r25, 0x02	; 2
    2196:	0e 94 66 22 	call	0x44cc	; 0x44cc <_ZN5Print7printlnEii>
    219a:	65 e8       	ldi	r22, 0x85	; 133
    219c:	79 e0       	ldi	r23, 0x09	; 9
    219e:	88 e9       	ldi	r24, 0x98	; 152
    21a0:	92 e0       	ldi	r25, 0x02	; 2
    21a2:	0e 94 40 21 	call	0x4280	; 0x4280 <_ZN5Print5printEPK19__FlashStringHelper>
    21a6:	61 2f       	mov	r22, r17
    21a8:	01 2e       	mov	r0, r17
    21aa:	00 0c       	add	r0, r0
    21ac:	77 0b       	sbc	r23, r23
    21ae:	4a e0       	ldi	r20, 0x0A	; 10
    21b0:	50 e0       	ldi	r21, 0x00	; 0
    21b2:	88 e9       	ldi	r24, 0x98	; 152
    21b4:	92 e0       	ldi	r25, 0x02	; 2
    21b6:	0e 94 66 22 	call	0x44cc	; 0x44cc <_ZN5Print7printlnEii>
    21ba:	62 e6       	ldi	r22, 0x62	; 98
    21bc:	79 e0       	ldi	r23, 0x09	; 9
    21be:	88 e9       	ldi	r24, 0x98	; 152
    21c0:	92 e0       	ldi	r25, 0x02	; 2
    21c2:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    21c6:	4f e7       	ldi	r20, 0x7F	; 127
    21c8:	60 e0       	ldi	r22, 0x00	; 0
    21ca:	c5 01       	movw	r24, r10
    21cc:	0e 94 77 0c 	call	0x18ee	; 0x18ee <_ZN7MPU605015setSlaveAddressEhh>
    21d0:	65 e4       	ldi	r22, 0x45	; 69
    21d2:	79 e0       	ldi	r23, 0x09	; 9
    21d4:	88 e9       	ldi	r24, 0x98	; 152
    21d6:	92 e0       	ldi	r25, 0x02	; 2
    21d8:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    21dc:	60 e0       	ldi	r22, 0x00	; 0
    21de:	c5 01       	movw	r24, r10
    21e0:	0e 94 a1 0c 	call	0x1942	; 0x1942 <_ZN7MPU605023setI2CMasterModeEnabledEb>
    21e4:	6b e1       	ldi	r22, 0x1B	; 27
    21e6:	79 e0       	ldi	r23, 0x09	; 9
    21e8:	88 e9       	ldi	r24, 0x98	; 152
    21ea:	92 e0       	ldi	r25, 0x02	; 2
    21ec:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    21f0:	48 e6       	ldi	r20, 0x68	; 104
    21f2:	60 e0       	ldi	r22, 0x00	; 0
    21f4:	c5 01       	movw	r24, r10
    21f6:	0e 94 77 0c 	call	0x18ee	; 0x18ee <_ZN7MPU605015setSlaveAddressEhh>
    21fa:	6b ef       	ldi	r22, 0xFB	; 251
    21fc:	78 e0       	ldi	r23, 0x08	; 8
    21fe:	88 e9       	ldi	r24, 0x98	; 152
    2200:	92 e0       	ldi	r25, 0x02	; 2
    2202:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2206:	c5 01       	movw	r24, r10
    2208:	0e 94 af 0c 	call	0x195e	; 0x195e <_ZN7MPU605014resetI2CMasterEv>
    220c:	64 e1       	ldi	r22, 0x14	; 20
    220e:	70 e0       	ldi	r23, 0x00	; 0
    2210:	80 e0       	ldi	r24, 0x00	; 0
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	0e 94 53 24 	call	0x48a6	; 0x48a6 <delay>
    2218:	64 ed       	ldi	r22, 0xD4	; 212
    221a:	78 e0       	ldi	r23, 0x08	; 8
    221c:	88 e9       	ldi	r24, 0x98	; 152
    221e:	92 e0       	ldi	r25, 0x02	; 2
    2220:	0e 94 40 21 	call	0x4280	; 0x4280 <_ZN5Print5printEPK19__FlashStringHelper>
    2224:	4a e0       	ldi	r20, 0x0A	; 10
    2226:	50 e0       	ldi	r21, 0x00	; 0
    2228:	69 e8       	ldi	r22, 0x89	; 137
    222a:	77 e0       	ldi	r23, 0x07	; 7
    222c:	88 e9       	ldi	r24, 0x98	; 152
    222e:	92 e0       	ldi	r25, 0x02	; 2
    2230:	0e 94 5f 22 	call	0x44be	; 0x44be <_ZN5Print5printEii>
    2234:	6c ec       	ldi	r22, 0xCC	; 204
    2236:	78 e0       	ldi	r23, 0x08	; 8
    2238:	88 e9       	ldi	r24, 0x98	; 152
    223a:	92 e0       	ldi	r25, 0x02	; 2
    223c:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2240:	ee 24       	eor	r14, r14
    2242:	e3 94       	inc	r14
    2244:	00 e0       	ldi	r16, 0x00	; 0
    2246:	20 e0       	ldi	r18, 0x00	; 0
    2248:	49 e8       	ldi	r20, 0x89	; 137
    224a:	57 e0       	ldi	r21, 0x07	; 7
    224c:	68 ec       	ldi	r22, 0xC8	; 200
    224e:	7b e0       	ldi	r23, 0x0B	; 11
    2250:	c5 01       	movw	r24, r10
    2252:	0e 94 56 0f 	call	0x1eac	; 0x1eac <_ZN7MPU605020writeProgMemoryBlockEPKhjhhb>
    2256:	88 23       	and	r24, r24
    2258:	09 f4       	brne	.+2      	; 0x225c <_ZN7MPU605013dmpInitializeEv+0x228>
    225a:	54 c3       	rjmp	.+1704   	; 0x2904 <_ZN7MPU605013dmpInitializeEv+0x8d0>
    225c:	64 ea       	ldi	r22, 0xA4	; 164
    225e:	78 e0       	ldi	r23, 0x08	; 8
    2260:	88 e9       	ldi	r24, 0x98	; 152
    2262:	92 e0       	ldi	r25, 0x02	; 2
    2264:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2268:	64 e7       	ldi	r22, 0x74	; 116
    226a:	78 e0       	ldi	r23, 0x08	; 8
    226c:	88 e9       	ldi	r24, 0x98	; 152
    226e:	92 e0       	ldi	r25, 0x02	; 2
    2270:	0e 94 40 21 	call	0x4280	; 0x4280 <_ZN5Print5printEPK19__FlashStringHelper>
    2274:	4a e0       	ldi	r20, 0x0A	; 10
    2276:	50 e0       	ldi	r21, 0x00	; 0
    2278:	60 ec       	ldi	r22, 0xC0	; 192
    227a:	70 e0       	ldi	r23, 0x00	; 0
    227c:	88 e9       	ldi	r24, 0x98	; 152
    227e:	92 e0       	ldi	r25, 0x02	; 2
    2280:	0e 94 5f 22 	call	0x44be	; 0x44be <_ZN5Print5printEii>
    2284:	6e e5       	ldi	r22, 0x5E	; 94
    2286:	78 e0       	ldi	r23, 0x08	; 8
    2288:	88 e9       	ldi	r24, 0x98	; 152
    228a:	92 e0       	ldi	r25, 0x02	; 2
    228c:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2290:	40 ec       	ldi	r20, 0xC0	; 192
    2292:	50 e0       	ldi	r21, 0x00	; 0
    2294:	68 e0       	ldi	r22, 0x08	; 8
    2296:	7b e0       	ldi	r23, 0x0B	; 11
    2298:	c5 01       	movw	r24, r10
    229a:	0e 94 07 10 	call	0x200e	; 0x200e <_ZN7MPU605028writeProgDMPConfigurationSetEPKhj>
    229e:	88 23       	and	r24, r24
    22a0:	09 f4       	brne	.+2      	; 0x22a4 <_ZN7MPU605013dmpInitializeEv+0x270>
    22a2:	28 c3       	rjmp	.+1616   	; 0x28f4 <_ZN7MPU605013dmpInitializeEv+0x8c0>
    22a4:	6d e2       	ldi	r22, 0x2D	; 45
    22a6:	78 e0       	ldi	r23, 0x08	; 8
    22a8:	88 e9       	ldi	r24, 0x98	; 152
    22aa:	92 e0       	ldi	r25, 0x02	; 2
    22ac:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    22b0:	6b e0       	ldi	r22, 0x0B	; 11
    22b2:	78 e0       	ldi	r23, 0x08	; 8
    22b4:	88 e9       	ldi	r24, 0x98	; 152
    22b6:	92 e0       	ldi	r25, 0x02	; 2
    22b8:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    22bc:	63 e0       	ldi	r22, 0x03	; 3
    22be:	c5 01       	movw	r24, r10
    22c0:	0e 94 c4 0c 	call	0x1988	; 0x1988 <_ZN7MPU605014setClockSourceEh>
    22c4:	6a ed       	ldi	r22, 0xDA	; 218
    22c6:	77 e0       	ldi	r23, 0x07	; 7
    22c8:	88 e9       	ldi	r24, 0x98	; 152
    22ca:	92 e0       	ldi	r25, 0x02	; 2
    22cc:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    22d0:	62 e1       	ldi	r22, 0x12	; 18
    22d2:	c5 01       	movw	r24, r10
    22d4:	0e 94 82 0c 	call	0x1904	; 0x1904 <_ZN7MPU605013setIntEnabledEh>
    22d8:	6a eb       	ldi	r22, 0xBA	; 186
    22da:	77 e0       	ldi	r23, 0x07	; 7
    22dc:	88 e9       	ldi	r24, 0x98	; 152
    22de:	92 e0       	ldi	r25, 0x02	; 2
    22e0:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    22e4:	64 e0       	ldi	r22, 0x04	; 4
    22e6:	c5 01       	movw	r24, r10
    22e8:	0e 94 2d 0c 	call	0x185a	; 0x185a <_ZN7MPU60507setRateEh>
    22ec:	6a e8       	ldi	r22, 0x8A	; 138
    22ee:	77 e0       	ldi	r23, 0x07	; 7
    22f0:	88 e9       	ldi	r24, 0x98	; 152
    22f2:	92 e0       	ldi	r25, 0x02	; 2
    22f4:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    22f8:	61 e0       	ldi	r22, 0x01	; 1
    22fa:	c5 01       	movw	r24, r10
    22fc:	0e 94 33 0c 	call	0x1866	; 0x1866 <_ZN7MPU605020setExternalFrameSyncEh>
    2300:	68 e6       	ldi	r22, 0x68	; 104
    2302:	77 e0       	ldi	r23, 0x07	; 7
    2304:	88 e9       	ldi	r24, 0x98	; 152
    2306:	92 e0       	ldi	r25, 0x02	; 2
    2308:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    230c:	63 e0       	ldi	r22, 0x03	; 3
    230e:	c5 01       	movw	r24, r10
    2310:	0e 94 3e 0c 	call	0x187c	; 0x187c <_ZN7MPU605011setDLPFModeEh>
    2314:	68 e3       	ldi	r22, 0x38	; 56
    2316:	77 e0       	ldi	r23, 0x07	; 7
    2318:	88 e9       	ldi	r24, 0x98	; 152
    231a:	92 e0       	ldi	r25, 0x02	; 2
    231c:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2320:	63 e0       	ldi	r22, 0x03	; 3
    2322:	c5 01       	movw	r24, r10
    2324:	0e 94 49 0c 	call	0x1892	; 0x1892 <_ZN7MPU605021setFullScaleGyroRangeEh>
    2328:	62 e0       	ldi	r22, 0x02	; 2
    232a:	77 e0       	ldi	r23, 0x07	; 7
    232c:	88 e9       	ldi	r24, 0x98	; 152
    232e:	92 e0       	ldi	r25, 0x02	; 2
    2330:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2334:	63 e0       	ldi	r22, 0x03	; 3
    2336:	c5 01       	movw	r24, r10
    2338:	0e 94 0a 10 	call	0x2014	; 0x2014 <_ZN7MPU605013setDMPConfig1Eh>
    233c:	60 e0       	ldi	r22, 0x00	; 0
    233e:	c5 01       	movw	r24, r10
    2340:	0e 94 10 10 	call	0x2020	; 0x2020 <_ZN7MPU605013setDMPConfig2Eh>
    2344:	68 ee       	ldi	r22, 0xE8	; 232
    2346:	76 e0       	ldi	r23, 0x06	; 6
    2348:	88 e9       	ldi	r24, 0x98	; 152
    234a:	92 e0       	ldi	r25, 0x02	; 2
    234c:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2350:	60 e0       	ldi	r22, 0x00	; 0
    2352:	c5 01       	movw	r24, r10
    2354:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <_ZN7MPU605015setOTPBankValidEb>
    2358:	64 eb       	ldi	r22, 0xB4	; 180
    235a:	76 e0       	ldi	r23, 0x06	; 6
    235c:	88 e9       	ldi	r24, 0x98	; 152
    235e:	92 e0       	ldi	r25, 0x02	; 2
    2360:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2364:	68 2d       	mov	r22, r8
    2366:	c5 01       	movw	r24, r10
    2368:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN7MPU605016setXGyroOffsetTCEa>
    236c:	69 2d       	mov	r22, r9
    236e:	c5 01       	movw	r24, r10
    2370:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <_ZN7MPU605016setYGyroOffsetTCEa>
    2374:	61 2f       	mov	r22, r17
    2376:	c5 01       	movw	r24, r10
    2378:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <_ZN7MPU605016setZGyroOffsetTCEa>
    237c:	6e e7       	ldi	r22, 0x7E	; 126
    237e:	76 e0       	ldi	r23, 0x06	; 6
    2380:	88 e9       	ldi	r24, 0x98	; 152
    2382:	92 e0       	ldi	r25, 0x02	; 2
    2384:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2388:	81 2c       	mov	r8, r1
    238a:	91 2c       	mov	r9, r1
    238c:	f4 01       	movw	r30, r8
    238e:	e7 52       	subi	r30, 0x27	; 39
    2390:	f5 4f       	sbci	r31, 0xF5	; 245
    2392:	e4 91       	lpm	r30, Z
    2394:	a1 e8       	ldi	r26, 0x81	; 129
    2396:	b0 e0       	ldi	r27, 0x00	; 0
    2398:	ac 0f       	add	r26, r28
    239a:	bd 1f       	adc	r27, r29
    239c:	a8 0d       	add	r26, r8
    239e:	b1 1d       	adc	r27, r1
    23a0:	ec 93       	st	X, r30
    23a2:	81 e0       	ldi	r24, 0x01	; 1
    23a4:	88 0d       	add	r24, r8
    23a6:	9f ef       	ldi	r25, 0xFF	; 255
    23a8:	89 1a       	sub	r8, r25
    23aa:	99 0a       	sbc	r9, r25
    23ac:	e3 e0       	ldi	r30, 0x03	; 3
    23ae:	e8 15       	cp	r30, r8
    23b0:	68 f7       	brcc	.-38     	; 0x238c <_ZN7MPU605013dmpInitializeEv+0x358>
    23b2:	cd 57       	subi	r28, 0x7D	; 125
    23b4:	df 4f       	sbci	r29, 0xFF	; 255
    23b6:	48 81       	ld	r20, Y
    23b8:	c3 58       	subi	r28, 0x83	; 131
    23ba:	d0 40       	sbci	r29, 0x00	; 0
    23bc:	50 e0       	ldi	r21, 0x00	; 0
    23be:	9a 01       	movw	r18, r20
    23c0:	2e 5f       	subi	r18, 0xFE	; 254
    23c2:	3f 4f       	sbci	r19, 0xFF	; 255
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	28 17       	cp	r18, r24
    23c8:	39 07       	cpc	r19, r25
    23ca:	04 f7       	brge	.-64     	; 0x238c <_ZN7MPU605013dmpInitializeEv+0x358>
    23cc:	c1 2c       	mov	r12, r1
    23ce:	ee 24       	eor	r14, r14
    23d0:	e3 94       	inc	r14
    23d2:	ce 57       	subi	r28, 0x7E	; 126
    23d4:	df 4f       	sbci	r29, 0xFF	; 255
    23d6:	08 81       	ld	r16, Y
    23d8:	c2 58       	subi	r28, 0x82	; 130
    23da:	d0 40       	sbci	r29, 0x00	; 0
    23dc:	cf 57       	subi	r28, 0x7F	; 127
    23de:	df 4f       	sbci	r29, 0xFF	; 255
    23e0:	28 81       	ld	r18, Y
    23e2:	c1 58       	subi	r28, 0x81	; 129
    23e4:	d0 40       	sbci	r29, 0x00	; 0
    23e6:	61 e8       	ldi	r22, 0x81	; 129
    23e8:	70 e0       	ldi	r23, 0x00	; 0
    23ea:	6c 0f       	add	r22, r28
    23ec:	7d 1f       	adc	r23, r29
    23ee:	6d 5f       	subi	r22, 0xFD	; 253
    23f0:	7f 4f       	sbci	r23, 0xFF	; 255
    23f2:	c5 01       	movw	r24, r10
    23f4:	0e 94 76 0e 	call	0x1cec	; 0x1cec <_ZN7MPU605016writeMemoryBlockEPKhjhhbb>
    23f8:	68 e4       	ldi	r22, 0x48	; 72
    23fa:	76 e0       	ldi	r23, 0x06	; 6
    23fc:	88 e9       	ldi	r24, 0x98	; 152
    23fe:	92 e0       	ldi	r25, 0x02	; 2
    2400:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2404:	80 e0       	ldi	r24, 0x00	; 0
    2406:	f4 01       	movw	r30, r8
    2408:	e7 52       	subi	r30, 0x27	; 39
    240a:	f5 4f       	sbci	r31, 0xF5	; 245
    240c:	e4 91       	lpm	r30, Z
    240e:	a1 e8       	ldi	r26, 0x81	; 129
    2410:	b0 e0       	ldi	r27, 0x00	; 0
    2412:	ac 0f       	add	r26, r28
    2414:	bd 1f       	adc	r27, r29
    2416:	a8 0f       	add	r26, r24
    2418:	b1 1d       	adc	r27, r1
    241a:	ec 93       	st	X, r30
    241c:	8f 5f       	subi	r24, 0xFF	; 255
    241e:	ff ef       	ldi	r31, 0xFF	; 255
    2420:	8f 1a       	sub	r8, r31
    2422:	9f 0a       	sbc	r9, r31
    2424:	84 30       	cpi	r24, 0x04	; 4
    2426:	78 f3       	brcs	.-34     	; 0x2406 <_ZN7MPU605013dmpInitializeEv+0x3d2>
    2428:	cd 57       	subi	r28, 0x7D	; 125
    242a:	df 4f       	sbci	r29, 0xFF	; 255
    242c:	48 81       	ld	r20, Y
    242e:	c3 58       	subi	r28, 0x83	; 131
    2430:	d0 40       	sbci	r29, 0x00	; 0
    2432:	50 e0       	ldi	r21, 0x00	; 0
    2434:	ba 01       	movw	r22, r20
    2436:	6e 5f       	subi	r22, 0xFE	; 254
    2438:	7f 4f       	sbci	r23, 0xFF	; 255
    243a:	28 2f       	mov	r18, r24
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	62 17       	cp	r22, r18
    2440:	73 07       	cpc	r23, r19
    2442:	0c f7       	brge	.-62     	; 0x2406 <_ZN7MPU605013dmpInitializeEv+0x3d2>
    2444:	c1 2c       	mov	r12, r1
    2446:	ee 24       	eor	r14, r14
    2448:	e3 94       	inc	r14
    244a:	ce 57       	subi	r28, 0x7E	; 126
    244c:	df 4f       	sbci	r29, 0xFF	; 255
    244e:	08 81       	ld	r16, Y
    2450:	c2 58       	subi	r28, 0x82	; 130
    2452:	d0 40       	sbci	r29, 0x00	; 0
    2454:	cf 57       	subi	r28, 0x7F	; 127
    2456:	df 4f       	sbci	r29, 0xFF	; 255
    2458:	28 81       	ld	r18, Y
    245a:	c1 58       	subi	r28, 0x81	; 129
    245c:	d0 40       	sbci	r29, 0x00	; 0
    245e:	61 e8       	ldi	r22, 0x81	; 129
    2460:	70 e0       	ldi	r23, 0x00	; 0
    2462:	6c 0f       	add	r22, r28
    2464:	7d 1f       	adc	r23, r29
    2466:	6d 5f       	subi	r22, 0xFD	; 253
    2468:	7f 4f       	sbci	r23, 0xFF	; 255
    246a:	c5 01       	movw	r24, r10
    246c:	0e 94 76 0e 	call	0x1cec	; 0x1cec <_ZN7MPU605016writeMemoryBlockEPKhjhhbb>
    2470:	66 e3       	ldi	r22, 0x36	; 54
    2472:	76 e0       	ldi	r23, 0x06	; 6
    2474:	88 e9       	ldi	r24, 0x98	; 152
    2476:	92 e0       	ldi	r25, 0x02	; 2
    2478:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    247c:	c5 01       	movw	r24, r10
    247e:	0e 94 a8 0c 	call	0x1950	; 0x1950 <_ZN7MPU60509resetFIFOEv>
    2482:	60 e2       	ldi	r22, 0x20	; 32
    2484:	76 e0       	ldi	r23, 0x06	; 6
    2486:	88 e9       	ldi	r24, 0x98	; 152
    2488:	92 e0       	ldi	r25, 0x02	; 2
    248a:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    248e:	c5 01       	movw	r24, r10
    2490:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <_ZN7MPU605012getFIFOCountEv>
    2494:	18 2f       	mov	r17, r24
    2496:	09 2f       	mov	r16, r25
    2498:	6c e0       	ldi	r22, 0x0C	; 12
    249a:	76 e0       	ldi	r23, 0x06	; 6
    249c:	88 e9       	ldi	r24, 0x98	; 152
    249e:	92 e0       	ldi	r25, 0x02	; 2
    24a0:	0e 94 40 21 	call	0x4280	; 0x4280 <_ZN5Print5printEPK19__FlashStringHelper>
    24a4:	4a e0       	ldi	r20, 0x0A	; 10
    24a6:	50 e0       	ldi	r21, 0x00	; 0
    24a8:	61 2f       	mov	r22, r17
    24aa:	70 2f       	mov	r23, r16
    24ac:	88 e9       	ldi	r24, 0x98	; 152
    24ae:	92 e0       	ldi	r25, 0x02	; 2
    24b0:	0e 94 05 22 	call	0x440a	; 0x440a <_ZN5Print7printlnEji>
    24b4:	41 2f       	mov	r20, r17
    24b6:	be 01       	movw	r22, r28
    24b8:	6f 5f       	subi	r22, 0xFF	; 255
    24ba:	7f 4f       	sbci	r23, 0xFF	; 255
    24bc:	c5 01       	movw	r24, r10
    24be:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <_ZN7MPU605012getFIFOBytesEPhh>
    24c2:	61 ee       	ldi	r22, 0xE1	; 225
    24c4:	75 e0       	ldi	r23, 0x05	; 5
    24c6:	88 e9       	ldi	r24, 0x98	; 152
    24c8:	92 e0       	ldi	r25, 0x02	; 2
    24ca:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    24ce:	62 e0       	ldi	r22, 0x02	; 2
    24d0:	c5 01       	movw	r24, r10
    24d2:	0e 94 5f 0c 	call	0x18be	; 0x18be <_ZN7MPU605027setMotionDetectionThresholdEh>
    24d6:	6f ea       	ldi	r22, 0xAF	; 175
    24d8:	75 e0       	ldi	r23, 0x05	; 5
    24da:	88 e9       	ldi	r24, 0x98	; 152
    24dc:	92 e0       	ldi	r25, 0x02	; 2
    24de:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    24e2:	6c e9       	ldi	r22, 0x9C	; 156
    24e4:	c5 01       	movw	r24, r10
    24e6:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <_ZN7MPU605031setZeroMotionDetectionThresholdEh>
    24ea:	64 e8       	ldi	r22, 0x84	; 132
    24ec:	75 e0       	ldi	r23, 0x05	; 5
    24ee:	88 e9       	ldi	r24, 0x98	; 152
    24f0:	92 e0       	ldi	r25, 0x02	; 2
    24f2:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    24f6:	60 e5       	ldi	r22, 0x50	; 80
    24f8:	c5 01       	movw	r24, r10
    24fa:	0e 94 65 0c 	call	0x18ca	; 0x18ca <_ZN7MPU605026setMotionDetectionDurationEh>
    24fe:	65 e5       	ldi	r22, 0x55	; 85
    2500:	75 e0       	ldi	r23, 0x05	; 5
    2502:	88 e9       	ldi	r24, 0x98	; 152
    2504:	92 e0       	ldi	r25, 0x02	; 2
    2506:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    250a:	60 e0       	ldi	r22, 0x00	; 0
    250c:	c5 01       	movw	r24, r10
    250e:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN7MPU605030setZeroMotionDetectionDurationEh>
    2512:	63 e4       	ldi	r22, 0x43	; 67
    2514:	75 e0       	ldi	r23, 0x05	; 5
    2516:	88 e9       	ldi	r24, 0x98	; 152
    2518:	92 e0       	ldi	r25, 0x02	; 2
    251a:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    251e:	c5 01       	movw	r24, r10
    2520:	0e 94 a8 0c 	call	0x1950	; 0x1950 <_ZN7MPU60509resetFIFOEv>
    2524:	62 e3       	ldi	r22, 0x32	; 50
    2526:	75 e0       	ldi	r23, 0x05	; 5
    2528:	88 e9       	ldi	r24, 0x98	; 152
    252a:	92 e0       	ldi	r25, 0x02	; 2
    252c:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2530:	61 e0       	ldi	r22, 0x01	; 1
    2532:	c5 01       	movw	r24, r10
    2534:	0e 94 9a 0c 	call	0x1934	; 0x1934 <_ZN7MPU605014setFIFOEnabledEb>
    2538:	62 e2       	ldi	r22, 0x22	; 34
    253a:	75 e0       	ldi	r23, 0x05	; 5
    253c:	88 e9       	ldi	r24, 0x98	; 152
    253e:	92 e0       	ldi	r25, 0x02	; 2
    2540:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2544:	61 e0       	ldi	r22, 0x01	; 1
    2546:	c5 01       	movw	r24, r10
    2548:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <_ZN7MPU605013setDMPEnabledEb>
    254c:	61 e1       	ldi	r22, 0x11	; 17
    254e:	75 e0       	ldi	r23, 0x05	; 5
    2550:	88 e9       	ldi	r24, 0x98	; 152
    2552:	92 e0       	ldi	r25, 0x02	; 2
    2554:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2558:	c5 01       	movw	r24, r10
    255a:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <_ZN7MPU60508resetDMPEv>
    255e:	6b ed       	ldi	r22, 0xDB	; 219
    2560:	74 e0       	ldi	r23, 0x04	; 4
    2562:	88 e9       	ldi	r24, 0x98	; 152
    2564:	92 e0       	ldi	r25, 0x02	; 2
    2566:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    256a:	80 e0       	ldi	r24, 0x00	; 0
    256c:	f4 01       	movw	r30, r8
    256e:	e7 52       	subi	r30, 0x27	; 39
    2570:	f5 4f       	sbci	r31, 0xF5	; 245
    2572:	e4 91       	lpm	r30, Z
    2574:	a1 e8       	ldi	r26, 0x81	; 129
    2576:	b0 e0       	ldi	r27, 0x00	; 0
    2578:	ac 0f       	add	r26, r28
    257a:	bd 1f       	adc	r27, r29
    257c:	a8 0f       	add	r26, r24
    257e:	b1 1d       	adc	r27, r1
    2580:	ec 93       	st	X, r30
    2582:	8f 5f       	subi	r24, 0xFF	; 255
    2584:	9f ef       	ldi	r25, 0xFF	; 255
    2586:	89 1a       	sub	r8, r25
    2588:	99 0a       	sbc	r9, r25
    258a:	84 30       	cpi	r24, 0x04	; 4
    258c:	78 f3       	brcs	.-34     	; 0x256c <_ZN7MPU605013dmpInitializeEv+0x538>
    258e:	cd 57       	subi	r28, 0x7D	; 125
    2590:	df 4f       	sbci	r29, 0xFF	; 255
    2592:	48 81       	ld	r20, Y
    2594:	c3 58       	subi	r28, 0x83	; 131
    2596:	d0 40       	sbci	r29, 0x00	; 0
    2598:	50 e0       	ldi	r21, 0x00	; 0
    259a:	ba 01       	movw	r22, r20
    259c:	6e 5f       	subi	r22, 0xFE	; 254
    259e:	7f 4f       	sbci	r23, 0xFF	; 255
    25a0:	28 2f       	mov	r18, r24
    25a2:	30 e0       	ldi	r19, 0x00	; 0
    25a4:	62 17       	cp	r22, r18
    25a6:	73 07       	cpc	r23, r19
    25a8:	0c f7       	brge	.-62     	; 0x256c <_ZN7MPU605013dmpInitializeEv+0x538>
    25aa:	c1 2c       	mov	r12, r1
    25ac:	ee 24       	eor	r14, r14
    25ae:	e3 94       	inc	r14
    25b0:	ce 57       	subi	r28, 0x7E	; 126
    25b2:	df 4f       	sbci	r29, 0xFF	; 255
    25b4:	08 81       	ld	r16, Y
    25b6:	c2 58       	subi	r28, 0x82	; 130
    25b8:	d0 40       	sbci	r29, 0x00	; 0
    25ba:	cf 57       	subi	r28, 0x7F	; 127
    25bc:	df 4f       	sbci	r29, 0xFF	; 255
    25be:	28 81       	ld	r18, Y
    25c0:	c1 58       	subi	r28, 0x81	; 129
    25c2:	d0 40       	sbci	r29, 0x00	; 0
    25c4:	61 e8       	ldi	r22, 0x81	; 129
    25c6:	70 e0       	ldi	r23, 0x00	; 0
    25c8:	6c 0f       	add	r22, r28
    25ca:	7d 1f       	adc	r23, r29
    25cc:	6d 5f       	subi	r22, 0xFD	; 253
    25ce:	7f 4f       	sbci	r23, 0xFF	; 255
    25d0:	c5 01       	movw	r24, r10
    25d2:	0e 94 76 0e 	call	0x1cec	; 0x1cec <_ZN7MPU605016writeMemoryBlockEPKhjhhbb>
    25d6:	65 ea       	ldi	r22, 0xA5	; 165
    25d8:	74 e0       	ldi	r23, 0x04	; 4
    25da:	88 e9       	ldi	r24, 0x98	; 152
    25dc:	92 e0       	ldi	r25, 0x02	; 2
    25de:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    25e2:	80 e0       	ldi	r24, 0x00	; 0
    25e4:	f4 01       	movw	r30, r8
    25e6:	e7 52       	subi	r30, 0x27	; 39
    25e8:	f5 4f       	sbci	r31, 0xF5	; 245
    25ea:	e4 91       	lpm	r30, Z
    25ec:	a1 e8       	ldi	r26, 0x81	; 129
    25ee:	b0 e0       	ldi	r27, 0x00	; 0
    25f0:	ac 0f       	add	r26, r28
    25f2:	bd 1f       	adc	r27, r29
    25f4:	a8 0f       	add	r26, r24
    25f6:	b1 1d       	adc	r27, r1
    25f8:	ec 93       	st	X, r30
    25fa:	8f 5f       	subi	r24, 0xFF	; 255
    25fc:	ef ef       	ldi	r30, 0xFF	; 255
    25fe:	8e 1a       	sub	r8, r30
    2600:	9e 0a       	sbc	r9, r30
    2602:	84 30       	cpi	r24, 0x04	; 4
    2604:	78 f3       	brcs	.-34     	; 0x25e4 <_ZN7MPU605013dmpInitializeEv+0x5b0>
    2606:	cd 57       	subi	r28, 0x7D	; 125
    2608:	df 4f       	sbci	r29, 0xFF	; 255
    260a:	48 81       	ld	r20, Y
    260c:	c3 58       	subi	r28, 0x83	; 131
    260e:	d0 40       	sbci	r29, 0x00	; 0
    2610:	50 e0       	ldi	r21, 0x00	; 0
    2612:	ba 01       	movw	r22, r20
    2614:	6e 5f       	subi	r22, 0xFE	; 254
    2616:	7f 4f       	sbci	r23, 0xFF	; 255
    2618:	28 2f       	mov	r18, r24
    261a:	30 e0       	ldi	r19, 0x00	; 0
    261c:	62 17       	cp	r22, r18
    261e:	73 07       	cpc	r23, r19
    2620:	0c f7       	brge	.-62     	; 0x25e4 <_ZN7MPU605013dmpInitializeEv+0x5b0>
    2622:	c1 2c       	mov	r12, r1
    2624:	ee 24       	eor	r14, r14
    2626:	e3 94       	inc	r14
    2628:	ce 57       	subi	r28, 0x7E	; 126
    262a:	df 4f       	sbci	r29, 0xFF	; 255
    262c:	08 81       	ld	r16, Y
    262e:	c2 58       	subi	r28, 0x82	; 130
    2630:	d0 40       	sbci	r29, 0x00	; 0
    2632:	cf 57       	subi	r28, 0x7F	; 127
    2634:	df 4f       	sbci	r29, 0xFF	; 255
    2636:	28 81       	ld	r18, Y
    2638:	c1 58       	subi	r28, 0x81	; 129
    263a:	d0 40       	sbci	r29, 0x00	; 0
    263c:	61 e8       	ldi	r22, 0x81	; 129
    263e:	70 e0       	ldi	r23, 0x00	; 0
    2640:	6c 0f       	add	r22, r28
    2642:	7d 1f       	adc	r23, r29
    2644:	6d 5f       	subi	r22, 0xFD	; 253
    2646:	7f 4f       	sbci	r23, 0xFF	; 255
    2648:	c5 01       	movw	r24, r10
    264a:	0e 94 76 0e 	call	0x1cec	; 0x1cec <_ZN7MPU605016writeMemoryBlockEPKhjhhbb>
    264e:	6f e6       	ldi	r22, 0x6F	; 111
    2650:	74 e0       	ldi	r23, 0x04	; 4
    2652:	88 e9       	ldi	r24, 0x98	; 152
    2654:	92 e0       	ldi	r25, 0x02	; 2
    2656:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    265a:	80 e0       	ldi	r24, 0x00	; 0
    265c:	f4 01       	movw	r30, r8
    265e:	e7 52       	subi	r30, 0x27	; 39
    2660:	f5 4f       	sbci	r31, 0xF5	; 245
    2662:	e4 91       	lpm	r30, Z
    2664:	a1 e8       	ldi	r26, 0x81	; 129
    2666:	b0 e0       	ldi	r27, 0x00	; 0
    2668:	ac 0f       	add	r26, r28
    266a:	bd 1f       	adc	r27, r29
    266c:	a8 0f       	add	r26, r24
    266e:	b1 1d       	adc	r27, r1
    2670:	ec 93       	st	X, r30
    2672:	8f 5f       	subi	r24, 0xFF	; 255
    2674:	ff ef       	ldi	r31, 0xFF	; 255
    2676:	8f 1a       	sub	r8, r31
    2678:	9f 0a       	sbc	r9, r31
    267a:	84 30       	cpi	r24, 0x04	; 4
    267c:	78 f3       	brcs	.-34     	; 0x265c <_ZN7MPU605013dmpInitializeEv+0x628>
    267e:	cd 57       	subi	r28, 0x7D	; 125
    2680:	df 4f       	sbci	r29, 0xFF	; 255
    2682:	48 81       	ld	r20, Y
    2684:	c3 58       	subi	r28, 0x83	; 131
    2686:	d0 40       	sbci	r29, 0x00	; 0
    2688:	50 e0       	ldi	r21, 0x00	; 0
    268a:	ba 01       	movw	r22, r20
    268c:	6e 5f       	subi	r22, 0xFE	; 254
    268e:	7f 4f       	sbci	r23, 0xFF	; 255
    2690:	28 2f       	mov	r18, r24
    2692:	30 e0       	ldi	r19, 0x00	; 0
    2694:	62 17       	cp	r22, r18
    2696:	73 07       	cpc	r23, r19
    2698:	0c f7       	brge	.-62     	; 0x265c <_ZN7MPU605013dmpInitializeEv+0x628>
    269a:	c1 2c       	mov	r12, r1
    269c:	ee 24       	eor	r14, r14
    269e:	e3 94       	inc	r14
    26a0:	ce 57       	subi	r28, 0x7E	; 126
    26a2:	df 4f       	sbci	r29, 0xFF	; 255
    26a4:	08 81       	ld	r16, Y
    26a6:	c2 58       	subi	r28, 0x82	; 130
    26a8:	d0 40       	sbci	r29, 0x00	; 0
    26aa:	cf 57       	subi	r28, 0x7F	; 127
    26ac:	df 4f       	sbci	r29, 0xFF	; 255
    26ae:	28 81       	ld	r18, Y
    26b0:	c1 58       	subi	r28, 0x81	; 129
    26b2:	d0 40       	sbci	r29, 0x00	; 0
    26b4:	61 e8       	ldi	r22, 0x81	; 129
    26b6:	70 e0       	ldi	r23, 0x00	; 0
    26b8:	6c 0f       	add	r22, r28
    26ba:	7d 1f       	adc	r23, r29
    26bc:	6d 5f       	subi	r22, 0xFD	; 253
    26be:	7f 4f       	sbci	r23, 0xFF	; 255
    26c0:	c5 01       	movw	r24, r10
    26c2:	0e 94 76 0e 	call	0x1cec	; 0x1cec <_ZN7MPU605016writeMemoryBlockEPKhjhhbb>
    26c6:	61 e5       	ldi	r22, 0x51	; 81
    26c8:	74 e0       	ldi	r23, 0x04	; 4
    26ca:	88 e9       	ldi	r24, 0x98	; 152
    26cc:	92 e0       	ldi	r25, 0x02	; 2
    26ce:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    26d2:	c5 01       	movw	r24, r10
    26d4:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <_ZN7MPU605012getFIFOCountEv>
    26d8:	8c 01       	movw	r16, r24
    26da:	03 97       	sbiw	r24, 0x03	; 3
    26dc:	d0 f3       	brcs	.-12     	; 0x26d2 <_ZN7MPU605013dmpInitializeEv+0x69e>
    26de:	6d e3       	ldi	r22, 0x3D	; 61
    26e0:	74 e0       	ldi	r23, 0x04	; 4
    26e2:	88 e9       	ldi	r24, 0x98	; 152
    26e4:	92 e0       	ldi	r25, 0x02	; 2
    26e6:	0e 94 40 21 	call	0x4280	; 0x4280 <_ZN5Print5printEPK19__FlashStringHelper>
    26ea:	4a e0       	ldi	r20, 0x0A	; 10
    26ec:	50 e0       	ldi	r21, 0x00	; 0
    26ee:	b8 01       	movw	r22, r16
    26f0:	88 e9       	ldi	r24, 0x98	; 152
    26f2:	92 e0       	ldi	r25, 0x02	; 2
    26f4:	0e 94 05 22 	call	0x440a	; 0x440a <_ZN5Print7printlnEji>
    26f8:	68 e2       	ldi	r22, 0x28	; 40
    26fa:	74 e0       	ldi	r23, 0x04	; 4
    26fc:	88 e9       	ldi	r24, 0x98	; 152
    26fe:	92 e0       	ldi	r25, 0x02	; 2
    2700:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2704:	40 2f       	mov	r20, r16
    2706:	be 01       	movw	r22, r28
    2708:	6f 5f       	subi	r22, 0xFF	; 255
    270a:	7f 4f       	sbci	r23, 0xFF	; 255
    270c:	c5 01       	movw	r24, r10
    270e:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <_ZN7MPU605012getFIFOBytesEPhh>
    2712:	6c e0       	ldi	r22, 0x0C	; 12
    2714:	74 e0       	ldi	r23, 0x04	; 4
    2716:	88 e9       	ldi	r24, 0x98	; 152
    2718:	92 e0       	ldi	r25, 0x02	; 2
    271a:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    271e:	c5 01       	movw	r24, r10
    2720:	0e 94 88 0c 	call	0x1910	; 0x1910 <_ZN7MPU605012getIntStatusEv>
    2724:	18 2f       	mov	r17, r24
    2726:	62 ef       	ldi	r22, 0xF2	; 242
    2728:	73 e0       	ldi	r23, 0x03	; 3
    272a:	88 e9       	ldi	r24, 0x98	; 152
    272c:	92 e0       	ldi	r25, 0x02	; 2
    272e:	0e 94 40 21 	call	0x4280	; 0x4280 <_ZN5Print5printEPK19__FlashStringHelper>
    2732:	40 e1       	ldi	r20, 0x10	; 16
    2734:	50 e0       	ldi	r21, 0x00	; 0
    2736:	61 2f       	mov	r22, r17
    2738:	88 e9       	ldi	r24, 0x98	; 152
    273a:	92 e0       	ldi	r25, 0x02	; 2
    273c:	0e 94 ed 21 	call	0x43da	; 0x43da <_ZN5Print7printlnEhi>
    2740:	6c eb       	ldi	r22, 0xBC	; 188
    2742:	73 e0       	ldi	r23, 0x03	; 3
    2744:	88 e9       	ldi	r24, 0x98	; 152
    2746:	92 e0       	ldi	r25, 0x02	; 2
    2748:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    274c:	80 e0       	ldi	r24, 0x00	; 0
    274e:	f4 01       	movw	r30, r8
    2750:	e7 52       	subi	r30, 0x27	; 39
    2752:	f5 4f       	sbci	r31, 0xF5	; 245
    2754:	e4 91       	lpm	r30, Z
    2756:	a1 e8       	ldi	r26, 0x81	; 129
    2758:	b0 e0       	ldi	r27, 0x00	; 0
    275a:	ac 0f       	add	r26, r28
    275c:	bd 1f       	adc	r27, r29
    275e:	a8 0f       	add	r26, r24
    2760:	b1 1d       	adc	r27, r1
    2762:	ec 93       	st	X, r30
    2764:	8f 5f       	subi	r24, 0xFF	; 255
    2766:	9f ef       	ldi	r25, 0xFF	; 255
    2768:	89 1a       	sub	r8, r25
    276a:	99 0a       	sbc	r9, r25
    276c:	84 30       	cpi	r24, 0x04	; 4
    276e:	78 f3       	brcs	.-34     	; 0x274e <_ZN7MPU605013dmpInitializeEv+0x71a>
    2770:	cd 57       	subi	r28, 0x7D	; 125
    2772:	df 4f       	sbci	r29, 0xFF	; 255
    2774:	48 81       	ld	r20, Y
    2776:	c3 58       	subi	r28, 0x83	; 131
    2778:	d0 40       	sbci	r29, 0x00	; 0
    277a:	50 e0       	ldi	r21, 0x00	; 0
    277c:	ba 01       	movw	r22, r20
    277e:	6e 5f       	subi	r22, 0xFE	; 254
    2780:	7f 4f       	sbci	r23, 0xFF	; 255
    2782:	28 2f       	mov	r18, r24
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	62 17       	cp	r22, r18
    2788:	73 07       	cpc	r23, r19
    278a:	0c f7       	brge	.-62     	; 0x274e <_ZN7MPU605013dmpInitializeEv+0x71a>
    278c:	ce 57       	subi	r28, 0x7E	; 126
    278e:	df 4f       	sbci	r29, 0xFF	; 255
    2790:	08 81       	ld	r16, Y
    2792:	c2 58       	subi	r28, 0x82	; 130
    2794:	d0 40       	sbci	r29, 0x00	; 0
    2796:	cf 57       	subi	r28, 0x7F	; 127
    2798:	df 4f       	sbci	r29, 0xFF	; 255
    279a:	28 81       	ld	r18, Y
    279c:	c1 58       	subi	r28, 0x81	; 129
    279e:	d0 40       	sbci	r29, 0x00	; 0
    27a0:	61 e8       	ldi	r22, 0x81	; 129
    27a2:	70 e0       	ldi	r23, 0x00	; 0
    27a4:	6c 0f       	add	r22, r28
    27a6:	7d 1f       	adc	r23, r29
    27a8:	6d 5f       	subi	r22, 0xFD	; 253
    27aa:	7f 4f       	sbci	r23, 0xFF	; 255
    27ac:	c5 01       	movw	r24, r10
    27ae:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <_ZN7MPU605015readMemoryBlockEPhjhh>
    27b2:	6e e9       	ldi	r22, 0x9E	; 158
    27b4:	73 e0       	ldi	r23, 0x03	; 3
    27b6:	88 e9       	ldi	r24, 0x98	; 152
    27b8:	92 e0       	ldi	r25, 0x02	; 2
    27ba:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    27be:	c5 01       	movw	r24, r10
    27c0:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <_ZN7MPU605012getFIFOCountEv>
    27c4:	8c 01       	movw	r16, r24
    27c6:	03 97       	sbiw	r24, 0x03	; 3
    27c8:	d0 f3       	brcs	.-12     	; 0x27be <_ZN7MPU605013dmpInitializeEv+0x78a>
    27ca:	6a e8       	ldi	r22, 0x8A	; 138
    27cc:	73 e0       	ldi	r23, 0x03	; 3
    27ce:	88 e9       	ldi	r24, 0x98	; 152
    27d0:	92 e0       	ldi	r25, 0x02	; 2
    27d2:	0e 94 40 21 	call	0x4280	; 0x4280 <_ZN5Print5printEPK19__FlashStringHelper>
    27d6:	4a e0       	ldi	r20, 0x0A	; 10
    27d8:	50 e0       	ldi	r21, 0x00	; 0
    27da:	b8 01       	movw	r22, r16
    27dc:	88 e9       	ldi	r24, 0x98	; 152
    27de:	92 e0       	ldi	r25, 0x02	; 2
    27e0:	0e 94 05 22 	call	0x440a	; 0x440a <_ZN5Print7printlnEji>
    27e4:	65 e7       	ldi	r22, 0x75	; 117
    27e6:	73 e0       	ldi	r23, 0x03	; 3
    27e8:	88 e9       	ldi	r24, 0x98	; 152
    27ea:	92 e0       	ldi	r25, 0x02	; 2
    27ec:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    27f0:	40 2f       	mov	r20, r16
    27f2:	be 01       	movw	r22, r28
    27f4:	6f 5f       	subi	r22, 0xFF	; 255
    27f6:	7f 4f       	sbci	r23, 0xFF	; 255
    27f8:	c5 01       	movw	r24, r10
    27fa:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <_ZN7MPU605012getFIFOBytesEPhh>
    27fe:	69 e5       	ldi	r22, 0x59	; 89
    2800:	73 e0       	ldi	r23, 0x03	; 3
    2802:	88 e9       	ldi	r24, 0x98	; 152
    2804:	92 e0       	ldi	r25, 0x02	; 2
    2806:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    280a:	c5 01       	movw	r24, r10
    280c:	0e 94 88 0c 	call	0x1910	; 0x1910 <_ZN7MPU605012getIntStatusEv>
    2810:	18 2f       	mov	r17, r24
    2812:	6f e3       	ldi	r22, 0x3F	; 63
    2814:	73 e0       	ldi	r23, 0x03	; 3
    2816:	88 e9       	ldi	r24, 0x98	; 152
    2818:	92 e0       	ldi	r25, 0x02	; 2
    281a:	0e 94 40 21 	call	0x4280	; 0x4280 <_ZN5Print5printEPK19__FlashStringHelper>
    281e:	40 e1       	ldi	r20, 0x10	; 16
    2820:	50 e0       	ldi	r21, 0x00	; 0
    2822:	61 2f       	mov	r22, r17
    2824:	88 e9       	ldi	r24, 0x98	; 152
    2826:	92 e0       	ldi	r25, 0x02	; 2
    2828:	0e 94 ed 21 	call	0x43da	; 0x43da <_ZN5Print7printlnEhi>
    282c:	69 e0       	ldi	r22, 0x09	; 9
    282e:	73 e0       	ldi	r23, 0x03	; 3
    2830:	88 e9       	ldi	r24, 0x98	; 152
    2832:	92 e0       	ldi	r25, 0x02	; 2
    2834:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2838:	f4 01       	movw	r30, r8
    283a:	e7 52       	subi	r30, 0x27	; 39
    283c:	f5 4f       	sbci	r31, 0xF5	; 245
    283e:	80 e0       	ldi	r24, 0x00	; 0
    2840:	94 91       	lpm	r25, Z
    2842:	a1 e8       	ldi	r26, 0x81	; 129
    2844:	b0 e0       	ldi	r27, 0x00	; 0
    2846:	ac 0f       	add	r26, r28
    2848:	bd 1f       	adc	r27, r29
    284a:	a8 0f       	add	r26, r24
    284c:	b1 1d       	adc	r27, r1
    284e:	9c 93       	st	X, r25
    2850:	8f 5f       	subi	r24, 0xFF	; 255
    2852:	84 30       	cpi	r24, 0x04	; 4
    2854:	70 f0       	brcs	.+28     	; 0x2872 <_ZN7MPU605013dmpInitializeEv+0x83e>
    2856:	cd 57       	subi	r28, 0x7D	; 125
    2858:	df 4f       	sbci	r29, 0xFF	; 255
    285a:	48 81       	ld	r20, Y
    285c:	c3 58       	subi	r28, 0x83	; 131
    285e:	d0 40       	sbci	r29, 0x00	; 0
    2860:	50 e0       	ldi	r21, 0x00	; 0
    2862:	ba 01       	movw	r22, r20
    2864:	6e 5f       	subi	r22, 0xFE	; 254
    2866:	7f 4f       	sbci	r23, 0xFF	; 255
    2868:	28 2f       	mov	r18, r24
    286a:	30 e0       	ldi	r19, 0x00	; 0
    286c:	62 17       	cp	r22, r18
    286e:	73 07       	cpc	r23, r19
    2870:	14 f0       	brlt	.+4      	; 0x2876 <_ZN7MPU605013dmpInitializeEv+0x842>
    2872:	31 96       	adiw	r30, 0x01	; 1
    2874:	e5 cf       	rjmp	.-54     	; 0x2840 <_ZN7MPU605013dmpInitializeEv+0x80c>
    2876:	61 e8       	ldi	r22, 0x81	; 129
    2878:	70 e0       	ldi	r23, 0x00	; 0
    287a:	6c 0f       	add	r22, r28
    287c:	7d 1f       	adc	r23, r29
    287e:	6d 5f       	subi	r22, 0xFD	; 253
    2880:	7f 4f       	sbci	r23, 0xFF	; 255
    2882:	c1 2c       	mov	r12, r1
    2884:	ee 24       	eor	r14, r14
    2886:	e3 94       	inc	r14
    2888:	ce 57       	subi	r28, 0x7E	; 126
    288a:	df 4f       	sbci	r29, 0xFF	; 255
    288c:	08 81       	ld	r16, Y
    288e:	c2 58       	subi	r28, 0x82	; 130
    2890:	d0 40       	sbci	r29, 0x00	; 0
    2892:	cf 57       	subi	r28, 0x7F	; 127
    2894:	df 4f       	sbci	r29, 0xFF	; 255
    2896:	28 81       	ld	r18, Y
    2898:	c1 58       	subi	r28, 0x81	; 129
    289a:	d0 40       	sbci	r29, 0x00	; 0
    289c:	c5 01       	movw	r24, r10
    289e:	0e 94 76 0e 	call	0x1cec	; 0x1cec <_ZN7MPU605016writeMemoryBlockEPKhjhhbb>
    28a2:	6d ee       	ldi	r22, 0xED	; 237
    28a4:	72 e0       	ldi	r23, 0x02	; 2
    28a6:	88 e9       	ldi	r24, 0x98	; 152
    28a8:	92 e0       	ldi	r25, 0x02	; 2
    28aa:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    28ae:	65 ec       	ldi	r22, 0xC5	; 197
    28b0:	72 e0       	ldi	r23, 0x02	; 2
    28b2:	88 e9       	ldi	r24, 0x98	; 152
    28b4:	92 e0       	ldi	r25, 0x02	; 2
    28b6:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    28ba:	60 e0       	ldi	r22, 0x00	; 0
    28bc:	c5 01       	movw	r24, r10
    28be:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <_ZN7MPU605013setDMPEnabledEb>
    28c2:	6a e8       	ldi	r22, 0x8A	; 138
    28c4:	72 e0       	ldi	r23, 0x02	; 2
    28c6:	88 e9       	ldi	r24, 0x98	; 152
    28c8:	92 e0       	ldi	r25, 0x02	; 2
    28ca:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    28ce:	8a e2       	ldi	r24, 0x2A	; 42
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	f5 01       	movw	r30, r10
    28d4:	93 83       	std	Z+3, r25	; 0x03
    28d6:	82 83       	std	Z+2, r24	; 0x02
    28d8:	62 e5       	ldi	r22, 0x52	; 82
    28da:	72 e0       	ldi	r23, 0x02	; 2
    28dc:	88 e9       	ldi	r24, 0x98	; 152
    28de:	92 e0       	ldi	r25, 0x02	; 2
    28e0:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    28e4:	c5 01       	movw	r24, r10
    28e6:	0e 94 a8 0c 	call	0x1950	; 0x1950 <_ZN7MPU60509resetFIFOEv>
    28ea:	c5 01       	movw	r24, r10
    28ec:	0e 94 88 0c 	call	0x1910	; 0x1910 <_ZN7MPU605012getIntStatusEv>
    28f0:	80 e0       	ldi	r24, 0x00	; 0
    28f2:	0f c0       	rjmp	.+30     	; 0x2912 <_ZN7MPU605013dmpInitializeEv+0x8de>
    28f4:	64 e2       	ldi	r22, 0x24	; 36
    28f6:	72 e0       	ldi	r23, 0x02	; 2
    28f8:	88 e9       	ldi	r24, 0x98	; 152
    28fa:	92 e0       	ldi	r25, 0x02	; 2
    28fc:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2900:	82 e0       	ldi	r24, 0x02	; 2
    2902:	07 c0       	rjmp	.+14     	; 0x2912 <_ZN7MPU605013dmpInitializeEv+0x8de>
    2904:	6f ef       	ldi	r22, 0xFF	; 255
    2906:	71 e0       	ldi	r23, 0x01	; 1
    2908:	88 e9       	ldi	r24, 0x98	; 152
    290a:	92 e0       	ldi	r25, 0x02	; 2
    290c:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2910:	81 e0       	ldi	r24, 0x01	; 1
    2912:	c0 57       	subi	r28, 0x70	; 112
    2914:	df 4f       	sbci	r29, 0xFF	; 255
    2916:	0f b6       	in	r0, 0x3f	; 63
    2918:	f8 94       	cli
    291a:	de bf       	out	0x3e, r29	; 62
    291c:	0f be       	out	0x3f, r0	; 63
    291e:	cd bf       	out	0x3d, r28	; 61
    2920:	df 91       	pop	r29
    2922:	cf 91       	pop	r28
    2924:	1f 91       	pop	r17
    2926:	0f 91       	pop	r16
    2928:	ef 90       	pop	r14
    292a:	cf 90       	pop	r12
    292c:	bf 90       	pop	r11
    292e:	af 90       	pop	r10
    2930:	9f 90       	pop	r9
    2932:	8f 90       	pop	r8
    2934:	08 95       	ret

00002936 <_ZN7MPU605016dmpGetQuaternionEPiPKh>:
    2936:	cf 93       	push	r28
    2938:	df 93       	push	r29
    293a:	db 01       	movw	r26, r22
    293c:	fa 01       	movw	r30, r20
    293e:	30 97       	sbiw	r30, 0x00	; 0
    2940:	19 f4       	brne	.+6      	; 0x2948 <_ZN7MPU605016dmpGetQuaternionEPiPKh+0x12>
    2942:	ec 01       	movw	r28, r24
    2944:	e8 81       	ld	r30, Y
    2946:	f9 81       	ldd	r31, Y+1	; 0x01
    2948:	80 81       	ld	r24, Z
    294a:	90 e0       	ldi	r25, 0x00	; 0
    294c:	98 2f       	mov	r25, r24
    294e:	88 27       	eor	r24, r24
    2950:	21 81       	ldd	r18, Z+1	; 0x01
    2952:	82 0f       	add	r24, r18
    2954:	91 1d       	adc	r25, r1
    2956:	11 96       	adiw	r26, 0x01	; 1
    2958:	9c 93       	st	X, r25
    295a:	8e 93       	st	-X, r24
    295c:	84 81       	ldd	r24, Z+4	; 0x04
    295e:	90 e0       	ldi	r25, 0x00	; 0
    2960:	98 2f       	mov	r25, r24
    2962:	88 27       	eor	r24, r24
    2964:	25 81       	ldd	r18, Z+5	; 0x05
    2966:	82 0f       	add	r24, r18
    2968:	91 1d       	adc	r25, r1
    296a:	13 96       	adiw	r26, 0x03	; 3
    296c:	9c 93       	st	X, r25
    296e:	8e 93       	st	-X, r24
    2970:	12 97       	sbiw	r26, 0x02	; 2
    2972:	80 85       	ldd	r24, Z+8	; 0x08
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	98 2f       	mov	r25, r24
    2978:	88 27       	eor	r24, r24
    297a:	21 85       	ldd	r18, Z+9	; 0x09
    297c:	82 0f       	add	r24, r18
    297e:	91 1d       	adc	r25, r1
    2980:	15 96       	adiw	r26, 0x05	; 5
    2982:	9c 93       	st	X, r25
    2984:	8e 93       	st	-X, r24
    2986:	14 97       	sbiw	r26, 0x04	; 4
    2988:	84 85       	ldd	r24, Z+12	; 0x0c
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	98 2f       	mov	r25, r24
    298e:	88 27       	eor	r24, r24
    2990:	25 85       	ldd	r18, Z+13	; 0x0d
    2992:	82 0f       	add	r24, r18
    2994:	91 1d       	adc	r25, r1
    2996:	17 96       	adiw	r26, 0x07	; 7
    2998:	9c 93       	st	X, r25
    299a:	8e 93       	st	-X, r24
    299c:	16 97       	sbiw	r26, 0x06	; 6
    299e:	80 e0       	ldi	r24, 0x00	; 0
    29a0:	df 91       	pop	r29
    29a2:	cf 91       	pop	r28
    29a4:	08 95       	ret

000029a6 <_ZN7MPU605016dmpGetQuaternionEP10QuaternionPKh>:
    29a6:	ff 92       	push	r15
    29a8:	0f 93       	push	r16
    29aa:	1f 93       	push	r17
    29ac:	cf 93       	push	r28
    29ae:	df 93       	push	r29
    29b0:	cd b7       	in	r28, 0x3d	; 61
    29b2:	de b7       	in	r29, 0x3e	; 62
    29b4:	28 97       	sbiw	r28, 0x08	; 8
    29b6:	0f b6       	in	r0, 0x3f	; 63
    29b8:	f8 94       	cli
    29ba:	de bf       	out	0x3e, r29	; 62
    29bc:	0f be       	out	0x3f, r0	; 63
    29be:	cd bf       	out	0x3d, r28	; 61
    29c0:	8b 01       	movw	r16, r22
    29c2:	be 01       	movw	r22, r28
    29c4:	6f 5f       	subi	r22, 0xFF	; 255
    29c6:	7f 4f       	sbci	r23, 0xFF	; 255
    29c8:	0e 94 9b 14 	call	0x2936	; 0x2936 <_ZN7MPU605016dmpGetQuaternionEPiPKh>
    29cc:	f8 2e       	mov	r15, r24
    29ce:	81 11       	cpse	r24, r1
    29d0:	4c c0       	rjmp	.+152    	; 0x2a6a <_ZN7MPU605016dmpGetQuaternionEP10QuaternionPKh+0xc4>
    29d2:	69 81       	ldd	r22, Y+1	; 0x01
    29d4:	7a 81       	ldd	r23, Y+2	; 0x02
    29d6:	07 2e       	mov	r0, r23
    29d8:	00 0c       	add	r0, r0
    29da:	88 0b       	sbc	r24, r24
    29dc:	99 0b       	sbc	r25, r25
    29de:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__floatsisf>
    29e2:	20 e0       	ldi	r18, 0x00	; 0
    29e4:	30 e0       	ldi	r19, 0x00	; 0
    29e6:	40 e8       	ldi	r20, 0x80	; 128
    29e8:	58 e3       	ldi	r21, 0x38	; 56
    29ea:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <__mulsf3>
    29ee:	f8 01       	movw	r30, r16
    29f0:	60 83       	st	Z, r22
    29f2:	71 83       	std	Z+1, r23	; 0x01
    29f4:	82 83       	std	Z+2, r24	; 0x02
    29f6:	93 83       	std	Z+3, r25	; 0x03
    29f8:	6b 81       	ldd	r22, Y+3	; 0x03
    29fa:	7c 81       	ldd	r23, Y+4	; 0x04
    29fc:	07 2e       	mov	r0, r23
    29fe:	00 0c       	add	r0, r0
    2a00:	88 0b       	sbc	r24, r24
    2a02:	99 0b       	sbc	r25, r25
    2a04:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__floatsisf>
    2a08:	20 e0       	ldi	r18, 0x00	; 0
    2a0a:	30 e0       	ldi	r19, 0x00	; 0
    2a0c:	40 e8       	ldi	r20, 0x80	; 128
    2a0e:	58 e3       	ldi	r21, 0x38	; 56
    2a10:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <__mulsf3>
    2a14:	f8 01       	movw	r30, r16
    2a16:	64 83       	std	Z+4, r22	; 0x04
    2a18:	75 83       	std	Z+5, r23	; 0x05
    2a1a:	86 83       	std	Z+6, r24	; 0x06
    2a1c:	97 83       	std	Z+7, r25	; 0x07
    2a1e:	6d 81       	ldd	r22, Y+5	; 0x05
    2a20:	7e 81       	ldd	r23, Y+6	; 0x06
    2a22:	07 2e       	mov	r0, r23
    2a24:	00 0c       	add	r0, r0
    2a26:	88 0b       	sbc	r24, r24
    2a28:	99 0b       	sbc	r25, r25
    2a2a:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__floatsisf>
    2a2e:	20 e0       	ldi	r18, 0x00	; 0
    2a30:	30 e0       	ldi	r19, 0x00	; 0
    2a32:	40 e8       	ldi	r20, 0x80	; 128
    2a34:	58 e3       	ldi	r21, 0x38	; 56
    2a36:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <__mulsf3>
    2a3a:	f8 01       	movw	r30, r16
    2a3c:	60 87       	std	Z+8, r22	; 0x08
    2a3e:	71 87       	std	Z+9, r23	; 0x09
    2a40:	82 87       	std	Z+10, r24	; 0x0a
    2a42:	93 87       	std	Z+11, r25	; 0x0b
    2a44:	6f 81       	ldd	r22, Y+7	; 0x07
    2a46:	78 85       	ldd	r23, Y+8	; 0x08
    2a48:	07 2e       	mov	r0, r23
    2a4a:	00 0c       	add	r0, r0
    2a4c:	88 0b       	sbc	r24, r24
    2a4e:	99 0b       	sbc	r25, r25
    2a50:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__floatsisf>
    2a54:	20 e0       	ldi	r18, 0x00	; 0
    2a56:	30 e0       	ldi	r19, 0x00	; 0
    2a58:	40 e8       	ldi	r20, 0x80	; 128
    2a5a:	58 e3       	ldi	r21, 0x38	; 56
    2a5c:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <__mulsf3>
    2a60:	f8 01       	movw	r30, r16
    2a62:	64 87       	std	Z+12, r22	; 0x0c
    2a64:	75 87       	std	Z+13, r23	; 0x0d
    2a66:	86 87       	std	Z+14, r24	; 0x0e
    2a68:	97 87       	std	Z+15, r25	; 0x0f
    2a6a:	8f 2d       	mov	r24, r15
    2a6c:	28 96       	adiw	r28, 0x08	; 8
    2a6e:	0f b6       	in	r0, 0x3f	; 63
    2a70:	f8 94       	cli
    2a72:	de bf       	out	0x3e, r29	; 62
    2a74:	0f be       	out	0x3f, r0	; 63
    2a76:	cd bf       	out	0x3d, r28	; 61
    2a78:	df 91       	pop	r29
    2a7a:	cf 91       	pop	r28
    2a7c:	1f 91       	pop	r17
    2a7e:	0f 91       	pop	r16
    2a80:	ff 90       	pop	r15
    2a82:	08 95       	ret

00002a84 <_ZN7MPU605013dmpGetGravityEP11VectorFloatP10Quaternion>:
    2a84:	4f 92       	push	r4
    2a86:	5f 92       	push	r5
    2a88:	6f 92       	push	r6
    2a8a:	7f 92       	push	r7
    2a8c:	8f 92       	push	r8
    2a8e:	9f 92       	push	r9
    2a90:	af 92       	push	r10
    2a92:	bf 92       	push	r11
    2a94:	cf 92       	push	r12
    2a96:	df 92       	push	r13
    2a98:	ef 92       	push	r14
    2a9a:	ff 92       	push	r15
    2a9c:	cf 93       	push	r28
    2a9e:	df 93       	push	r29
    2aa0:	cd b7       	in	r28, 0x3d	; 61
    2aa2:	de b7       	in	r29, 0x3e	; 62
    2aa4:	2a 97       	sbiw	r28, 0x0a	; 10
    2aa6:	0f b6       	in	r0, 0x3f	; 63
    2aa8:	f8 94       	cli
    2aaa:	de bf       	out	0x3e, r29	; 62
    2aac:	0f be       	out	0x3f, r0	; 63
    2aae:	cd bf       	out	0x3d, r28	; 61
    2ab0:	7a 87       	std	Y+10, r23	; 0x0a
    2ab2:	69 87       	std	Y+9, r22	; 0x09
    2ab4:	fa 01       	movw	r30, r20
    2ab6:	c4 80       	ldd	r12, Z+4	; 0x04
    2ab8:	d5 80       	ldd	r13, Z+5	; 0x05
    2aba:	e6 80       	ldd	r14, Z+6	; 0x06
    2abc:	f7 80       	ldd	r15, Z+7	; 0x07
    2abe:	44 84       	ldd	r4, Z+12	; 0x0c
    2ac0:	55 84       	ldd	r5, Z+13	; 0x0d
    2ac2:	66 84       	ldd	r6, Z+14	; 0x0e
    2ac4:	77 84       	ldd	r7, Z+15	; 0x0f
    2ac6:	80 80       	ld	r8, Z
    2ac8:	91 80       	ldd	r9, Z+1	; 0x01
    2aca:	a2 80       	ldd	r10, Z+2	; 0x02
    2acc:	b3 80       	ldd	r11, Z+3	; 0x03
    2ace:	80 85       	ldd	r24, Z+8	; 0x08
    2ad0:	91 85       	ldd	r25, Z+9	; 0x09
    2ad2:	a2 85       	ldd	r26, Z+10	; 0x0a
    2ad4:	b3 85       	ldd	r27, Z+11	; 0x0b
    2ad6:	89 83       	std	Y+1, r24	; 0x01
    2ad8:	9a 83       	std	Y+2, r25	; 0x02
    2ada:	ab 83       	std	Y+3, r26	; 0x03
    2adc:	bc 83       	std	Y+4, r27	; 0x04
    2ade:	a3 01       	movw	r20, r6
    2ae0:	92 01       	movw	r18, r4
    2ae2:	c7 01       	movw	r24, r14
    2ae4:	b6 01       	movw	r22, r12
    2ae6:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <__mulsf3>
    2aea:	6d 83       	std	Y+5, r22	; 0x05
    2aec:	7e 83       	std	Y+6, r23	; 0x06
    2aee:	8f 83       	std	Y+7, r24	; 0x07
    2af0:	98 87       	std	Y+8, r25	; 0x08
    2af2:	29 81       	ldd	r18, Y+1	; 0x01
    2af4:	3a 81       	ldd	r19, Y+2	; 0x02
    2af6:	4b 81       	ldd	r20, Y+3	; 0x03
    2af8:	5c 81       	ldd	r21, Y+4	; 0x04
    2afa:	c5 01       	movw	r24, r10
    2afc:	b4 01       	movw	r22, r8
    2afe:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <__mulsf3>
    2b02:	9b 01       	movw	r18, r22
    2b04:	ac 01       	movw	r20, r24
    2b06:	6d 81       	ldd	r22, Y+5	; 0x05
    2b08:	7e 81       	ldd	r23, Y+6	; 0x06
    2b0a:	8f 81       	ldd	r24, Y+7	; 0x07
    2b0c:	98 85       	ldd	r25, Y+8	; 0x08
    2b0e:	0e 94 27 1c 	call	0x384e	; 0x384e <__subsf3>
    2b12:	9b 01       	movw	r18, r22
    2b14:	ac 01       	movw	r20, r24
    2b16:	0e 94 28 1c 	call	0x3850	; 0x3850 <__addsf3>
    2b1a:	a9 85       	ldd	r26, Y+9	; 0x09
    2b1c:	ba 85       	ldd	r27, Y+10	; 0x0a
    2b1e:	6d 93       	st	X+, r22
    2b20:	7d 93       	st	X+, r23
    2b22:	8d 93       	st	X+, r24
    2b24:	9c 93       	st	X, r25
    2b26:	13 97       	sbiw	r26, 0x03	; 3
    2b28:	a5 01       	movw	r20, r10
    2b2a:	94 01       	movw	r18, r8
    2b2c:	c7 01       	movw	r24, r14
    2b2e:	b6 01       	movw	r22, r12
    2b30:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <__mulsf3>
    2b34:	6d 83       	std	Y+5, r22	; 0x05
    2b36:	7e 83       	std	Y+6, r23	; 0x06
    2b38:	8f 83       	std	Y+7, r24	; 0x07
    2b3a:	98 87       	std	Y+8, r25	; 0x08
    2b3c:	29 81       	ldd	r18, Y+1	; 0x01
    2b3e:	3a 81       	ldd	r19, Y+2	; 0x02
    2b40:	4b 81       	ldd	r20, Y+3	; 0x03
    2b42:	5c 81       	ldd	r21, Y+4	; 0x04
    2b44:	c3 01       	movw	r24, r6
    2b46:	b2 01       	movw	r22, r4
    2b48:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <__mulsf3>
    2b4c:	9b 01       	movw	r18, r22
    2b4e:	ac 01       	movw	r20, r24
    2b50:	6d 81       	ldd	r22, Y+5	; 0x05
    2b52:	7e 81       	ldd	r23, Y+6	; 0x06
    2b54:	8f 81       	ldd	r24, Y+7	; 0x07
    2b56:	98 85       	ldd	r25, Y+8	; 0x08
    2b58:	0e 94 28 1c 	call	0x3850	; 0x3850 <__addsf3>
    2b5c:	9b 01       	movw	r18, r22
    2b5e:	ac 01       	movw	r20, r24
    2b60:	0e 94 28 1c 	call	0x3850	; 0x3850 <__addsf3>
    2b64:	e9 85       	ldd	r30, Y+9	; 0x09
    2b66:	fa 85       	ldd	r31, Y+10	; 0x0a
    2b68:	64 83       	std	Z+4, r22	; 0x04
    2b6a:	75 83       	std	Z+5, r23	; 0x05
    2b6c:	86 83       	std	Z+6, r24	; 0x06
    2b6e:	97 83       	std	Z+7, r25	; 0x07
    2b70:	a5 01       	movw	r20, r10
    2b72:	94 01       	movw	r18, r8
    2b74:	c5 01       	movw	r24, r10
    2b76:	b4 01       	movw	r22, r8
    2b78:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <__mulsf3>
    2b7c:	4b 01       	movw	r8, r22
    2b7e:	5c 01       	movw	r10, r24
    2b80:	a7 01       	movw	r20, r14
    2b82:	96 01       	movw	r18, r12
    2b84:	c7 01       	movw	r24, r14
    2b86:	b6 01       	movw	r22, r12
    2b88:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <__mulsf3>
    2b8c:	9b 01       	movw	r18, r22
    2b8e:	ac 01       	movw	r20, r24
    2b90:	c5 01       	movw	r24, r10
    2b92:	b4 01       	movw	r22, r8
    2b94:	0e 94 27 1c 	call	0x384e	; 0x384e <__subsf3>
    2b98:	6b 01       	movw	r12, r22
    2b9a:	7c 01       	movw	r14, r24
    2b9c:	29 81       	ldd	r18, Y+1	; 0x01
    2b9e:	3a 81       	ldd	r19, Y+2	; 0x02
    2ba0:	4b 81       	ldd	r20, Y+3	; 0x03
    2ba2:	5c 81       	ldd	r21, Y+4	; 0x04
    2ba4:	ca 01       	movw	r24, r20
    2ba6:	b9 01       	movw	r22, r18
    2ba8:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <__mulsf3>
    2bac:	9b 01       	movw	r18, r22
    2bae:	ac 01       	movw	r20, r24
    2bb0:	c7 01       	movw	r24, r14
    2bb2:	b6 01       	movw	r22, r12
    2bb4:	0e 94 27 1c 	call	0x384e	; 0x384e <__subsf3>
    2bb8:	6b 01       	movw	r12, r22
    2bba:	7c 01       	movw	r14, r24
    2bbc:	a3 01       	movw	r20, r6
    2bbe:	92 01       	movw	r18, r4
    2bc0:	c3 01       	movw	r24, r6
    2bc2:	b2 01       	movw	r22, r4
    2bc4:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <__mulsf3>
    2bc8:	9b 01       	movw	r18, r22
    2bca:	ac 01       	movw	r20, r24
    2bcc:	c7 01       	movw	r24, r14
    2bce:	b6 01       	movw	r22, r12
    2bd0:	0e 94 28 1c 	call	0x3850	; 0x3850 <__addsf3>
    2bd4:	a9 85       	ldd	r26, Y+9	; 0x09
    2bd6:	ba 85       	ldd	r27, Y+10	; 0x0a
    2bd8:	18 96       	adiw	r26, 0x08	; 8
    2bda:	6d 93       	st	X+, r22
    2bdc:	7d 93       	st	X+, r23
    2bde:	8d 93       	st	X+, r24
    2be0:	9c 93       	st	X, r25
    2be2:	1b 97       	sbiw	r26, 0x0b	; 11
    2be4:	80 e0       	ldi	r24, 0x00	; 0
    2be6:	2a 96       	adiw	r28, 0x0a	; 10
    2be8:	0f b6       	in	r0, 0x3f	; 63
    2bea:	f8 94       	cli
    2bec:	de bf       	out	0x3e, r29	; 62
    2bee:	0f be       	out	0x3f, r0	; 63
    2bf0:	cd bf       	out	0x3d, r28	; 61
    2bf2:	df 91       	pop	r29
    2bf4:	cf 91       	pop	r28
    2bf6:	ff 90       	pop	r15
    2bf8:	ef 90       	pop	r14
    2bfa:	df 90       	pop	r13
    2bfc:	cf 90       	pop	r12
    2bfe:	bf 90       	pop	r11
    2c00:	af 90       	pop	r10
    2c02:	9f 90       	pop	r9
    2c04:	8f 90       	pop	r8
    2c06:	7f 90       	pop	r7
    2c08:	6f 90       	pop	r6
    2c0a:	5f 90       	pop	r5
    2c0c:	4f 90       	pop	r4
    2c0e:	08 95       	ret

00002c10 <_ZN7MPU605018dmpGetYawPitchRollEPfP10QuaternionP11VectorFloat>:
    2c10:	2f 92       	push	r2
    2c12:	3f 92       	push	r3
    2c14:	4f 92       	push	r4
    2c16:	5f 92       	push	r5
    2c18:	6f 92       	push	r6
    2c1a:	7f 92       	push	r7
    2c1c:	8f 92       	push	r8
    2c1e:	9f 92       	push	r9
    2c20:	af 92       	push	r10
    2c22:	bf 92       	push	r11
    2c24:	cf 92       	push	r12
    2c26:	df 92       	push	r13
    2c28:	ef 92       	push	r14
    2c2a:	ff 92       	push	r15
    2c2c:	0f 93       	push	r16
    2c2e:	1f 93       	push	r17
    2c30:	cf 93       	push	r28
    2c32:	df 93       	push	r29
    2c34:	00 d0       	rcall	.+0      	; 0x2c36 <_ZN7MPU605018dmpGetYawPitchRollEPfP10QuaternionP11VectorFloat+0x26>
    2c36:	00 d0       	rcall	.+0      	; 0x2c38 <_ZN7MPU605018dmpGetYawPitchRollEPfP10QuaternionP11VectorFloat+0x28>
    2c38:	00 d0       	rcall	.+0      	; 0x2c3a <_ZN7MPU605018dmpGetYawPitchRollEPfP10QuaternionP11VectorFloat+0x2a>
    2c3a:	cd b7       	in	r28, 0x3d	; 61
    2c3c:	de b7       	in	r29, 0x3e	; 62
    2c3e:	1b 01       	movw	r2, r22
    2c40:	8a 01       	movw	r16, r20
    2c42:	3e 83       	std	Y+6, r19	; 0x06
    2c44:	2d 83       	std	Y+5, r18	; 0x05
    2c46:	fa 01       	movw	r30, r20
    2c48:	c0 80       	ld	r12, Z
    2c4a:	d1 80       	ldd	r13, Z+1	; 0x01
    2c4c:	e2 80       	ldd	r14, Z+2	; 0x02
    2c4e:	f3 80       	ldd	r15, Z+3	; 0x03
    2c50:	a7 01       	movw	r20, r14
    2c52:	96 01       	movw	r18, r12
    2c54:	c7 01       	movw	r24, r14
    2c56:	b6 01       	movw	r22, r12
    2c58:	0e 94 28 1c 	call	0x3850	; 0x3850 <__addsf3>
    2c5c:	69 83       	std	Y+1, r22	; 0x01
    2c5e:	7a 83       	std	Y+2, r23	; 0x02
    2c60:	8b 83       	std	Y+3, r24	; 0x03
    2c62:	9c 83       	std	Y+4, r25	; 0x04
    2c64:	f8 01       	movw	r30, r16
    2c66:	84 80       	ldd	r8, Z+4	; 0x04
    2c68:	95 80       	ldd	r9, Z+5	; 0x05
    2c6a:	a6 80       	ldd	r10, Z+6	; 0x06
    2c6c:	b7 80       	ldd	r11, Z+7	; 0x07
    2c6e:	a5 01       	movw	r20, r10
    2c70:	94 01       	movw	r18, r8
    2c72:	c5 01       	movw	r24, r10
    2c74:	b4 01       	movw	r22, r8
    2c76:	0e 94 28 1c 	call	0x3850	; 0x3850 <__addsf3>
    2c7a:	2b 01       	movw	r4, r22
    2c7c:	3c 01       	movw	r6, r24
    2c7e:	29 81       	ldd	r18, Y+1	; 0x01
    2c80:	3a 81       	ldd	r19, Y+2	; 0x02
    2c82:	4b 81       	ldd	r20, Y+3	; 0x03
    2c84:	5c 81       	ldd	r21, Y+4	; 0x04
    2c86:	c7 01       	movw	r24, r14
    2c88:	b6 01       	movw	r22, r12
    2c8a:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <__mulsf3>
    2c8e:	6b 01       	movw	r12, r22
    2c90:	7c 01       	movw	r14, r24
    2c92:	a3 01       	movw	r20, r6
    2c94:	92 01       	movw	r18, r4
    2c96:	c5 01       	movw	r24, r10
    2c98:	b4 01       	movw	r22, r8
    2c9a:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <__mulsf3>
    2c9e:	9b 01       	movw	r18, r22
    2ca0:	ac 01       	movw	r20, r24
    2ca2:	c7 01       	movw	r24, r14
    2ca4:	b6 01       	movw	r22, r12
    2ca6:	0e 94 28 1c 	call	0x3850	; 0x3850 <__addsf3>
    2caa:	20 e0       	ldi	r18, 0x00	; 0
    2cac:	30 e0       	ldi	r19, 0x00	; 0
    2cae:	40 e8       	ldi	r20, 0x80	; 128
    2cb0:	5f e3       	ldi	r21, 0x3F	; 63
    2cb2:	0e 94 27 1c 	call	0x384e	; 0x384e <__subsf3>
    2cb6:	6b 01       	movw	r12, r22
    2cb8:	7c 01       	movw	r14, r24
    2cba:	f8 01       	movw	r30, r16
    2cbc:	20 85       	ldd	r18, Z+8	; 0x08
    2cbe:	31 85       	ldd	r19, Z+9	; 0x09
    2cc0:	42 85       	ldd	r20, Z+10	; 0x0a
    2cc2:	53 85       	ldd	r21, Z+11	; 0x0b
    2cc4:	c3 01       	movw	r24, r6
    2cc6:	b2 01       	movw	r22, r4
    2cc8:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <__mulsf3>
    2ccc:	2b 01       	movw	r4, r22
    2cce:	3c 01       	movw	r6, r24
    2cd0:	f8 01       	movw	r30, r16
    2cd2:	24 85       	ldd	r18, Z+12	; 0x0c
    2cd4:	35 85       	ldd	r19, Z+13	; 0x0d
    2cd6:	46 85       	ldd	r20, Z+14	; 0x0e
    2cd8:	57 85       	ldd	r21, Z+15	; 0x0f
    2cda:	69 81       	ldd	r22, Y+1	; 0x01
    2cdc:	7a 81       	ldd	r23, Y+2	; 0x02
    2cde:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ce2:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <__mulsf3>
    2ce6:	9b 01       	movw	r18, r22
    2ce8:	ac 01       	movw	r20, r24
    2cea:	c3 01       	movw	r24, r6
    2cec:	b2 01       	movw	r22, r4
    2cee:	0e 94 27 1c 	call	0x384e	; 0x384e <__subsf3>
    2cf2:	a7 01       	movw	r20, r14
    2cf4:	96 01       	movw	r18, r12
    2cf6:	0e 94 a7 1c 	call	0x394e	; 0x394e <atan2>
    2cfa:	f1 01       	movw	r30, r2
    2cfc:	60 83       	st	Z, r22
    2cfe:	71 83       	std	Z+1, r23	; 0x01
    2d00:	82 83       	std	Z+2, r24	; 0x02
    2d02:	93 83       	std	Z+3, r25	; 0x03
    2d04:	ed 81       	ldd	r30, Y+5	; 0x05
    2d06:	fe 81       	ldd	r31, Y+6	; 0x06
    2d08:	64 81       	ldd	r22, Z+4	; 0x04
    2d0a:	75 81       	ldd	r23, Z+5	; 0x05
    2d0c:	86 81       	ldd	r24, Z+6	; 0x06
    2d0e:	97 81       	ldd	r25, Z+7	; 0x07
    2d10:	c0 84       	ldd	r12, Z+8	; 0x08
    2d12:	d1 84       	ldd	r13, Z+9	; 0x09
    2d14:	e2 84       	ldd	r14, Z+10	; 0x0a
    2d16:	f3 84       	ldd	r15, Z+11	; 0x0b
    2d18:	9b 01       	movw	r18, r22
    2d1a:	ac 01       	movw	r20, r24
    2d1c:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <__mulsf3>
    2d20:	4b 01       	movw	r8, r22
    2d22:	5c 01       	movw	r10, r24
    2d24:	a7 01       	movw	r20, r14
    2d26:	96 01       	movw	r18, r12
    2d28:	c7 01       	movw	r24, r14
    2d2a:	b6 01       	movw	r22, r12
    2d2c:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <__mulsf3>
    2d30:	9b 01       	movw	r18, r22
    2d32:	ac 01       	movw	r20, r24
    2d34:	c5 01       	movw	r24, r10
    2d36:	b4 01       	movw	r22, r8
    2d38:	0e 94 28 1c 	call	0x3850	; 0x3850 <__addsf3>
    2d3c:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <sqrt>
    2d40:	9b 01       	movw	r18, r22
    2d42:	ac 01       	movw	r20, r24
    2d44:	ed 81       	ldd	r30, Y+5	; 0x05
    2d46:	fe 81       	ldd	r31, Y+6	; 0x06
    2d48:	60 81       	ld	r22, Z
    2d4a:	71 81       	ldd	r23, Z+1	; 0x01
    2d4c:	82 81       	ldd	r24, Z+2	; 0x02
    2d4e:	93 81       	ldd	r25, Z+3	; 0x03
    2d50:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <__divsf3>
    2d54:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <atan>
    2d58:	f1 01       	movw	r30, r2
    2d5a:	64 83       	std	Z+4, r22	; 0x04
    2d5c:	75 83       	std	Z+5, r23	; 0x05
    2d5e:	86 83       	std	Z+6, r24	; 0x06
    2d60:	97 83       	std	Z+7, r25	; 0x07
    2d62:	ed 81       	ldd	r30, Y+5	; 0x05
    2d64:	fe 81       	ldd	r31, Y+6	; 0x06
    2d66:	60 81       	ld	r22, Z
    2d68:	71 81       	ldd	r23, Z+1	; 0x01
    2d6a:	82 81       	ldd	r24, Z+2	; 0x02
    2d6c:	93 81       	ldd	r25, Z+3	; 0x03
    2d6e:	c0 84       	ldd	r12, Z+8	; 0x08
    2d70:	d1 84       	ldd	r13, Z+9	; 0x09
    2d72:	e2 84       	ldd	r14, Z+10	; 0x0a
    2d74:	f3 84       	ldd	r15, Z+11	; 0x0b
    2d76:	9b 01       	movw	r18, r22
    2d78:	ac 01       	movw	r20, r24
    2d7a:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <__mulsf3>
    2d7e:	4b 01       	movw	r8, r22
    2d80:	5c 01       	movw	r10, r24
    2d82:	a7 01       	movw	r20, r14
    2d84:	96 01       	movw	r18, r12
    2d86:	c7 01       	movw	r24, r14
    2d88:	b6 01       	movw	r22, r12
    2d8a:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <__mulsf3>
    2d8e:	9b 01       	movw	r18, r22
    2d90:	ac 01       	movw	r20, r24
    2d92:	c5 01       	movw	r24, r10
    2d94:	b4 01       	movw	r22, r8
    2d96:	0e 94 28 1c 	call	0x3850	; 0x3850 <__addsf3>
    2d9a:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <sqrt>
    2d9e:	9b 01       	movw	r18, r22
    2da0:	ac 01       	movw	r20, r24
    2da2:	ed 81       	ldd	r30, Y+5	; 0x05
    2da4:	fe 81       	ldd	r31, Y+6	; 0x06
    2da6:	64 81       	ldd	r22, Z+4	; 0x04
    2da8:	75 81       	ldd	r23, Z+5	; 0x05
    2daa:	86 81       	ldd	r24, Z+6	; 0x06
    2dac:	97 81       	ldd	r25, Z+7	; 0x07
    2dae:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <__divsf3>
    2db2:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <atan>
    2db6:	f1 01       	movw	r30, r2
    2db8:	60 87       	std	Z+8, r22	; 0x08
    2dba:	71 87       	std	Z+9, r23	; 0x09
    2dbc:	82 87       	std	Z+10, r24	; 0x0a
    2dbe:	93 87       	std	Z+11, r25	; 0x0b
    2dc0:	80 e0       	ldi	r24, 0x00	; 0
    2dc2:	26 96       	adiw	r28, 0x06	; 6
    2dc4:	0f b6       	in	r0, 0x3f	; 63
    2dc6:	f8 94       	cli
    2dc8:	de bf       	out	0x3e, r29	; 62
    2dca:	0f be       	out	0x3f, r0	; 63
    2dcc:	cd bf       	out	0x3d, r28	; 61
    2dce:	df 91       	pop	r29
    2dd0:	cf 91       	pop	r28
    2dd2:	1f 91       	pop	r17
    2dd4:	0f 91       	pop	r16
    2dd6:	ff 90       	pop	r15
    2dd8:	ef 90       	pop	r14
    2dda:	df 90       	pop	r13
    2ddc:	cf 90       	pop	r12
    2dde:	bf 90       	pop	r11
    2de0:	af 90       	pop	r10
    2de2:	9f 90       	pop	r9
    2de4:	8f 90       	pop	r8
    2de6:	7f 90       	pop	r7
    2de8:	6f 90       	pop	r6
    2dea:	5f 90       	pop	r5
    2dec:	4f 90       	pop	r4
    2dee:	3f 90       	pop	r3
    2df0:	2f 90       	pop	r2
    2df2:	08 95       	ret

00002df4 <loop>:
// ===                    MAIN PROGRAM LOOP                     ===
// ================================================================

void loop() {
    // if programming failed, don't try to do anything
    if (!dmpReady) return;
    2df4:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <dmpReady>
    2df8:	88 23       	and	r24, r24
    2dfa:	09 f4       	brne	.+2      	; 0x2dfe <loop+0xa>
    2dfc:	e4 c0       	rjmp	.+456    	; 0x2fc6 <loop+0x1d2>

    // wait for MPU interrupt or extra packet(s) available
    while (!mpuInterrupt && fifoCount < packetSize) {
    2dfe:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <fifoCount>
    2e02:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <fifoCount+0x1>
    2e06:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <packetSize>
    2e0a:	90 91 c0 01 	lds	r25, 0x01C0	; 0x8001c0 <packetSize+0x1>
    2e0e:	40 91 42 01 	lds	r20, 0x0142	; 0x800142 <__data_end>
    2e12:	41 11       	cpse	r20, r1
    2e14:	03 c0       	rjmp	.+6      	; 0x2e1c <loop+0x28>
    2e16:	28 17       	cp	r18, r24
    2e18:	39 07       	cpc	r19, r25
    2e1a:	c8 f3       	brcs	.-14     	; 0x2e0e <loop+0x1a>
        // .
        // .
    }

    // reset interrupt flag and get INT_STATUS byte
    mpuInterrupt = false;
    2e1c:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <__data_end>
    mpuIntStatus = mpu.getIntStatus();
    2e20:	85 ec       	ldi	r24, 0xC5	; 197
    2e22:	91 e0       	ldi	r25, 0x01	; 1
    2e24:	0e 94 88 0c 	call	0x1910	; 0x1910 <_ZN7MPU605012getIntStatusEv>
    2e28:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <mpuIntStatus>

    // get current FIFO count
    fifoCount = mpu.getFIFOCount();
    2e2c:	85 ec       	ldi	r24, 0xC5	; 197
    2e2e:	91 e0       	ldi	r25, 0x01	; 1
    2e30:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <_ZN7MPU605012getFIFOCountEv>
    2e34:	9c 01       	movw	r18, r24
    2e36:	90 93 be 01 	sts	0x01BE, r25	; 0x8001be <fifoCount+0x1>
    2e3a:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <fifoCount>

    // check for overflow (this should never happen unless our code is too inefficient)
    if ((mpuIntStatus & 0x10) || fifoCount == 1024) {
    2e3e:	90 91 c2 01 	lds	r25, 0x01C2	; 0x8001c2 <mpuIntStatus>
    2e42:	94 fd       	sbrc	r25, 4
    2e44:	03 c0       	rjmp	.+6      	; 0x2e4c <loop+0x58>
    2e46:	21 15       	cp	r18, r1
    2e48:	34 40       	sbci	r19, 0x04	; 4
    2e4a:	51 f4       	brne	.+20     	; 0x2e60 <loop+0x6c>
        // reset so we can continue cleanly
        mpu.resetFIFO();
    2e4c:	85 ec       	ldi	r24, 0xC5	; 197
    2e4e:	91 e0       	ldi	r25, 0x01	; 1
    2e50:	0e 94 a8 0c 	call	0x1950	; 0x1950 <_ZN7MPU60509resetFIFOEv>
        Serial.println(F("FIFO overflow!"));
    2e54:	66 e9       	ldi	r22, 0x96	; 150
    2e56:	70 e0       	ldi	r23, 0x00	; 0
    2e58:	88 e9       	ldi	r24, 0x98	; 152
    2e5a:	92 e0       	ldi	r25, 0x02	; 2
    2e5c:	0c 94 71 21 	jmp	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>

    // otherwise, check for DMP data ready interrupt (this should happen frequently)
    } else if (mpuIntStatus & 0x02) {
    2e60:	91 ff       	sbrs	r25, 1
    2e62:	b1 c0       	rjmp	.+354    	; 0x2fc6 <loop+0x1d2>
        // wait for correct available data length, should be a VERY short wait
        while (fifoCount < packetSize) fifoCount = mpu.getFIFOCount();
    2e64:	40 91 bf 01 	lds	r20, 0x01BF	; 0x8001bf <packetSize>
    2e68:	50 91 c0 01 	lds	r21, 0x01C0	; 0x8001c0 <packetSize+0x1>
    2e6c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <fifoCount>
    2e70:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <fifoCount+0x1>
    2e74:	84 17       	cp	r24, r20
    2e76:	95 07       	cpc	r25, r21
    2e78:	48 f4       	brcc	.+18     	; 0x2e8c <loop+0x98>
    2e7a:	85 ec       	ldi	r24, 0xC5	; 197
    2e7c:	91 e0       	ldi	r25, 0x01	; 1
    2e7e:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <_ZN7MPU605012getFIFOCountEv>
    2e82:	90 93 be 01 	sts	0x01BE, r25	; 0x8001be <fifoCount+0x1>
    2e86:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <fifoCount>
    2e8a:	ec cf       	rjmp	.-40     	; 0x2e64 <loop+0x70>

        // read a packet from FIFO
        mpu.getFIFOBytes(fifoBuffer, packetSize);
    2e8c:	6d e7       	ldi	r22, 0x7D	; 125
    2e8e:	71 e0       	ldi	r23, 0x01	; 1
    2e90:	85 ec       	ldi	r24, 0xC5	; 197
    2e92:	91 e0       	ldi	r25, 0x01	; 1
    2e94:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <_ZN7MPU605012getFIFOBytesEPhh>
        
        // track FIFO count here in case there is > 1 packet available
        // (this lets us immediately read more without waiting for an interrupt)
        fifoCount -= packetSize;
    2e98:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <fifoCount>
    2e9c:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <fifoCount+0x1>
    2ea0:	20 91 bf 01 	lds	r18, 0x01BF	; 0x8001bf <packetSize>
    2ea4:	30 91 c0 01 	lds	r19, 0x01C0	; 0x8001c0 <packetSize+0x1>
    2ea8:	82 1b       	sub	r24, r18
    2eaa:	93 0b       	sbc	r25, r19
    2eac:	90 93 be 01 	sts	0x01BE, r25	; 0x8001be <fifoCount+0x1>
    2eb0:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <fifoCount>
            Serial.println(euler[2] * 180/M_PI);
        #endif

        #ifdef OUTPUT_READABLE_YAWPITCHROLL
            // display Euler angles in degrees
            mpu.dmpGetQuaternion(&q, fifoBuffer);
    2eb4:	4d e7       	ldi	r20, 0x7D	; 125
    2eb6:	51 e0       	ldi	r21, 0x01	; 1
    2eb8:	6d e6       	ldi	r22, 0x6D	; 109
    2eba:	71 e0       	ldi	r23, 0x01	; 1
    2ebc:	85 ec       	ldi	r24, 0xC5	; 197
    2ebe:	91 e0       	ldi	r25, 0x01	; 1
    2ec0:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <_ZN7MPU605016dmpGetQuaternionEP10QuaternionPKh>
            mpu.dmpGetGravity(&gravity, &q);
    2ec4:	4d e6       	ldi	r20, 0x6D	; 109
    2ec6:	51 e0       	ldi	r21, 0x01	; 1
    2ec8:	6f e4       	ldi	r22, 0x4F	; 79
    2eca:	71 e0       	ldi	r23, 0x01	; 1
    2ecc:	85 ec       	ldi	r24, 0xC5	; 197
    2ece:	91 e0       	ldi	r25, 0x01	; 1
    2ed0:	0e 94 42 15 	call	0x2a84	; 0x2a84 <_ZN7MPU605013dmpGetGravityEP11VectorFloatP10Quaternion>
            mpu.dmpGetYawPitchRoll(ypr, &q, &gravity);
    2ed4:	2f e4       	ldi	r18, 0x4F	; 79
    2ed6:	31 e0       	ldi	r19, 0x01	; 1
    2ed8:	4d e6       	ldi	r20, 0x6D	; 109
    2eda:	51 e0       	ldi	r21, 0x01	; 1
    2edc:	63 e4       	ldi	r22, 0x43	; 67
    2ede:	71 e0       	ldi	r23, 0x01	; 1
    2ee0:	85 ec       	ldi	r24, 0xC5	; 197
    2ee2:	91 e0       	ldi	r25, 0x01	; 1
    2ee4:	0e 94 08 16 	call	0x2c10	; 0x2c10 <_ZN7MPU605018dmpGetYawPitchRollEPfP10QuaternionP11VectorFloat>
            Serial.print("ypr\t");
    2ee8:	6c e0       	ldi	r22, 0x0C	; 12
    2eea:	71 e0       	ldi	r23, 0x01	; 1
    2eec:	88 e9       	ldi	r24, 0x98	; 152
    2eee:	92 e0       	ldi	r25, 0x02	; 2
    2ef0:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_ZN5Print5printEPKc>
            Serial.print(ypr[0] * 180/M_PI);
    2ef4:	20 e0       	ldi	r18, 0x00	; 0
    2ef6:	30 e0       	ldi	r19, 0x00	; 0
    2ef8:	44 e3       	ldi	r20, 0x34	; 52
    2efa:	53 e4       	ldi	r21, 0x43	; 67
    2efc:	60 91 43 01 	lds	r22, 0x0143	; 0x800143 <ypr>
    2f00:	70 91 44 01 	lds	r23, 0x0144	; 0x800144 <ypr+0x1>
    2f04:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <ypr+0x2>
    2f08:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <ypr+0x3>
    2f0c:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <__mulsf3>
    2f10:	2b ed       	ldi	r18, 0xDB	; 219
    2f12:	3f e0       	ldi	r19, 0x0F	; 15
    2f14:	49 e4       	ldi	r20, 0x49	; 73
    2f16:	50 e4       	ldi	r21, 0x40	; 64
    2f18:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <__divsf3>
    2f1c:	ab 01       	movw	r20, r22
    2f1e:	bc 01       	movw	r22, r24
    2f20:	22 e0       	ldi	r18, 0x02	; 2
    2f22:	30 e0       	ldi	r19, 0x00	; 0
    2f24:	88 e9       	ldi	r24, 0x98	; 152
    2f26:	92 e0       	ldi	r25, 0x02	; 2
    2f28:	0e 94 55 23 	call	0x46aa	; 0x46aa <_ZN5Print5printEdi>
            Serial.print("\t");
    2f2c:	6f e0       	ldi	r22, 0x0F	; 15
    2f2e:	71 e0       	ldi	r23, 0x01	; 1
    2f30:	88 e9       	ldi	r24, 0x98	; 152
    2f32:	92 e0       	ldi	r25, 0x02	; 2
    2f34:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_ZN5Print5printEPKc>
            Serial.print(ypr[1] * 180/M_PI);
    2f38:	20 e0       	ldi	r18, 0x00	; 0
    2f3a:	30 e0       	ldi	r19, 0x00	; 0
    2f3c:	44 e3       	ldi	r20, 0x34	; 52
    2f3e:	53 e4       	ldi	r21, 0x43	; 67
    2f40:	60 91 47 01 	lds	r22, 0x0147	; 0x800147 <ypr+0x4>
    2f44:	70 91 48 01 	lds	r23, 0x0148	; 0x800148 <ypr+0x5>
    2f48:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <ypr+0x6>
    2f4c:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <ypr+0x7>
    2f50:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <__mulsf3>
    2f54:	2b ed       	ldi	r18, 0xDB	; 219
    2f56:	3f e0       	ldi	r19, 0x0F	; 15
    2f58:	49 e4       	ldi	r20, 0x49	; 73
    2f5a:	50 e4       	ldi	r21, 0x40	; 64
    2f5c:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <__divsf3>
    2f60:	ab 01       	movw	r20, r22
    2f62:	bc 01       	movw	r22, r24
    2f64:	22 e0       	ldi	r18, 0x02	; 2
    2f66:	30 e0       	ldi	r19, 0x00	; 0
    2f68:	88 e9       	ldi	r24, 0x98	; 152
    2f6a:	92 e0       	ldi	r25, 0x02	; 2
    2f6c:	0e 94 55 23 	call	0x46aa	; 0x46aa <_ZN5Print5printEdi>
            Serial.print("\t");
    2f70:	6f e0       	ldi	r22, 0x0F	; 15
    2f72:	71 e0       	ldi	r23, 0x01	; 1
    2f74:	88 e9       	ldi	r24, 0x98	; 152
    2f76:	92 e0       	ldi	r25, 0x02	; 2
    2f78:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_ZN5Print5printEPKc>
            Serial.println(ypr[2] * 180/M_PI);
    2f7c:	20 e0       	ldi	r18, 0x00	; 0
    2f7e:	30 e0       	ldi	r19, 0x00	; 0
    2f80:	44 e3       	ldi	r20, 0x34	; 52
    2f82:	53 e4       	ldi	r21, 0x43	; 67
    2f84:	60 91 4b 01 	lds	r22, 0x014B	; 0x80014b <ypr+0x8>
    2f88:	70 91 4c 01 	lds	r23, 0x014C	; 0x80014c <ypr+0x9>
    2f8c:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <ypr+0xa>
    2f90:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <ypr+0xb>
    2f94:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <__mulsf3>
    2f98:	2b ed       	ldi	r18, 0xDB	; 219
    2f9a:	3f e0       	ldi	r19, 0x0F	; 15
    2f9c:	49 e4       	ldi	r20, 0x49	; 73
    2f9e:	50 e4       	ldi	r21, 0x40	; 64
    2fa0:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <__divsf3>
    2fa4:	ab 01       	movw	r20, r22
    2fa6:	bc 01       	movw	r22, r24
    2fa8:	22 e0       	ldi	r18, 0x02	; 2
    2faa:	30 e0       	ldi	r19, 0x00	; 0
    2fac:	88 e9       	ldi	r24, 0x98	; 152
    2fae:	92 e0       	ldi	r25, 0x02	; 2
    2fb0:	0e 94 57 23 	call	0x46ae	; 0x46ae <_ZN5Print7printlnEdi>
            Serial.write(teapotPacket, 14);
            teapotPacket[11]++; // packetCount, loops at 0xFF on purpose
        #endif

        // blink LED to indicate activity
        blinkState = !blinkState;
    2fb4:	60 91 c4 01 	lds	r22, 0x01C4	; 0x8001c4 <blinkState>
    2fb8:	81 e0       	ldi	r24, 0x01	; 1
    2fba:	68 27       	eor	r22, r24
    2fbc:	60 93 c4 01 	sts	0x01C4, r22	; 0x8001c4 <blinkState>
        digitalWrite(LED_PIN, blinkState);
    2fc0:	8d e0       	ldi	r24, 0x0D	; 13
    2fc2:	0c 94 1b 25 	jmp	0x4a36	; 0x4a36 <digitalWrite>
    2fc6:	08 95       	ret

00002fc8 <_GLOBAL__sub_I__ZN7MPU605013dmpInitializeEv>:

// class default I2C address is 0x68
// specific I2C addresses may be passed as a parameter here
// AD0 low = 0x68 (default for SparkFun breakout and InvenSense evaluation board)
// AD0 high = 0x69
MPU6050 mpu;
    2fc8:	85 ec       	ldi	r24, 0xC5	; 197
    2fca:	91 e0       	ldi	r25, 0x01	; 1
    2fcc:	0e 94 29 0c 	call	0x1852	; 0x1852 <_ZN7MPU6050C1Ev>
        float x;
        float y;
        float z;
        
        Quaternion() {
            w = 1.0f;
    2fd0:	ed e6       	ldi	r30, 0x6D	; 109
    2fd2:	f1 e0       	ldi	r31, 0x01	; 1
    2fd4:	80 e0       	ldi	r24, 0x00	; 0
    2fd6:	90 e0       	ldi	r25, 0x00	; 0
    2fd8:	a0 e8       	ldi	r26, 0x80	; 128
    2fda:	bf e3       	ldi	r27, 0x3F	; 63
    2fdc:	80 83       	st	Z, r24
    2fde:	91 83       	std	Z+1, r25	; 0x01
    2fe0:	a2 83       	std	Z+2, r26	; 0x02
    2fe2:	b3 83       	std	Z+3, r27	; 0x03
            x = 0.0f;
    2fe4:	14 82       	std	Z+4, r1	; 0x04
    2fe6:	15 82       	std	Z+5, r1	; 0x05
    2fe8:	16 82       	std	Z+6, r1	; 0x06
    2fea:	17 82       	std	Z+7, r1	; 0x07
            y = 0.0f;
    2fec:	10 86       	std	Z+8, r1	; 0x08
    2fee:	11 86       	std	Z+9, r1	; 0x09
    2ff0:	12 86       	std	Z+10, r1	; 0x0a
    2ff2:	13 86       	std	Z+11, r1	; 0x0b
            z = 0.0f;
    2ff4:	14 86       	std	Z+12, r1	; 0x0c
    2ff6:	15 86       	std	Z+13, r1	; 0x0d
    2ff8:	16 86       	std	Z+14, r1	; 0x0e
    2ffa:	17 86       	std	Z+15, r1	; 0x0f
        int16_t x;
        int16_t y;
        int16_t z;

        VectorInt16() {
            x = 0;
    2ffc:	e7 e6       	ldi	r30, 0x67	; 103
    2ffe:	f1 e0       	ldi	r31, 0x01	; 1
    3000:	11 82       	std	Z+1, r1	; 0x01
    3002:	10 82       	st	Z, r1
            y = 0;
    3004:	13 82       	std	Z+3, r1	; 0x03
    3006:	12 82       	std	Z+2, r1	; 0x02
            z = 0;
    3008:	15 82       	std	Z+5, r1	; 0x05
    300a:	14 82       	std	Z+4, r1	; 0x04
        int16_t x;
        int16_t y;
        int16_t z;

        VectorInt16() {
            x = 0;
    300c:	e1 e6       	ldi	r30, 0x61	; 97
    300e:	f1 e0       	ldi	r31, 0x01	; 1
    3010:	11 82       	std	Z+1, r1	; 0x01
    3012:	10 82       	st	Z, r1
            y = 0;
    3014:	13 82       	std	Z+3, r1	; 0x03
    3016:	12 82       	std	Z+2, r1	; 0x02
            z = 0;
    3018:	15 82       	std	Z+5, r1	; 0x05
    301a:	14 82       	std	Z+4, r1	; 0x04
        int16_t x;
        int16_t y;
        int16_t z;

        VectorInt16() {
            x = 0;
    301c:	eb e5       	ldi	r30, 0x5B	; 91
    301e:	f1 e0       	ldi	r31, 0x01	; 1
    3020:	11 82       	std	Z+1, r1	; 0x01
    3022:	10 82       	st	Z, r1
            y = 0;
    3024:	13 82       	std	Z+3, r1	; 0x03
    3026:	12 82       	std	Z+2, r1	; 0x02
            z = 0;
    3028:	15 82       	std	Z+5, r1	; 0x05
    302a:	14 82       	std	Z+4, r1	; 0x04
        float x;
        float y;
        float z;

        VectorFloat() {
            x = 0;
    302c:	ef e4       	ldi	r30, 0x4F	; 79
    302e:	f1 e0       	ldi	r31, 0x01	; 1
    3030:	10 82       	st	Z, r1
    3032:	11 82       	std	Z+1, r1	; 0x01
    3034:	12 82       	std	Z+2, r1	; 0x02
    3036:	13 82       	std	Z+3, r1	; 0x03
            y = 0;
    3038:	14 82       	std	Z+4, r1	; 0x04
    303a:	15 82       	std	Z+5, r1	; 0x05
    303c:	16 82       	std	Z+6, r1	; 0x06
    303e:	17 82       	std	Z+7, r1	; 0x07
            z = 0;
    3040:	10 86       	std	Z+8, r1	; 0x08
    3042:	11 86       	std	Z+9, r1	; 0x09
    3044:	12 86       	std	Z+10, r1	; 0x0a
    3046:	13 86       	std	Z+11, r1	; 0x0b
    3048:	08 95       	ret

0000304a <setup>:
// ================================================================

void setup() {
    // join I2C bus (I2Cdev library doesn't do this automatically)
    #if I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE
        Wire.begin();
    304a:	86 e4       	ldi	r24, 0x46	; 70
    304c:	92 e0       	ldi	r25, 0x02	; 2
    304e:	0e 94 92 1b 	call	0x3724	; 0x3724 <_ZN7TwoWire5beginEv>
        TWBR = 24; // 400kHz I2C clock (200kHz if CPU is 8MHz)
    3052:	88 e1       	ldi	r24, 0x18	; 24
    3054:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    3058:	26 e0       	ldi	r18, 0x06	; 6
    305a:	40 e0       	ldi	r20, 0x00	; 0
    305c:	52 ec       	ldi	r21, 0xC2	; 194
    305e:	61 e0       	ldi	r22, 0x01	; 1
    3060:	70 e0       	ldi	r23, 0x00	; 0
    3062:	88 e9       	ldi	r24, 0x98	; 152
    3064:	92 e0       	ldi	r25, 0x02	; 2
    3066:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <_ZN14HardwareSerial5beginEmh>
    // the baud timing being too misaligned with processor ticks. You must use
    // 38400 or slower in these cases, or use some kind of external separate
    // crystal solution for the UART timer.

    // initialize device
    Serial.println(F("Initializing I2C devices..."));
    306a:	63 ee       	ldi	r22, 0xE3	; 227
    306c:	71 e0       	ldi	r23, 0x01	; 1
    306e:	88 e9       	ldi	r24, 0x98	; 152
    3070:	92 e0       	ldi	r25, 0x02	; 2
    3072:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    mpu.initialize();
    3076:	85 ec       	ldi	r24, 0xC5	; 197
    3078:	91 e0       	ldi	r25, 0x01	; 1
    307a:	0e 94 cf 0c 	call	0x199e	; 0x199e <_ZN7MPU605010initializeEv>

    // verify connection
    Serial.println(F("Testing device connections..."));
    307e:	65 ec       	ldi	r22, 0xC5	; 197
    3080:	71 e0       	ldi	r23, 0x01	; 1
    3082:	88 e9       	ldi	r24, 0x98	; 152
    3084:	92 e0       	ldi	r25, 0x02	; 2
    3086:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    Serial.println(mpu.testConnection() ? F("MPU6050 connection successful") : F("MPU6050 connection failed"));
    308a:	85 ec       	ldi	r24, 0xC5	; 197
    308c:	91 e0       	ldi	r25, 0x01	; 1
    308e:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <_ZN7MPU605014testConnectionEv>
    3092:	81 11       	cpse	r24, r1
    3094:	03 c0       	rjmp	.+6      	; 0x309c <setup+0x52>
    3096:	6d e8       	ldi	r22, 0x8D	; 141
    3098:	71 e0       	ldi	r23, 0x01	; 1
    309a:	02 c0       	rjmp	.+4      	; 0x30a0 <setup+0x56>
    309c:	67 ea       	ldi	r22, 0xA7	; 167
    309e:	71 e0       	ldi	r23, 0x01	; 1
    30a0:	88 e9       	ldi	r24, 0x98	; 152
    30a2:	92 e0       	ldi	r25, 0x02	; 2
    30a4:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>

    // wait for ready
    Serial.println(F("\nSend any character to begin DMP programming and demo: "));
    30a8:	65 e5       	ldi	r22, 0x55	; 85
    30aa:	71 e0       	ldi	r23, 0x01	; 1
    30ac:	88 e9       	ldi	r24, 0x98	; 152
    30ae:	92 e0       	ldi	r25, 0x02	; 2
    30b0:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    while (Serial.available() && Serial.read()); // empty buffer
    30b4:	88 e9       	ldi	r24, 0x98	; 152
    30b6:	92 e0       	ldi	r25, 0x02	; 2
    30b8:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <_ZN14HardwareSerial9availableEv>
    30bc:	89 2b       	or	r24, r25
    30be:	31 f0       	breq	.+12     	; 0x30cc <setup+0x82>
    30c0:	88 e9       	ldi	r24, 0x98	; 152
    30c2:	92 e0       	ldi	r25, 0x02	; 2
    30c4:	0e 94 51 1f 	call	0x3ea2	; 0x3ea2 <_ZN14HardwareSerial4readEv>
    30c8:	89 2b       	or	r24, r25
    30ca:	a1 f7       	brne	.-24     	; 0x30b4 <setup+0x6a>
    while (!Serial.available());                 // wait for data
    30cc:	88 e9       	ldi	r24, 0x98	; 152
    30ce:	92 e0       	ldi	r25, 0x02	; 2
    30d0:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <_ZN14HardwareSerial9availableEv>
    30d4:	89 2b       	or	r24, r25
    30d6:	d1 f3       	breq	.-12     	; 0x30cc <setup+0x82>
    while (Serial.available() && Serial.read()); // empty buffer again
    30d8:	88 e9       	ldi	r24, 0x98	; 152
    30da:	92 e0       	ldi	r25, 0x02	; 2
    30dc:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <_ZN14HardwareSerial9availableEv>
    30e0:	89 2b       	or	r24, r25
    30e2:	31 f0       	breq	.+12     	; 0x30f0 <setup+0xa6>
    30e4:	88 e9       	ldi	r24, 0x98	; 152
    30e6:	92 e0       	ldi	r25, 0x02	; 2
    30e8:	0e 94 51 1f 	call	0x3ea2	; 0x3ea2 <_ZN14HardwareSerial4readEv>
    30ec:	89 2b       	or	r24, r25
    30ee:	a1 f7       	brne	.-24     	; 0x30d8 <setup+0x8e>

    // load and configure the DMP
    Serial.println(F("Initializing DMP..."));
    30f0:	61 e4       	ldi	r22, 0x41	; 65
    30f2:	71 e0       	ldi	r23, 0x01	; 1
    30f4:	88 e9       	ldi	r24, 0x98	; 152
    30f6:	92 e0       	ldi	r25, 0x02	; 2
    30f8:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    devStatus = mpu.dmpInitialize();
    30fc:	85 ec       	ldi	r24, 0xC5	; 197
    30fe:	91 e0       	ldi	r25, 0x01	; 1
    3100:	0e 94 1a 10 	call	0x2034	; 0x2034 <_ZN7MPU605013dmpInitializeEv>
    3104:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <devStatus>

    // supply your own gyro offsets here, scaled for min sensitivity
    mpu.setXGyroOffset(220);
    3108:	6c ed       	ldi	r22, 0xDC	; 220
    310a:	70 e0       	ldi	r23, 0x00	; 0
    310c:	85 ec       	ldi	r24, 0xC5	; 197
    310e:	91 e0       	ldi	r25, 0x01	; 1
    3110:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <_ZN7MPU605014setXGyroOffsetEi>
    mpu.setYGyroOffset(76);
    3114:	6c e4       	ldi	r22, 0x4C	; 76
    3116:	70 e0       	ldi	r23, 0x00	; 0
    3118:	85 ec       	ldi	r24, 0xC5	; 197
    311a:	91 e0       	ldi	r25, 0x01	; 1
    311c:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <_ZN7MPU605014setYGyroOffsetEi>
    mpu.setZGyroOffset(-85);
    3120:	6b ea       	ldi	r22, 0xAB	; 171
    3122:	7f ef       	ldi	r23, 0xFF	; 255
    3124:	85 ec       	ldi	r24, 0xC5	; 197
    3126:	91 e0       	ldi	r25, 0x01	; 1
    3128:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <_ZN7MPU605014setZGyroOffsetEi>
    mpu.setZAccelOffset(1788); // 1688 factory default for my test chip
    312c:	6c ef       	ldi	r22, 0xFC	; 252
    312e:	76 e0       	ldi	r23, 0x06	; 6
    3130:	85 ec       	ldi	r24, 0xC5	; 197
    3132:	91 e0       	ldi	r25, 0x01	; 1
    3134:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <_ZN7MPU605015setZAccelOffsetEi>

    // make sure it worked (returns 0 if so)
    if (devStatus == 0) {
    3138:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <devStatus>
    313c:	81 11       	cpse	r24, r1
    313e:	30 c0       	rjmp	.+96     	; 0x31a0 <setup+0x156>
        // turn on the DMP, now that it's ready
        Serial.println(F("Enabling DMP..."));
    3140:	61 e3       	ldi	r22, 0x31	; 49
    3142:	71 e0       	ldi	r23, 0x01	; 1
    3144:	88 e9       	ldi	r24, 0x98	; 152
    3146:	92 e0       	ldi	r25, 0x02	; 2
    3148:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        mpu.setDMPEnabled(true);
    314c:	61 e0       	ldi	r22, 0x01	; 1
    314e:	85 ec       	ldi	r24, 0xC5	; 197
    3150:	91 e0       	ldi	r25, 0x01	; 1
    3152:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <_ZN7MPU605013setDMPEnabledEb>

        // enable Arduino interrupt detection
        Serial.println(F("Enabling interrupt detection (Arduino external interrupt 0)..."));
    3156:	62 ef       	ldi	r22, 0xF2	; 242
    3158:	70 e0       	ldi	r23, 0x00	; 0
    315a:	88 e9       	ldi	r24, 0x98	; 152
    315c:	92 e0       	ldi	r25, 0x02	; 2
    315e:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        attachInterrupt(0, dmpDataReady, RISING);
    3162:	43 e0       	ldi	r20, 0x03	; 3
    3164:	50 e0       	ldi	r21, 0x00	; 0
    3166:	66 e1       	ldi	r22, 0x16	; 22
    3168:	70 e1       	ldi	r23, 0x10	; 16
    316a:	80 e0       	ldi	r24, 0x00	; 0
    316c:	0e 94 6a 23 	call	0x46d4	; 0x46d4 <attachInterrupt>
        mpuIntStatus = mpu.getIntStatus();
    3170:	85 ec       	ldi	r24, 0xC5	; 197
    3172:	91 e0       	ldi	r25, 0x01	; 1
    3174:	0e 94 88 0c 	call	0x1910	; 0x1910 <_ZN7MPU605012getIntStatusEv>
    3178:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <mpuIntStatus>

        // set our DMP Ready flag so the main loop() function knows it's okay to use it
        Serial.println(F("DMP ready! Waiting for first interrupt..."));
    317c:	68 ec       	ldi	r22, 0xC8	; 200
    317e:	70 e0       	ldi	r23, 0x00	; 0
    3180:	88 e9       	ldi	r24, 0x98	; 152
    3182:	92 e0       	ldi	r25, 0x02	; 2
    3184:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        dmpReady = true;
    3188:	81 e0       	ldi	r24, 0x01	; 1
    318a:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <dmpReady>

        // get expected DMP packet size for later comparison
        packetSize = mpu.dmpGetFIFOPacketSize();
    318e:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <mpu+0x2>
    3192:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <mpu+0x3>
    3196:	90 93 c0 01 	sts	0x01C0, r25	; 0x8001c0 <packetSize+0x1>
    319a:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <packetSize>
    319e:	14 c0       	rjmp	.+40     	; 0x31c8 <setup+0x17e>
    } else {
        // ERROR!
        // 1 = initial memory load failed
        // 2 = DMP configuration updates failed
        // (if it's going to break, usually the code will be 1)
        Serial.print(F("DMP Initialization failed (code "));
    31a0:	67 ea       	ldi	r22, 0xA7	; 167
    31a2:	70 e0       	ldi	r23, 0x00	; 0
    31a4:	88 e9       	ldi	r24, 0x98	; 152
    31a6:	92 e0       	ldi	r25, 0x02	; 2
    31a8:	0e 94 40 21 	call	0x4280	; 0x4280 <_ZN5Print5printEPK19__FlashStringHelper>
        Serial.print(devStatus);
    31ac:	4a e0       	ldi	r20, 0x0A	; 10
    31ae:	50 e0       	ldi	r21, 0x00	; 0
    31b0:	60 91 c1 01 	lds	r22, 0x01C1	; 0x8001c1 <devStatus>
    31b4:	88 e9       	ldi	r24, 0x98	; 152
    31b6:	92 e0       	ldi	r25, 0x02	; 2
    31b8:	0e 94 e6 21 	call	0x43cc	; 0x43cc <_ZN5Print5printEhi>
        Serial.println(F(")"));
    31bc:	65 ea       	ldi	r22, 0xA5	; 165
    31be:	70 e0       	ldi	r23, 0x00	; 0
    31c0:	88 e9       	ldi	r24, 0x98	; 152
    31c2:	92 e0       	ldi	r25, 0x02	; 2
    31c4:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    }

    // configure LED for output
    pinMode(LED_PIN, OUTPUT);
    31c8:	61 e0       	ldi	r22, 0x01	; 1
    31ca:	8d e0       	ldi	r24, 0x0D	; 13
    31cc:	0c 94 df 24 	jmp	0x49be	; 0x49be <pinMode>

000031d0 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    31d0:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <twi_state>
    31d4:	81 e0       	ldi	r24, 0x01	; 1
    31d6:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <twi_sendStop>
    31da:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <twi_inRepStart>
    31de:	61 e0       	ldi	r22, 0x01	; 1
    31e0:	82 e1       	ldi	r24, 0x12	; 18
    31e2:	0e 94 1b 25 	call	0x4a36	; 0x4a36 <digitalWrite>
    31e6:	61 e0       	ldi	r22, 0x01	; 1
    31e8:	83 e1       	ldi	r24, 0x13	; 19
    31ea:	0e 94 1b 25 	call	0x4a36	; 0x4a36 <digitalWrite>
    31ee:	e9 eb       	ldi	r30, 0xB9	; 185
    31f0:	f0 e0       	ldi	r31, 0x00	; 0
    31f2:	80 81       	ld	r24, Z
    31f4:	8e 7f       	andi	r24, 0xFE	; 254
    31f6:	80 83       	st	Z, r24
    31f8:	80 81       	ld	r24, Z
    31fa:	8d 7f       	andi	r24, 0xFD	; 253
    31fc:	80 83       	st	Z, r24
    31fe:	88 e4       	ldi	r24, 0x48	; 72
    3200:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    3204:	85 e4       	ldi	r24, 0x45	; 69
    3206:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    320a:	08 95       	ret

0000320c <twi_readFrom>:
    320c:	41 32       	cpi	r20, 0x21	; 33
    320e:	08 f0       	brcs	.+2      	; 0x3212 <twi_readFrom+0x6>
    3210:	43 c0       	rjmp	.+134    	; 0x3298 <twi_readFrom+0x8c>
    3212:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <twi_state>
    3216:	91 11       	cpse	r25, r1
    3218:	fc cf       	rjmp	.-8      	; 0x3212 <twi_readFrom+0x6>
    321a:	91 e0       	ldi	r25, 0x01	; 1
    321c:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <twi_state>
    3220:	20 93 43 02 	sts	0x0243, r18	; 0x800243 <twi_sendStop>
    3224:	2f ef       	ldi	r18, 0xFF	; 255
    3226:	20 93 d8 01 	sts	0x01D8, r18	; 0x8001d8 <twi_error>
    322a:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <twi_masterBufferIndex>
    322e:	24 0f       	add	r18, r20
    3230:	20 93 1c 02 	sts	0x021C, r18	; 0x80021c <twi_masterBufferLength>
    3234:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <twi_slarw>
    3238:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <twi_slarw>
    323c:	88 0f       	add	r24, r24
    323e:	89 2b       	or	r24, r25
    3240:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <twi_slarw>
    3244:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <twi_inRepStart>
    3248:	81 30       	cpi	r24, 0x01	; 1
    324a:	61 f4       	brne	.+24     	; 0x3264 <twi_readFrom+0x58>
    324c:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <twi_inRepStart>
    3250:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <twi_slarw>
    3254:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    3258:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    325c:	83 fd       	sbrc	r24, 3
    325e:	f8 cf       	rjmp	.-16     	; 0x3250 <twi_readFrom+0x44>
    3260:	85 ec       	ldi	r24, 0xC5	; 197
    3262:	01 c0       	rjmp	.+2      	; 0x3266 <twi_readFrom+0x5a>
    3264:	85 ee       	ldi	r24, 0xE5	; 229
    3266:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    326a:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <twi_state>
    326e:	81 30       	cpi	r24, 0x01	; 1
    3270:	e1 f3       	breq	.-8      	; 0x326a <twi_readFrom+0x5e>
    3272:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <twi_masterBufferIndex>
    3276:	84 17       	cp	r24, r20
    3278:	10 f4       	brcc	.+4      	; 0x327e <twi_readFrom+0x72>
    327a:	40 91 1d 02 	lds	r20, 0x021D	; 0x80021d <twi_masterBufferIndex>
    327e:	ae e1       	ldi	r26, 0x1E	; 30
    3280:	b2 e0       	ldi	r27, 0x02	; 2
    3282:	96 2f       	mov	r25, r22
    3284:	fb 01       	movw	r30, r22
    3286:	8e 2f       	mov	r24, r30
    3288:	89 1b       	sub	r24, r25
    328a:	84 17       	cp	r24, r20
    328c:	18 f4       	brcc	.+6      	; 0x3294 <twi_readFrom+0x88>
    328e:	8d 91       	ld	r24, X+
    3290:	81 93       	st	Z+, r24
    3292:	f9 cf       	rjmp	.-14     	; 0x3286 <twi_readFrom+0x7a>
    3294:	84 2f       	mov	r24, r20
    3296:	08 95       	ret
    3298:	80 e0       	ldi	r24, 0x00	; 0
    329a:	08 95       	ret

0000329c <twi_writeTo>:
    329c:	0f 93       	push	r16
    329e:	41 32       	cpi	r20, 0x21	; 33
    32a0:	08 f0       	brcs	.+2      	; 0x32a4 <twi_writeTo+0x8>
    32a2:	4a c0       	rjmp	.+148    	; 0x3338 <twi_writeTo+0x9c>
    32a4:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <twi_state>
    32a8:	91 11       	cpse	r25, r1
    32aa:	fc cf       	rjmp	.-8      	; 0x32a4 <twi_writeTo+0x8>
    32ac:	32 e0       	ldi	r19, 0x02	; 2
    32ae:	30 93 45 02 	sts	0x0245, r19	; 0x800245 <twi_state>
    32b2:	00 93 43 02 	sts	0x0243, r16	; 0x800243 <twi_sendStop>
    32b6:	3f ef       	ldi	r19, 0xFF	; 255
    32b8:	30 93 d8 01 	sts	0x01D8, r19	; 0x8001d8 <twi_error>
    32bc:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <twi_masterBufferIndex>
    32c0:	40 93 1c 02 	sts	0x021C, r20	; 0x80021c <twi_masterBufferLength>
    32c4:	56 2f       	mov	r21, r22
    32c6:	ae e1       	ldi	r26, 0x1E	; 30
    32c8:	b2 e0       	ldi	r27, 0x02	; 2
    32ca:	fb 01       	movw	r30, r22
    32cc:	3e 2f       	mov	r19, r30
    32ce:	35 1b       	sub	r19, r21
    32d0:	34 17       	cp	r19, r20
    32d2:	18 f4       	brcc	.+6      	; 0x32da <twi_writeTo+0x3e>
    32d4:	31 91       	ld	r19, Z+
    32d6:	3d 93       	st	X+, r19
    32d8:	f9 cf       	rjmp	.-14     	; 0x32cc <twi_writeTo+0x30>
    32da:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <twi_slarw>
    32de:	30 91 44 02 	lds	r19, 0x0244	; 0x800244 <twi_slarw>
    32e2:	88 0f       	add	r24, r24
    32e4:	83 2b       	or	r24, r19
    32e6:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <twi_slarw>
    32ea:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <twi_inRepStart>
    32ee:	81 30       	cpi	r24, 0x01	; 1
    32f0:	61 f4       	brne	.+24     	; 0x330a <twi_writeTo+0x6e>
    32f2:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <twi_inRepStart>
    32f6:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <twi_slarw>
    32fa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    32fe:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3302:	83 fd       	sbrc	r24, 3
    3304:	f8 cf       	rjmp	.-16     	; 0x32f6 <twi_writeTo+0x5a>
    3306:	85 ec       	ldi	r24, 0xC5	; 197
    3308:	01 c0       	rjmp	.+2      	; 0x330c <twi_writeTo+0x70>
    330a:	85 ee       	ldi	r24, 0xE5	; 229
    330c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3310:	22 23       	and	r18, r18
    3312:	21 f0       	breq	.+8      	; 0x331c <twi_writeTo+0x80>
    3314:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <twi_state>
    3318:	82 30       	cpi	r24, 0x02	; 2
    331a:	d1 f3       	breq	.-12     	; 0x3310 <twi_writeTo+0x74>
    331c:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <twi_error>
    3320:	8f 3f       	cpi	r24, 0xFF	; 255
    3322:	79 f0       	breq	.+30     	; 0x3342 <twi_writeTo+0xa6>
    3324:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <twi_error>
    3328:	80 32       	cpi	r24, 0x20	; 32
    332a:	41 f0       	breq	.+16     	; 0x333c <twi_writeTo+0xa0>
    332c:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <twi_error>
    3330:	80 33       	cpi	r24, 0x30	; 48
    3332:	31 f0       	breq	.+12     	; 0x3340 <twi_writeTo+0xa4>
    3334:	94 e0       	ldi	r25, 0x04	; 4
    3336:	05 c0       	rjmp	.+10     	; 0x3342 <twi_writeTo+0xa6>
    3338:	91 e0       	ldi	r25, 0x01	; 1
    333a:	03 c0       	rjmp	.+6      	; 0x3342 <twi_writeTo+0xa6>
    333c:	92 e0       	ldi	r25, 0x02	; 2
    333e:	01 c0       	rjmp	.+2      	; 0x3342 <twi_writeTo+0xa6>
    3340:	93 e0       	ldi	r25, 0x03	; 3
    3342:	89 2f       	mov	r24, r25
    3344:	0f 91       	pop	r16
    3346:	08 95       	ret

00003348 <twi_transmit>:
    3348:	61 32       	cpi	r22, 0x21	; 33
    334a:	98 f4       	brcc	.+38     	; 0x3372 <twi_transmit+0x2a>
    334c:	20 91 45 02 	lds	r18, 0x0245	; 0x800245 <twi_state>
    3350:	24 30       	cpi	r18, 0x04	; 4
    3352:	89 f4       	brne	.+34     	; 0x3376 <twi_transmit+0x2e>
    3354:	60 93 fa 01 	sts	0x01FA, r22	; 0x8001fa <twi_txBufferLength>
    3358:	28 2f       	mov	r18, r24
    335a:	ac ef       	ldi	r26, 0xFC	; 252
    335c:	b1 e0       	ldi	r27, 0x01	; 1
    335e:	fc 01       	movw	r30, r24
    3360:	8e 2f       	mov	r24, r30
    3362:	82 1b       	sub	r24, r18
    3364:	86 17       	cp	r24, r22
    3366:	18 f4       	brcc	.+6      	; 0x336e <twi_transmit+0x26>
    3368:	81 91       	ld	r24, Z+
    336a:	8d 93       	st	X+, r24
    336c:	f9 cf       	rjmp	.-14     	; 0x3360 <twi_transmit+0x18>
    336e:	80 e0       	ldi	r24, 0x00	; 0
    3370:	08 95       	ret
    3372:	81 e0       	ldi	r24, 0x01	; 1
    3374:	08 95       	ret
    3376:	82 e0       	ldi	r24, 0x02	; 2
    3378:	08 95       	ret

0000337a <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    337a:	85 ed       	ldi	r24, 0xD5	; 213
    337c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    3380:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3384:	84 fd       	sbrc	r24, 4
    3386:	fc cf       	rjmp	.-8      	; 0x3380 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    3388:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <twi_state>
    338c:	08 95       	ret

0000338e <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    338e:	85 ec       	ldi	r24, 0xC5	; 197
    3390:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    3394:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <twi_state>
    3398:	08 95       	ret

0000339a <__vector_24>:
}

ISR(TWI_vect)
{
    339a:	1f 92       	push	r1
    339c:	0f 92       	push	r0
    339e:	0f b6       	in	r0, 0x3f	; 63
    33a0:	0f 92       	push	r0
    33a2:	11 24       	eor	r1, r1
    33a4:	2f 93       	push	r18
    33a6:	3f 93       	push	r19
    33a8:	4f 93       	push	r20
    33aa:	5f 93       	push	r21
    33ac:	6f 93       	push	r22
    33ae:	7f 93       	push	r23
    33b0:	8f 93       	push	r24
    33b2:	9f 93       	push	r25
    33b4:	af 93       	push	r26
    33b6:	bf 93       	push	r27
    33b8:	ef 93       	push	r30
    33ba:	ff 93       	push	r31
  switch(TW_STATUS){
    33bc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    33c0:	88 7f       	andi	r24, 0xF8	; 248
    33c2:	80 36       	cpi	r24, 0x60	; 96
    33c4:	09 f4       	brne	.+2      	; 0x33c8 <__vector_24+0x2e>
    33c6:	9e c0       	rjmp	.+316    	; 0x3504 <__vector_24+0x16a>
    33c8:	78 f5       	brcc	.+94     	; 0x3428 <__vector_24+0x8e>
    33ca:	88 32       	cpi	r24, 0x28	; 40
    33cc:	09 f4       	brne	.+2      	; 0x33d0 <__vector_24+0x36>
    33ce:	5d c0       	rjmp	.+186    	; 0x348a <__vector_24+0xf0>
    33d0:	90 f4       	brcc	.+36     	; 0x33f6 <__vector_24+0x5c>
    33d2:	80 31       	cpi	r24, 0x10	; 16
    33d4:	09 f4       	brne	.+2      	; 0x33d8 <__vector_24+0x3e>
    33d6:	56 c0       	rjmp	.+172    	; 0x3484 <__vector_24+0xea>
    33d8:	38 f4       	brcc	.+14     	; 0x33e8 <__vector_24+0x4e>
    33da:	88 23       	and	r24, r24
    33dc:	09 f4       	brne	.+2      	; 0x33e0 <__vector_24+0x46>
    33de:	f5 c0       	rjmp	.+490    	; 0x35ca <__vector_24+0x230>
    33e0:	88 30       	cpi	r24, 0x08	; 8
    33e2:	09 f4       	brne	.+2      	; 0x33e6 <__vector_24+0x4c>
    33e4:	4f c0       	rjmp	.+158    	; 0x3484 <__vector_24+0xea>
    33e6:	f5 c0       	rjmp	.+490    	; 0x35d2 <__vector_24+0x238>
    33e8:	88 31       	cpi	r24, 0x18	; 24
    33ea:	09 f4       	brne	.+2      	; 0x33ee <__vector_24+0x54>
    33ec:	4e c0       	rjmp	.+156    	; 0x348a <__vector_24+0xf0>
    33ee:	80 32       	cpi	r24, 0x20	; 32
    33f0:	09 f4       	brne	.+2      	; 0x33f4 <__vector_24+0x5a>
    33f2:	5f c0       	rjmp	.+190    	; 0x34b2 <__vector_24+0x118>
    33f4:	ee c0       	rjmp	.+476    	; 0x35d2 <__vector_24+0x238>
    33f6:	80 34       	cpi	r24, 0x40	; 64
    33f8:	09 f4       	brne	.+2      	; 0x33fc <__vector_24+0x62>
    33fa:	6a c0       	rjmp	.+212    	; 0x34d0 <__vector_24+0x136>
    33fc:	58 f4       	brcc	.+22     	; 0x3414 <__vector_24+0x7a>
    33fe:	80 33       	cpi	r24, 0x30	; 48
    3400:	09 f4       	brne	.+2      	; 0x3404 <__vector_24+0x6a>
    3402:	57 c0       	rjmp	.+174    	; 0x34b2 <__vector_24+0x118>
    3404:	88 33       	cpi	r24, 0x38	; 56
    3406:	09 f0       	breq	.+2      	; 0x340a <__vector_24+0x70>
    3408:	e4 c0       	rjmp	.+456    	; 0x35d2 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    340a:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <twi_error>
      twi_releaseBus();
    340e:	0e 94 c7 19 	call	0x338e	; 0x338e <twi_releaseBus>
      break;
    3412:	df c0       	rjmp	.+446    	; 0x35d2 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    3414:	80 35       	cpi	r24, 0x50	; 80
    3416:	09 f4       	brne	.+2      	; 0x341a <__vector_24+0x80>
    3418:	4f c0       	rjmp	.+158    	; 0x34b8 <__vector_24+0x11e>
    341a:	88 35       	cpi	r24, 0x58	; 88
    341c:	09 f4       	brne	.+2      	; 0x3420 <__vector_24+0x86>
    341e:	5d c0       	rjmp	.+186    	; 0x34da <__vector_24+0x140>
    3420:	88 34       	cpi	r24, 0x48	; 72
    3422:	09 f0       	breq	.+2      	; 0x3426 <__vector_24+0x8c>
    3424:	d6 c0       	rjmp	.+428    	; 0x35d2 <__vector_24+0x238>
    3426:	d3 c0       	rjmp	.+422    	; 0x35ce <__vector_24+0x234>
    3428:	88 39       	cpi	r24, 0x98	; 152
    342a:	09 f4       	brne	.+2      	; 0x342e <__vector_24+0x94>
    342c:	c4 c0       	rjmp	.+392    	; 0x35b6 <__vector_24+0x21c>
    342e:	a8 f4       	brcc	.+42     	; 0x345a <__vector_24+0xc0>
    3430:	88 37       	cpi	r24, 0x78	; 120
    3432:	09 f4       	brne	.+2      	; 0x3436 <__vector_24+0x9c>
    3434:	67 c0       	rjmp	.+206    	; 0x3504 <__vector_24+0x16a>
    3436:	38 f4       	brcc	.+14     	; 0x3446 <__vector_24+0xac>
    3438:	88 36       	cpi	r24, 0x68	; 104
    343a:	09 f4       	brne	.+2      	; 0x343e <__vector_24+0xa4>
    343c:	63 c0       	rjmp	.+198    	; 0x3504 <__vector_24+0x16a>
    343e:	80 37       	cpi	r24, 0x70	; 112
    3440:	09 f4       	brne	.+2      	; 0x3444 <__vector_24+0xaa>
    3442:	60 c0       	rjmp	.+192    	; 0x3504 <__vector_24+0x16a>
    3444:	c6 c0       	rjmp	.+396    	; 0x35d2 <__vector_24+0x238>
    3446:	88 38       	cpi	r24, 0x88	; 136
    3448:	09 f4       	brne	.+2      	; 0x344c <__vector_24+0xb2>
    344a:	b5 c0       	rjmp	.+362    	; 0x35b6 <__vector_24+0x21c>
    344c:	80 39       	cpi	r24, 0x90	; 144
    344e:	09 f4       	brne	.+2      	; 0x3452 <__vector_24+0xb8>
    3450:	5f c0       	rjmp	.+190    	; 0x3510 <__vector_24+0x176>
    3452:	80 38       	cpi	r24, 0x80	; 128
    3454:	09 f0       	breq	.+2      	; 0x3458 <__vector_24+0xbe>
    3456:	bd c0       	rjmp	.+378    	; 0x35d2 <__vector_24+0x238>
    3458:	5b c0       	rjmp	.+182    	; 0x3510 <__vector_24+0x176>
    345a:	80 3b       	cpi	r24, 0xB0	; 176
    345c:	09 f4       	brne	.+2      	; 0x3460 <__vector_24+0xc6>
    345e:	83 c0       	rjmp	.+262    	; 0x3566 <__vector_24+0x1cc>
    3460:	38 f4       	brcc	.+14     	; 0x3470 <__vector_24+0xd6>
    3462:	80 3a       	cpi	r24, 0xA0	; 160
    3464:	09 f4       	brne	.+2      	; 0x3468 <__vector_24+0xce>
    3466:	66 c0       	rjmp	.+204    	; 0x3534 <__vector_24+0x19a>
    3468:	88 3a       	cpi	r24, 0xA8	; 168
    346a:	09 f4       	brne	.+2      	; 0x346e <__vector_24+0xd4>
    346c:	7c c0       	rjmp	.+248    	; 0x3566 <__vector_24+0x1cc>
    346e:	b1 c0       	rjmp	.+354    	; 0x35d2 <__vector_24+0x238>
    3470:	80 3c       	cpi	r24, 0xC0	; 192
    3472:	09 f4       	brne	.+2      	; 0x3476 <__vector_24+0xdc>
    3474:	a4 c0       	rjmp	.+328    	; 0x35be <__vector_24+0x224>
    3476:	88 3c       	cpi	r24, 0xC8	; 200
    3478:	09 f4       	brne	.+2      	; 0x347c <__vector_24+0xe2>
    347a:	a1 c0       	rjmp	.+322    	; 0x35be <__vector_24+0x224>
    347c:	88 3b       	cpi	r24, 0xB8	; 184
    347e:	09 f4       	brne	.+2      	; 0x3482 <__vector_24+0xe8>
    3480:	87 c0       	rjmp	.+270    	; 0x3590 <__vector_24+0x1f6>
    3482:	a7 c0       	rjmp	.+334    	; 0x35d2 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    3484:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <twi_slarw>
    3488:	10 c0       	rjmp	.+32     	; 0x34aa <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    348a:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <twi_masterBufferIndex>
    348e:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <twi_masterBufferLength>
    3492:	98 17       	cp	r25, r24
    3494:	70 f5       	brcc	.+92     	; 0x34f2 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    3496:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <twi_masterBufferIndex>
    349a:	81 e0       	ldi	r24, 0x01	; 1
    349c:	8e 0f       	add	r24, r30
    349e:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <twi_masterBufferIndex>
    34a2:	f0 e0       	ldi	r31, 0x00	; 0
    34a4:	e2 5e       	subi	r30, 0xE2	; 226
    34a6:	fd 4f       	sbci	r31, 0xFD	; 253
    34a8:	80 81       	ld	r24, Z
    34aa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    34ae:	85 ec       	ldi	r24, 0xC5	; 197
    34b0:	83 c0       	rjmp	.+262    	; 0x35b8 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    34b2:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <twi_error>
    34b6:	8b c0       	rjmp	.+278    	; 0x35ce <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    34b8:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <twi_masterBufferIndex>
    34bc:	81 e0       	ldi	r24, 0x01	; 1
    34be:	8e 0f       	add	r24, r30
    34c0:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <twi_masterBufferIndex>
    34c4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    34c8:	f0 e0       	ldi	r31, 0x00	; 0
    34ca:	e2 5e       	subi	r30, 0xE2	; 226
    34cc:	fd 4f       	sbci	r31, 0xFD	; 253
    34ce:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    34d0:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <twi_masterBufferIndex>
    34d4:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <twi_masterBufferLength>
    34d8:	6b c0       	rjmp	.+214    	; 0x35b0 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    34da:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <twi_masterBufferIndex>
    34de:	81 e0       	ldi	r24, 0x01	; 1
    34e0:	8e 0f       	add	r24, r30
    34e2:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <twi_masterBufferIndex>
    34e6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    34ea:	f0 e0       	ldi	r31, 0x00	; 0
    34ec:	e2 5e       	subi	r30, 0xE2	; 226
    34ee:	fd 4f       	sbci	r31, 0xFD	; 253
    34f0:	80 83       	st	Z, r24
	if (twi_sendStop)
    34f2:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <twi_sendStop>
    34f6:	81 11       	cpse	r24, r1
    34f8:	6a c0       	rjmp	.+212    	; 0x35ce <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    34fa:	81 e0       	ldi	r24, 0x01	; 1
    34fc:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    3500:	84 ea       	ldi	r24, 0xA4	; 164
    3502:	5e c0       	rjmp	.+188    	; 0x35c0 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    3504:	83 e0       	ldi	r24, 0x03	; 3
    3506:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    350a:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <twi_rxBufferIndex>
    350e:	cf cf       	rjmp	.-98     	; 0x34ae <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    3510:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <twi_rxBufferIndex>
    3514:	80 32       	cpi	r24, 0x20	; 32
    3516:	08 f0       	brcs	.+2      	; 0x351a <__vector_24+0x180>
    3518:	4e c0       	rjmp	.+156    	; 0x35b6 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    351a:	e0 91 d9 01 	lds	r30, 0x01D9	; 0x8001d9 <twi_rxBufferIndex>
    351e:	81 e0       	ldi	r24, 0x01	; 1
    3520:	8e 0f       	add	r24, r30
    3522:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <twi_rxBufferIndex>
    3526:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    352a:	f0 e0       	ldi	r31, 0x00	; 0
    352c:	e6 52       	subi	r30, 0x26	; 38
    352e:	fe 4f       	sbci	r31, 0xFE	; 254
    3530:	80 83       	st	Z, r24
    3532:	bd cf       	rjmp	.-134    	; 0x34ae <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    3534:	0e 94 c7 19 	call	0x338e	; 0x338e <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    3538:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <twi_rxBufferIndex>
    353c:	80 32       	cpi	r24, 0x20	; 32
    353e:	30 f4       	brcc	.+12     	; 0x354c <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    3540:	e0 91 d9 01 	lds	r30, 0x01D9	; 0x8001d9 <twi_rxBufferIndex>
    3544:	f0 e0       	ldi	r31, 0x00	; 0
    3546:	e6 52       	subi	r30, 0x26	; 38
    3548:	fe 4f       	sbci	r31, 0xFE	; 254
    354a:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    354c:	60 91 d9 01 	lds	r22, 0x01D9	; 0x8001d9 <twi_rxBufferIndex>
    3550:	70 e0       	ldi	r23, 0x00	; 0
    3552:	e0 91 3e 02 	lds	r30, 0x023E	; 0x80023e <twi_onSlaveReceive>
    3556:	f0 91 3f 02 	lds	r31, 0x023F	; 0x80023f <twi_onSlaveReceive+0x1>
    355a:	8a ed       	ldi	r24, 0xDA	; 218
    355c:	91 e0       	ldi	r25, 0x01	; 1
    355e:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    3560:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <twi_rxBufferIndex>
      break;
    3564:	36 c0       	rjmp	.+108    	; 0x35d2 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    3566:	84 e0       	ldi	r24, 0x04	; 4
    3568:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    356c:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    3570:	10 92 fa 01 	sts	0x01FA, r1	; 0x8001fa <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    3574:	e0 91 40 02 	lds	r30, 0x0240	; 0x800240 <twi_onSlaveTransmit>
    3578:	f0 91 41 02 	lds	r31, 0x0241	; 0x800241 <twi_onSlaveTransmit+0x1>
    357c:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    357e:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <twi_txBufferLength>
    3582:	81 11       	cpse	r24, r1
    3584:	05 c0       	rjmp	.+10     	; 0x3590 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    3586:	81 e0       	ldi	r24, 0x01	; 1
    3588:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    358c:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    3590:	e0 91 fb 01 	lds	r30, 0x01FB	; 0x8001fb <twi_txBufferIndex>
    3594:	81 e0       	ldi	r24, 0x01	; 1
    3596:	8e 0f       	add	r24, r30
    3598:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <twi_txBufferIndex>
    359c:	f0 e0       	ldi	r31, 0x00	; 0
    359e:	e4 50       	subi	r30, 0x04	; 4
    35a0:	fe 4f       	sbci	r31, 0xFE	; 254
    35a2:	80 81       	ld	r24, Z
    35a4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    35a8:	90 91 fb 01 	lds	r25, 0x01FB	; 0x8001fb <twi_txBufferIndex>
    35ac:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <twi_txBufferLength>
    35b0:	98 17       	cp	r25, r24
    35b2:	08 f4       	brcc	.+2      	; 0x35b6 <__vector_24+0x21c>
    35b4:	7c cf       	rjmp	.-264    	; 0x34ae <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    35b6:	85 e8       	ldi	r24, 0x85	; 133
    35b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    35bc:	0a c0       	rjmp	.+20     	; 0x35d2 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    35be:	85 ec       	ldi	r24, 0xC5	; 197
    35c0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    35c4:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <twi_state>
      break;
    35c8:	04 c0       	rjmp	.+8      	; 0x35d2 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    35ca:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <twi_error>
      twi_stop();
    35ce:	0e 94 bd 19 	call	0x337a	; 0x337a <twi_stop>
      break;
  }
}
    35d2:	ff 91       	pop	r31
    35d4:	ef 91       	pop	r30
    35d6:	bf 91       	pop	r27
    35d8:	af 91       	pop	r26
    35da:	9f 91       	pop	r25
    35dc:	8f 91       	pop	r24
    35de:	7f 91       	pop	r23
    35e0:	6f 91       	pop	r22
    35e2:	5f 91       	pop	r21
    35e4:	4f 91       	pop	r20
    35e6:	3f 91       	pop	r19
    35e8:	2f 91       	pop	r18
    35ea:	0f 90       	pop	r0
    35ec:	0f be       	out	0x3f, r0	; 63
    35ee:	0f 90       	pop	r0
    35f0:	1f 90       	pop	r1
    35f2:	18 95       	reti

000035f4 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    35f4:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <_ZN7TwoWire14rxBufferLengthE>
    35f8:	90 e0       	ldi	r25, 0x00	; 0
    35fa:	20 91 77 02 	lds	r18, 0x0277	; 0x800277 <_ZN7TwoWire13rxBufferIndexE>
    35fe:	82 1b       	sub	r24, r18
    3600:	91 09       	sbc	r25, r1
    3602:	08 95       	ret

00003604 <_ZN7TwoWire4readEv>:
    3604:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <_ZN7TwoWire13rxBufferIndexE>
    3608:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <_ZN7TwoWire14rxBufferLengthE>
    360c:	98 17       	cp	r25, r24
    360e:	50 f4       	brcc	.+20     	; 0x3624 <_ZN7TwoWire4readEv+0x20>
    3610:	e9 2f       	mov	r30, r25
    3612:	f0 e0       	ldi	r31, 0x00	; 0
    3614:	e8 58       	subi	r30, 0x88	; 136
    3616:	fd 4f       	sbci	r31, 0xFD	; 253
    3618:	20 81       	ld	r18, Z
    361a:	30 e0       	ldi	r19, 0x00	; 0
    361c:	9f 5f       	subi	r25, 0xFF	; 255
    361e:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <_ZN7TwoWire13rxBufferIndexE>
    3622:	02 c0       	rjmp	.+4      	; 0x3628 <_ZN7TwoWire4readEv+0x24>
    3624:	2f ef       	ldi	r18, 0xFF	; 255
    3626:	3f ef       	ldi	r19, 0xFF	; 255
    3628:	c9 01       	movw	r24, r18
    362a:	08 95       	ret

0000362c <_ZN7TwoWire4peekEv>:
    362c:	e0 91 77 02 	lds	r30, 0x0277	; 0x800277 <_ZN7TwoWire13rxBufferIndexE>
    3630:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <_ZN7TwoWire14rxBufferLengthE>
    3634:	e8 17       	cp	r30, r24
    3636:	30 f4       	brcc	.+12     	; 0x3644 <_ZN7TwoWire4peekEv+0x18>
    3638:	f0 e0       	ldi	r31, 0x00	; 0
    363a:	e8 58       	subi	r30, 0x88	; 136
    363c:	fd 4f       	sbci	r31, 0xFD	; 253
    363e:	80 81       	ld	r24, Z
    3640:	90 e0       	ldi	r25, 0x00	; 0
    3642:	08 95       	ret
    3644:	8f ef       	ldi	r24, 0xFF	; 255
    3646:	9f ef       	ldi	r25, 0xFF	; 255
    3648:	08 95       	ret

0000364a <_ZN7TwoWire5flushEv>:
    364a:	08 95       	ret

0000364c <_ZN7TwoWire5writeEPKhj>:
    364c:	cf 92       	push	r12
    364e:	df 92       	push	r13
    3650:	ef 92       	push	r14
    3652:	ff 92       	push	r15
    3654:	0f 93       	push	r16
    3656:	1f 93       	push	r17
    3658:	cf 93       	push	r28
    365a:	df 93       	push	r29
    365c:	7c 01       	movw	r14, r24
    365e:	cb 01       	movw	r24, r22
    3660:	8a 01       	movw	r16, r20
    3662:	20 91 52 02 	lds	r18, 0x0252	; 0x800252 <_ZN7TwoWire12transmittingE>
    3666:	22 23       	and	r18, r18
    3668:	89 f0       	breq	.+34     	; 0x368c <_ZN7TwoWire5writeEPKhj+0x40>
    366a:	eb 01       	movw	r28, r22
    366c:	6b 01       	movw	r12, r22
    366e:	c4 0e       	add	r12, r20
    3670:	d5 1e       	adc	r13, r21
    3672:	cc 15       	cp	r28, r12
    3674:	dd 05       	cpc	r29, r13
    3676:	69 f0       	breq	.+26     	; 0x3692 <_ZN7TwoWire5writeEPKhj+0x46>
    3678:	69 91       	ld	r22, Y+
    367a:	d7 01       	movw	r26, r14
    367c:	ed 91       	ld	r30, X+
    367e:	fc 91       	ld	r31, X
    3680:	01 90       	ld	r0, Z+
    3682:	f0 81       	ld	r31, Z
    3684:	e0 2d       	mov	r30, r0
    3686:	c7 01       	movw	r24, r14
    3688:	09 95       	icall
    368a:	f3 cf       	rjmp	.-26     	; 0x3672 <_ZN7TwoWire5writeEPKhj+0x26>
    368c:	64 2f       	mov	r22, r20
    368e:	0e 94 a4 19 	call	0x3348	; 0x3348 <twi_transmit>
    3692:	c8 01       	movw	r24, r16
    3694:	df 91       	pop	r29
    3696:	cf 91       	pop	r28
    3698:	1f 91       	pop	r17
    369a:	0f 91       	pop	r16
    369c:	ff 90       	pop	r15
    369e:	ef 90       	pop	r14
    36a0:	df 90       	pop	r13
    36a2:	cf 90       	pop	r12
    36a4:	08 95       	ret

000036a6 <_ZN7TwoWire5writeEh>:
    36a6:	cf 93       	push	r28
    36a8:	df 93       	push	r29
    36aa:	1f 92       	push	r1
    36ac:	cd b7       	in	r28, 0x3d	; 61
    36ae:	de b7       	in	r29, 0x3e	; 62
    36b0:	69 83       	std	Y+1, r22	; 0x01
    36b2:	20 91 52 02 	lds	r18, 0x0252	; 0x800252 <_ZN7TwoWire12transmittingE>
    36b6:	22 23       	and	r18, r18
    36b8:	d1 f0       	breq	.+52     	; 0x36ee <_ZN7TwoWire5writeEh+0x48>
    36ba:	20 91 53 02 	lds	r18, 0x0253	; 0x800253 <_ZN7TwoWire14txBufferLengthE>
    36be:	20 32       	cpi	r18, 0x20	; 32
    36c0:	40 f0       	brcs	.+16     	; 0x36d2 <_ZN7TwoWire5writeEh+0x2c>
    36c2:	21 e0       	ldi	r18, 0x01	; 1
    36c4:	30 e0       	ldi	r19, 0x00	; 0
    36c6:	fc 01       	movw	r30, r24
    36c8:	33 83       	std	Z+3, r19	; 0x03
    36ca:	22 83       	std	Z+2, r18	; 0x02
    36cc:	80 e0       	ldi	r24, 0x00	; 0
    36ce:	90 e0       	ldi	r25, 0x00	; 0
    36d0:	15 c0       	rjmp	.+42     	; 0x36fc <_ZN7TwoWire5writeEh+0x56>
    36d2:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <_ZN7TwoWire13txBufferIndexE>
    36d6:	e8 2f       	mov	r30, r24
    36d8:	f0 e0       	ldi	r31, 0x00	; 0
    36da:	eb 5a       	subi	r30, 0xAB	; 171
    36dc:	fd 4f       	sbci	r31, 0xFD	; 253
    36de:	99 81       	ldd	r25, Y+1	; 0x01
    36e0:	90 83       	st	Z, r25
    36e2:	8f 5f       	subi	r24, 0xFF	; 255
    36e4:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <_ZN7TwoWire13txBufferIndexE>
    36e8:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <_ZN7TwoWire14txBufferLengthE>
    36ec:	05 c0       	rjmp	.+10     	; 0x36f8 <_ZN7TwoWire5writeEh+0x52>
    36ee:	61 e0       	ldi	r22, 0x01	; 1
    36f0:	ce 01       	movw	r24, r28
    36f2:	01 96       	adiw	r24, 0x01	; 1
    36f4:	0e 94 a4 19 	call	0x3348	; 0x3348 <twi_transmit>
    36f8:	81 e0       	ldi	r24, 0x01	; 1
    36fa:	90 e0       	ldi	r25, 0x00	; 0
    36fc:	0f 90       	pop	r0
    36fe:	df 91       	pop	r29
    3700:	cf 91       	pop	r28
    3702:	08 95       	ret

00003704 <_ZN7TwoWireC1Ev>:
    3704:	fc 01       	movw	r30, r24
    3706:	13 82       	std	Z+3, r1	; 0x03
    3708:	12 82       	std	Z+2, r1	; 0x02
    370a:	88 ee       	ldi	r24, 0xE8	; 232
    370c:	93 e0       	ldi	r25, 0x03	; 3
    370e:	a0 e0       	ldi	r26, 0x00	; 0
    3710:	b0 e0       	ldi	r27, 0x00	; 0
    3712:	84 83       	std	Z+4, r24	; 0x04
    3714:	95 83       	std	Z+5, r25	; 0x05
    3716:	a6 83       	std	Z+6, r26	; 0x06
    3718:	b7 83       	std	Z+7, r27	; 0x07
    371a:	85 e1       	ldi	r24, 0x15	; 21
    371c:	91 e0       	ldi	r25, 0x01	; 1
    371e:	91 83       	std	Z+1, r25	; 0x01
    3720:	80 83       	st	Z, r24
    3722:	08 95       	ret

00003724 <_ZN7TwoWire5beginEv>:
    3724:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <_ZN7TwoWire13rxBufferIndexE>
    3728:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <_ZN7TwoWire14rxBufferLengthE>
    372c:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <_ZN7TwoWire13txBufferIndexE>
    3730:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <_ZN7TwoWire14txBufferLengthE>
    3734:	0c 94 e8 18 	jmp	0x31d0	; 0x31d0 <twi_init>

00003738 <_ZN7TwoWire17beginTransmissionEh>:
    3738:	81 e0       	ldi	r24, 0x01	; 1
    373a:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <_ZN7TwoWire12transmittingE>
    373e:	60 93 75 02 	sts	0x0275, r22	; 0x800275 <_ZN7TwoWire9txAddressE>
    3742:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <_ZN7TwoWire13txBufferIndexE>
    3746:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <_ZN7TwoWire14txBufferLengthE>
    374a:	08 95       	ret

0000374c <_ZN7TwoWire15endTransmissionEh>:
    374c:	0f 93       	push	r16
    374e:	06 2f       	mov	r16, r22
    3750:	21 e0       	ldi	r18, 0x01	; 1
    3752:	40 91 53 02 	lds	r20, 0x0253	; 0x800253 <_ZN7TwoWire14txBufferLengthE>
    3756:	65 e5       	ldi	r22, 0x55	; 85
    3758:	72 e0       	ldi	r23, 0x02	; 2
    375a:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <_ZN7TwoWire9txAddressE>
    375e:	0e 94 4e 19 	call	0x329c	; 0x329c <twi_writeTo>
    3762:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <_ZN7TwoWire13txBufferIndexE>
    3766:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <_ZN7TwoWire14txBufferLengthE>
    376a:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <_ZN7TwoWire12transmittingE>
    376e:	0f 91       	pop	r16
    3770:	08 95       	ret

00003772 <_ZN7TwoWire11requestFromEhhmhh>:
    3772:	4f 92       	push	r4
    3774:	5f 92       	push	r5
    3776:	6f 92       	push	r6
    3778:	7f 92       	push	r7
    377a:	af 92       	push	r10
    377c:	bf 92       	push	r11
    377e:	cf 92       	push	r12
    3780:	ef 92       	push	r14
    3782:	ff 92       	push	r15
    3784:	0f 93       	push	r16
    3786:	1f 93       	push	r17
    3788:	cf 93       	push	r28
    378a:	df 93       	push	r29
    378c:	5c 01       	movw	r10, r24
    378e:	f6 2e       	mov	r15, r22
    3790:	d4 2f       	mov	r29, r20
    3792:	28 01       	movw	r4, r16
    3794:	39 01       	movw	r6, r18
    3796:	ee 20       	and	r14, r14
    3798:	21 f1       	breq	.+72     	; 0x37e2 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    379a:	0e 94 9c 1b 	call	0x3738	; 0x3738 <_ZN7TwoWire17beginTransmissionEh>
    379e:	ce 2d       	mov	r28, r14
    37a0:	c4 30       	cpi	r28, 0x04	; 4
    37a2:	08 f0       	brcs	.+2      	; 0x37a6 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    37a4:	c3 e0       	ldi	r28, 0x03	; 3
    37a6:	c1 50       	subi	r28, 0x01	; 1
    37a8:	c0 f0       	brcs	.+48     	; 0x37da <_ZN7TwoWire11requestFromEhhmhh+0x68>
    37aa:	28 e0       	ldi	r18, 0x08	; 8
    37ac:	c2 9f       	mul	r28, r18
    37ae:	c0 01       	movw	r24, r0
    37b0:	11 24       	eor	r1, r1
    37b2:	a3 01       	movw	r20, r6
    37b4:	92 01       	movw	r18, r4
    37b6:	04 c0       	rjmp	.+8      	; 0x37c0 <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    37b8:	56 95       	lsr	r21
    37ba:	47 95       	ror	r20
    37bc:	37 95       	ror	r19
    37be:	27 95       	ror	r18
    37c0:	8a 95       	dec	r24
    37c2:	d2 f7       	brpl	.-12     	; 0x37b8 <_ZN7TwoWire11requestFromEhhmhh+0x46>
    37c4:	ca 01       	movw	r24, r20
    37c6:	b9 01       	movw	r22, r18
    37c8:	d5 01       	movw	r26, r10
    37ca:	ed 91       	ld	r30, X+
    37cc:	fc 91       	ld	r31, X
    37ce:	01 90       	ld	r0, Z+
    37d0:	f0 81       	ld	r31, Z
    37d2:	e0 2d       	mov	r30, r0
    37d4:	c5 01       	movw	r24, r10
    37d6:	09 95       	icall
    37d8:	e6 cf       	rjmp	.-52     	; 0x37a6 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    37da:	60 e0       	ldi	r22, 0x00	; 0
    37dc:	c5 01       	movw	r24, r10
    37de:	0e 94 a6 1b 	call	0x374c	; 0x374c <_ZN7TwoWire15endTransmissionEh>
    37e2:	4d 2f       	mov	r20, r29
    37e4:	d1 32       	cpi	r29, 0x21	; 33
    37e6:	08 f0       	brcs	.+2      	; 0x37ea <_ZN7TwoWire11requestFromEhhmhh+0x78>
    37e8:	40 e2       	ldi	r20, 0x20	; 32
    37ea:	2c 2d       	mov	r18, r12
    37ec:	68 e7       	ldi	r22, 0x78	; 120
    37ee:	72 e0       	ldi	r23, 0x02	; 2
    37f0:	8f 2d       	mov	r24, r15
    37f2:	0e 94 06 19 	call	0x320c	; 0x320c <twi_readFrom>
    37f6:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <_ZN7TwoWire13rxBufferIndexE>
    37fa:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <_ZN7TwoWire14rxBufferLengthE>
    37fe:	df 91       	pop	r29
    3800:	cf 91       	pop	r28
    3802:	1f 91       	pop	r17
    3804:	0f 91       	pop	r16
    3806:	ff 90       	pop	r15
    3808:	ef 90       	pop	r14
    380a:	cf 90       	pop	r12
    380c:	bf 90       	pop	r11
    380e:	af 90       	pop	r10
    3810:	7f 90       	pop	r7
    3812:	6f 90       	pop	r6
    3814:	5f 90       	pop	r5
    3816:	4f 90       	pop	r4
    3818:	08 95       	ret

0000381a <_ZN7TwoWire11requestFromEhhh>:
    381a:	cf 92       	push	r12
    381c:	ef 92       	push	r14
    381e:	0f 93       	push	r16
    3820:	1f 93       	push	r17
    3822:	c2 2e       	mov	r12, r18
    3824:	e1 2c       	mov	r14, r1
    3826:	00 e0       	ldi	r16, 0x00	; 0
    3828:	10 e0       	ldi	r17, 0x00	; 0
    382a:	98 01       	movw	r18, r16
    382c:	0e 94 b9 1b 	call	0x3772	; 0x3772 <_ZN7TwoWire11requestFromEhhmhh>
    3830:	1f 91       	pop	r17
    3832:	0f 91       	pop	r16
    3834:	ef 90       	pop	r14
    3836:	cf 90       	pop	r12
    3838:	08 95       	ret

0000383a <_ZN7TwoWire11requestFromEhh>:
    383a:	21 e0       	ldi	r18, 0x01	; 1
    383c:	0c 94 0d 1c 	jmp	0x381a	; 0x381a <_ZN7TwoWire11requestFromEhhh>

00003840 <_ZN7TwoWire15endTransmissionEv>:
    3840:	61 e0       	ldi	r22, 0x01	; 1
    3842:	0c 94 a6 1b 	jmp	0x374c	; 0x374c <_ZN7TwoWire15endTransmissionEh>

00003846 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    3846:	86 e4       	ldi	r24, 0x46	; 70
    3848:	92 e0       	ldi	r25, 0x02	; 2
    384a:	0c 94 82 1b 	jmp	0x3704	; 0x3704 <_ZN7TwoWireC1Ev>

0000384e <__subsf3>:
    384e:	50 58       	subi	r21, 0x80	; 128

00003850 <__addsf3>:
    3850:	bb 27       	eor	r27, r27
    3852:	aa 27       	eor	r26, r26
    3854:	0e 94 3f 1c 	call	0x387e	; 0x387e <__addsf3x>
    3858:	0c 94 29 1e 	jmp	0x3c52	; 0x3c52 <__fp_round>
    385c:	0e 94 1b 1e 	call	0x3c36	; 0x3c36 <__fp_pscA>
    3860:	38 f0       	brcs	.+14     	; 0x3870 <__addsf3+0x20>
    3862:	0e 94 22 1e 	call	0x3c44	; 0x3c44 <__fp_pscB>
    3866:	20 f0       	brcs	.+8      	; 0x3870 <__addsf3+0x20>
    3868:	39 f4       	brne	.+14     	; 0x3878 <__addsf3+0x28>
    386a:	9f 3f       	cpi	r25, 0xFF	; 255
    386c:	19 f4       	brne	.+6      	; 0x3874 <__addsf3+0x24>
    386e:	26 f4       	brtc	.+8      	; 0x3878 <__addsf3+0x28>
    3870:	0c 94 f1 1d 	jmp	0x3be2	; 0x3be2 <__fp_nan>
    3874:	0e f4       	brtc	.+2      	; 0x3878 <__addsf3+0x28>
    3876:	e0 95       	com	r30
    3878:	e7 fb       	bst	r30, 7
    387a:	0c 94 eb 1d 	jmp	0x3bd6	; 0x3bd6 <__fp_inf>

0000387e <__addsf3x>:
    387e:	e9 2f       	mov	r30, r25
    3880:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <__fp_split3>
    3884:	58 f3       	brcs	.-42     	; 0x385c <__addsf3+0xc>
    3886:	ba 17       	cp	r27, r26
    3888:	62 07       	cpc	r22, r18
    388a:	73 07       	cpc	r23, r19
    388c:	84 07       	cpc	r24, r20
    388e:	95 07       	cpc	r25, r21
    3890:	20 f0       	brcs	.+8      	; 0x389a <__addsf3x+0x1c>
    3892:	79 f4       	brne	.+30     	; 0x38b2 <__addsf3x+0x34>
    3894:	a6 f5       	brtc	.+104    	; 0x38fe <__addsf3x+0x80>
    3896:	0c 94 5c 1e 	jmp	0x3cb8	; 0x3cb8 <__fp_zero>
    389a:	0e f4       	brtc	.+2      	; 0x389e <__addsf3x+0x20>
    389c:	e0 95       	com	r30
    389e:	0b 2e       	mov	r0, r27
    38a0:	ba 2f       	mov	r27, r26
    38a2:	a0 2d       	mov	r26, r0
    38a4:	0b 01       	movw	r0, r22
    38a6:	b9 01       	movw	r22, r18
    38a8:	90 01       	movw	r18, r0
    38aa:	0c 01       	movw	r0, r24
    38ac:	ca 01       	movw	r24, r20
    38ae:	a0 01       	movw	r20, r0
    38b0:	11 24       	eor	r1, r1
    38b2:	ff 27       	eor	r31, r31
    38b4:	59 1b       	sub	r21, r25
    38b6:	99 f0       	breq	.+38     	; 0x38de <__addsf3x+0x60>
    38b8:	59 3f       	cpi	r21, 0xF9	; 249
    38ba:	50 f4       	brcc	.+20     	; 0x38d0 <__addsf3x+0x52>
    38bc:	50 3e       	cpi	r21, 0xE0	; 224
    38be:	68 f1       	brcs	.+90     	; 0x391a <__addsf3x+0x9c>
    38c0:	1a 16       	cp	r1, r26
    38c2:	f0 40       	sbci	r31, 0x00	; 0
    38c4:	a2 2f       	mov	r26, r18
    38c6:	23 2f       	mov	r18, r19
    38c8:	34 2f       	mov	r19, r20
    38ca:	44 27       	eor	r20, r20
    38cc:	58 5f       	subi	r21, 0xF8	; 248
    38ce:	f3 cf       	rjmp	.-26     	; 0x38b6 <__addsf3x+0x38>
    38d0:	46 95       	lsr	r20
    38d2:	37 95       	ror	r19
    38d4:	27 95       	ror	r18
    38d6:	a7 95       	ror	r26
    38d8:	f0 40       	sbci	r31, 0x00	; 0
    38da:	53 95       	inc	r21
    38dc:	c9 f7       	brne	.-14     	; 0x38d0 <__addsf3x+0x52>
    38de:	7e f4       	brtc	.+30     	; 0x38fe <__addsf3x+0x80>
    38e0:	1f 16       	cp	r1, r31
    38e2:	ba 0b       	sbc	r27, r26
    38e4:	62 0b       	sbc	r22, r18
    38e6:	73 0b       	sbc	r23, r19
    38e8:	84 0b       	sbc	r24, r20
    38ea:	ba f0       	brmi	.+46     	; 0x391a <__addsf3x+0x9c>
    38ec:	91 50       	subi	r25, 0x01	; 1
    38ee:	a1 f0       	breq	.+40     	; 0x3918 <__addsf3x+0x9a>
    38f0:	ff 0f       	add	r31, r31
    38f2:	bb 1f       	adc	r27, r27
    38f4:	66 1f       	adc	r22, r22
    38f6:	77 1f       	adc	r23, r23
    38f8:	88 1f       	adc	r24, r24
    38fa:	c2 f7       	brpl	.-16     	; 0x38ec <__addsf3x+0x6e>
    38fc:	0e c0       	rjmp	.+28     	; 0x391a <__addsf3x+0x9c>
    38fe:	ba 0f       	add	r27, r26
    3900:	62 1f       	adc	r22, r18
    3902:	73 1f       	adc	r23, r19
    3904:	84 1f       	adc	r24, r20
    3906:	48 f4       	brcc	.+18     	; 0x391a <__addsf3x+0x9c>
    3908:	87 95       	ror	r24
    390a:	77 95       	ror	r23
    390c:	67 95       	ror	r22
    390e:	b7 95       	ror	r27
    3910:	f7 95       	ror	r31
    3912:	9e 3f       	cpi	r25, 0xFE	; 254
    3914:	08 f0       	brcs	.+2      	; 0x3918 <__addsf3x+0x9a>
    3916:	b0 cf       	rjmp	.-160    	; 0x3878 <__addsf3+0x28>
    3918:	93 95       	inc	r25
    391a:	88 0f       	add	r24, r24
    391c:	08 f0       	brcs	.+2      	; 0x3920 <__addsf3x+0xa2>
    391e:	99 27       	eor	r25, r25
    3920:	ee 0f       	add	r30, r30
    3922:	97 95       	ror	r25
    3924:	87 95       	ror	r24
    3926:	08 95       	ret
    3928:	0e 94 1b 1e 	call	0x3c36	; 0x3c36 <__fp_pscA>
    392c:	60 f0       	brcs	.+24     	; 0x3946 <__addsf3x+0xc8>
    392e:	80 e8       	ldi	r24, 0x80	; 128
    3930:	91 e0       	ldi	r25, 0x01	; 1
    3932:	09 f4       	brne	.+2      	; 0x3936 <__addsf3x+0xb8>
    3934:	9e ef       	ldi	r25, 0xFE	; 254
    3936:	0e 94 22 1e 	call	0x3c44	; 0x3c44 <__fp_pscB>
    393a:	28 f0       	brcs	.+10     	; 0x3946 <__addsf3x+0xc8>
    393c:	40 e8       	ldi	r20, 0x80	; 128
    393e:	51 e0       	ldi	r21, 0x01	; 1
    3940:	71 f4       	brne	.+28     	; 0x395e <atan2+0x10>
    3942:	5e ef       	ldi	r21, 0xFE	; 254
    3944:	0c c0       	rjmp	.+24     	; 0x395e <atan2+0x10>
    3946:	0c 94 f1 1d 	jmp	0x3be2	; 0x3be2 <__fp_nan>
    394a:	0c 94 5c 1e 	jmp	0x3cb8	; 0x3cb8 <__fp_zero>

0000394e <atan2>:
    394e:	e9 2f       	mov	r30, r25
    3950:	e0 78       	andi	r30, 0x80	; 128
    3952:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <__fp_split3>
    3956:	40 f3       	brcs	.-48     	; 0x3928 <__addsf3x+0xaa>
    3958:	09 2e       	mov	r0, r25
    395a:	05 2a       	or	r0, r21
    395c:	b1 f3       	breq	.-20     	; 0x394a <__addsf3x+0xcc>
    395e:	26 17       	cp	r18, r22
    3960:	37 07       	cpc	r19, r23
    3962:	48 07       	cpc	r20, r24
    3964:	59 07       	cpc	r21, r25
    3966:	38 f0       	brcs	.+14     	; 0x3976 <atan2+0x28>
    3968:	0e 2e       	mov	r0, r30
    396a:	07 f8       	bld	r0, 7
    396c:	e0 25       	eor	r30, r0
    396e:	69 f0       	breq	.+26     	; 0x398a <atan2+0x3c>
    3970:	e0 25       	eor	r30, r0
    3972:	e0 64       	ori	r30, 0x40	; 64
    3974:	0a c0       	rjmp	.+20     	; 0x398a <atan2+0x3c>
    3976:	ef 63       	ori	r30, 0x3F	; 63
    3978:	07 f8       	bld	r0, 7
    397a:	00 94       	com	r0
    397c:	07 fa       	bst	r0, 7
    397e:	db 01       	movw	r26, r22
    3980:	b9 01       	movw	r22, r18
    3982:	9d 01       	movw	r18, r26
    3984:	dc 01       	movw	r26, r24
    3986:	ca 01       	movw	r24, r20
    3988:	ad 01       	movw	r20, r26
    398a:	ef 93       	push	r30
    398c:	0e 94 1d 1d 	call	0x3a3a	; 0x3a3a <__divsf3_pse>
    3990:	0e 94 29 1e 	call	0x3c52	; 0x3c52 <__fp_round>
    3994:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <atan>
    3998:	5f 91       	pop	r21
    399a:	55 23       	and	r21, r21
    399c:	39 f0       	breq	.+14     	; 0x39ac <atan2+0x5e>
    399e:	2b ed       	ldi	r18, 0xDB	; 219
    39a0:	3f e0       	ldi	r19, 0x0F	; 15
    39a2:	49 e4       	ldi	r20, 0x49	; 73
    39a4:	50 fd       	sbrc	r21, 0
    39a6:	49 ec       	ldi	r20, 0xC9	; 201
    39a8:	0c 94 28 1c 	jmp	0x3850	; 0x3850 <__addsf3>
    39ac:	08 95       	ret

000039ae <atan>:
    39ae:	df 93       	push	r29
    39b0:	dd 27       	eor	r29, r29
    39b2:	b9 2f       	mov	r27, r25
    39b4:	bf 77       	andi	r27, 0x7F	; 127
    39b6:	40 e8       	ldi	r20, 0x80	; 128
    39b8:	5f e3       	ldi	r21, 0x3F	; 63
    39ba:	16 16       	cp	r1, r22
    39bc:	17 06       	cpc	r1, r23
    39be:	48 07       	cpc	r20, r24
    39c0:	5b 07       	cpc	r21, r27
    39c2:	18 f4       	brcc	.+6      	; 0x39ca <atan+0x1c>
    39c4:	d9 2f       	mov	r29, r25
    39c6:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <inverse>
    39ca:	9f 93       	push	r25
    39cc:	8f 93       	push	r24
    39ce:	7f 93       	push	r23
    39d0:	6f 93       	push	r22
    39d2:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <square>
    39d6:	e8 e6       	ldi	r30, 0x68	; 104
    39d8:	f0 e0       	ldi	r31, 0x00	; 0
    39da:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <__fp_powser>
    39de:	0e 94 29 1e 	call	0x3c52	; 0x3c52 <__fp_round>
    39e2:	2f 91       	pop	r18
    39e4:	3f 91       	pop	r19
    39e6:	4f 91       	pop	r20
    39e8:	5f 91       	pop	r21
    39ea:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <__mulsf3x>
    39ee:	dd 23       	and	r29, r29
    39f0:	51 f0       	breq	.+20     	; 0x3a06 <atan+0x58>
    39f2:	90 58       	subi	r25, 0x80	; 128
    39f4:	a2 ea       	ldi	r26, 0xA2	; 162
    39f6:	2a ed       	ldi	r18, 0xDA	; 218
    39f8:	3f e0       	ldi	r19, 0x0F	; 15
    39fa:	49 ec       	ldi	r20, 0xC9	; 201
    39fc:	5f e3       	ldi	r21, 0x3F	; 63
    39fe:	d0 78       	andi	r29, 0x80	; 128
    3a00:	5d 27       	eor	r21, r29
    3a02:	0e 94 3f 1c 	call	0x387e	; 0x387e <__addsf3x>
    3a06:	df 91       	pop	r29
    3a08:	0c 94 29 1e 	jmp	0x3c52	; 0x3c52 <__fp_round>

00003a0c <__divsf3>:
    3a0c:	0e 94 1a 1d 	call	0x3a34	; 0x3a34 <__divsf3x>
    3a10:	0c 94 29 1e 	jmp	0x3c52	; 0x3c52 <__fp_round>
    3a14:	0e 94 22 1e 	call	0x3c44	; 0x3c44 <__fp_pscB>
    3a18:	58 f0       	brcs	.+22     	; 0x3a30 <__divsf3+0x24>
    3a1a:	0e 94 1b 1e 	call	0x3c36	; 0x3c36 <__fp_pscA>
    3a1e:	40 f0       	brcs	.+16     	; 0x3a30 <__divsf3+0x24>
    3a20:	29 f4       	brne	.+10     	; 0x3a2c <__divsf3+0x20>
    3a22:	5f 3f       	cpi	r21, 0xFF	; 255
    3a24:	29 f0       	breq	.+10     	; 0x3a30 <__divsf3+0x24>
    3a26:	0c 94 eb 1d 	jmp	0x3bd6	; 0x3bd6 <__fp_inf>
    3a2a:	51 11       	cpse	r21, r1
    3a2c:	0c 94 5d 1e 	jmp	0x3cba	; 0x3cba <__fp_szero>
    3a30:	0c 94 f1 1d 	jmp	0x3be2	; 0x3be2 <__fp_nan>

00003a34 <__divsf3x>:
    3a34:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <__fp_split3>
    3a38:	68 f3       	brcs	.-38     	; 0x3a14 <__divsf3+0x8>

00003a3a <__divsf3_pse>:
    3a3a:	99 23       	and	r25, r25
    3a3c:	b1 f3       	breq	.-20     	; 0x3a2a <__divsf3+0x1e>
    3a3e:	55 23       	and	r21, r21
    3a40:	91 f3       	breq	.-28     	; 0x3a26 <__divsf3+0x1a>
    3a42:	95 1b       	sub	r25, r21
    3a44:	55 0b       	sbc	r21, r21
    3a46:	bb 27       	eor	r27, r27
    3a48:	aa 27       	eor	r26, r26
    3a4a:	62 17       	cp	r22, r18
    3a4c:	73 07       	cpc	r23, r19
    3a4e:	84 07       	cpc	r24, r20
    3a50:	38 f0       	brcs	.+14     	; 0x3a60 <__divsf3_pse+0x26>
    3a52:	9f 5f       	subi	r25, 0xFF	; 255
    3a54:	5f 4f       	sbci	r21, 0xFF	; 255
    3a56:	22 0f       	add	r18, r18
    3a58:	33 1f       	adc	r19, r19
    3a5a:	44 1f       	adc	r20, r20
    3a5c:	aa 1f       	adc	r26, r26
    3a5e:	a9 f3       	breq	.-22     	; 0x3a4a <__divsf3_pse+0x10>
    3a60:	35 d0       	rcall	.+106    	; 0x3acc <__divsf3_pse+0x92>
    3a62:	0e 2e       	mov	r0, r30
    3a64:	3a f0       	brmi	.+14     	; 0x3a74 <__divsf3_pse+0x3a>
    3a66:	e0 e8       	ldi	r30, 0x80	; 128
    3a68:	32 d0       	rcall	.+100    	; 0x3ace <__divsf3_pse+0x94>
    3a6a:	91 50       	subi	r25, 0x01	; 1
    3a6c:	50 40       	sbci	r21, 0x00	; 0
    3a6e:	e6 95       	lsr	r30
    3a70:	00 1c       	adc	r0, r0
    3a72:	ca f7       	brpl	.-14     	; 0x3a66 <__divsf3_pse+0x2c>
    3a74:	2b d0       	rcall	.+86     	; 0x3acc <__divsf3_pse+0x92>
    3a76:	fe 2f       	mov	r31, r30
    3a78:	29 d0       	rcall	.+82     	; 0x3acc <__divsf3_pse+0x92>
    3a7a:	66 0f       	add	r22, r22
    3a7c:	77 1f       	adc	r23, r23
    3a7e:	88 1f       	adc	r24, r24
    3a80:	bb 1f       	adc	r27, r27
    3a82:	26 17       	cp	r18, r22
    3a84:	37 07       	cpc	r19, r23
    3a86:	48 07       	cpc	r20, r24
    3a88:	ab 07       	cpc	r26, r27
    3a8a:	b0 e8       	ldi	r27, 0x80	; 128
    3a8c:	09 f0       	breq	.+2      	; 0x3a90 <__divsf3_pse+0x56>
    3a8e:	bb 0b       	sbc	r27, r27
    3a90:	80 2d       	mov	r24, r0
    3a92:	bf 01       	movw	r22, r30
    3a94:	ff 27       	eor	r31, r31
    3a96:	93 58       	subi	r25, 0x83	; 131
    3a98:	5f 4f       	sbci	r21, 0xFF	; 255
    3a9a:	3a f0       	brmi	.+14     	; 0x3aaa <__divsf3_pse+0x70>
    3a9c:	9e 3f       	cpi	r25, 0xFE	; 254
    3a9e:	51 05       	cpc	r21, r1
    3aa0:	78 f0       	brcs	.+30     	; 0x3ac0 <__divsf3_pse+0x86>
    3aa2:	0c 94 eb 1d 	jmp	0x3bd6	; 0x3bd6 <__fp_inf>
    3aa6:	0c 94 5d 1e 	jmp	0x3cba	; 0x3cba <__fp_szero>
    3aaa:	5f 3f       	cpi	r21, 0xFF	; 255
    3aac:	e4 f3       	brlt	.-8      	; 0x3aa6 <__divsf3_pse+0x6c>
    3aae:	98 3e       	cpi	r25, 0xE8	; 232
    3ab0:	d4 f3       	brlt	.-12     	; 0x3aa6 <__divsf3_pse+0x6c>
    3ab2:	86 95       	lsr	r24
    3ab4:	77 95       	ror	r23
    3ab6:	67 95       	ror	r22
    3ab8:	b7 95       	ror	r27
    3aba:	f7 95       	ror	r31
    3abc:	9f 5f       	subi	r25, 0xFF	; 255
    3abe:	c9 f7       	brne	.-14     	; 0x3ab2 <__divsf3_pse+0x78>
    3ac0:	88 0f       	add	r24, r24
    3ac2:	91 1d       	adc	r25, r1
    3ac4:	96 95       	lsr	r25
    3ac6:	87 95       	ror	r24
    3ac8:	97 f9       	bld	r25, 7
    3aca:	08 95       	ret
    3acc:	e1 e0       	ldi	r30, 0x01	; 1
    3ace:	66 0f       	add	r22, r22
    3ad0:	77 1f       	adc	r23, r23
    3ad2:	88 1f       	adc	r24, r24
    3ad4:	bb 1f       	adc	r27, r27
    3ad6:	62 17       	cp	r22, r18
    3ad8:	73 07       	cpc	r23, r19
    3ada:	84 07       	cpc	r24, r20
    3adc:	ba 07       	cpc	r27, r26
    3ade:	20 f0       	brcs	.+8      	; 0x3ae8 <__divsf3_pse+0xae>
    3ae0:	62 1b       	sub	r22, r18
    3ae2:	73 0b       	sbc	r23, r19
    3ae4:	84 0b       	sbc	r24, r20
    3ae6:	ba 0b       	sbc	r27, r26
    3ae8:	ee 1f       	adc	r30, r30
    3aea:	88 f7       	brcc	.-30     	; 0x3ace <__divsf3_pse+0x94>
    3aec:	e0 95       	com	r30
    3aee:	08 95       	ret

00003af0 <__fixsfsi>:
    3af0:	0e 94 7f 1d 	call	0x3afe	; 0x3afe <__fixunssfsi>
    3af4:	68 94       	set
    3af6:	b1 11       	cpse	r27, r1
    3af8:	0c 94 5d 1e 	jmp	0x3cba	; 0x3cba <__fp_szero>
    3afc:	08 95       	ret

00003afe <__fixunssfsi>:
    3afe:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <__fp_splitA>
    3b02:	88 f0       	brcs	.+34     	; 0x3b26 <__fixunssfsi+0x28>
    3b04:	9f 57       	subi	r25, 0x7F	; 127
    3b06:	98 f0       	brcs	.+38     	; 0x3b2e <__fixunssfsi+0x30>
    3b08:	b9 2f       	mov	r27, r25
    3b0a:	99 27       	eor	r25, r25
    3b0c:	b7 51       	subi	r27, 0x17	; 23
    3b0e:	b0 f0       	brcs	.+44     	; 0x3b3c <__fixunssfsi+0x3e>
    3b10:	e1 f0       	breq	.+56     	; 0x3b4a <__fixunssfsi+0x4c>
    3b12:	66 0f       	add	r22, r22
    3b14:	77 1f       	adc	r23, r23
    3b16:	88 1f       	adc	r24, r24
    3b18:	99 1f       	adc	r25, r25
    3b1a:	1a f0       	brmi	.+6      	; 0x3b22 <__fixunssfsi+0x24>
    3b1c:	ba 95       	dec	r27
    3b1e:	c9 f7       	brne	.-14     	; 0x3b12 <__fixunssfsi+0x14>
    3b20:	14 c0       	rjmp	.+40     	; 0x3b4a <__fixunssfsi+0x4c>
    3b22:	b1 30       	cpi	r27, 0x01	; 1
    3b24:	91 f0       	breq	.+36     	; 0x3b4a <__fixunssfsi+0x4c>
    3b26:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <__fp_zero>
    3b2a:	b1 e0       	ldi	r27, 0x01	; 1
    3b2c:	08 95       	ret
    3b2e:	0c 94 5c 1e 	jmp	0x3cb8	; 0x3cb8 <__fp_zero>
    3b32:	67 2f       	mov	r22, r23
    3b34:	78 2f       	mov	r23, r24
    3b36:	88 27       	eor	r24, r24
    3b38:	b8 5f       	subi	r27, 0xF8	; 248
    3b3a:	39 f0       	breq	.+14     	; 0x3b4a <__fixunssfsi+0x4c>
    3b3c:	b9 3f       	cpi	r27, 0xF9	; 249
    3b3e:	cc f3       	brlt	.-14     	; 0x3b32 <__fixunssfsi+0x34>
    3b40:	86 95       	lsr	r24
    3b42:	77 95       	ror	r23
    3b44:	67 95       	ror	r22
    3b46:	b3 95       	inc	r27
    3b48:	d9 f7       	brne	.-10     	; 0x3b40 <__fixunssfsi+0x42>
    3b4a:	3e f4       	brtc	.+14     	; 0x3b5a <__fixunssfsi+0x5c>
    3b4c:	90 95       	com	r25
    3b4e:	80 95       	com	r24
    3b50:	70 95       	com	r23
    3b52:	61 95       	neg	r22
    3b54:	7f 4f       	sbci	r23, 0xFF	; 255
    3b56:	8f 4f       	sbci	r24, 0xFF	; 255
    3b58:	9f 4f       	sbci	r25, 0xFF	; 255
    3b5a:	08 95       	ret

00003b5c <__floatunsisf>:
    3b5c:	e8 94       	clt
    3b5e:	09 c0       	rjmp	.+18     	; 0x3b72 <__floatsisf+0x12>

00003b60 <__floatsisf>:
    3b60:	97 fb       	bst	r25, 7
    3b62:	3e f4       	brtc	.+14     	; 0x3b72 <__floatsisf+0x12>
    3b64:	90 95       	com	r25
    3b66:	80 95       	com	r24
    3b68:	70 95       	com	r23
    3b6a:	61 95       	neg	r22
    3b6c:	7f 4f       	sbci	r23, 0xFF	; 255
    3b6e:	8f 4f       	sbci	r24, 0xFF	; 255
    3b70:	9f 4f       	sbci	r25, 0xFF	; 255
    3b72:	99 23       	and	r25, r25
    3b74:	a9 f0       	breq	.+42     	; 0x3ba0 <__floatsisf+0x40>
    3b76:	f9 2f       	mov	r31, r25
    3b78:	96 e9       	ldi	r25, 0x96	; 150
    3b7a:	bb 27       	eor	r27, r27
    3b7c:	93 95       	inc	r25
    3b7e:	f6 95       	lsr	r31
    3b80:	87 95       	ror	r24
    3b82:	77 95       	ror	r23
    3b84:	67 95       	ror	r22
    3b86:	b7 95       	ror	r27
    3b88:	f1 11       	cpse	r31, r1
    3b8a:	f8 cf       	rjmp	.-16     	; 0x3b7c <__floatsisf+0x1c>
    3b8c:	fa f4       	brpl	.+62     	; 0x3bcc <__floatsisf+0x6c>
    3b8e:	bb 0f       	add	r27, r27
    3b90:	11 f4       	brne	.+4      	; 0x3b96 <__floatsisf+0x36>
    3b92:	60 ff       	sbrs	r22, 0
    3b94:	1b c0       	rjmp	.+54     	; 0x3bcc <__floatsisf+0x6c>
    3b96:	6f 5f       	subi	r22, 0xFF	; 255
    3b98:	7f 4f       	sbci	r23, 0xFF	; 255
    3b9a:	8f 4f       	sbci	r24, 0xFF	; 255
    3b9c:	9f 4f       	sbci	r25, 0xFF	; 255
    3b9e:	16 c0       	rjmp	.+44     	; 0x3bcc <__floatsisf+0x6c>
    3ba0:	88 23       	and	r24, r24
    3ba2:	11 f0       	breq	.+4      	; 0x3ba8 <__floatsisf+0x48>
    3ba4:	96 e9       	ldi	r25, 0x96	; 150
    3ba6:	11 c0       	rjmp	.+34     	; 0x3bca <__floatsisf+0x6a>
    3ba8:	77 23       	and	r23, r23
    3baa:	21 f0       	breq	.+8      	; 0x3bb4 <__floatsisf+0x54>
    3bac:	9e e8       	ldi	r25, 0x8E	; 142
    3bae:	87 2f       	mov	r24, r23
    3bb0:	76 2f       	mov	r23, r22
    3bb2:	05 c0       	rjmp	.+10     	; 0x3bbe <__floatsisf+0x5e>
    3bb4:	66 23       	and	r22, r22
    3bb6:	71 f0       	breq	.+28     	; 0x3bd4 <__floatsisf+0x74>
    3bb8:	96 e8       	ldi	r25, 0x86	; 134
    3bba:	86 2f       	mov	r24, r22
    3bbc:	70 e0       	ldi	r23, 0x00	; 0
    3bbe:	60 e0       	ldi	r22, 0x00	; 0
    3bc0:	2a f0       	brmi	.+10     	; 0x3bcc <__floatsisf+0x6c>
    3bc2:	9a 95       	dec	r25
    3bc4:	66 0f       	add	r22, r22
    3bc6:	77 1f       	adc	r23, r23
    3bc8:	88 1f       	adc	r24, r24
    3bca:	da f7       	brpl	.-10     	; 0x3bc2 <__floatsisf+0x62>
    3bcc:	88 0f       	add	r24, r24
    3bce:	96 95       	lsr	r25
    3bd0:	87 95       	ror	r24
    3bd2:	97 f9       	bld	r25, 7
    3bd4:	08 95       	ret

00003bd6 <__fp_inf>:
    3bd6:	97 f9       	bld	r25, 7
    3bd8:	9f 67       	ori	r25, 0x7F	; 127
    3bda:	80 e8       	ldi	r24, 0x80	; 128
    3bdc:	70 e0       	ldi	r23, 0x00	; 0
    3bde:	60 e0       	ldi	r22, 0x00	; 0
    3be0:	08 95       	ret

00003be2 <__fp_nan>:
    3be2:	9f ef       	ldi	r25, 0xFF	; 255
    3be4:	80 ec       	ldi	r24, 0xC0	; 192
    3be6:	08 95       	ret

00003be8 <__fp_powser>:
    3be8:	df 93       	push	r29
    3bea:	cf 93       	push	r28
    3bec:	1f 93       	push	r17
    3bee:	0f 93       	push	r16
    3bf0:	ff 92       	push	r15
    3bf2:	ef 92       	push	r14
    3bf4:	df 92       	push	r13
    3bf6:	7b 01       	movw	r14, r22
    3bf8:	8c 01       	movw	r16, r24
    3bfa:	68 94       	set
    3bfc:	06 c0       	rjmp	.+12     	; 0x3c0a <__fp_powser+0x22>
    3bfe:	da 2e       	mov	r13, r26
    3c00:	ef 01       	movw	r28, r30
    3c02:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <__mulsf3x>
    3c06:	fe 01       	movw	r30, r28
    3c08:	e8 94       	clt
    3c0a:	a5 91       	lpm	r26, Z+
    3c0c:	25 91       	lpm	r18, Z+
    3c0e:	35 91       	lpm	r19, Z+
    3c10:	45 91       	lpm	r20, Z+
    3c12:	55 91       	lpm	r21, Z+
    3c14:	a6 f3       	brts	.-24     	; 0x3bfe <__fp_powser+0x16>
    3c16:	ef 01       	movw	r28, r30
    3c18:	0e 94 3f 1c 	call	0x387e	; 0x387e <__addsf3x>
    3c1c:	fe 01       	movw	r30, r28
    3c1e:	97 01       	movw	r18, r14
    3c20:	a8 01       	movw	r20, r16
    3c22:	da 94       	dec	r13
    3c24:	69 f7       	brne	.-38     	; 0x3c00 <__fp_powser+0x18>
    3c26:	df 90       	pop	r13
    3c28:	ef 90       	pop	r14
    3c2a:	ff 90       	pop	r15
    3c2c:	0f 91       	pop	r16
    3c2e:	1f 91       	pop	r17
    3c30:	cf 91       	pop	r28
    3c32:	df 91       	pop	r29
    3c34:	08 95       	ret

00003c36 <__fp_pscA>:
    3c36:	00 24       	eor	r0, r0
    3c38:	0a 94       	dec	r0
    3c3a:	16 16       	cp	r1, r22
    3c3c:	17 06       	cpc	r1, r23
    3c3e:	18 06       	cpc	r1, r24
    3c40:	09 06       	cpc	r0, r25
    3c42:	08 95       	ret

00003c44 <__fp_pscB>:
    3c44:	00 24       	eor	r0, r0
    3c46:	0a 94       	dec	r0
    3c48:	12 16       	cp	r1, r18
    3c4a:	13 06       	cpc	r1, r19
    3c4c:	14 06       	cpc	r1, r20
    3c4e:	05 06       	cpc	r0, r21
    3c50:	08 95       	ret

00003c52 <__fp_round>:
    3c52:	09 2e       	mov	r0, r25
    3c54:	03 94       	inc	r0
    3c56:	00 0c       	add	r0, r0
    3c58:	11 f4       	brne	.+4      	; 0x3c5e <__fp_round+0xc>
    3c5a:	88 23       	and	r24, r24
    3c5c:	52 f0       	brmi	.+20     	; 0x3c72 <__fp_round+0x20>
    3c5e:	bb 0f       	add	r27, r27
    3c60:	40 f4       	brcc	.+16     	; 0x3c72 <__fp_round+0x20>
    3c62:	bf 2b       	or	r27, r31
    3c64:	11 f4       	brne	.+4      	; 0x3c6a <__fp_round+0x18>
    3c66:	60 ff       	sbrs	r22, 0
    3c68:	04 c0       	rjmp	.+8      	; 0x3c72 <__fp_round+0x20>
    3c6a:	6f 5f       	subi	r22, 0xFF	; 255
    3c6c:	7f 4f       	sbci	r23, 0xFF	; 255
    3c6e:	8f 4f       	sbci	r24, 0xFF	; 255
    3c70:	9f 4f       	sbci	r25, 0xFF	; 255
    3c72:	08 95       	ret

00003c74 <__fp_split3>:
    3c74:	57 fd       	sbrc	r21, 7
    3c76:	90 58       	subi	r25, 0x80	; 128
    3c78:	44 0f       	add	r20, r20
    3c7a:	55 1f       	adc	r21, r21
    3c7c:	59 f0       	breq	.+22     	; 0x3c94 <__fp_splitA+0x10>
    3c7e:	5f 3f       	cpi	r21, 0xFF	; 255
    3c80:	71 f0       	breq	.+28     	; 0x3c9e <__fp_splitA+0x1a>
    3c82:	47 95       	ror	r20

00003c84 <__fp_splitA>:
    3c84:	88 0f       	add	r24, r24
    3c86:	97 fb       	bst	r25, 7
    3c88:	99 1f       	adc	r25, r25
    3c8a:	61 f0       	breq	.+24     	; 0x3ca4 <__fp_splitA+0x20>
    3c8c:	9f 3f       	cpi	r25, 0xFF	; 255
    3c8e:	79 f0       	breq	.+30     	; 0x3cae <__fp_splitA+0x2a>
    3c90:	87 95       	ror	r24
    3c92:	08 95       	ret
    3c94:	12 16       	cp	r1, r18
    3c96:	13 06       	cpc	r1, r19
    3c98:	14 06       	cpc	r1, r20
    3c9a:	55 1f       	adc	r21, r21
    3c9c:	f2 cf       	rjmp	.-28     	; 0x3c82 <__fp_split3+0xe>
    3c9e:	46 95       	lsr	r20
    3ca0:	f1 df       	rcall	.-30     	; 0x3c84 <__fp_splitA>
    3ca2:	08 c0       	rjmp	.+16     	; 0x3cb4 <__fp_splitA+0x30>
    3ca4:	16 16       	cp	r1, r22
    3ca6:	17 06       	cpc	r1, r23
    3ca8:	18 06       	cpc	r1, r24
    3caa:	99 1f       	adc	r25, r25
    3cac:	f1 cf       	rjmp	.-30     	; 0x3c90 <__fp_splitA+0xc>
    3cae:	86 95       	lsr	r24
    3cb0:	71 05       	cpc	r23, r1
    3cb2:	61 05       	cpc	r22, r1
    3cb4:	08 94       	sec
    3cb6:	08 95       	ret

00003cb8 <__fp_zero>:
    3cb8:	e8 94       	clt

00003cba <__fp_szero>:
    3cba:	bb 27       	eor	r27, r27
    3cbc:	66 27       	eor	r22, r22
    3cbe:	77 27       	eor	r23, r23
    3cc0:	cb 01       	movw	r24, r22
    3cc2:	97 f9       	bld	r25, 7
    3cc4:	08 95       	ret

00003cc6 <inverse>:
    3cc6:	9b 01       	movw	r18, r22
    3cc8:	ac 01       	movw	r20, r24
    3cca:	60 e0       	ldi	r22, 0x00	; 0
    3ccc:	70 e0       	ldi	r23, 0x00	; 0
    3cce:	80 e8       	ldi	r24, 0x80	; 128
    3cd0:	9f e3       	ldi	r25, 0x3F	; 63
    3cd2:	0c 94 06 1d 	jmp	0x3a0c	; 0x3a0c <__divsf3>

00003cd6 <__mulsf3>:
    3cd6:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <__mulsf3x>
    3cda:	0c 94 29 1e 	jmp	0x3c52	; 0x3c52 <__fp_round>
    3cde:	0e 94 1b 1e 	call	0x3c36	; 0x3c36 <__fp_pscA>
    3ce2:	38 f0       	brcs	.+14     	; 0x3cf2 <__mulsf3+0x1c>
    3ce4:	0e 94 22 1e 	call	0x3c44	; 0x3c44 <__fp_pscB>
    3ce8:	20 f0       	brcs	.+8      	; 0x3cf2 <__mulsf3+0x1c>
    3cea:	95 23       	and	r25, r21
    3cec:	11 f0       	breq	.+4      	; 0x3cf2 <__mulsf3+0x1c>
    3cee:	0c 94 eb 1d 	jmp	0x3bd6	; 0x3bd6 <__fp_inf>
    3cf2:	0c 94 f1 1d 	jmp	0x3be2	; 0x3be2 <__fp_nan>
    3cf6:	11 24       	eor	r1, r1
    3cf8:	0c 94 5d 1e 	jmp	0x3cba	; 0x3cba <__fp_szero>

00003cfc <__mulsf3x>:
    3cfc:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <__fp_split3>
    3d00:	70 f3       	brcs	.-36     	; 0x3cde <__mulsf3+0x8>

00003d02 <__mulsf3_pse>:
    3d02:	95 9f       	mul	r25, r21
    3d04:	c1 f3       	breq	.-16     	; 0x3cf6 <__mulsf3+0x20>
    3d06:	95 0f       	add	r25, r21
    3d08:	50 e0       	ldi	r21, 0x00	; 0
    3d0a:	55 1f       	adc	r21, r21
    3d0c:	62 9f       	mul	r22, r18
    3d0e:	f0 01       	movw	r30, r0
    3d10:	72 9f       	mul	r23, r18
    3d12:	bb 27       	eor	r27, r27
    3d14:	f0 0d       	add	r31, r0
    3d16:	b1 1d       	adc	r27, r1
    3d18:	63 9f       	mul	r22, r19
    3d1a:	aa 27       	eor	r26, r26
    3d1c:	f0 0d       	add	r31, r0
    3d1e:	b1 1d       	adc	r27, r1
    3d20:	aa 1f       	adc	r26, r26
    3d22:	64 9f       	mul	r22, r20
    3d24:	66 27       	eor	r22, r22
    3d26:	b0 0d       	add	r27, r0
    3d28:	a1 1d       	adc	r26, r1
    3d2a:	66 1f       	adc	r22, r22
    3d2c:	82 9f       	mul	r24, r18
    3d2e:	22 27       	eor	r18, r18
    3d30:	b0 0d       	add	r27, r0
    3d32:	a1 1d       	adc	r26, r1
    3d34:	62 1f       	adc	r22, r18
    3d36:	73 9f       	mul	r23, r19
    3d38:	b0 0d       	add	r27, r0
    3d3a:	a1 1d       	adc	r26, r1
    3d3c:	62 1f       	adc	r22, r18
    3d3e:	83 9f       	mul	r24, r19
    3d40:	a0 0d       	add	r26, r0
    3d42:	61 1d       	adc	r22, r1
    3d44:	22 1f       	adc	r18, r18
    3d46:	74 9f       	mul	r23, r20
    3d48:	33 27       	eor	r19, r19
    3d4a:	a0 0d       	add	r26, r0
    3d4c:	61 1d       	adc	r22, r1
    3d4e:	23 1f       	adc	r18, r19
    3d50:	84 9f       	mul	r24, r20
    3d52:	60 0d       	add	r22, r0
    3d54:	21 1d       	adc	r18, r1
    3d56:	82 2f       	mov	r24, r18
    3d58:	76 2f       	mov	r23, r22
    3d5a:	6a 2f       	mov	r22, r26
    3d5c:	11 24       	eor	r1, r1
    3d5e:	9f 57       	subi	r25, 0x7F	; 127
    3d60:	50 40       	sbci	r21, 0x00	; 0
    3d62:	9a f0       	brmi	.+38     	; 0x3d8a <__mulsf3_pse+0x88>
    3d64:	f1 f0       	breq	.+60     	; 0x3da2 <__mulsf3_pse+0xa0>
    3d66:	88 23       	and	r24, r24
    3d68:	4a f0       	brmi	.+18     	; 0x3d7c <__mulsf3_pse+0x7a>
    3d6a:	ee 0f       	add	r30, r30
    3d6c:	ff 1f       	adc	r31, r31
    3d6e:	bb 1f       	adc	r27, r27
    3d70:	66 1f       	adc	r22, r22
    3d72:	77 1f       	adc	r23, r23
    3d74:	88 1f       	adc	r24, r24
    3d76:	91 50       	subi	r25, 0x01	; 1
    3d78:	50 40       	sbci	r21, 0x00	; 0
    3d7a:	a9 f7       	brne	.-22     	; 0x3d66 <__mulsf3_pse+0x64>
    3d7c:	9e 3f       	cpi	r25, 0xFE	; 254
    3d7e:	51 05       	cpc	r21, r1
    3d80:	80 f0       	brcs	.+32     	; 0x3da2 <__mulsf3_pse+0xa0>
    3d82:	0c 94 eb 1d 	jmp	0x3bd6	; 0x3bd6 <__fp_inf>
    3d86:	0c 94 5d 1e 	jmp	0x3cba	; 0x3cba <__fp_szero>
    3d8a:	5f 3f       	cpi	r21, 0xFF	; 255
    3d8c:	e4 f3       	brlt	.-8      	; 0x3d86 <__mulsf3_pse+0x84>
    3d8e:	98 3e       	cpi	r25, 0xE8	; 232
    3d90:	d4 f3       	brlt	.-12     	; 0x3d86 <__mulsf3_pse+0x84>
    3d92:	86 95       	lsr	r24
    3d94:	77 95       	ror	r23
    3d96:	67 95       	ror	r22
    3d98:	b7 95       	ror	r27
    3d9a:	f7 95       	ror	r31
    3d9c:	e7 95       	ror	r30
    3d9e:	9f 5f       	subi	r25, 0xFF	; 255
    3da0:	c1 f7       	brne	.-16     	; 0x3d92 <__mulsf3_pse+0x90>
    3da2:	fe 2b       	or	r31, r30
    3da4:	88 0f       	add	r24, r24
    3da6:	91 1d       	adc	r25, r1
    3da8:	96 95       	lsr	r25
    3daa:	87 95       	ror	r24
    3dac:	97 f9       	bld	r25, 7
    3dae:	08 95       	ret
    3db0:	19 f4       	brne	.+6      	; 0x3db8 <__mulsf3_pse+0xb6>
    3db2:	16 f4       	brtc	.+4      	; 0x3db8 <__mulsf3_pse+0xb6>
    3db4:	0c 94 f1 1d 	jmp	0x3be2	; 0x3be2 <__fp_nan>
    3db8:	0c 94 22 1f 	jmp	0x3e44	; 0x3e44 <__fp_mpack>

00003dbc <sqrt>:
    3dbc:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <__fp_splitA>
    3dc0:	b8 f3       	brcs	.-18     	; 0x3db0 <__mulsf3_pse+0xae>
    3dc2:	99 23       	and	r25, r25
    3dc4:	c9 f3       	breq	.-14     	; 0x3db8 <__mulsf3_pse+0xb6>
    3dc6:	b6 f3       	brts	.-20     	; 0x3db4 <__mulsf3_pse+0xb2>
    3dc8:	9f 57       	subi	r25, 0x7F	; 127
    3dca:	55 0b       	sbc	r21, r21
    3dcc:	87 ff       	sbrs	r24, 7
    3dce:	0e 94 30 1f 	call	0x3e60	; 0x3e60 <__fp_norm2>
    3dd2:	00 24       	eor	r0, r0
    3dd4:	a0 e6       	ldi	r26, 0x60	; 96
    3dd6:	40 ea       	ldi	r20, 0xA0	; 160
    3dd8:	90 01       	movw	r18, r0
    3dda:	80 58       	subi	r24, 0x80	; 128
    3ddc:	56 95       	lsr	r21
    3dde:	97 95       	ror	r25
    3de0:	28 f4       	brcc	.+10     	; 0x3dec <sqrt+0x30>
    3de2:	80 5c       	subi	r24, 0xC0	; 192
    3de4:	66 0f       	add	r22, r22
    3de6:	77 1f       	adc	r23, r23
    3de8:	88 1f       	adc	r24, r24
    3dea:	20 f0       	brcs	.+8      	; 0x3df4 <sqrt+0x38>
    3dec:	26 17       	cp	r18, r22
    3dee:	37 07       	cpc	r19, r23
    3df0:	48 07       	cpc	r20, r24
    3df2:	30 f4       	brcc	.+12     	; 0x3e00 <sqrt+0x44>
    3df4:	62 1b       	sub	r22, r18
    3df6:	73 0b       	sbc	r23, r19
    3df8:	84 0b       	sbc	r24, r20
    3dfa:	20 29       	or	r18, r0
    3dfc:	31 29       	or	r19, r1
    3dfe:	4a 2b       	or	r20, r26
    3e00:	a6 95       	lsr	r26
    3e02:	17 94       	ror	r1
    3e04:	07 94       	ror	r0
    3e06:	20 25       	eor	r18, r0
    3e08:	31 25       	eor	r19, r1
    3e0a:	4a 27       	eor	r20, r26
    3e0c:	58 f7       	brcc	.-42     	; 0x3de4 <sqrt+0x28>
    3e0e:	66 0f       	add	r22, r22
    3e10:	77 1f       	adc	r23, r23
    3e12:	88 1f       	adc	r24, r24
    3e14:	20 f0       	brcs	.+8      	; 0x3e1e <sqrt+0x62>
    3e16:	26 17       	cp	r18, r22
    3e18:	37 07       	cpc	r19, r23
    3e1a:	48 07       	cpc	r20, r24
    3e1c:	30 f4       	brcc	.+12     	; 0x3e2a <sqrt+0x6e>
    3e1e:	62 0b       	sbc	r22, r18
    3e20:	73 0b       	sbc	r23, r19
    3e22:	84 0b       	sbc	r24, r20
    3e24:	20 0d       	add	r18, r0
    3e26:	31 1d       	adc	r19, r1
    3e28:	41 1d       	adc	r20, r1
    3e2a:	a0 95       	com	r26
    3e2c:	81 f7       	brne	.-32     	; 0x3e0e <sqrt+0x52>
    3e2e:	b9 01       	movw	r22, r18
    3e30:	84 2f       	mov	r24, r20
    3e32:	91 58       	subi	r25, 0x81	; 129
    3e34:	88 0f       	add	r24, r24
    3e36:	96 95       	lsr	r25
    3e38:	87 95       	ror	r24
    3e3a:	08 95       	ret

00003e3c <square>:
    3e3c:	9b 01       	movw	r18, r22
    3e3e:	ac 01       	movw	r20, r24
    3e40:	0c 94 6b 1e 	jmp	0x3cd6	; 0x3cd6 <__mulsf3>

00003e44 <__fp_mpack>:
    3e44:	9f 3f       	cpi	r25, 0xFF	; 255
    3e46:	31 f0       	breq	.+12     	; 0x3e54 <__fp_mpack_finite+0xc>

00003e48 <__fp_mpack_finite>:
    3e48:	91 50       	subi	r25, 0x01	; 1
    3e4a:	20 f4       	brcc	.+8      	; 0x3e54 <__fp_mpack_finite+0xc>
    3e4c:	87 95       	ror	r24
    3e4e:	77 95       	ror	r23
    3e50:	67 95       	ror	r22
    3e52:	b7 95       	ror	r27
    3e54:	88 0f       	add	r24, r24
    3e56:	91 1d       	adc	r25, r1
    3e58:	96 95       	lsr	r25
    3e5a:	87 95       	ror	r24
    3e5c:	97 f9       	bld	r25, 7
    3e5e:	08 95       	ret

00003e60 <__fp_norm2>:
    3e60:	91 50       	subi	r25, 0x01	; 1
    3e62:	50 40       	sbci	r21, 0x00	; 0
    3e64:	66 0f       	add	r22, r22
    3e66:	77 1f       	adc	r23, r23
    3e68:	88 1f       	adc	r24, r24
    3e6a:	d2 f7       	brpl	.-12     	; 0x3e60 <__fp_norm2>
    3e6c:	08 95       	ret

00003e6e <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    3e6e:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    3e70:	91 8d       	ldd	r25, Z+25	; 0x19
    3e72:	22 8d       	ldd	r18, Z+26	; 0x1a
    3e74:	89 2f       	mov	r24, r25
    3e76:	90 e0       	ldi	r25, 0x00	; 0
    3e78:	80 5c       	subi	r24, 0xC0	; 192
    3e7a:	9f 4f       	sbci	r25, 0xFF	; 255
    3e7c:	82 1b       	sub	r24, r18
    3e7e:	91 09       	sbc	r25, r1
}
    3e80:	8f 73       	andi	r24, 0x3F	; 63
    3e82:	99 27       	eor	r25, r25
    3e84:	08 95       	ret

00003e86 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    3e86:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    3e88:	91 8d       	ldd	r25, Z+25	; 0x19
    3e8a:	82 8d       	ldd	r24, Z+26	; 0x1a
    3e8c:	98 17       	cp	r25, r24
    3e8e:	31 f0       	breq	.+12     	; 0x3e9c <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    3e90:	82 8d       	ldd	r24, Z+26	; 0x1a
    3e92:	e8 0f       	add	r30, r24
    3e94:	f1 1d       	adc	r31, r1
    3e96:	85 8d       	ldd	r24, Z+29	; 0x1d
    3e98:	90 e0       	ldi	r25, 0x00	; 0
    3e9a:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    3e9c:	8f ef       	ldi	r24, 0xFF	; 255
    3e9e:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    3ea0:	08 95       	ret

00003ea2 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    3ea2:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    3ea4:	91 8d       	ldd	r25, Z+25	; 0x19
    3ea6:	82 8d       	ldd	r24, Z+26	; 0x1a
    3ea8:	98 17       	cp	r25, r24
    3eaa:	61 f0       	breq	.+24     	; 0x3ec4 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    3eac:	82 8d       	ldd	r24, Z+26	; 0x1a
    3eae:	df 01       	movw	r26, r30
    3eb0:	a8 0f       	add	r26, r24
    3eb2:	b1 1d       	adc	r27, r1
    3eb4:	5d 96       	adiw	r26, 0x1d	; 29
    3eb6:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    3eb8:	92 8d       	ldd	r25, Z+26	; 0x1a
    3eba:	9f 5f       	subi	r25, 0xFF	; 255
    3ebc:	9f 73       	andi	r25, 0x3F	; 63
    3ebe:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    3ec0:	90 e0       	ldi	r25, 0x00	; 0
    3ec2:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    3ec4:	8f ef       	ldi	r24, 0xFF	; 255
    3ec6:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    3ec8:	08 95       	ret

00003eca <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    3eca:	8a eb       	ldi	r24, 0xBA	; 186
    3ecc:	90 e2       	ldi	r25, 0x20	; 32
    3ece:	89 2b       	or	r24, r25
    3ed0:	49 f0       	breq	.+18     	; 0x3ee4 <_Z14serialEventRunv+0x1a>
    3ed2:	80 e0       	ldi	r24, 0x00	; 0
    3ed4:	90 e0       	ldi	r25, 0x00	; 0
    3ed6:	89 2b       	or	r24, r25
    3ed8:	29 f0       	breq	.+10     	; 0x3ee4 <_Z14serialEventRunv+0x1a>
    3eda:	0e 94 ba 20 	call	0x4174	; 0x4174 <_Z17Serial0_availablev>
    3ede:	81 11       	cpse	r24, r1
    3ee0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    3ee4:	08 95       	ret

00003ee6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    3ee6:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    3ee8:	84 8d       	ldd	r24, Z+28	; 0x1c
    3eea:	df 01       	movw	r26, r30
    3eec:	a8 0f       	add	r26, r24
    3eee:	b1 1d       	adc	r27, r1
    3ef0:	a3 5a       	subi	r26, 0xA3	; 163
    3ef2:	bf 4f       	sbci	r27, 0xFF	; 255
    3ef4:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    3ef6:	84 8d       	ldd	r24, Z+28	; 0x1c
    3ef8:	90 e0       	ldi	r25, 0x00	; 0
    3efa:	01 96       	adiw	r24, 0x01	; 1
    3efc:	8f 73       	andi	r24, 0x3F	; 63
    3efe:	99 27       	eor	r25, r25
    3f00:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    3f02:	a6 89       	ldd	r26, Z+22	; 0x16
    3f04:	b7 89       	ldd	r27, Z+23	; 0x17
    3f06:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    3f08:	a0 89       	ldd	r26, Z+16	; 0x10
    3f0a:	b1 89       	ldd	r27, Z+17	; 0x11
    3f0c:	8c 91       	ld	r24, X
    3f0e:	80 64       	ori	r24, 0x40	; 64
    3f10:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    3f12:	93 8d       	ldd	r25, Z+27	; 0x1b
    3f14:	84 8d       	ldd	r24, Z+28	; 0x1c
    3f16:	98 13       	cpse	r25, r24
    3f18:	06 c0       	rjmp	.+12     	; 0x3f26 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    3f1a:	02 88       	ldd	r0, Z+18	; 0x12
    3f1c:	f3 89       	ldd	r31, Z+19	; 0x13
    3f1e:	e0 2d       	mov	r30, r0
    3f20:	80 81       	ld	r24, Z
    3f22:	8f 7d       	andi	r24, 0xDF	; 223
    3f24:	80 83       	st	Z, r24
    3f26:	08 95       	ret

00003f28 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    3f28:	ef 92       	push	r14
    3f2a:	ff 92       	push	r15
    3f2c:	0f 93       	push	r16
    3f2e:	1f 93       	push	r17
    3f30:	cf 93       	push	r28
    3f32:	df 93       	push	r29
    3f34:	ec 01       	movw	r28, r24
  _written = true;
    3f36:	81 e0       	ldi	r24, 0x01	; 1
    3f38:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    3f3a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3f3c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3f3e:	98 13       	cpse	r25, r24
    3f40:	05 c0       	rjmp	.+10     	; 0x3f4c <_ZN14HardwareSerial5writeEh+0x24>
    3f42:	e8 89       	ldd	r30, Y+16	; 0x10
    3f44:	f9 89       	ldd	r31, Y+17	; 0x11
    3f46:	80 81       	ld	r24, Z
    3f48:	85 fd       	sbrc	r24, 5
    3f4a:	24 c0       	rjmp	.+72     	; 0x3f94 <_ZN14HardwareSerial5writeEh+0x6c>
    3f4c:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    3f4e:	0b 8d       	ldd	r16, Y+27	; 0x1b
    3f50:	10 e0       	ldi	r17, 0x00	; 0
    3f52:	0f 5f       	subi	r16, 0xFF	; 255
    3f54:	1f 4f       	sbci	r17, 0xFF	; 255
    3f56:	0f 73       	andi	r16, 0x3F	; 63
    3f58:	11 27       	eor	r17, r17
    3f5a:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    3f5c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3f5e:	e8 12       	cpse	r14, r24
    3f60:	0c c0       	rjmp	.+24     	; 0x3f7a <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    3f62:	0f b6       	in	r0, 0x3f	; 63
    3f64:	07 fc       	sbrc	r0, 7
    3f66:	fa cf       	rjmp	.-12     	; 0x3f5c <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    3f68:	e8 89       	ldd	r30, Y+16	; 0x10
    3f6a:	f9 89       	ldd	r31, Y+17	; 0x11
    3f6c:	80 81       	ld	r24, Z
    3f6e:	85 ff       	sbrs	r24, 5
    3f70:	f5 cf       	rjmp	.-22     	; 0x3f5c <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    3f72:	ce 01       	movw	r24, r28
    3f74:	0e 94 73 1f 	call	0x3ee6	; 0x3ee6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3f78:	f1 cf       	rjmp	.-30     	; 0x3f5c <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    3f7a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f7c:	fe 01       	movw	r30, r28
    3f7e:	e8 0f       	add	r30, r24
    3f80:	f1 1d       	adc	r31, r1
    3f82:	e3 5a       	subi	r30, 0xA3	; 163
    3f84:	ff 4f       	sbci	r31, 0xFF	; 255
    3f86:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    3f88:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    3f8a:	ea 89       	ldd	r30, Y+18	; 0x12
    3f8c:	fb 89       	ldd	r31, Y+19	; 0x13
    3f8e:	80 81       	ld	r24, Z
    3f90:	80 62       	ori	r24, 0x20	; 32
    3f92:	07 c0       	rjmp	.+14     	; 0x3fa2 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    3f94:	ee 89       	ldd	r30, Y+22	; 0x16
    3f96:	ff 89       	ldd	r31, Y+23	; 0x17
    3f98:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    3f9a:	e8 89       	ldd	r30, Y+16	; 0x10
    3f9c:	f9 89       	ldd	r31, Y+17	; 0x11
    3f9e:	80 81       	ld	r24, Z
    3fa0:	80 64       	ori	r24, 0x40	; 64
    3fa2:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    3fa4:	81 e0       	ldi	r24, 0x01	; 1
    3fa6:	90 e0       	ldi	r25, 0x00	; 0
    3fa8:	df 91       	pop	r29
    3faa:	cf 91       	pop	r28
    3fac:	1f 91       	pop	r17
    3fae:	0f 91       	pop	r16
    3fb0:	ff 90       	pop	r15
    3fb2:	ef 90       	pop	r14
    3fb4:	08 95       	ret

00003fb6 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    3fb6:	cf 93       	push	r28
    3fb8:	df 93       	push	r29
    3fba:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    3fbc:	88 8d       	ldd	r24, Y+24	; 0x18
    3fbe:	88 23       	and	r24, r24
    3fc0:	c9 f0       	breq	.+50     	; 0x3ff4 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    3fc2:	ea 89       	ldd	r30, Y+18	; 0x12
    3fc4:	fb 89       	ldd	r31, Y+19	; 0x13
    3fc6:	80 81       	ld	r24, Z
    3fc8:	85 fd       	sbrc	r24, 5
    3fca:	05 c0       	rjmp	.+10     	; 0x3fd6 <_ZN14HardwareSerial5flushEv+0x20>
    3fcc:	a8 89       	ldd	r26, Y+16	; 0x10
    3fce:	b9 89       	ldd	r27, Y+17	; 0x11
    3fd0:	8c 91       	ld	r24, X
    3fd2:	86 fd       	sbrc	r24, 6
    3fd4:	0f c0       	rjmp	.+30     	; 0x3ff4 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    3fd6:	0f b6       	in	r0, 0x3f	; 63
    3fd8:	07 fc       	sbrc	r0, 7
    3fda:	f5 cf       	rjmp	.-22     	; 0x3fc6 <_ZN14HardwareSerial5flushEv+0x10>
    3fdc:	80 81       	ld	r24, Z
    3fde:	85 ff       	sbrs	r24, 5
    3fe0:	f2 cf       	rjmp	.-28     	; 0x3fc6 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    3fe2:	a8 89       	ldd	r26, Y+16	; 0x10
    3fe4:	b9 89       	ldd	r27, Y+17	; 0x11
    3fe6:	8c 91       	ld	r24, X
    3fe8:	85 ff       	sbrs	r24, 5
    3fea:	ed cf       	rjmp	.-38     	; 0x3fc6 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    3fec:	ce 01       	movw	r24, r28
    3fee:	0e 94 73 1f 	call	0x3ee6	; 0x3ee6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3ff2:	e7 cf       	rjmp	.-50     	; 0x3fc2 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    3ff4:	df 91       	pop	r29
    3ff6:	cf 91       	pop	r28
    3ff8:	08 95       	ret

00003ffa <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    3ffa:	cf 92       	push	r12
    3ffc:	df 92       	push	r13
    3ffe:	ef 92       	push	r14
    4000:	ff 92       	push	r15
    4002:	1f 93       	push	r17
    4004:	cf 93       	push	r28
    4006:	df 93       	push	r29
    4008:	ec 01       	movw	r28, r24
    400a:	6a 01       	movw	r12, r20
    400c:	7b 01       	movw	r14, r22
    400e:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    4010:	e8 89       	ldd	r30, Y+16	; 0x10
    4012:	f9 89       	ldd	r31, Y+17	; 0x11
    4014:	82 e0       	ldi	r24, 0x02	; 2
    4016:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    4018:	41 15       	cp	r20, r1
    401a:	51 4e       	sbci	r21, 0xE1	; 225
    401c:	61 05       	cpc	r22, r1
    401e:	71 05       	cpc	r23, r1
    4020:	b1 f0       	breq	.+44     	; 0x404e <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    4022:	60 e0       	ldi	r22, 0x00	; 0
    4024:	79 e0       	ldi	r23, 0x09	; 9
    4026:	8d e3       	ldi	r24, 0x3D	; 61
    4028:	90 e0       	ldi	r25, 0x00	; 0
    402a:	a7 01       	movw	r20, r14
    402c:	96 01       	movw	r18, r12
    402e:	0e 94 7e 25 	call	0x4afc	; 0x4afc <__udivmodsi4>
    4032:	da 01       	movw	r26, r20
    4034:	c9 01       	movw	r24, r18
    4036:	01 97       	sbiw	r24, 0x01	; 1
    4038:	a1 09       	sbc	r26, r1
    403a:	b1 09       	sbc	r27, r1
    403c:	b6 95       	lsr	r27
    403e:	a7 95       	ror	r26
    4040:	97 95       	ror	r25
    4042:	87 95       	ror	r24
    4044:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    4046:	21 15       	cp	r18, r1
    4048:	80 e1       	ldi	r24, 0x10	; 16
    404a:	38 07       	cpc	r19, r24
    404c:	a8 f0       	brcs	.+42     	; 0x4078 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    404e:	e8 89       	ldd	r30, Y+16	; 0x10
    4050:	f9 89       	ldd	r31, Y+17	; 0x11
    4052:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    4054:	60 e8       	ldi	r22, 0x80	; 128
    4056:	74 e8       	ldi	r23, 0x84	; 132
    4058:	8e e1       	ldi	r24, 0x1E	; 30
    405a:	90 e0       	ldi	r25, 0x00	; 0
    405c:	a7 01       	movw	r20, r14
    405e:	96 01       	movw	r18, r12
    4060:	0e 94 7e 25 	call	0x4afc	; 0x4afc <__udivmodsi4>
    4064:	da 01       	movw	r26, r20
    4066:	c9 01       	movw	r24, r18
    4068:	01 97       	sbiw	r24, 0x01	; 1
    406a:	a1 09       	sbc	r26, r1
    406c:	b1 09       	sbc	r27, r1
    406e:	b6 95       	lsr	r27
    4070:	a7 95       	ror	r26
    4072:	97 95       	ror	r25
    4074:	87 95       	ror	r24
    4076:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    4078:	ec 85       	ldd	r30, Y+12	; 0x0c
    407a:	fd 85       	ldd	r31, Y+13	; 0x0d
    407c:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    407e:	ee 85       	ldd	r30, Y+14	; 0x0e
    4080:	ff 85       	ldd	r31, Y+15	; 0x0f
    4082:	20 83       	st	Z, r18

  _written = false;
    4084:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    4086:	ec 89       	ldd	r30, Y+20	; 0x14
    4088:	fd 89       	ldd	r31, Y+21	; 0x15
    408a:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    408c:	ea 89       	ldd	r30, Y+18	; 0x12
    408e:	fb 89       	ldd	r31, Y+19	; 0x13
    4090:	80 81       	ld	r24, Z
    4092:	80 61       	ori	r24, 0x10	; 16
    4094:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    4096:	ea 89       	ldd	r30, Y+18	; 0x12
    4098:	fb 89       	ldd	r31, Y+19	; 0x13
    409a:	80 81       	ld	r24, Z
    409c:	88 60       	ori	r24, 0x08	; 8
    409e:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    40a0:	ea 89       	ldd	r30, Y+18	; 0x12
    40a2:	fb 89       	ldd	r31, Y+19	; 0x13
    40a4:	80 81       	ld	r24, Z
    40a6:	80 68       	ori	r24, 0x80	; 128
    40a8:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    40aa:	ea 89       	ldd	r30, Y+18	; 0x12
    40ac:	fb 89       	ldd	r31, Y+19	; 0x13
    40ae:	80 81       	ld	r24, Z
    40b0:	8f 7d       	andi	r24, 0xDF	; 223
    40b2:	80 83       	st	Z, r24
}
    40b4:	df 91       	pop	r29
    40b6:	cf 91       	pop	r28
    40b8:	1f 91       	pop	r17
    40ba:	ff 90       	pop	r15
    40bc:	ef 90       	pop	r14
    40be:	df 90       	pop	r13
    40c0:	cf 90       	pop	r12
    40c2:	08 95       	ret

000040c4 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    40c4:	1f 92       	push	r1
    40c6:	0f 92       	push	r0
    40c8:	0f b6       	in	r0, 0x3f	; 63
    40ca:	0f 92       	push	r0
    40cc:	11 24       	eor	r1, r1
    40ce:	2f 93       	push	r18
    40d0:	8f 93       	push	r24
    40d2:	9f 93       	push	r25
    40d4:	ef 93       	push	r30
    40d6:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    40d8:	e0 91 a8 02 	lds	r30, 0x02A8	; 0x8002a8 <Serial+0x10>
    40dc:	f0 91 a9 02 	lds	r31, 0x02A9	; 0x8002a9 <Serial+0x11>
    40e0:	80 81       	ld	r24, Z
    40e2:	e0 91 ae 02 	lds	r30, 0x02AE	; 0x8002ae <Serial+0x16>
    40e6:	f0 91 af 02 	lds	r31, 0x02AF	; 0x8002af <Serial+0x17>
    40ea:	82 fd       	sbrc	r24, 2
    40ec:	12 c0       	rjmp	.+36     	; 0x4112 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    40ee:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    40f0:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <Serial+0x19>
    40f4:	8f 5f       	subi	r24, 0xFF	; 255
    40f6:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    40f8:	20 91 b2 02 	lds	r18, 0x02B2	; 0x8002b2 <Serial+0x1a>
    40fc:	82 17       	cp	r24, r18
    40fe:	51 f0       	breq	.+20     	; 0x4114 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    4100:	e0 91 b1 02 	lds	r30, 0x02B1	; 0x8002b1 <Serial+0x19>
    4104:	f0 e0       	ldi	r31, 0x00	; 0
    4106:	e8 56       	subi	r30, 0x68	; 104
    4108:	fd 4f       	sbci	r31, 0xFD	; 253
    410a:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    410c:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <Serial+0x19>
    4110:	01 c0       	rjmp	.+2      	; 0x4114 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    4112:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    4114:	ff 91       	pop	r31
    4116:	ef 91       	pop	r30
    4118:	9f 91       	pop	r25
    411a:	8f 91       	pop	r24
    411c:	2f 91       	pop	r18
    411e:	0f 90       	pop	r0
    4120:	0f be       	out	0x3f, r0	; 63
    4122:	0f 90       	pop	r0
    4124:	1f 90       	pop	r1
    4126:	18 95       	reti

00004128 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    4128:	1f 92       	push	r1
    412a:	0f 92       	push	r0
    412c:	0f b6       	in	r0, 0x3f	; 63
    412e:	0f 92       	push	r0
    4130:	11 24       	eor	r1, r1
    4132:	2f 93       	push	r18
    4134:	3f 93       	push	r19
    4136:	4f 93       	push	r20
    4138:	5f 93       	push	r21
    413a:	6f 93       	push	r22
    413c:	7f 93       	push	r23
    413e:	8f 93       	push	r24
    4140:	9f 93       	push	r25
    4142:	af 93       	push	r26
    4144:	bf 93       	push	r27
    4146:	ef 93       	push	r30
    4148:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    414a:	88 e9       	ldi	r24, 0x98	; 152
    414c:	92 e0       	ldi	r25, 0x02	; 2
    414e:	0e 94 73 1f 	call	0x3ee6	; 0x3ee6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    4152:	ff 91       	pop	r31
    4154:	ef 91       	pop	r30
    4156:	bf 91       	pop	r27
    4158:	af 91       	pop	r26
    415a:	9f 91       	pop	r25
    415c:	8f 91       	pop	r24
    415e:	7f 91       	pop	r23
    4160:	6f 91       	pop	r22
    4162:	5f 91       	pop	r21
    4164:	4f 91       	pop	r20
    4166:	3f 91       	pop	r19
    4168:	2f 91       	pop	r18
    416a:	0f 90       	pop	r0
    416c:	0f be       	out	0x3f, r0	; 63
    416e:	0f 90       	pop	r0
    4170:	1f 90       	pop	r1
    4172:	18 95       	reti

00004174 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    4174:	88 e9       	ldi	r24, 0x98	; 152
    4176:	92 e0       	ldi	r25, 0x02	; 2
    4178:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <_ZN14HardwareSerial9availableEv>
    417c:	21 e0       	ldi	r18, 0x01	; 1
    417e:	89 2b       	or	r24, r25
    4180:	09 f4       	brne	.+2      	; 0x4184 <_Z17Serial0_availablev+0x10>
    4182:	20 e0       	ldi	r18, 0x00	; 0
}
    4184:	82 2f       	mov	r24, r18
    4186:	08 95       	ret

00004188 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    4188:	e8 e9       	ldi	r30, 0x98	; 152
    418a:	f2 e0       	ldi	r31, 0x02	; 2
    418c:	13 82       	std	Z+3, r1	; 0x03
    418e:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    4190:	88 ee       	ldi	r24, 0xE8	; 232
    4192:	93 e0       	ldi	r25, 0x03	; 3
    4194:	a0 e0       	ldi	r26, 0x00	; 0
    4196:	b0 e0       	ldi	r27, 0x00	; 0
    4198:	84 83       	std	Z+4, r24	; 0x04
    419a:	95 83       	std	Z+5, r25	; 0x05
    419c:	a6 83       	std	Z+6, r26	; 0x06
    419e:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    41a0:	85 e2       	ldi	r24, 0x25	; 37
    41a2:	91 e0       	ldi	r25, 0x01	; 1
    41a4:	91 83       	std	Z+1, r25	; 0x01
    41a6:	80 83       	st	Z, r24
    41a8:	85 ec       	ldi	r24, 0xC5	; 197
    41aa:	90 e0       	ldi	r25, 0x00	; 0
    41ac:	95 87       	std	Z+13, r25	; 0x0d
    41ae:	84 87       	std	Z+12, r24	; 0x0c
    41b0:	84 ec       	ldi	r24, 0xC4	; 196
    41b2:	90 e0       	ldi	r25, 0x00	; 0
    41b4:	97 87       	std	Z+15, r25	; 0x0f
    41b6:	86 87       	std	Z+14, r24	; 0x0e
    41b8:	80 ec       	ldi	r24, 0xC0	; 192
    41ba:	90 e0       	ldi	r25, 0x00	; 0
    41bc:	91 8b       	std	Z+17, r25	; 0x11
    41be:	80 8b       	std	Z+16, r24	; 0x10
    41c0:	81 ec       	ldi	r24, 0xC1	; 193
    41c2:	90 e0       	ldi	r25, 0x00	; 0
    41c4:	93 8b       	std	Z+19, r25	; 0x13
    41c6:	82 8b       	std	Z+18, r24	; 0x12
    41c8:	82 ec       	ldi	r24, 0xC2	; 194
    41ca:	90 e0       	ldi	r25, 0x00	; 0
    41cc:	95 8b       	std	Z+21, r25	; 0x15
    41ce:	84 8b       	std	Z+20, r24	; 0x14
    41d0:	86 ec       	ldi	r24, 0xC6	; 198
    41d2:	90 e0       	ldi	r25, 0x00	; 0
    41d4:	97 8b       	std	Z+23, r25	; 0x17
    41d6:	86 8b       	std	Z+22, r24	; 0x16
    41d8:	11 8e       	std	Z+25, r1	; 0x19
    41da:	12 8e       	std	Z+26, r1	; 0x1a
    41dc:	13 8e       	std	Z+27, r1	; 0x1b
    41de:	14 8e       	std	Z+28, r1	; 0x1c
    41e0:	08 95       	ret

000041e2 <initVariant>:
    41e2:	08 95       	ret

000041e4 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    41e4:	0e 94 7b 24 	call	0x48f6	; 0x48f6 <init>

	initVariant();
    41e8:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    41ec:	0e 94 25 18 	call	0x304a	; 0x304a <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    41f0:	c5 e6       	ldi	r28, 0x65	; 101
    41f2:	df e1       	ldi	r29, 0x1F	; 31
#endif
	
	setup();
    
	for (;;) {
		loop();
    41f4:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <loop>
		if (serialEventRun) serialEventRun();
    41f8:	20 97       	sbiw	r28, 0x00	; 0
    41fa:	e1 f3       	breq	.-8      	; 0x41f4 <main+0x10>
    41fc:	0e 94 65 1f 	call	0x3eca	; 0x3eca <_Z14serialEventRunv>
    4200:	f9 cf       	rjmp	.-14     	; 0x41f4 <main+0x10>

00004202 <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    4202:	cf 92       	push	r12
    4204:	df 92       	push	r13
    4206:	ef 92       	push	r14
    4208:	ff 92       	push	r15
    420a:	0f 93       	push	r16
    420c:	1f 93       	push	r17
    420e:	cf 93       	push	r28
    4210:	df 93       	push	r29
    4212:	6c 01       	movw	r12, r24
    4214:	7a 01       	movw	r14, r20
    4216:	8b 01       	movw	r16, r22
    4218:	c0 e0       	ldi	r28, 0x00	; 0
    421a:	d0 e0       	ldi	r29, 0x00	; 0
    421c:	ce 15       	cp	r28, r14
    421e:	df 05       	cpc	r29, r15
    4220:	81 f0       	breq	.+32     	; 0x4242 <_ZN5Print5writeEPKhj+0x40>
    4222:	d8 01       	movw	r26, r16
    4224:	6d 91       	ld	r22, X+
    4226:	8d 01       	movw	r16, r26
    4228:	d6 01       	movw	r26, r12
    422a:	ed 91       	ld	r30, X+
    422c:	fc 91       	ld	r31, X
    422e:	01 90       	ld	r0, Z+
    4230:	f0 81       	ld	r31, Z
    4232:	e0 2d       	mov	r30, r0
    4234:	c6 01       	movw	r24, r12
    4236:	09 95       	icall
    4238:	89 2b       	or	r24, r25
    423a:	11 f0       	breq	.+4      	; 0x4240 <_ZN5Print5writeEPKhj+0x3e>
    423c:	21 96       	adiw	r28, 0x01	; 1
    423e:	ee cf       	rjmp	.-36     	; 0x421c <_ZN5Print5writeEPKhj+0x1a>
    4240:	7e 01       	movw	r14, r28
    4242:	c7 01       	movw	r24, r14
    4244:	df 91       	pop	r29
    4246:	cf 91       	pop	r28
    4248:	1f 91       	pop	r17
    424a:	0f 91       	pop	r16
    424c:	ff 90       	pop	r15
    424e:	ef 90       	pop	r14
    4250:	df 90       	pop	r13
    4252:	cf 90       	pop	r12
    4254:	08 95       	ret

00004256 <_ZN5Print5writeEPKc>:
    4256:	61 15       	cp	r22, r1
    4258:	71 05       	cpc	r23, r1
    425a:	79 f0       	breq	.+30     	; 0x427a <_ZN5Print5writeEPKc+0x24>
    425c:	fb 01       	movw	r30, r22
    425e:	01 90       	ld	r0, Z+
    4260:	00 20       	and	r0, r0
    4262:	e9 f7       	brne	.-6      	; 0x425e <_ZN5Print5writeEPKc+0x8>
    4264:	31 97       	sbiw	r30, 0x01	; 1
    4266:	af 01       	movw	r20, r30
    4268:	46 1b       	sub	r20, r22
    426a:	57 0b       	sbc	r21, r23
    426c:	dc 01       	movw	r26, r24
    426e:	ed 91       	ld	r30, X+
    4270:	fc 91       	ld	r31, X
    4272:	02 80       	ldd	r0, Z+2	; 0x02
    4274:	f3 81       	ldd	r31, Z+3	; 0x03
    4276:	e0 2d       	mov	r30, r0
    4278:	09 94       	ijmp
    427a:	80 e0       	ldi	r24, 0x00	; 0
    427c:	90 e0       	ldi	r25, 0x00	; 0
    427e:	08 95       	ret

00004280 <_ZN5Print5printEPK19__FlashStringHelper>:
    4280:	ef 92       	push	r14
    4282:	ff 92       	push	r15
    4284:	0f 93       	push	r16
    4286:	1f 93       	push	r17
    4288:	cf 93       	push	r28
    428a:	df 93       	push	r29
    428c:	8c 01       	movw	r16, r24
    428e:	7b 01       	movw	r14, r22
    4290:	c0 e0       	ldi	r28, 0x00	; 0
    4292:	d0 e0       	ldi	r29, 0x00	; 0
    4294:	f7 01       	movw	r30, r14
    4296:	ec 0f       	add	r30, r28
    4298:	fd 1f       	adc	r31, r29
    429a:	64 91       	lpm	r22, Z
    429c:	66 23       	and	r22, r22
    429e:	61 f0       	breq	.+24     	; 0x42b8 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    42a0:	d8 01       	movw	r26, r16
    42a2:	ed 91       	ld	r30, X+
    42a4:	fc 91       	ld	r31, X
    42a6:	01 90       	ld	r0, Z+
    42a8:	f0 81       	ld	r31, Z
    42aa:	e0 2d       	mov	r30, r0
    42ac:	c8 01       	movw	r24, r16
    42ae:	09 95       	icall
    42b0:	89 2b       	or	r24, r25
    42b2:	11 f0       	breq	.+4      	; 0x42b8 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    42b4:	21 96       	adiw	r28, 0x01	; 1
    42b6:	ee cf       	rjmp	.-36     	; 0x4294 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    42b8:	ce 01       	movw	r24, r28
    42ba:	df 91       	pop	r29
    42bc:	cf 91       	pop	r28
    42be:	1f 91       	pop	r17
    42c0:	0f 91       	pop	r16
    42c2:	ff 90       	pop	r15
    42c4:	ef 90       	pop	r14
    42c6:	08 95       	ret

000042c8 <_ZN5Print5printEPKc>:
    42c8:	0c 94 2b 21 	jmp	0x4256	; 0x4256 <_ZN5Print5writeEPKc>

000042cc <_ZN5Print5printEc>:
    42cc:	dc 01       	movw	r26, r24
    42ce:	ed 91       	ld	r30, X+
    42d0:	fc 91       	ld	r31, X
    42d2:	01 90       	ld	r0, Z+
    42d4:	f0 81       	ld	r31, Z
    42d6:	e0 2d       	mov	r30, r0
    42d8:	09 94       	ijmp

000042da <_ZN5Print7printlnEv>:
    42da:	61 e3       	ldi	r22, 0x31	; 49
    42dc:	71 e0       	ldi	r23, 0x01	; 1
    42de:	0c 94 2b 21 	jmp	0x4256	; 0x4256 <_ZN5Print5writeEPKc>

000042e2 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    42e2:	0f 93       	push	r16
    42e4:	1f 93       	push	r17
    42e6:	cf 93       	push	r28
    42e8:	df 93       	push	r29
    42ea:	ec 01       	movw	r28, r24
    42ec:	0e 94 40 21 	call	0x4280	; 0x4280 <_ZN5Print5printEPK19__FlashStringHelper>
    42f0:	8c 01       	movw	r16, r24
    42f2:	ce 01       	movw	r24, r28
    42f4:	0e 94 6d 21 	call	0x42da	; 0x42da <_ZN5Print7printlnEv>
    42f8:	80 0f       	add	r24, r16
    42fa:	91 1f       	adc	r25, r17
    42fc:	df 91       	pop	r29
    42fe:	cf 91       	pop	r28
    4300:	1f 91       	pop	r17
    4302:	0f 91       	pop	r16
    4304:	08 95       	ret

00004306 <_ZN5Print11printNumberEmh>:
    4306:	8f 92       	push	r8
    4308:	9f 92       	push	r9
    430a:	af 92       	push	r10
    430c:	bf 92       	push	r11
    430e:	cf 92       	push	r12
    4310:	df 92       	push	r13
    4312:	ef 92       	push	r14
    4314:	ff 92       	push	r15
    4316:	0f 93       	push	r16
    4318:	1f 93       	push	r17
    431a:	cf 93       	push	r28
    431c:	df 93       	push	r29
    431e:	cd b7       	in	r28, 0x3d	; 61
    4320:	de b7       	in	r29, 0x3e	; 62
    4322:	a1 97       	sbiw	r28, 0x21	; 33
    4324:	0f b6       	in	r0, 0x3f	; 63
    4326:	f8 94       	cli
    4328:	de bf       	out	0x3e, r29	; 62
    432a:	0f be       	out	0x3f, r0	; 63
    432c:	cd bf       	out	0x3d, r28	; 61
    432e:	6c 01       	movw	r12, r24
    4330:	14 2f       	mov	r17, r20
    4332:	e5 2f       	mov	r30, r21
    4334:	cb 01       	movw	r24, r22
    4336:	02 2f       	mov	r16, r18
    4338:	19 a2       	std	Y+33, r1	; 0x21
    433a:	22 30       	cpi	r18, 0x02	; 2
    433c:	08 f4       	brcc	.+2      	; 0x4340 <_ZN5Print11printNumberEmh+0x3a>
    433e:	0a e0       	ldi	r16, 0x0A	; 10
    4340:	7e 01       	movw	r14, r28
    4342:	21 e2       	ldi	r18, 0x21	; 33
    4344:	e2 0e       	add	r14, r18
    4346:	f1 1c       	adc	r15, r1
    4348:	80 2e       	mov	r8, r16
    434a:	91 2c       	mov	r9, r1
    434c:	a1 2c       	mov	r10, r1
    434e:	b1 2c       	mov	r11, r1
    4350:	61 2f       	mov	r22, r17
    4352:	7e 2f       	mov	r23, r30
    4354:	a5 01       	movw	r20, r10
    4356:	94 01       	movw	r18, r8
    4358:	0e 94 7e 25 	call	0x4afc	; 0x4afc <__udivmodsi4>
    435c:	02 9f       	mul	r16, r18
    435e:	10 19       	sub	r17, r0
    4360:	11 24       	eor	r1, r1
    4362:	81 e0       	ldi	r24, 0x01	; 1
    4364:	e8 1a       	sub	r14, r24
    4366:	f1 08       	sbc	r15, r1
    4368:	1a 30       	cpi	r17, 0x0A	; 10
    436a:	10 f4       	brcc	.+4      	; 0x4370 <_ZN5Print11printNumberEmh+0x6a>
    436c:	10 5d       	subi	r17, 0xD0	; 208
    436e:	01 c0       	rjmp	.+2      	; 0x4372 <_ZN5Print11printNumberEmh+0x6c>
    4370:	19 5c       	subi	r17, 0xC9	; 201
    4372:	f7 01       	movw	r30, r14
    4374:	10 83       	st	Z, r17
    4376:	12 2f       	mov	r17, r18
    4378:	e3 2f       	mov	r30, r19
    437a:	ca 01       	movw	r24, r20
    437c:	23 2b       	or	r18, r19
    437e:	24 2b       	or	r18, r20
    4380:	25 2b       	or	r18, r21
    4382:	31 f7       	brne	.-52     	; 0x4350 <_ZN5Print11printNumberEmh+0x4a>
    4384:	b7 01       	movw	r22, r14
    4386:	c6 01       	movw	r24, r12
    4388:	0e 94 2b 21 	call	0x4256	; 0x4256 <_ZN5Print5writeEPKc>
    438c:	a1 96       	adiw	r28, 0x21	; 33
    438e:	0f b6       	in	r0, 0x3f	; 63
    4390:	f8 94       	cli
    4392:	de bf       	out	0x3e, r29	; 62
    4394:	0f be       	out	0x3f, r0	; 63
    4396:	cd bf       	out	0x3d, r28	; 61
    4398:	df 91       	pop	r29
    439a:	cf 91       	pop	r28
    439c:	1f 91       	pop	r17
    439e:	0f 91       	pop	r16
    43a0:	ff 90       	pop	r15
    43a2:	ef 90       	pop	r14
    43a4:	df 90       	pop	r13
    43a6:	cf 90       	pop	r12
    43a8:	bf 90       	pop	r11
    43aa:	af 90       	pop	r10
    43ac:	9f 90       	pop	r9
    43ae:	8f 90       	pop	r8
    43b0:	08 95       	ret

000043b2 <_ZN5Print5printEmi>:
    43b2:	21 15       	cp	r18, r1
    43b4:	31 05       	cpc	r19, r1
    43b6:	41 f4       	brne	.+16     	; 0x43c8 <_ZN5Print5printEmi+0x16>
    43b8:	dc 01       	movw	r26, r24
    43ba:	ed 91       	ld	r30, X+
    43bc:	fc 91       	ld	r31, X
    43be:	01 90       	ld	r0, Z+
    43c0:	f0 81       	ld	r31, Z
    43c2:	e0 2d       	mov	r30, r0
    43c4:	64 2f       	mov	r22, r20
    43c6:	09 94       	ijmp
    43c8:	0c 94 83 21 	jmp	0x4306	; 0x4306 <_ZN5Print11printNumberEmh>

000043cc <_ZN5Print5printEhi>:
    43cc:	9a 01       	movw	r18, r20
    43ce:	46 2f       	mov	r20, r22
    43d0:	50 e0       	ldi	r21, 0x00	; 0
    43d2:	60 e0       	ldi	r22, 0x00	; 0
    43d4:	70 e0       	ldi	r23, 0x00	; 0
    43d6:	0c 94 d9 21 	jmp	0x43b2	; 0x43b2 <_ZN5Print5printEmi>

000043da <_ZN5Print7printlnEhi>:
    43da:	0f 93       	push	r16
    43dc:	1f 93       	push	r17
    43de:	cf 93       	push	r28
    43e0:	df 93       	push	r29
    43e2:	ec 01       	movw	r28, r24
    43e4:	0e 94 e6 21 	call	0x43cc	; 0x43cc <_ZN5Print5printEhi>
    43e8:	8c 01       	movw	r16, r24
    43ea:	ce 01       	movw	r24, r28
    43ec:	0e 94 6d 21 	call	0x42da	; 0x42da <_ZN5Print7printlnEv>
    43f0:	80 0f       	add	r24, r16
    43f2:	91 1f       	adc	r25, r17
    43f4:	df 91       	pop	r29
    43f6:	cf 91       	pop	r28
    43f8:	1f 91       	pop	r17
    43fa:	0f 91       	pop	r16
    43fc:	08 95       	ret

000043fe <_ZN5Print5printEji>:
    43fe:	9a 01       	movw	r18, r20
    4400:	ab 01       	movw	r20, r22
    4402:	60 e0       	ldi	r22, 0x00	; 0
    4404:	70 e0       	ldi	r23, 0x00	; 0
    4406:	0c 94 d9 21 	jmp	0x43b2	; 0x43b2 <_ZN5Print5printEmi>

0000440a <_ZN5Print7printlnEji>:
    440a:	0f 93       	push	r16
    440c:	1f 93       	push	r17
    440e:	cf 93       	push	r28
    4410:	df 93       	push	r29
    4412:	ec 01       	movw	r28, r24
    4414:	0e 94 ff 21 	call	0x43fe	; 0x43fe <_ZN5Print5printEji>
    4418:	8c 01       	movw	r16, r24
    441a:	ce 01       	movw	r24, r28
    441c:	0e 94 6d 21 	call	0x42da	; 0x42da <_ZN5Print7printlnEv>
    4420:	80 0f       	add	r24, r16
    4422:	91 1f       	adc	r25, r17
    4424:	df 91       	pop	r29
    4426:	cf 91       	pop	r28
    4428:	1f 91       	pop	r17
    442a:	0f 91       	pop	r16
    442c:	08 95       	ret

0000442e <_ZN5Print5printEli>:
    442e:	cf 92       	push	r12
    4430:	df 92       	push	r13
    4432:	ef 92       	push	r14
    4434:	ff 92       	push	r15
    4436:	0f 93       	push	r16
    4438:	1f 93       	push	r17
    443a:	cf 93       	push	r28
    443c:	df 93       	push	r29
    443e:	21 15       	cp	r18, r1
    4440:	31 05       	cpc	r19, r1
    4442:	81 f4       	brne	.+32     	; 0x4464 <_ZN5Print5printEli+0x36>
    4444:	dc 01       	movw	r26, r24
    4446:	ed 91       	ld	r30, X+
    4448:	fc 91       	ld	r31, X
    444a:	01 90       	ld	r0, Z+
    444c:	f0 81       	ld	r31, Z
    444e:	e0 2d       	mov	r30, r0
    4450:	64 2f       	mov	r22, r20
    4452:	df 91       	pop	r29
    4454:	cf 91       	pop	r28
    4456:	1f 91       	pop	r17
    4458:	0f 91       	pop	r16
    445a:	ff 90       	pop	r15
    445c:	ef 90       	pop	r14
    445e:	df 90       	pop	r13
    4460:	cf 90       	pop	r12
    4462:	09 94       	ijmp
    4464:	2a 30       	cpi	r18, 0x0A	; 10
    4466:	31 05       	cpc	r19, r1
    4468:	01 f5       	brne	.+64     	; 0x44aa <_ZN5Print5printEli+0x7c>
    446a:	77 ff       	sbrs	r23, 7
    446c:	1d c0       	rjmp	.+58     	; 0x44a8 <_ZN5Print5printEli+0x7a>
    446e:	6a 01       	movw	r12, r20
    4470:	7b 01       	movw	r14, r22
    4472:	ec 01       	movw	r28, r24
    4474:	6d e2       	ldi	r22, 0x2D	; 45
    4476:	0e 94 66 21 	call	0x42cc	; 0x42cc <_ZN5Print5printEc>
    447a:	8c 01       	movw	r16, r24
    447c:	44 27       	eor	r20, r20
    447e:	55 27       	eor	r21, r21
    4480:	ba 01       	movw	r22, r20
    4482:	4c 19       	sub	r20, r12
    4484:	5d 09       	sbc	r21, r13
    4486:	6e 09       	sbc	r22, r14
    4488:	7f 09       	sbc	r23, r15
    448a:	2a e0       	ldi	r18, 0x0A	; 10
    448c:	ce 01       	movw	r24, r28
    448e:	0e 94 83 21 	call	0x4306	; 0x4306 <_ZN5Print11printNumberEmh>
    4492:	80 0f       	add	r24, r16
    4494:	91 1f       	adc	r25, r17
    4496:	df 91       	pop	r29
    4498:	cf 91       	pop	r28
    449a:	1f 91       	pop	r17
    449c:	0f 91       	pop	r16
    449e:	ff 90       	pop	r15
    44a0:	ef 90       	pop	r14
    44a2:	df 90       	pop	r13
    44a4:	cf 90       	pop	r12
    44a6:	08 95       	ret
    44a8:	2a e0       	ldi	r18, 0x0A	; 10
    44aa:	df 91       	pop	r29
    44ac:	cf 91       	pop	r28
    44ae:	1f 91       	pop	r17
    44b0:	0f 91       	pop	r16
    44b2:	ff 90       	pop	r15
    44b4:	ef 90       	pop	r14
    44b6:	df 90       	pop	r13
    44b8:	cf 90       	pop	r12
    44ba:	0c 94 83 21 	jmp	0x4306	; 0x4306 <_ZN5Print11printNumberEmh>

000044be <_ZN5Print5printEii>:
    44be:	9a 01       	movw	r18, r20
    44c0:	ab 01       	movw	r20, r22
    44c2:	77 0f       	add	r23, r23
    44c4:	66 0b       	sbc	r22, r22
    44c6:	77 0b       	sbc	r23, r23
    44c8:	0c 94 17 22 	jmp	0x442e	; 0x442e <_ZN5Print5printEli>

000044cc <_ZN5Print7printlnEii>:
    44cc:	0f 93       	push	r16
    44ce:	1f 93       	push	r17
    44d0:	cf 93       	push	r28
    44d2:	df 93       	push	r29
    44d4:	ec 01       	movw	r28, r24
    44d6:	0e 94 5f 22 	call	0x44be	; 0x44be <_ZN5Print5printEii>
    44da:	8c 01       	movw	r16, r24
    44dc:	ce 01       	movw	r24, r28
    44de:	0e 94 6d 21 	call	0x42da	; 0x42da <_ZN5Print7printlnEv>
    44e2:	80 0f       	add	r24, r16
    44e4:	91 1f       	adc	r25, r17
    44e6:	df 91       	pop	r29
    44e8:	cf 91       	pop	r28
    44ea:	1f 91       	pop	r17
    44ec:	0f 91       	pop	r16
    44ee:	08 95       	ret

000044f0 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    44f0:	7f 92       	push	r7
    44f2:	8f 92       	push	r8
    44f4:	9f 92       	push	r9
    44f6:	af 92       	push	r10
    44f8:	bf 92       	push	r11
    44fa:	cf 92       	push	r12
    44fc:	df 92       	push	r13
    44fe:	ef 92       	push	r14
    4500:	ff 92       	push	r15
    4502:	0f 93       	push	r16
    4504:	1f 93       	push	r17
    4506:	cf 93       	push	r28
    4508:	df 93       	push	r29
    450a:	8c 01       	movw	r16, r24
    450c:	6a 01       	movw	r12, r20
    450e:	7b 01       	movw	r14, r22
    4510:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    4512:	9a 01       	movw	r18, r20
    4514:	ab 01       	movw	r20, r22
    4516:	c7 01       	movw	r24, r14
    4518:	b6 01       	movw	r22, r12
    451a:	0e 94 79 25 	call	0x4af2	; 0x4af2 <__unordsf2>
    451e:	88 23       	and	r24, r24
    4520:	19 f0       	breq	.+6      	; 0x4528 <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    4522:	64 e3       	ldi	r22, 0x34	; 52
    4524:	71 e0       	ldi	r23, 0x01	; 1
    4526:	27 c0       	rjmp	.+78     	; 0x4576 <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    4528:	46 01       	movw	r8, r12
    452a:	57 01       	movw	r10, r14
    452c:	e8 94       	clt
    452e:	b7 f8       	bld	r11, 7
    4530:	2f ef       	ldi	r18, 0xFF	; 255
    4532:	3f ef       	ldi	r19, 0xFF	; 255
    4534:	4f e7       	ldi	r20, 0x7F	; 127
    4536:	5f e7       	ldi	r21, 0x7F	; 127
    4538:	c5 01       	movw	r24, r10
    453a:	b4 01       	movw	r22, r8
    453c:	0e 94 79 25 	call	0x4af2	; 0x4af2 <__unordsf2>
    4540:	81 11       	cpse	r24, r1
    4542:	0d c0       	rjmp	.+26     	; 0x455e <_ZN5Print10printFloatEdh+0x6e>
    4544:	2f ef       	ldi	r18, 0xFF	; 255
    4546:	3f ef       	ldi	r19, 0xFF	; 255
    4548:	4f e7       	ldi	r20, 0x7F	; 127
    454a:	5f e7       	ldi	r21, 0x7F	; 127
    454c:	c5 01       	movw	r24, r10
    454e:	b4 01       	movw	r22, r8
    4550:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <__cmpsf2>
    4554:	18 16       	cp	r1, r24
    4556:	1c f4       	brge	.+6      	; 0x455e <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    4558:	68 e3       	ldi	r22, 0x38	; 56
    455a:	71 e0       	ldi	r23, 0x01	; 1
    455c:	0c c0       	rjmp	.+24     	; 0x4576 <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    455e:	2f ef       	ldi	r18, 0xFF	; 255
    4560:	3f ef       	ldi	r19, 0xFF	; 255
    4562:	4f e7       	ldi	r20, 0x7F	; 127
    4564:	5f e4       	ldi	r21, 0x4F	; 79
    4566:	c7 01       	movw	r24, r14
    4568:	b6 01       	movw	r22, r12
    456a:	0e 94 74 25 	call	0x4ae8	; 0x4ae8 <__gesf2>
    456e:	18 16       	cp	r1, r24
    4570:	94 f4       	brge	.+36     	; 0x4596 <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    4572:	6c e3       	ldi	r22, 0x3C	; 60
    4574:	71 e0       	ldi	r23, 0x01	; 1
    4576:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    4578:	df 91       	pop	r29
    457a:	cf 91       	pop	r28
    457c:	1f 91       	pop	r17
    457e:	0f 91       	pop	r16
    4580:	ff 90       	pop	r15
    4582:	ef 90       	pop	r14
    4584:	df 90       	pop	r13
    4586:	cf 90       	pop	r12
    4588:	bf 90       	pop	r11
    458a:	af 90       	pop	r10
    458c:	9f 90       	pop	r9
    458e:	8f 90       	pop	r8
    4590:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    4592:	0c 94 2b 21 	jmp	0x4256	; 0x4256 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    4596:	2f ef       	ldi	r18, 0xFF	; 255
    4598:	3f ef       	ldi	r19, 0xFF	; 255
    459a:	4f e7       	ldi	r20, 0x7F	; 127
    459c:	5f ec       	ldi	r21, 0xCF	; 207
    459e:	c7 01       	movw	r24, r14
    45a0:	b6 01       	movw	r22, r12
    45a2:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <__cmpsf2>
    45a6:	87 fd       	sbrc	r24, 7
    45a8:	e4 cf       	rjmp	.-56     	; 0x4572 <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
    45aa:	20 e0       	ldi	r18, 0x00	; 0
    45ac:	30 e0       	ldi	r19, 0x00	; 0
    45ae:	a9 01       	movw	r20, r18
    45b0:	c7 01       	movw	r24, r14
    45b2:	b6 01       	movw	r22, r12
    45b4:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <__cmpsf2>
    45b8:	87 ff       	sbrs	r24, 7
    45ba:	0a c0       	rjmp	.+20     	; 0x45d0 <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
    45bc:	6d e2       	ldi	r22, 0x2D	; 45
    45be:	c8 01       	movw	r24, r16
    45c0:	0e 94 66 21 	call	0x42cc	; 0x42cc <_ZN5Print5printEc>
    45c4:	ec 01       	movw	r28, r24
     number = -number;
    45c6:	f7 fa       	bst	r15, 7
    45c8:	f0 94       	com	r15
    45ca:	f7 f8       	bld	r15, 7
    45cc:	f0 94       	com	r15
    45ce:	02 c0       	rjmp	.+4      	; 0x45d4 <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    45d0:	c0 e0       	ldi	r28, 0x00	; 0
    45d2:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    45d4:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    45d6:	60 e0       	ldi	r22, 0x00	; 0
    45d8:	70 e0       	ldi	r23, 0x00	; 0
    45da:	80 e0       	ldi	r24, 0x00	; 0
    45dc:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    45de:	7b 14       	cp	r7, r11
    45e0:	41 f0       	breq	.+16     	; 0x45f2 <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
    45e2:	20 e0       	ldi	r18, 0x00	; 0
    45e4:	30 e0       	ldi	r19, 0x00	; 0
    45e6:	40 e2       	ldi	r20, 0x20	; 32
    45e8:	51 e4       	ldi	r21, 0x41	; 65
    45ea:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    45ee:	b3 94       	inc	r11
    45f0:	f6 cf       	rjmp	.-20     	; 0x45de <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
    45f2:	a7 01       	movw	r20, r14
    45f4:	96 01       	movw	r18, r12
    45f6:	0e 94 28 1c 	call	0x3850	; 0x3850 <__addsf3>
    45fa:	6b 01       	movw	r12, r22
    45fc:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    45fe:	0e 94 7f 1d 	call	0x3afe	; 0x3afe <__fixunssfsi>
    4602:	4b 01       	movw	r8, r22
    4604:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    4606:	2a e0       	ldi	r18, 0x0A	; 10
    4608:	ab 01       	movw	r20, r22
    460a:	bc 01       	movw	r22, r24
    460c:	c8 01       	movw	r24, r16
    460e:	0e 94 83 21 	call	0x4306	; 0x4306 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    4612:	c8 0f       	add	r28, r24
    4614:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    4616:	77 20       	and	r7, r7
    4618:	c9 f1       	breq	.+114    	; 0x468c <_ZN5Print10printFloatEdh+0x19c>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    461a:	c5 01       	movw	r24, r10
    461c:	b4 01       	movw	r22, r8
    461e:	0e 94 ae 1d 	call	0x3b5c	; 0x3b5c <__floatunsisf>
    4622:	9b 01       	movw	r18, r22
    4624:	ac 01       	movw	r20, r24
    4626:	c7 01       	movw	r24, r14
    4628:	b6 01       	movw	r22, r12
    462a:	0e 94 27 1c 	call	0x384e	; 0x384e <__subsf3>
    462e:	6b 01       	movw	r12, r22
    4630:	7c 01       	movw	r14, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    4632:	60 e4       	ldi	r22, 0x40	; 64
    4634:	71 e0       	ldi	r23, 0x01	; 1
    4636:	c8 01       	movw	r24, r16
    4638:	0e 94 2b 21 	call	0x4256	; 0x4256 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
    463c:	c8 0f       	add	r28, r24
    463e:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    4640:	20 e0       	ldi	r18, 0x00	; 0
    4642:	30 e0       	ldi	r19, 0x00	; 0
    4644:	40 e2       	ldi	r20, 0x20	; 32
    4646:	51 e4       	ldi	r21, 0x41	; 65
    4648:	c7 01       	movw	r24, r14
    464a:	b6 01       	movw	r22, r12
    464c:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <__mulsf3>
    4650:	4b 01       	movw	r8, r22
    4652:	5c 01       	movw	r10, r24
    int toPrint = int(remainder);
    4654:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__fixsfsi>
    4658:	6b 01       	movw	r12, r22
    465a:	7c 01       	movw	r14, r24
    n += print(toPrint);
    465c:	4a e0       	ldi	r20, 0x0A	; 10
    465e:	50 e0       	ldi	r21, 0x00	; 0
    4660:	c8 01       	movw	r24, r16
    4662:	0e 94 5f 22 	call	0x44be	; 0x44be <_ZN5Print5printEii>
    4666:	c8 0f       	add	r28, r24
    4668:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    466a:	b6 01       	movw	r22, r12
    466c:	dd 0c       	add	r13, r13
    466e:	88 0b       	sbc	r24, r24
    4670:	99 0b       	sbc	r25, r25
    4672:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__floatsisf>
    4676:	9b 01       	movw	r18, r22
    4678:	ac 01       	movw	r20, r24
    467a:	c5 01       	movw	r24, r10
    467c:	b4 01       	movw	r22, r8
    467e:	0e 94 27 1c 	call	0x384e	; 0x384e <__subsf3>
    4682:	6b 01       	movw	r12, r22
    4684:	7c 01       	movw	r14, r24
    4686:	7a 94       	dec	r7
  if (digits > 0) {
    n += print("."); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    4688:	71 10       	cpse	r7, r1
    468a:	da cf       	rjmp	.-76     	; 0x4640 <_ZN5Print10printFloatEdh+0x150>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    468c:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    468e:	df 91       	pop	r29
    4690:	cf 91       	pop	r28
    4692:	1f 91       	pop	r17
    4694:	0f 91       	pop	r16
    4696:	ff 90       	pop	r15
    4698:	ef 90       	pop	r14
    469a:	df 90       	pop	r13
    469c:	cf 90       	pop	r12
    469e:	bf 90       	pop	r11
    46a0:	af 90       	pop	r10
    46a2:	9f 90       	pop	r9
    46a4:	8f 90       	pop	r8
    46a6:	7f 90       	pop	r7
    46a8:	08 95       	ret

000046aa <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    46aa:	0c 94 78 22 	jmp	0x44f0	; 0x44f0 <_ZN5Print10printFloatEdh>

000046ae <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    46ae:	0f 93       	push	r16
    46b0:	1f 93       	push	r17
    46b2:	cf 93       	push	r28
    46b4:	df 93       	push	r29
    46b6:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    46b8:	0e 94 78 22 	call	0x44f0	; 0x44f0 <_ZN5Print10printFloatEdh>
    46bc:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    46be:	ce 01       	movw	r24, r28
    46c0:	0e 94 6d 21 	call	0x42da	; 0x42da <_ZN5Print7printlnEv>
  return n;
}
    46c4:	80 0f       	add	r24, r16
    46c6:	91 1f       	adc	r25, r17
    46c8:	df 91       	pop	r29
    46ca:	cf 91       	pop	r28
    46cc:	1f 91       	pop	r17
    46ce:	0f 91       	pop	r16
    46d0:	08 95       	ret

000046d2 <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    46d2:	08 95       	ret

000046d4 <attachInterrupt>:
    46d4:	82 30       	cpi	r24, 0x02	; 2
    46d6:	e8 f4       	brcc	.+58     	; 0x4712 <attachInterrupt+0x3e>
    46d8:	e8 2f       	mov	r30, r24
    46da:	f0 e0       	ldi	r31, 0x00	; 0
    46dc:	ee 0f       	add	r30, r30
    46de:	ff 1f       	adc	r31, r31
    46e0:	e8 5f       	subi	r30, 0xF8	; 248
    46e2:	fe 4f       	sbci	r31, 0xFE	; 254
    46e4:	71 83       	std	Z+1, r23	; 0x01
    46e6:	60 83       	st	Z, r22
    46e8:	81 30       	cpi	r24, 0x01	; 1
    46ea:	41 f0       	breq	.+16     	; 0x46fc <attachInterrupt+0x28>
    46ec:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    46f0:	8c 7f       	andi	r24, 0xFC	; 252
    46f2:	48 2b       	or	r20, r24
    46f4:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    46f8:	e8 9a       	sbi	0x1d, 0	; 29
    46fa:	08 95       	ret
    46fc:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    4700:	83 7f       	andi	r24, 0xF3	; 243
    4702:	44 0f       	add	r20, r20
    4704:	55 1f       	adc	r21, r21
    4706:	44 0f       	add	r20, r20
    4708:	55 1f       	adc	r21, r21
    470a:	48 2b       	or	r20, r24
    470c:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    4710:	e9 9a       	sbi	0x1d, 1	; 29
    4712:	08 95       	ret

00004714 <__vector_1>:
    intFunc[EXTERNAL_INT_7]();
}

#else

ISR(INT0_vect) {
    4714:	1f 92       	push	r1
    4716:	0f 92       	push	r0
    4718:	0f b6       	in	r0, 0x3f	; 63
    471a:	0f 92       	push	r0
    471c:	11 24       	eor	r1, r1
    471e:	2f 93       	push	r18
    4720:	3f 93       	push	r19
    4722:	4f 93       	push	r20
    4724:	5f 93       	push	r21
    4726:	6f 93       	push	r22
    4728:	7f 93       	push	r23
    472a:	8f 93       	push	r24
    472c:	9f 93       	push	r25
    472e:	af 93       	push	r26
    4730:	bf 93       	push	r27
    4732:	ef 93       	push	r30
    4734:	ff 93       	push	r31
    intFunc[EXTERNAL_INT_0]();
    4736:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <intFunc>
    473a:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <intFunc+0x1>
    473e:	09 95       	icall
}
    4740:	ff 91       	pop	r31
    4742:	ef 91       	pop	r30
    4744:	bf 91       	pop	r27
    4746:	af 91       	pop	r26
    4748:	9f 91       	pop	r25
    474a:	8f 91       	pop	r24
    474c:	7f 91       	pop	r23
    474e:	6f 91       	pop	r22
    4750:	5f 91       	pop	r21
    4752:	4f 91       	pop	r20
    4754:	3f 91       	pop	r19
    4756:	2f 91       	pop	r18
    4758:	0f 90       	pop	r0
    475a:	0f be       	out	0x3f, r0	; 63
    475c:	0f 90       	pop	r0
    475e:	1f 90       	pop	r1
    4760:	18 95       	reti

00004762 <__vector_2>:

ISR(INT1_vect) {
    4762:	1f 92       	push	r1
    4764:	0f 92       	push	r0
    4766:	0f b6       	in	r0, 0x3f	; 63
    4768:	0f 92       	push	r0
    476a:	11 24       	eor	r1, r1
    476c:	2f 93       	push	r18
    476e:	3f 93       	push	r19
    4770:	4f 93       	push	r20
    4772:	5f 93       	push	r21
    4774:	6f 93       	push	r22
    4776:	7f 93       	push	r23
    4778:	8f 93       	push	r24
    477a:	9f 93       	push	r25
    477c:	af 93       	push	r26
    477e:	bf 93       	push	r27
    4780:	ef 93       	push	r30
    4782:	ff 93       	push	r31
    intFunc[EXTERNAL_INT_1]();
    4784:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <intFunc+0x2>
    4788:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <intFunc+0x3>
    478c:	09 95       	icall
}
    478e:	ff 91       	pop	r31
    4790:	ef 91       	pop	r30
    4792:	bf 91       	pop	r27
    4794:	af 91       	pop	r26
    4796:	9f 91       	pop	r25
    4798:	8f 91       	pop	r24
    479a:	7f 91       	pop	r23
    479c:	6f 91       	pop	r22
    479e:	5f 91       	pop	r21
    47a0:	4f 91       	pop	r20
    47a2:	3f 91       	pop	r19
    47a4:	2f 91       	pop	r18
    47a6:	0f 90       	pop	r0
    47a8:	0f be       	out	0x3f, r0	; 63
    47aa:	0f 90       	pop	r0
    47ac:	1f 90       	pop	r1
    47ae:	18 95       	reti

000047b0 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    47b0:	1f 92       	push	r1
    47b2:	0f 92       	push	r0
    47b4:	0f b6       	in	r0, 0x3f	; 63
    47b6:	0f 92       	push	r0
    47b8:	11 24       	eor	r1, r1
    47ba:	2f 93       	push	r18
    47bc:	3f 93       	push	r19
    47be:	8f 93       	push	r24
    47c0:	9f 93       	push	r25
    47c2:	af 93       	push	r26
    47c4:	bf 93       	push	r27
    47c6:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <timer0_millis>
    47ca:	90 91 37 03 	lds	r25, 0x0337	; 0x800337 <timer0_millis+0x1>
    47ce:	a0 91 38 03 	lds	r26, 0x0338	; 0x800338 <timer0_millis+0x2>
    47d2:	b0 91 39 03 	lds	r27, 0x0339	; 0x800339 <timer0_millis+0x3>
    47d6:	30 91 35 03 	lds	r19, 0x0335	; 0x800335 <timer0_fract>
    47da:	23 e0       	ldi	r18, 0x03	; 3
    47dc:	23 0f       	add	r18, r19
    47de:	2d 37       	cpi	r18, 0x7D	; 125
    47e0:	20 f4       	brcc	.+8      	; 0x47ea <__vector_16+0x3a>
    47e2:	01 96       	adiw	r24, 0x01	; 1
    47e4:	a1 1d       	adc	r26, r1
    47e6:	b1 1d       	adc	r27, r1
    47e8:	05 c0       	rjmp	.+10     	; 0x47f4 <__vector_16+0x44>
    47ea:	26 e8       	ldi	r18, 0x86	; 134
    47ec:	23 0f       	add	r18, r19
    47ee:	02 96       	adiw	r24, 0x02	; 2
    47f0:	a1 1d       	adc	r26, r1
    47f2:	b1 1d       	adc	r27, r1
    47f4:	20 93 35 03 	sts	0x0335, r18	; 0x800335 <timer0_fract>
    47f8:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <timer0_millis>
    47fc:	90 93 37 03 	sts	0x0337, r25	; 0x800337 <timer0_millis+0x1>
    4800:	a0 93 38 03 	sts	0x0338, r26	; 0x800338 <timer0_millis+0x2>
    4804:	b0 93 39 03 	sts	0x0339, r27	; 0x800339 <timer0_millis+0x3>
    4808:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <timer0_overflow_count>
    480c:	90 91 3b 03 	lds	r25, 0x033B	; 0x80033b <timer0_overflow_count+0x1>
    4810:	a0 91 3c 03 	lds	r26, 0x033C	; 0x80033c <timer0_overflow_count+0x2>
    4814:	b0 91 3d 03 	lds	r27, 0x033D	; 0x80033d <timer0_overflow_count+0x3>
    4818:	01 96       	adiw	r24, 0x01	; 1
    481a:	a1 1d       	adc	r26, r1
    481c:	b1 1d       	adc	r27, r1
    481e:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <timer0_overflow_count>
    4822:	90 93 3b 03 	sts	0x033B, r25	; 0x80033b <timer0_overflow_count+0x1>
    4826:	a0 93 3c 03 	sts	0x033C, r26	; 0x80033c <timer0_overflow_count+0x2>
    482a:	b0 93 3d 03 	sts	0x033D, r27	; 0x80033d <timer0_overflow_count+0x3>
    482e:	bf 91       	pop	r27
    4830:	af 91       	pop	r26
    4832:	9f 91       	pop	r25
    4834:	8f 91       	pop	r24
    4836:	3f 91       	pop	r19
    4838:	2f 91       	pop	r18
    483a:	0f 90       	pop	r0
    483c:	0f be       	out	0x3f, r0	; 63
    483e:	0f 90       	pop	r0
    4840:	1f 90       	pop	r1
    4842:	18 95       	reti

00004844 <millis>:
    4844:	2f b7       	in	r18, 0x3f	; 63
    4846:	f8 94       	cli
    4848:	60 91 36 03 	lds	r22, 0x0336	; 0x800336 <timer0_millis>
    484c:	70 91 37 03 	lds	r23, 0x0337	; 0x800337 <timer0_millis+0x1>
    4850:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <timer0_millis+0x2>
    4854:	90 91 39 03 	lds	r25, 0x0339	; 0x800339 <timer0_millis+0x3>
    4858:	2f bf       	out	0x3f, r18	; 63
    485a:	08 95       	ret

0000485c <micros>:
    485c:	3f b7       	in	r19, 0x3f	; 63
    485e:	f8 94       	cli
    4860:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <timer0_overflow_count>
    4864:	90 91 3b 03 	lds	r25, 0x033B	; 0x80033b <timer0_overflow_count+0x1>
    4868:	a0 91 3c 03 	lds	r26, 0x033C	; 0x80033c <timer0_overflow_count+0x2>
    486c:	b0 91 3d 03 	lds	r27, 0x033D	; 0x80033d <timer0_overflow_count+0x3>
    4870:	26 b5       	in	r18, 0x26	; 38
    4872:	a8 9b       	sbis	0x15, 0	; 21
    4874:	05 c0       	rjmp	.+10     	; 0x4880 <micros+0x24>
    4876:	2f 3f       	cpi	r18, 0xFF	; 255
    4878:	19 f0       	breq	.+6      	; 0x4880 <micros+0x24>
    487a:	01 96       	adiw	r24, 0x01	; 1
    487c:	a1 1d       	adc	r26, r1
    487e:	b1 1d       	adc	r27, r1
    4880:	3f bf       	out	0x3f, r19	; 63
    4882:	ba 2f       	mov	r27, r26
    4884:	a9 2f       	mov	r26, r25
    4886:	98 2f       	mov	r25, r24
    4888:	88 27       	eor	r24, r24
    488a:	82 0f       	add	r24, r18
    488c:	91 1d       	adc	r25, r1
    488e:	a1 1d       	adc	r26, r1
    4890:	b1 1d       	adc	r27, r1
    4892:	bc 01       	movw	r22, r24
    4894:	cd 01       	movw	r24, r26
    4896:	42 e0       	ldi	r20, 0x02	; 2
    4898:	66 0f       	add	r22, r22
    489a:	77 1f       	adc	r23, r23
    489c:	88 1f       	adc	r24, r24
    489e:	99 1f       	adc	r25, r25
    48a0:	4a 95       	dec	r20
    48a2:	d1 f7       	brne	.-12     	; 0x4898 <micros+0x3c>
    48a4:	08 95       	ret

000048a6 <delay>:
    48a6:	cf 92       	push	r12
    48a8:	df 92       	push	r13
    48aa:	ef 92       	push	r14
    48ac:	ff 92       	push	r15
    48ae:	cf 93       	push	r28
    48b0:	df 93       	push	r29
    48b2:	6b 01       	movw	r12, r22
    48b4:	7c 01       	movw	r14, r24
    48b6:	0e 94 2e 24 	call	0x485c	; 0x485c <micros>
    48ba:	eb 01       	movw	r28, r22
    48bc:	c1 14       	cp	r12, r1
    48be:	d1 04       	cpc	r13, r1
    48c0:	e1 04       	cpc	r14, r1
    48c2:	f1 04       	cpc	r15, r1
    48c4:	89 f0       	breq	.+34     	; 0x48e8 <delay+0x42>
    48c6:	0e 94 4a 25 	call	0x4a94	; 0x4a94 <yield>
    48ca:	0e 94 2e 24 	call	0x485c	; 0x485c <micros>
    48ce:	6c 1b       	sub	r22, r28
    48d0:	7d 0b       	sbc	r23, r29
    48d2:	68 3e       	cpi	r22, 0xE8	; 232
    48d4:	73 40       	sbci	r23, 0x03	; 3
    48d6:	90 f3       	brcs	.-28     	; 0x48bc <delay+0x16>
    48d8:	81 e0       	ldi	r24, 0x01	; 1
    48da:	c8 1a       	sub	r12, r24
    48dc:	d1 08       	sbc	r13, r1
    48de:	e1 08       	sbc	r14, r1
    48e0:	f1 08       	sbc	r15, r1
    48e2:	c8 51       	subi	r28, 0x18	; 24
    48e4:	dc 4f       	sbci	r29, 0xFC	; 252
    48e6:	ea cf       	rjmp	.-44     	; 0x48bc <delay+0x16>
    48e8:	df 91       	pop	r29
    48ea:	cf 91       	pop	r28
    48ec:	ff 90       	pop	r15
    48ee:	ef 90       	pop	r14
    48f0:	df 90       	pop	r13
    48f2:	cf 90       	pop	r12
    48f4:	08 95       	ret

000048f6 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    48f6:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    48f8:	84 b5       	in	r24, 0x24	; 36
    48fa:	82 60       	ori	r24, 0x02	; 2
    48fc:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    48fe:	84 b5       	in	r24, 0x24	; 36
    4900:	81 60       	ori	r24, 0x01	; 1
    4902:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    4904:	85 b5       	in	r24, 0x25	; 37
    4906:	82 60       	ori	r24, 0x02	; 2
    4908:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    490a:	85 b5       	in	r24, 0x25	; 37
    490c:	81 60       	ori	r24, 0x01	; 1
    490e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    4910:	ee e6       	ldi	r30, 0x6E	; 110
    4912:	f0 e0       	ldi	r31, 0x00	; 0
    4914:	80 81       	ld	r24, Z
    4916:	81 60       	ori	r24, 0x01	; 1
    4918:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    491a:	e1 e8       	ldi	r30, 0x81	; 129
    491c:	f0 e0       	ldi	r31, 0x00	; 0
    491e:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    4920:	80 81       	ld	r24, Z
    4922:	82 60       	ori	r24, 0x02	; 2
    4924:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    4926:	80 81       	ld	r24, Z
    4928:	81 60       	ori	r24, 0x01	; 1
    492a:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    492c:	e0 e8       	ldi	r30, 0x80	; 128
    492e:	f0 e0       	ldi	r31, 0x00	; 0
    4930:	80 81       	ld	r24, Z
    4932:	81 60       	ori	r24, 0x01	; 1
    4934:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    4936:	e1 eb       	ldi	r30, 0xB1	; 177
    4938:	f0 e0       	ldi	r31, 0x00	; 0
    493a:	80 81       	ld	r24, Z
    493c:	84 60       	ori	r24, 0x04	; 4
    493e:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    4940:	e0 eb       	ldi	r30, 0xB0	; 176
    4942:	f0 e0       	ldi	r31, 0x00	; 0
    4944:	80 81       	ld	r24, Z
    4946:	81 60       	ori	r24, 0x01	; 1
    4948:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    494a:	ea e7       	ldi	r30, 0x7A	; 122
    494c:	f0 e0       	ldi	r31, 0x00	; 0
    494e:	80 81       	ld	r24, Z
    4950:	84 60       	ori	r24, 0x04	; 4
    4952:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    4954:	80 81       	ld	r24, Z
    4956:	82 60       	ori	r24, 0x02	; 2
    4958:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    495a:	80 81       	ld	r24, Z
    495c:	81 60       	ori	r24, 0x01	; 1
    495e:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    4960:	80 81       	ld	r24, Z
    4962:	80 68       	ori	r24, 0x80	; 128
    4964:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    4966:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    496a:	08 95       	ret

0000496c <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    496c:	83 30       	cpi	r24, 0x03	; 3
    496e:	81 f0       	breq	.+32     	; 0x4990 <turnOffPWM+0x24>
    4970:	28 f4       	brcc	.+10     	; 0x497c <turnOffPWM+0x10>
    4972:	81 30       	cpi	r24, 0x01	; 1
    4974:	99 f0       	breq	.+38     	; 0x499c <turnOffPWM+0x30>
    4976:	82 30       	cpi	r24, 0x02	; 2
    4978:	a1 f0       	breq	.+40     	; 0x49a2 <turnOffPWM+0x36>
    497a:	08 95       	ret
    497c:	87 30       	cpi	r24, 0x07	; 7
    497e:	a9 f0       	breq	.+42     	; 0x49aa <turnOffPWM+0x3e>
    4980:	88 30       	cpi	r24, 0x08	; 8
    4982:	b9 f0       	breq	.+46     	; 0x49b2 <turnOffPWM+0x46>
    4984:	84 30       	cpi	r24, 0x04	; 4
    4986:	d1 f4       	brne	.+52     	; 0x49bc <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    4988:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    498c:	8f 7d       	andi	r24, 0xDF	; 223
    498e:	03 c0       	rjmp	.+6      	; 0x4996 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    4990:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    4994:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    4996:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    499a:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    499c:	84 b5       	in	r24, 0x24	; 36
    499e:	8f 77       	andi	r24, 0x7F	; 127
    49a0:	02 c0       	rjmp	.+4      	; 0x49a6 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    49a2:	84 b5       	in	r24, 0x24	; 36
    49a4:	8f 7d       	andi	r24, 0xDF	; 223
    49a6:	84 bd       	out	0x24, r24	; 36
    49a8:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    49aa:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    49ae:	8f 77       	andi	r24, 0x7F	; 127
    49b0:	03 c0       	rjmp	.+6      	; 0x49b8 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    49b2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    49b6:	8f 7d       	andi	r24, 0xDF	; 223
    49b8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    49bc:	08 95       	ret

000049be <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    49be:	cf 93       	push	r28
    49c0:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    49c2:	90 e0       	ldi	r25, 0x00	; 0
    49c4:	fc 01       	movw	r30, r24
    49c6:	eb 59       	subi	r30, 0x9B	; 155
    49c8:	fc 4e       	sbci	r31, 0xEC	; 236
    49ca:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    49cc:	fc 01       	movw	r30, r24
    49ce:	e7 58       	subi	r30, 0x87	; 135
    49d0:	fc 4e       	sbci	r31, 0xEC	; 236
    49d2:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    49d4:	88 23       	and	r24, r24
    49d6:	61 f1       	breq	.+88     	; 0x4a30 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    49d8:	90 e0       	ldi	r25, 0x00	; 0
    49da:	88 0f       	add	r24, r24
    49dc:	99 1f       	adc	r25, r25
    49de:	fc 01       	movw	r30, r24
    49e0:	e9 56       	subi	r30, 0x69	; 105
    49e2:	fc 4e       	sbci	r31, 0xEC	; 236
    49e4:	c5 91       	lpm	r28, Z+
    49e6:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    49e8:	fc 01       	movw	r30, r24
    49ea:	e3 57       	subi	r30, 0x73	; 115
    49ec:	fc 4e       	sbci	r31, 0xEC	; 236
    49ee:	a5 91       	lpm	r26, Z+
    49f0:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    49f2:	61 11       	cpse	r22, r1
    49f4:	09 c0       	rjmp	.+18     	; 0x4a08 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    49f6:	9f b7       	in	r25, 0x3f	; 63
                cli();
    49f8:	f8 94       	cli
		*reg &= ~bit;
    49fa:	88 81       	ld	r24, Y
    49fc:	20 95       	com	r18
    49fe:	82 23       	and	r24, r18
    4a00:	88 83       	st	Y, r24
		*out &= ~bit;
    4a02:	ec 91       	ld	r30, X
    4a04:	2e 23       	and	r18, r30
    4a06:	0b c0       	rjmp	.+22     	; 0x4a1e <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    4a08:	62 30       	cpi	r22, 0x02	; 2
    4a0a:	61 f4       	brne	.+24     	; 0x4a24 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    4a0c:	9f b7       	in	r25, 0x3f	; 63
                cli();
    4a0e:	f8 94       	cli
		*reg &= ~bit;
    4a10:	88 81       	ld	r24, Y
    4a12:	32 2f       	mov	r19, r18
    4a14:	30 95       	com	r19
    4a16:	83 23       	and	r24, r19
    4a18:	88 83       	st	Y, r24
		*out |= bit;
    4a1a:	ec 91       	ld	r30, X
    4a1c:	2e 2b       	or	r18, r30
    4a1e:	2c 93       	st	X, r18
		SREG = oldSREG;
    4a20:	9f bf       	out	0x3f, r25	; 63
    4a22:	06 c0       	rjmp	.+12     	; 0x4a30 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    4a24:	8f b7       	in	r24, 0x3f	; 63
                cli();
    4a26:	f8 94       	cli
		*reg |= bit;
    4a28:	e8 81       	ld	r30, Y
    4a2a:	2e 2b       	or	r18, r30
    4a2c:	28 83       	st	Y, r18
		SREG = oldSREG;
    4a2e:	8f bf       	out	0x3f, r24	; 63
	}
}
    4a30:	df 91       	pop	r29
    4a32:	cf 91       	pop	r28
    4a34:	08 95       	ret

00004a36 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    4a36:	1f 93       	push	r17
    4a38:	cf 93       	push	r28
    4a3a:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    4a3c:	28 2f       	mov	r18, r24
    4a3e:	30 e0       	ldi	r19, 0x00	; 0
    4a40:	f9 01       	movw	r30, r18
    4a42:	ef 5a       	subi	r30, 0xAF	; 175
    4a44:	fc 4e       	sbci	r31, 0xEC	; 236
    4a46:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    4a48:	f9 01       	movw	r30, r18
    4a4a:	eb 59       	subi	r30, 0x9B	; 155
    4a4c:	fc 4e       	sbci	r31, 0xEC	; 236
    4a4e:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    4a50:	f9 01       	movw	r30, r18
    4a52:	e7 58       	subi	r30, 0x87	; 135
    4a54:	fc 4e       	sbci	r31, 0xEC	; 236
    4a56:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    4a58:	cc 23       	and	r28, r28
    4a5a:	c1 f0       	breq	.+48     	; 0x4a8c <digitalWrite+0x56>
    4a5c:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    4a5e:	81 11       	cpse	r24, r1
    4a60:	0e 94 b6 24 	call	0x496c	; 0x496c <turnOffPWM>

	out = portOutputRegister(port);
    4a64:	ec 2f       	mov	r30, r28
    4a66:	f0 e0       	ldi	r31, 0x00	; 0
    4a68:	ee 0f       	add	r30, r30
    4a6a:	ff 1f       	adc	r31, r31
    4a6c:	e3 57       	subi	r30, 0x73	; 115
    4a6e:	fc 4e       	sbci	r31, 0xEC	; 236
    4a70:	a5 91       	lpm	r26, Z+
    4a72:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    4a74:	9f b7       	in	r25, 0x3f	; 63
	cli();
    4a76:	f8 94       	cli

	if (val == LOW) {
    4a78:	11 11       	cpse	r17, r1
    4a7a:	04 c0       	rjmp	.+8      	; 0x4a84 <digitalWrite+0x4e>
		*out &= ~bit;
    4a7c:	8c 91       	ld	r24, X
    4a7e:	d0 95       	com	r29
    4a80:	d8 23       	and	r29, r24
    4a82:	02 c0       	rjmp	.+4      	; 0x4a88 <digitalWrite+0x52>
	} else {
		*out |= bit;
    4a84:	ec 91       	ld	r30, X
    4a86:	de 2b       	or	r29, r30
    4a88:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    4a8a:	9f bf       	out	0x3f, r25	; 63
}
    4a8c:	df 91       	pop	r29
    4a8e:	cf 91       	pop	r28
    4a90:	1f 91       	pop	r17
    4a92:	08 95       	ret

00004a94 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    4a94:	08 95       	ret

00004a96 <__cmpsf2>:
    4a96:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <__fp_cmp>
    4a9a:	08 f4       	brcc	.+2      	; 0x4a9e <__cmpsf2+0x8>
    4a9c:	81 e0       	ldi	r24, 0x01	; 1
    4a9e:	08 95       	ret

00004aa0 <__fp_cmp>:
    4aa0:	99 0f       	add	r25, r25
    4aa2:	00 08       	sbc	r0, r0
    4aa4:	55 0f       	add	r21, r21
    4aa6:	aa 0b       	sbc	r26, r26
    4aa8:	e0 e8       	ldi	r30, 0x80	; 128
    4aaa:	fe ef       	ldi	r31, 0xFE	; 254
    4aac:	16 16       	cp	r1, r22
    4aae:	17 06       	cpc	r1, r23
    4ab0:	e8 07       	cpc	r30, r24
    4ab2:	f9 07       	cpc	r31, r25
    4ab4:	c0 f0       	brcs	.+48     	; 0x4ae6 <__fp_cmp+0x46>
    4ab6:	12 16       	cp	r1, r18
    4ab8:	13 06       	cpc	r1, r19
    4aba:	e4 07       	cpc	r30, r20
    4abc:	f5 07       	cpc	r31, r21
    4abe:	98 f0       	brcs	.+38     	; 0x4ae6 <__fp_cmp+0x46>
    4ac0:	62 1b       	sub	r22, r18
    4ac2:	73 0b       	sbc	r23, r19
    4ac4:	84 0b       	sbc	r24, r20
    4ac6:	95 0b       	sbc	r25, r21
    4ac8:	39 f4       	brne	.+14     	; 0x4ad8 <__fp_cmp+0x38>
    4aca:	0a 26       	eor	r0, r26
    4acc:	61 f0       	breq	.+24     	; 0x4ae6 <__fp_cmp+0x46>
    4ace:	23 2b       	or	r18, r19
    4ad0:	24 2b       	or	r18, r20
    4ad2:	25 2b       	or	r18, r21
    4ad4:	21 f4       	brne	.+8      	; 0x4ade <__fp_cmp+0x3e>
    4ad6:	08 95       	ret
    4ad8:	0a 26       	eor	r0, r26
    4ada:	09 f4       	brne	.+2      	; 0x4ade <__fp_cmp+0x3e>
    4adc:	a1 40       	sbci	r26, 0x01	; 1
    4ade:	a6 95       	lsr	r26
    4ae0:	8f ef       	ldi	r24, 0xFF	; 255
    4ae2:	81 1d       	adc	r24, r1
    4ae4:	81 1d       	adc	r24, r1
    4ae6:	08 95       	ret

00004ae8 <__gesf2>:
    4ae8:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <__fp_cmp>
    4aec:	08 f4       	brcc	.+2      	; 0x4af0 <__gesf2+0x8>
    4aee:	8f ef       	ldi	r24, 0xFF	; 255
    4af0:	08 95       	ret

00004af2 <__unordsf2>:
    4af2:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <__fp_cmp>
    4af6:	88 0b       	sbc	r24, r24
    4af8:	99 0b       	sbc	r25, r25
    4afa:	08 95       	ret

00004afc <__udivmodsi4>:
    4afc:	a1 e2       	ldi	r26, 0x21	; 33
    4afe:	1a 2e       	mov	r1, r26
    4b00:	aa 1b       	sub	r26, r26
    4b02:	bb 1b       	sub	r27, r27
    4b04:	fd 01       	movw	r30, r26
    4b06:	0d c0       	rjmp	.+26     	; 0x4b22 <__udivmodsi4_ep>

00004b08 <__udivmodsi4_loop>:
    4b08:	aa 1f       	adc	r26, r26
    4b0a:	bb 1f       	adc	r27, r27
    4b0c:	ee 1f       	adc	r30, r30
    4b0e:	ff 1f       	adc	r31, r31
    4b10:	a2 17       	cp	r26, r18
    4b12:	b3 07       	cpc	r27, r19
    4b14:	e4 07       	cpc	r30, r20
    4b16:	f5 07       	cpc	r31, r21
    4b18:	20 f0       	brcs	.+8      	; 0x4b22 <__udivmodsi4_ep>
    4b1a:	a2 1b       	sub	r26, r18
    4b1c:	b3 0b       	sbc	r27, r19
    4b1e:	e4 0b       	sbc	r30, r20
    4b20:	f5 0b       	sbc	r31, r21

00004b22 <__udivmodsi4_ep>:
    4b22:	66 1f       	adc	r22, r22
    4b24:	77 1f       	adc	r23, r23
    4b26:	88 1f       	adc	r24, r24
    4b28:	99 1f       	adc	r25, r25
    4b2a:	1a 94       	dec	r1
    4b2c:	69 f7       	brne	.-38     	; 0x4b08 <__udivmodsi4_loop>
    4b2e:	60 95       	com	r22
    4b30:	70 95       	com	r23
    4b32:	80 95       	com	r24
    4b34:	90 95       	com	r25
    4b36:	9b 01       	movw	r18, r22
    4b38:	ac 01       	movw	r20, r24
    4b3a:	bd 01       	movw	r22, r26
    4b3c:	cf 01       	movw	r24, r30
    4b3e:	08 95       	ret

00004b40 <__tablejump2__>:
    4b40:	ee 0f       	add	r30, r30
    4b42:	ff 1f       	adc	r31, r31
    4b44:	05 90       	lpm	r0, Z+
    4b46:	f4 91       	lpm	r31, Z
    4b48:	e0 2d       	mov	r30, r0
    4b4a:	09 94       	ijmp

00004b4c <malloc>:
    4b4c:	0f 93       	push	r16
    4b4e:	1f 93       	push	r17
    4b50:	cf 93       	push	r28
    4b52:	df 93       	push	r29
    4b54:	82 30       	cpi	r24, 0x02	; 2
    4b56:	91 05       	cpc	r25, r1
    4b58:	10 f4       	brcc	.+4      	; 0x4b5e <malloc+0x12>
    4b5a:	82 e0       	ldi	r24, 0x02	; 2
    4b5c:	90 e0       	ldi	r25, 0x00	; 0
    4b5e:	e0 91 40 03 	lds	r30, 0x0340	; 0x800340 <__flp>
    4b62:	f0 91 41 03 	lds	r31, 0x0341	; 0x800341 <__flp+0x1>
    4b66:	20 e0       	ldi	r18, 0x00	; 0
    4b68:	30 e0       	ldi	r19, 0x00	; 0
    4b6a:	a0 e0       	ldi	r26, 0x00	; 0
    4b6c:	b0 e0       	ldi	r27, 0x00	; 0
    4b6e:	30 97       	sbiw	r30, 0x00	; 0
    4b70:	19 f1       	breq	.+70     	; 0x4bb8 <malloc+0x6c>
    4b72:	40 81       	ld	r20, Z
    4b74:	51 81       	ldd	r21, Z+1	; 0x01
    4b76:	02 81       	ldd	r16, Z+2	; 0x02
    4b78:	13 81       	ldd	r17, Z+3	; 0x03
    4b7a:	48 17       	cp	r20, r24
    4b7c:	59 07       	cpc	r21, r25
    4b7e:	c8 f0       	brcs	.+50     	; 0x4bb2 <malloc+0x66>
    4b80:	84 17       	cp	r24, r20
    4b82:	95 07       	cpc	r25, r21
    4b84:	69 f4       	brne	.+26     	; 0x4ba0 <malloc+0x54>
    4b86:	10 97       	sbiw	r26, 0x00	; 0
    4b88:	31 f0       	breq	.+12     	; 0x4b96 <malloc+0x4a>
    4b8a:	12 96       	adiw	r26, 0x02	; 2
    4b8c:	0c 93       	st	X, r16
    4b8e:	12 97       	sbiw	r26, 0x02	; 2
    4b90:	13 96       	adiw	r26, 0x03	; 3
    4b92:	1c 93       	st	X, r17
    4b94:	27 c0       	rjmp	.+78     	; 0x4be4 <malloc+0x98>
    4b96:	00 93 40 03 	sts	0x0340, r16	; 0x800340 <__flp>
    4b9a:	10 93 41 03 	sts	0x0341, r17	; 0x800341 <__flp+0x1>
    4b9e:	22 c0       	rjmp	.+68     	; 0x4be4 <malloc+0x98>
    4ba0:	21 15       	cp	r18, r1
    4ba2:	31 05       	cpc	r19, r1
    4ba4:	19 f0       	breq	.+6      	; 0x4bac <malloc+0x60>
    4ba6:	42 17       	cp	r20, r18
    4ba8:	53 07       	cpc	r21, r19
    4baa:	18 f4       	brcc	.+6      	; 0x4bb2 <malloc+0x66>
    4bac:	9a 01       	movw	r18, r20
    4bae:	bd 01       	movw	r22, r26
    4bb0:	ef 01       	movw	r28, r30
    4bb2:	df 01       	movw	r26, r30
    4bb4:	f8 01       	movw	r30, r16
    4bb6:	db cf       	rjmp	.-74     	; 0x4b6e <malloc+0x22>
    4bb8:	21 15       	cp	r18, r1
    4bba:	31 05       	cpc	r19, r1
    4bbc:	f9 f0       	breq	.+62     	; 0x4bfc <malloc+0xb0>
    4bbe:	28 1b       	sub	r18, r24
    4bc0:	39 0b       	sbc	r19, r25
    4bc2:	24 30       	cpi	r18, 0x04	; 4
    4bc4:	31 05       	cpc	r19, r1
    4bc6:	80 f4       	brcc	.+32     	; 0x4be8 <malloc+0x9c>
    4bc8:	8a 81       	ldd	r24, Y+2	; 0x02
    4bca:	9b 81       	ldd	r25, Y+3	; 0x03
    4bcc:	61 15       	cp	r22, r1
    4bce:	71 05       	cpc	r23, r1
    4bd0:	21 f0       	breq	.+8      	; 0x4bda <malloc+0x8e>
    4bd2:	fb 01       	movw	r30, r22
    4bd4:	93 83       	std	Z+3, r25	; 0x03
    4bd6:	82 83       	std	Z+2, r24	; 0x02
    4bd8:	04 c0       	rjmp	.+8      	; 0x4be2 <malloc+0x96>
    4bda:	90 93 41 03 	sts	0x0341, r25	; 0x800341 <__flp+0x1>
    4bde:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <__flp>
    4be2:	fe 01       	movw	r30, r28
    4be4:	32 96       	adiw	r30, 0x02	; 2
    4be6:	44 c0       	rjmp	.+136    	; 0x4c70 <malloc+0x124>
    4be8:	fe 01       	movw	r30, r28
    4bea:	e2 0f       	add	r30, r18
    4bec:	f3 1f       	adc	r31, r19
    4bee:	81 93       	st	Z+, r24
    4bf0:	91 93       	st	Z+, r25
    4bf2:	22 50       	subi	r18, 0x02	; 2
    4bf4:	31 09       	sbc	r19, r1
    4bf6:	39 83       	std	Y+1, r19	; 0x01
    4bf8:	28 83       	st	Y, r18
    4bfa:	3a c0       	rjmp	.+116    	; 0x4c70 <malloc+0x124>
    4bfc:	20 91 3e 03 	lds	r18, 0x033E	; 0x80033e <__brkval>
    4c00:	30 91 3f 03 	lds	r19, 0x033F	; 0x80033f <__brkval+0x1>
    4c04:	23 2b       	or	r18, r19
    4c06:	41 f4       	brne	.+16     	; 0x4c18 <malloc+0xcc>
    4c08:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    4c0c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    4c10:	30 93 3f 03 	sts	0x033F, r19	; 0x80033f <__brkval+0x1>
    4c14:	20 93 3e 03 	sts	0x033E, r18	; 0x80033e <__brkval>
    4c18:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    4c1c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    4c20:	21 15       	cp	r18, r1
    4c22:	31 05       	cpc	r19, r1
    4c24:	41 f4       	brne	.+16     	; 0x4c36 <malloc+0xea>
    4c26:	2d b7       	in	r18, 0x3d	; 61
    4c28:	3e b7       	in	r19, 0x3e	; 62
    4c2a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    4c2e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    4c32:	24 1b       	sub	r18, r20
    4c34:	35 0b       	sbc	r19, r21
    4c36:	e0 91 3e 03 	lds	r30, 0x033E	; 0x80033e <__brkval>
    4c3a:	f0 91 3f 03 	lds	r31, 0x033F	; 0x80033f <__brkval+0x1>
    4c3e:	e2 17       	cp	r30, r18
    4c40:	f3 07       	cpc	r31, r19
    4c42:	a0 f4       	brcc	.+40     	; 0x4c6c <malloc+0x120>
    4c44:	2e 1b       	sub	r18, r30
    4c46:	3f 0b       	sbc	r19, r31
    4c48:	28 17       	cp	r18, r24
    4c4a:	39 07       	cpc	r19, r25
    4c4c:	78 f0       	brcs	.+30     	; 0x4c6c <malloc+0x120>
    4c4e:	ac 01       	movw	r20, r24
    4c50:	4e 5f       	subi	r20, 0xFE	; 254
    4c52:	5f 4f       	sbci	r21, 0xFF	; 255
    4c54:	24 17       	cp	r18, r20
    4c56:	35 07       	cpc	r19, r21
    4c58:	48 f0       	brcs	.+18     	; 0x4c6c <malloc+0x120>
    4c5a:	4e 0f       	add	r20, r30
    4c5c:	5f 1f       	adc	r21, r31
    4c5e:	50 93 3f 03 	sts	0x033F, r21	; 0x80033f <__brkval+0x1>
    4c62:	40 93 3e 03 	sts	0x033E, r20	; 0x80033e <__brkval>
    4c66:	81 93       	st	Z+, r24
    4c68:	91 93       	st	Z+, r25
    4c6a:	02 c0       	rjmp	.+4      	; 0x4c70 <malloc+0x124>
    4c6c:	e0 e0       	ldi	r30, 0x00	; 0
    4c6e:	f0 e0       	ldi	r31, 0x00	; 0
    4c70:	cf 01       	movw	r24, r30
    4c72:	df 91       	pop	r29
    4c74:	cf 91       	pop	r28
    4c76:	1f 91       	pop	r17
    4c78:	0f 91       	pop	r16
    4c7a:	08 95       	ret

00004c7c <free>:
    4c7c:	cf 93       	push	r28
    4c7e:	df 93       	push	r29
    4c80:	00 97       	sbiw	r24, 0x00	; 0
    4c82:	09 f4       	brne	.+2      	; 0x4c86 <free+0xa>
    4c84:	81 c0       	rjmp	.+258    	; 0x4d88 <free+0x10c>
    4c86:	fc 01       	movw	r30, r24
    4c88:	32 97       	sbiw	r30, 0x02	; 2
    4c8a:	13 82       	std	Z+3, r1	; 0x03
    4c8c:	12 82       	std	Z+2, r1	; 0x02
    4c8e:	a0 91 40 03 	lds	r26, 0x0340	; 0x800340 <__flp>
    4c92:	b0 91 41 03 	lds	r27, 0x0341	; 0x800341 <__flp+0x1>
    4c96:	10 97       	sbiw	r26, 0x00	; 0
    4c98:	81 f4       	brne	.+32     	; 0x4cba <free+0x3e>
    4c9a:	20 81       	ld	r18, Z
    4c9c:	31 81       	ldd	r19, Z+1	; 0x01
    4c9e:	82 0f       	add	r24, r18
    4ca0:	93 1f       	adc	r25, r19
    4ca2:	20 91 3e 03 	lds	r18, 0x033E	; 0x80033e <__brkval>
    4ca6:	30 91 3f 03 	lds	r19, 0x033F	; 0x80033f <__brkval+0x1>
    4caa:	28 17       	cp	r18, r24
    4cac:	39 07       	cpc	r19, r25
    4cae:	51 f5       	brne	.+84     	; 0x4d04 <free+0x88>
    4cb0:	f0 93 3f 03 	sts	0x033F, r31	; 0x80033f <__brkval+0x1>
    4cb4:	e0 93 3e 03 	sts	0x033E, r30	; 0x80033e <__brkval>
    4cb8:	67 c0       	rjmp	.+206    	; 0x4d88 <free+0x10c>
    4cba:	ed 01       	movw	r28, r26
    4cbc:	20 e0       	ldi	r18, 0x00	; 0
    4cbe:	30 e0       	ldi	r19, 0x00	; 0
    4cc0:	ce 17       	cp	r28, r30
    4cc2:	df 07       	cpc	r29, r31
    4cc4:	40 f4       	brcc	.+16     	; 0x4cd6 <free+0x5a>
    4cc6:	4a 81       	ldd	r20, Y+2	; 0x02
    4cc8:	5b 81       	ldd	r21, Y+3	; 0x03
    4cca:	9e 01       	movw	r18, r28
    4ccc:	41 15       	cp	r20, r1
    4cce:	51 05       	cpc	r21, r1
    4cd0:	f1 f0       	breq	.+60     	; 0x4d0e <free+0x92>
    4cd2:	ea 01       	movw	r28, r20
    4cd4:	f5 cf       	rjmp	.-22     	; 0x4cc0 <free+0x44>
    4cd6:	d3 83       	std	Z+3, r29	; 0x03
    4cd8:	c2 83       	std	Z+2, r28	; 0x02
    4cda:	40 81       	ld	r20, Z
    4cdc:	51 81       	ldd	r21, Z+1	; 0x01
    4cde:	84 0f       	add	r24, r20
    4ce0:	95 1f       	adc	r25, r21
    4ce2:	c8 17       	cp	r28, r24
    4ce4:	d9 07       	cpc	r29, r25
    4ce6:	59 f4       	brne	.+22     	; 0x4cfe <free+0x82>
    4ce8:	88 81       	ld	r24, Y
    4cea:	99 81       	ldd	r25, Y+1	; 0x01
    4cec:	84 0f       	add	r24, r20
    4cee:	95 1f       	adc	r25, r21
    4cf0:	02 96       	adiw	r24, 0x02	; 2
    4cf2:	91 83       	std	Z+1, r25	; 0x01
    4cf4:	80 83       	st	Z, r24
    4cf6:	8a 81       	ldd	r24, Y+2	; 0x02
    4cf8:	9b 81       	ldd	r25, Y+3	; 0x03
    4cfa:	93 83       	std	Z+3, r25	; 0x03
    4cfc:	82 83       	std	Z+2, r24	; 0x02
    4cfe:	21 15       	cp	r18, r1
    4d00:	31 05       	cpc	r19, r1
    4d02:	29 f4       	brne	.+10     	; 0x4d0e <free+0x92>
    4d04:	f0 93 41 03 	sts	0x0341, r31	; 0x800341 <__flp+0x1>
    4d08:	e0 93 40 03 	sts	0x0340, r30	; 0x800340 <__flp>
    4d0c:	3d c0       	rjmp	.+122    	; 0x4d88 <free+0x10c>
    4d0e:	e9 01       	movw	r28, r18
    4d10:	fb 83       	std	Y+3, r31	; 0x03
    4d12:	ea 83       	std	Y+2, r30	; 0x02
    4d14:	49 91       	ld	r20, Y+
    4d16:	59 91       	ld	r21, Y+
    4d18:	c4 0f       	add	r28, r20
    4d1a:	d5 1f       	adc	r29, r21
    4d1c:	ec 17       	cp	r30, r28
    4d1e:	fd 07       	cpc	r31, r29
    4d20:	61 f4       	brne	.+24     	; 0x4d3a <free+0xbe>
    4d22:	80 81       	ld	r24, Z
    4d24:	91 81       	ldd	r25, Z+1	; 0x01
    4d26:	84 0f       	add	r24, r20
    4d28:	95 1f       	adc	r25, r21
    4d2a:	02 96       	adiw	r24, 0x02	; 2
    4d2c:	e9 01       	movw	r28, r18
    4d2e:	99 83       	std	Y+1, r25	; 0x01
    4d30:	88 83       	st	Y, r24
    4d32:	82 81       	ldd	r24, Z+2	; 0x02
    4d34:	93 81       	ldd	r25, Z+3	; 0x03
    4d36:	9b 83       	std	Y+3, r25	; 0x03
    4d38:	8a 83       	std	Y+2, r24	; 0x02
    4d3a:	e0 e0       	ldi	r30, 0x00	; 0
    4d3c:	f0 e0       	ldi	r31, 0x00	; 0
    4d3e:	12 96       	adiw	r26, 0x02	; 2
    4d40:	8d 91       	ld	r24, X+
    4d42:	9c 91       	ld	r25, X
    4d44:	13 97       	sbiw	r26, 0x03	; 3
    4d46:	00 97       	sbiw	r24, 0x00	; 0
    4d48:	19 f0       	breq	.+6      	; 0x4d50 <free+0xd4>
    4d4a:	fd 01       	movw	r30, r26
    4d4c:	dc 01       	movw	r26, r24
    4d4e:	f7 cf       	rjmp	.-18     	; 0x4d3e <free+0xc2>
    4d50:	8d 91       	ld	r24, X+
    4d52:	9c 91       	ld	r25, X
    4d54:	11 97       	sbiw	r26, 0x01	; 1
    4d56:	9d 01       	movw	r18, r26
    4d58:	2e 5f       	subi	r18, 0xFE	; 254
    4d5a:	3f 4f       	sbci	r19, 0xFF	; 255
    4d5c:	82 0f       	add	r24, r18
    4d5e:	93 1f       	adc	r25, r19
    4d60:	20 91 3e 03 	lds	r18, 0x033E	; 0x80033e <__brkval>
    4d64:	30 91 3f 03 	lds	r19, 0x033F	; 0x80033f <__brkval+0x1>
    4d68:	28 17       	cp	r18, r24
    4d6a:	39 07       	cpc	r19, r25
    4d6c:	69 f4       	brne	.+26     	; 0x4d88 <free+0x10c>
    4d6e:	30 97       	sbiw	r30, 0x00	; 0
    4d70:	29 f4       	brne	.+10     	; 0x4d7c <free+0x100>
    4d72:	10 92 41 03 	sts	0x0341, r1	; 0x800341 <__flp+0x1>
    4d76:	10 92 40 03 	sts	0x0340, r1	; 0x800340 <__flp>
    4d7a:	02 c0       	rjmp	.+4      	; 0x4d80 <free+0x104>
    4d7c:	13 82       	std	Z+3, r1	; 0x03
    4d7e:	12 82       	std	Z+2, r1	; 0x02
    4d80:	b0 93 3f 03 	sts	0x033F, r27	; 0x80033f <__brkval+0x1>
    4d84:	a0 93 3e 03 	sts	0x033E, r26	; 0x80033e <__brkval>
    4d88:	df 91       	pop	r29
    4d8a:	cf 91       	pop	r28
    4d8c:	08 95       	ret

00004d8e <realloc>:
    4d8e:	a0 e0       	ldi	r26, 0x00	; 0
    4d90:	b0 e0       	ldi	r27, 0x00	; 0
    4d92:	ed ec       	ldi	r30, 0xCD	; 205
    4d94:	f6 e2       	ldi	r31, 0x26	; 38
    4d96:	0c 94 a7 27 	jmp	0x4f4e	; 0x4f4e <__prologue_saves__+0x8>
    4d9a:	ec 01       	movw	r28, r24
    4d9c:	00 97       	sbiw	r24, 0x00	; 0
    4d9e:	21 f4       	brne	.+8      	; 0x4da8 <realloc+0x1a>
    4da0:	cb 01       	movw	r24, r22
    4da2:	0e 94 a6 25 	call	0x4b4c	; 0x4b4c <malloc>
    4da6:	b4 c0       	rjmp	.+360    	; 0x4f10 <realloc+0x182>
    4da8:	fc 01       	movw	r30, r24
    4daa:	e6 0f       	add	r30, r22
    4dac:	f7 1f       	adc	r31, r23
    4dae:	9c 01       	movw	r18, r24
    4db0:	22 50       	subi	r18, 0x02	; 2
    4db2:	31 09       	sbc	r19, r1
    4db4:	e2 17       	cp	r30, r18
    4db6:	f3 07       	cpc	r31, r19
    4db8:	08 f4       	brcc	.+2      	; 0x4dbc <realloc+0x2e>
    4dba:	a8 c0       	rjmp	.+336    	; 0x4f0c <realloc+0x17e>
    4dbc:	d9 01       	movw	r26, r18
    4dbe:	0d 91       	ld	r16, X+
    4dc0:	1c 91       	ld	r17, X
    4dc2:	11 97       	sbiw	r26, 0x01	; 1
    4dc4:	06 17       	cp	r16, r22
    4dc6:	17 07       	cpc	r17, r23
    4dc8:	b0 f0       	brcs	.+44     	; 0x4df6 <realloc+0x68>
    4dca:	05 30       	cpi	r16, 0x05	; 5
    4dcc:	11 05       	cpc	r17, r1
    4dce:	08 f4       	brcc	.+2      	; 0x4dd2 <realloc+0x44>
    4dd0:	9b c0       	rjmp	.+310    	; 0x4f08 <realloc+0x17a>
    4dd2:	c8 01       	movw	r24, r16
    4dd4:	04 97       	sbiw	r24, 0x04	; 4
    4dd6:	86 17       	cp	r24, r22
    4dd8:	97 07       	cpc	r25, r23
    4dda:	08 f4       	brcc	.+2      	; 0x4dde <realloc+0x50>
    4ddc:	95 c0       	rjmp	.+298    	; 0x4f08 <realloc+0x17a>
    4dde:	02 50       	subi	r16, 0x02	; 2
    4de0:	11 09       	sbc	r17, r1
    4de2:	06 1b       	sub	r16, r22
    4de4:	17 0b       	sbc	r17, r23
    4de6:	01 93       	st	Z+, r16
    4de8:	11 93       	st	Z+, r17
    4dea:	6d 93       	st	X+, r22
    4dec:	7c 93       	st	X, r23
    4dee:	cf 01       	movw	r24, r30
    4df0:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <free>
    4df4:	89 c0       	rjmp	.+274    	; 0x4f08 <realloc+0x17a>
    4df6:	5b 01       	movw	r10, r22
    4df8:	a0 1a       	sub	r10, r16
    4dfa:	b1 0a       	sbc	r11, r17
    4dfc:	4c 01       	movw	r8, r24
    4dfe:	80 0e       	add	r8, r16
    4e00:	91 1e       	adc	r9, r17
    4e02:	a0 91 40 03 	lds	r26, 0x0340	; 0x800340 <__flp>
    4e06:	b0 91 41 03 	lds	r27, 0x0341	; 0x800341 <__flp+0x1>
    4e0a:	61 2c       	mov	r6, r1
    4e0c:	71 2c       	mov	r7, r1
    4e0e:	e1 2c       	mov	r14, r1
    4e10:	f1 2c       	mov	r15, r1
    4e12:	10 97       	sbiw	r26, 0x00	; 0
    4e14:	09 f4       	brne	.+2      	; 0x4e18 <realloc+0x8a>
    4e16:	46 c0       	rjmp	.+140    	; 0x4ea4 <realloc+0x116>
    4e18:	8d 91       	ld	r24, X+
    4e1a:	9c 91       	ld	r25, X
    4e1c:	11 97       	sbiw	r26, 0x01	; 1
    4e1e:	a8 15       	cp	r26, r8
    4e20:	b9 05       	cpc	r27, r9
    4e22:	b1 f5       	brne	.+108    	; 0x4e90 <realloc+0x102>
    4e24:	6c 01       	movw	r12, r24
    4e26:	42 e0       	ldi	r20, 0x02	; 2
    4e28:	c4 0e       	add	r12, r20
    4e2a:	d1 1c       	adc	r13, r1
    4e2c:	ca 14       	cp	r12, r10
    4e2e:	db 04       	cpc	r13, r11
    4e30:	78 f1       	brcs	.+94     	; 0x4e90 <realloc+0x102>
    4e32:	4c 01       	movw	r8, r24
    4e34:	8a 18       	sub	r8, r10
    4e36:	9b 08       	sbc	r9, r11
    4e38:	64 01       	movw	r12, r8
    4e3a:	42 e0       	ldi	r20, 0x02	; 2
    4e3c:	c4 0e       	add	r12, r20
    4e3e:	d1 1c       	adc	r13, r1
    4e40:	12 96       	adiw	r26, 0x02	; 2
    4e42:	bc 90       	ld	r11, X
    4e44:	12 97       	sbiw	r26, 0x02	; 2
    4e46:	13 96       	adiw	r26, 0x03	; 3
    4e48:	ac 91       	ld	r26, X
    4e4a:	b5 e0       	ldi	r27, 0x05	; 5
    4e4c:	cb 16       	cp	r12, r27
    4e4e:	d1 04       	cpc	r13, r1
    4e50:	40 f0       	brcs	.+16     	; 0x4e62 <realloc+0xd4>
    4e52:	b2 82       	std	Z+2, r11	; 0x02
    4e54:	a3 83       	std	Z+3, r26	; 0x03
    4e56:	91 82       	std	Z+1, r9	; 0x01
    4e58:	80 82       	st	Z, r8
    4e5a:	d9 01       	movw	r26, r18
    4e5c:	6d 93       	st	X+, r22
    4e5e:	7c 93       	st	X, r23
    4e60:	09 c0       	rjmp	.+18     	; 0x4e74 <realloc+0xe6>
    4e62:	0e 5f       	subi	r16, 0xFE	; 254
    4e64:	1f 4f       	sbci	r17, 0xFF	; 255
    4e66:	80 0f       	add	r24, r16
    4e68:	91 1f       	adc	r25, r17
    4e6a:	f9 01       	movw	r30, r18
    4e6c:	91 83       	std	Z+1, r25	; 0x01
    4e6e:	80 83       	st	Z, r24
    4e70:	eb 2d       	mov	r30, r11
    4e72:	fa 2f       	mov	r31, r26
    4e74:	e1 14       	cp	r14, r1
    4e76:	f1 04       	cpc	r15, r1
    4e78:	31 f0       	breq	.+12     	; 0x4e86 <realloc+0xf8>
    4e7a:	d7 01       	movw	r26, r14
    4e7c:	13 96       	adiw	r26, 0x03	; 3
    4e7e:	fc 93       	st	X, r31
    4e80:	ee 93       	st	-X, r30
    4e82:	12 97       	sbiw	r26, 0x02	; 2
    4e84:	41 c0       	rjmp	.+130    	; 0x4f08 <realloc+0x17a>
    4e86:	f0 93 41 03 	sts	0x0341, r31	; 0x800341 <__flp+0x1>
    4e8a:	e0 93 40 03 	sts	0x0340, r30	; 0x800340 <__flp>
    4e8e:	3c c0       	rjmp	.+120    	; 0x4f08 <realloc+0x17a>
    4e90:	68 16       	cp	r6, r24
    4e92:	79 06       	cpc	r7, r25
    4e94:	08 f4       	brcc	.+2      	; 0x4e98 <realloc+0x10a>
    4e96:	3c 01       	movw	r6, r24
    4e98:	7d 01       	movw	r14, r26
    4e9a:	12 96       	adiw	r26, 0x02	; 2
    4e9c:	0d 90       	ld	r0, X+
    4e9e:	bc 91       	ld	r27, X
    4ea0:	a0 2d       	mov	r26, r0
    4ea2:	b7 cf       	rjmp	.-146    	; 0x4e12 <realloc+0x84>
    4ea4:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <__brkval>
    4ea8:	90 91 3f 03 	lds	r25, 0x033F	; 0x80033f <__brkval+0x1>
    4eac:	88 16       	cp	r8, r24
    4eae:	99 06       	cpc	r9, r25
    4eb0:	e1 f4       	brne	.+56     	; 0x4eea <realloc+0x15c>
    4eb2:	66 16       	cp	r6, r22
    4eb4:	77 06       	cpc	r7, r23
    4eb6:	c8 f4       	brcc	.+50     	; 0x4eea <realloc+0x15c>
    4eb8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    4ebc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    4ec0:	00 97       	sbiw	r24, 0x00	; 0
    4ec2:	41 f4       	brne	.+16     	; 0x4ed4 <realloc+0x146>
    4ec4:	8d b7       	in	r24, 0x3d	; 61
    4ec6:	9e b7       	in	r25, 0x3e	; 62
    4ec8:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    4ecc:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    4ed0:	84 1b       	sub	r24, r20
    4ed2:	95 0b       	sbc	r25, r21
    4ed4:	e8 17       	cp	r30, r24
    4ed6:	f9 07       	cpc	r31, r25
    4ed8:	c8 f4       	brcc	.+50     	; 0x4f0c <realloc+0x17e>
    4eda:	f0 93 3f 03 	sts	0x033F, r31	; 0x80033f <__brkval+0x1>
    4ede:	e0 93 3e 03 	sts	0x033E, r30	; 0x80033e <__brkval>
    4ee2:	f9 01       	movw	r30, r18
    4ee4:	71 83       	std	Z+1, r23	; 0x01
    4ee6:	60 83       	st	Z, r22
    4ee8:	0f c0       	rjmp	.+30     	; 0x4f08 <realloc+0x17a>
    4eea:	cb 01       	movw	r24, r22
    4eec:	0e 94 a6 25 	call	0x4b4c	; 0x4b4c <malloc>
    4ef0:	7c 01       	movw	r14, r24
    4ef2:	00 97       	sbiw	r24, 0x00	; 0
    4ef4:	59 f0       	breq	.+22     	; 0x4f0c <realloc+0x17e>
    4ef6:	a8 01       	movw	r20, r16
    4ef8:	be 01       	movw	r22, r28
    4efa:	0e 94 9a 27 	call	0x4f34	; 0x4f34 <memcpy>
    4efe:	ce 01       	movw	r24, r28
    4f00:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <free>
    4f04:	c7 01       	movw	r24, r14
    4f06:	04 c0       	rjmp	.+8      	; 0x4f10 <realloc+0x182>
    4f08:	ce 01       	movw	r24, r28
    4f0a:	02 c0       	rjmp	.+4      	; 0x4f10 <realloc+0x182>
    4f0c:	80 e0       	ldi	r24, 0x00	; 0
    4f0e:	90 e0       	ldi	r25, 0x00	; 0
    4f10:	cd b7       	in	r28, 0x3d	; 61
    4f12:	de b7       	in	r29, 0x3e	; 62
    4f14:	ee e0       	ldi	r30, 0x0E	; 14
    4f16:	0c 94 c3 27 	jmp	0x4f86	; 0x4f86 <__epilogue_restores__+0x8>

00004f1a <memcmp>:
    4f1a:	fb 01       	movw	r30, r22
    4f1c:	dc 01       	movw	r26, r24
    4f1e:	04 c0       	rjmp	.+8      	; 0x4f28 <memcmp+0xe>
    4f20:	8d 91       	ld	r24, X+
    4f22:	01 90       	ld	r0, Z+
    4f24:	80 19       	sub	r24, r0
    4f26:	21 f4       	brne	.+8      	; 0x4f30 <memcmp+0x16>
    4f28:	41 50       	subi	r20, 0x01	; 1
    4f2a:	50 40       	sbci	r21, 0x00	; 0
    4f2c:	c8 f7       	brcc	.-14     	; 0x4f20 <memcmp+0x6>
    4f2e:	88 1b       	sub	r24, r24
    4f30:	99 0b       	sbc	r25, r25
    4f32:	08 95       	ret

00004f34 <memcpy>:
    4f34:	fb 01       	movw	r30, r22
    4f36:	dc 01       	movw	r26, r24
    4f38:	02 c0       	rjmp	.+4      	; 0x4f3e <memcpy+0xa>
    4f3a:	01 90       	ld	r0, Z+
    4f3c:	0d 92       	st	X+, r0
    4f3e:	41 50       	subi	r20, 0x01	; 1
    4f40:	50 40       	sbci	r21, 0x00	; 0
    4f42:	d8 f7       	brcc	.-10     	; 0x4f3a <memcpy+0x6>
    4f44:	08 95       	ret

00004f46 <__prologue_saves__>:
    4f46:	2f 92       	push	r2
    4f48:	3f 92       	push	r3
    4f4a:	4f 92       	push	r4
    4f4c:	5f 92       	push	r5
    4f4e:	6f 92       	push	r6
    4f50:	7f 92       	push	r7
    4f52:	8f 92       	push	r8
    4f54:	9f 92       	push	r9
    4f56:	af 92       	push	r10
    4f58:	bf 92       	push	r11
    4f5a:	cf 92       	push	r12
    4f5c:	df 92       	push	r13
    4f5e:	ef 92       	push	r14
    4f60:	ff 92       	push	r15
    4f62:	0f 93       	push	r16
    4f64:	1f 93       	push	r17
    4f66:	cf 93       	push	r28
    4f68:	df 93       	push	r29
    4f6a:	cd b7       	in	r28, 0x3d	; 61
    4f6c:	de b7       	in	r29, 0x3e	; 62
    4f6e:	ca 1b       	sub	r28, r26
    4f70:	db 0b       	sbc	r29, r27
    4f72:	0f b6       	in	r0, 0x3f	; 63
    4f74:	f8 94       	cli
    4f76:	de bf       	out	0x3e, r29	; 62
    4f78:	0f be       	out	0x3f, r0	; 63
    4f7a:	cd bf       	out	0x3d, r28	; 61
    4f7c:	09 94       	ijmp

00004f7e <__epilogue_restores__>:
    4f7e:	2a 88       	ldd	r2, Y+18	; 0x12
    4f80:	39 88       	ldd	r3, Y+17	; 0x11
    4f82:	48 88       	ldd	r4, Y+16	; 0x10
    4f84:	5f 84       	ldd	r5, Y+15	; 0x0f
    4f86:	6e 84       	ldd	r6, Y+14	; 0x0e
    4f88:	7d 84       	ldd	r7, Y+13	; 0x0d
    4f8a:	8c 84       	ldd	r8, Y+12	; 0x0c
    4f8c:	9b 84       	ldd	r9, Y+11	; 0x0b
    4f8e:	aa 84       	ldd	r10, Y+10	; 0x0a
    4f90:	b9 84       	ldd	r11, Y+9	; 0x09
    4f92:	c8 84       	ldd	r12, Y+8	; 0x08
    4f94:	df 80       	ldd	r13, Y+7	; 0x07
    4f96:	ee 80       	ldd	r14, Y+6	; 0x06
    4f98:	fd 80       	ldd	r15, Y+5	; 0x05
    4f9a:	0c 81       	ldd	r16, Y+4	; 0x04
    4f9c:	1b 81       	ldd	r17, Y+3	; 0x03
    4f9e:	aa 81       	ldd	r26, Y+2	; 0x02
    4fa0:	b9 81       	ldd	r27, Y+1	; 0x01
    4fa2:	ce 0f       	add	r28, r30
    4fa4:	d1 1d       	adc	r29, r1
    4fa6:	0f b6       	in	r0, 0x3f	; 63
    4fa8:	f8 94       	cli
    4faa:	de bf       	out	0x3e, r29	; 62
    4fac:	0f be       	out	0x3f, r0	; 63
    4fae:	cd bf       	out	0x3d, r28	; 61
    4fb0:	ed 01       	movw	r28, r26
    4fb2:	08 95       	ret

00004fb4 <_exit>:
    4fb4:	f8 94       	cli

00004fb6 <__stop_program>:
    4fb6:	ff cf       	rjmp	.-2      	; 0x4fb6 <__stop_program>
