
Chessboard_Adaptive_Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000260  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800100  00800100  000002d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000304  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cf9  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f5  00000000  00000000  000010e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006af  00000000  00000000  000019da  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e8  00000000  00000000  0000208c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000070f  00000000  00000000  00002274  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000339  00000000  00000000  00002983  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002cbc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__vector_4>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__vector_7>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 a9 00 	jmp	0x152	; 0x152 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ad 30       	cpi	r26, 0x0D	; 13
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 9a 00 	call	0x134	; 0x134 <main>
  88:	0c 94 2e 01 	jmp	0x25c	; 0x25c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setup>:
  90:	08 95       	ret

00000092 <loop>:


}

void loop()
{
  92:	08 95       	ret

00000094 <__vector_7>:
}


//TIMER 2 (8-bit timer)
ISR (TIMER2_COMPA_vect)
{
  94:	1f 92       	push	r1
  96:	0f 92       	push	r0
  98:	0f b6       	in	r0, 0x3f	; 63
  9a:	0f 92       	push	r0
  9c:	11 24       	eor	r1, r1
	
}
  9e:	0f 90       	pop	r0
  a0:	0f be       	out	0x3f, r0	; 63
  a2:	0f 90       	pop	r0
  a4:	1f 90       	pop	r1
  a6:	18 95       	reti

000000a8 <__vector_11>:
  a8:	1f 92       	push	r1
  aa:	0f 92       	push	r0
  ac:	0f b6       	in	r0, 0x3f	; 63
  ae:	0f 92       	push	r0
  b0:	11 24       	eor	r1, r1
  b2:	0f 90       	pop	r0
  b4:	0f be       	out	0x3f, r0	; 63
  b6:	0f 90       	pop	r0
  b8:	1f 90       	pop	r1
  ba:	18 95       	reti

000000bc <__vector_14>:
  bc:	1f 92       	push	r1
  be:	0f 92       	push	r0
  c0:	0f b6       	in	r0, 0x3f	; 63
  c2:	0f 92       	push	r0
  c4:	11 24       	eor	r1, r1
  c6:	0f 90       	pop	r0
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	0f 90       	pop	r0
  cc:	1f 90       	pop	r1
  ce:	18 95       	reti

000000d0 <__vector_4>:
//////////////////////////////////////////////////////////////////////////////////
//							EXTERNAL INTERRUPTS									//
//////////////////////////////////////////////////////////////////////////////////

ISR (PCINT1_vect)
{
  d0:	1f 92       	push	r1
  d2:	0f 92       	push	r0
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	0f 92       	push	r0
  d8:	11 24       	eor	r1, r1
  da:	8f 93       	push	r24
  dc:	9f 93       	push	r25
  de:	af 93       	push	r26
  e0:	bf 93       	push	r27
  e2:	ef 93       	push	r30
  e4:	ff 93       	push	r31
	*pChangedbits = PINB ^ *pPortChistory;
  e6:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <pChangedbits>
  ea:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <pChangedbits+0x1>
  ee:	83 b1       	in	r24, 0x03	; 3
  f0:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <_edata>
  f4:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <_edata+0x1>
  f8:	9c 91       	ld	r25, X
  fa:	89 27       	eor	r24, r25
  fc:	80 83       	st	Z, r24
	*pPortChistory = PINB;
  fe:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <_edata>
 102:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <_edata+0x1>
 106:	83 b1       	in	r24, 0x03	; 3
 108:	80 83       	st	Z, r24

	
	//Check which pin caused a state change which triggered the event..
	if(*pChangedbits & (1 << PINC4))		// Pin PC4
 10a:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <pChangedbits>
 10e:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <pChangedbits+0x1>
 112:	80 81       	ld	r24, Z
 114:	84 fd       	sbrc	r24, 4
	{
		if( (PINC & (1 << PINC4)) == 1 )	//Check if pin is high or low
 116:	96 b1       	in	r25, 0x06	; 6
		{
			/* HIGH to LOW pin change */
		}
	}
	
	if(*pChangedbits & (1 << PINC5))	// Pin PC5
 118:	85 fd       	sbrc	r24, 5
	{
		if( (PINC & (1 << PINC5)) == 1 )	//Check if pin is high or low
 11a:	86 b1       	in	r24, 0x06	; 6
		else
		{
			/* HIGH to LOW pin change */
		}
	}
}
 11c:	ff 91       	pop	r31
 11e:	ef 91       	pop	r30
 120:	bf 91       	pop	r27
 122:	af 91       	pop	r26
 124:	9f 91       	pop	r25
 126:	8f 91       	pop	r24
 128:	0f 90       	pop	r0
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	0f 90       	pop	r0
 12e:	1f 90       	pop	r1
 130:	18 95       	reti

00000132 <initVariant>:
 132:	08 95       	ret

00000134 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 134:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <init>

	initVariant();
 138:	0e 94 99 00 	call	0x132	; 0x132 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 13c:	0e 94 48 00 	call	0x90	; 0x90 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 140:	c0 e0       	ldi	r28, 0x00	; 0
 142:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 144:	0e 94 49 00 	call	0x92	; 0x92 <loop>
		if (serialEventRun) serialEventRun();
 148:	20 97       	sbiw	r28, 0x00	; 0
 14a:	e1 f3       	breq	.-8      	; 0x144 <main+0x10>
 14c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 150:	f9 cf       	rjmp	.-14     	; 0x144 <main+0x10>

00000152 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 152:	1f 92       	push	r1
 154:	0f 92       	push	r0
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	0f 92       	push	r0
 15a:	11 24       	eor	r1, r1
 15c:	2f 93       	push	r18
 15e:	3f 93       	push	r19
 160:	8f 93       	push	r24
 162:	9f 93       	push	r25
 164:	af 93       	push	r26
 166:	bf 93       	push	r27
 168:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <timer0_millis>
 16c:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <timer0_millis+0x1>
 170:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <timer0_millis+0x2>
 174:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <timer0_millis+0x3>
 178:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <timer0_fract>
 17c:	23 e0       	ldi	r18, 0x03	; 3
 17e:	23 0f       	add	r18, r19
 180:	2d 37       	cpi	r18, 0x7D	; 125
 182:	20 f4       	brcc	.+8      	; 0x18c <__vector_16+0x3a>
 184:	01 96       	adiw	r24, 0x01	; 1
 186:	a1 1d       	adc	r26, r1
 188:	b1 1d       	adc	r27, r1
 18a:	05 c0       	rjmp	.+10     	; 0x196 <__vector_16+0x44>
 18c:	26 e8       	ldi	r18, 0x86	; 134
 18e:	23 0f       	add	r18, r19
 190:	02 96       	adiw	r24, 0x02	; 2
 192:	a1 1d       	adc	r26, r1
 194:	b1 1d       	adc	r27, r1
 196:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <timer0_fract>
 19a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <timer0_millis>
 19e:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <timer0_millis+0x1>
 1a2:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <timer0_millis+0x2>
 1a6:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <timer0_millis+0x3>
 1aa:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <timer0_overflow_count>
 1ae:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <timer0_overflow_count+0x1>
 1b2:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <timer0_overflow_count+0x2>
 1b6:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <timer0_overflow_count+0x3>
 1ba:	01 96       	adiw	r24, 0x01	; 1
 1bc:	a1 1d       	adc	r26, r1
 1be:	b1 1d       	adc	r27, r1
 1c0:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <timer0_overflow_count>
 1c4:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <timer0_overflow_count+0x1>
 1c8:	a0 93 0b 01 	sts	0x010B, r26	; 0x80010b <timer0_overflow_count+0x2>
 1cc:	b0 93 0c 01 	sts	0x010C, r27	; 0x80010c <timer0_overflow_count+0x3>
 1d0:	bf 91       	pop	r27
 1d2:	af 91       	pop	r26
 1d4:	9f 91       	pop	r25
 1d6:	8f 91       	pop	r24
 1d8:	3f 91       	pop	r19
 1da:	2f 91       	pop	r18
 1dc:	0f 90       	pop	r0
 1de:	0f be       	out	0x3f, r0	; 63
 1e0:	0f 90       	pop	r0
 1e2:	1f 90       	pop	r1
 1e4:	18 95       	reti

000001e6 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 1e6:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 1e8:	84 b5       	in	r24, 0x24	; 36
 1ea:	82 60       	ori	r24, 0x02	; 2
 1ec:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 1ee:	84 b5       	in	r24, 0x24	; 36
 1f0:	81 60       	ori	r24, 0x01	; 1
 1f2:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 1f4:	85 b5       	in	r24, 0x25	; 37
 1f6:	82 60       	ori	r24, 0x02	; 2
 1f8:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 1fa:	85 b5       	in	r24, 0x25	; 37
 1fc:	81 60       	ori	r24, 0x01	; 1
 1fe:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 200:	ee e6       	ldi	r30, 0x6E	; 110
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	80 81       	ld	r24, Z
 206:	81 60       	ori	r24, 0x01	; 1
 208:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 20a:	e1 e8       	ldi	r30, 0x81	; 129
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 210:	80 81       	ld	r24, Z
 212:	82 60       	ori	r24, 0x02	; 2
 214:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 216:	80 81       	ld	r24, Z
 218:	81 60       	ori	r24, 0x01	; 1
 21a:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 21c:	e0 e8       	ldi	r30, 0x80	; 128
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	80 81       	ld	r24, Z
 222:	81 60       	ori	r24, 0x01	; 1
 224:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 226:	e1 eb       	ldi	r30, 0xB1	; 177
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	80 81       	ld	r24, Z
 22c:	84 60       	ori	r24, 0x04	; 4
 22e:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 230:	e0 eb       	ldi	r30, 0xB0	; 176
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	80 81       	ld	r24, Z
 236:	81 60       	ori	r24, 0x01	; 1
 238:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 23a:	ea e7       	ldi	r30, 0x7A	; 122
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	80 81       	ld	r24, Z
 240:	84 60       	ori	r24, 0x04	; 4
 242:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 244:	80 81       	ld	r24, Z
 246:	82 60       	ori	r24, 0x02	; 2
 248:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 24a:	80 81       	ld	r24, Z
 24c:	81 60       	ori	r24, 0x01	; 1
 24e:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 250:	80 81       	ld	r24, Z
 252:	80 68       	ori	r24, 0x80	; 128
 254:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 256:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 25a:	08 95       	ret

0000025c <_exit>:
 25c:	f8 94       	cli

0000025e <__stop_program>:
 25e:	ff cf       	rjmp	.-2      	; 0x25e <__stop_program>
