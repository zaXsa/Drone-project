
Empty.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000005c2  00800100  000025ca  0000265e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000025ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000011b  008006c2  008006c2  00002c20  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002c20  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002c50  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006a8  00000000  00000000  00002c90  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001236f  00000000  00000000  00003338  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000027cf  00000000  00000000  000156a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003b69  00000000  00000000  00017e76  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000016dc  00000000  00000000  0001b9e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002c56  00000000  00000000  0001d0bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008564  00000000  00000000  0001fd12  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006c0  00000000  00000000  00028276  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__dtors_end>
       4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
       8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
       c:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__vector_3>
      10:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__vector_3>
      14:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__vector_3>
      18:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      1c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      20:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      24:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      28:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      2c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      30:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      34:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      38:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      3c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      40:	0c 94 31 0e 	jmp	0x1c62	; 0x1c62 <__vector_16>
      44:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      48:	0c 94 37 0c 	jmp	0x186e	; 0x186e <__vector_18>
      4c:	0c 94 69 0c 	jmp	0x18d2	; 0x18d2 <__vector_19>
      50:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      54:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      58:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      5c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      60:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      64:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
      a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
      ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
      b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <__ctors_start>:
      c2:	ad 00       	.word	0x00ad	; ????
      c4:	99 0c       	add	r9, r9

000000c6 <__ctors_end>:
      c6:	c0 00       	.word	0x00c0	; ????

000000c8 <__dtors_end>:
      c8:	11 24       	eor	r1, r1
      ca:	1f be       	out	0x3f, r1	; 63
      cc:	cf ef       	ldi	r28, 0xFF	; 255
      ce:	d8 e0       	ldi	r29, 0x08	; 8
      d0:	de bf       	out	0x3e, r29	; 62
      d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
      d4:	16 e0       	ldi	r17, 0x06	; 6
      d6:	a0 e0       	ldi	r26, 0x00	; 0
      d8:	b1 e0       	ldi	r27, 0x01	; 1
      da:	ea ec       	ldi	r30, 0xCA	; 202
      dc:	f5 e2       	ldi	r31, 0x25	; 37
      de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x10>
      e0:	05 90       	lpm	r0, Z+
      e2:	0d 92       	st	X+, r0
      e4:	a2 3c       	cpi	r26, 0xC2	; 194
      e6:	b1 07       	cpc	r27, r17
      e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0xc>

000000ea <__do_clear_bss>:
      ea:	27 e0       	ldi	r18, 0x07	; 7
      ec:	a2 ec       	ldi	r26, 0xC2	; 194
      ee:	b6 e0       	ldi	r27, 0x06	; 6
      f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
      f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
      f4:	ad 3d       	cpi	r26, 0xDD	; 221
      f6:	b2 07       	cpc	r27, r18
      f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>

000000fa <__do_global_ctors>:
      fa:	10 e0       	ldi	r17, 0x00	; 0
      fc:	c3 e6       	ldi	r28, 0x63	; 99
      fe:	d0 e0       	ldi	r29, 0x00	; 0
     100:	04 c0       	rjmp	.+8      	; 0x10a <__do_global_ctors+0x10>
     102:	21 97       	sbiw	r28, 0x01	; 1
     104:	fe 01       	movw	r30, r28
     106:	0e 94 a4 10 	call	0x2148	; 0x2148 <__tablejump2__>
     10a:	c1 36       	cpi	r28, 0x61	; 97
     10c:	d1 07       	cpc	r29, r17
     10e:	c9 f7       	brne	.-14     	; 0x102 <__do_global_ctors+0x8>
     110:	0e 94 c7 0c 	call	0x198e	; 0x198e <main>
     114:	0c 94 d8 12 	jmp	0x25b0	; 0x25b0 <__do_global_dtors>

00000118 <__bad_interrupt>:
     118:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011c <setup>:
SoftwareSerial USB(10, 11);								// Digital pin 10 on Arduino (RX) connects to TXD on the CH376S module
														// Digital pin 11 on Arduino (TX) connects to RXD on the CH376S module
														// GND on Arduino to GND on CH376S module
														// 5V on Arduino to 5V on CH376S module
//==============================================================================================================================================
void setup() {
     11c:	cf 93       	push	r28
     11e:	df 93       	push	r29
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     120:	26 e0       	ldi	r18, 0x06	; 6
     122:	40 e8       	ldi	r20, 0x80	; 128
     124:	55 e2       	ldi	r21, 0x25	; 37
     126:	60 e0       	ldi	r22, 0x00	; 0
     128:	70 e0       	ldi	r23, 0x00	; 0
     12a:	83 e3       	ldi	r24, 0x33	; 51
     12c:	97 e0       	ldi	r25, 0x07	; 7
     12e:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <_ZN14HardwareSerial5beginEmh>
  Serial.begin(9600);									// Setup serial communication with the computer (using a baud rate of 9600 on serial monitor)
  USB.begin(9600);										// Setup serial communication with the CH376S module (using the default baud rate of 9600)
     132:	40 e8       	ldi	r20, 0x80	; 128
     134:	55 e2       	ldi	r21, 0x25	; 37
     136:	60 e0       	ldi	r22, 0x00	; 0
     138:	70 e0       	ldi	r23, 0x00	; 0
     13a:	82 ec       	ldi	r24, 0xC2	; 194
     13c:	96 e0       	ldi	r25, 0x06	; 6
     13e:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_ZN14SoftwareSerial5beginEl>
  pinMode(LED,OUTPUT);									// Define digital pin 13 as an OUTPUT pin - so that we can use it with an LED
     142:	c8 e0       	ldi	r28, 0x08	; 8
     144:	d1 e0       	ldi	r29, 0x01	; 1
     146:	61 e0       	ldi	r22, 0x01	; 1
     148:	88 81       	ld	r24, Y
     14a:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <pinMode>
  digitalWrite(LED,LOW);								// Turn off the LED
     14e:	60 e0       	ldi	r22, 0x00	; 0
     150:	88 81       	ld	r24, Y
}
     152:	df 91       	pop	r29
     154:	cf 91       	pop	r28
//==============================================================================================================================================
void setup() {
  Serial.begin(9600);									// Setup serial communication with the computer (using a baud rate of 9600 on serial monitor)
  USB.begin(9600);										// Setup serial communication with the CH376S module (using the default baud rate of 9600)
  pinMode(LED,OUTPUT);									// Define digital pin 13 as an OUTPUT pin - so that we can use it with an LED
  digitalWrite(LED,LOW);								// Turn off the LED
     156:	0c 94 68 0f 	jmp	0x1ed0	; 0x1ed0 <digitalWrite>

0000015a <_GLOBAL__sub_I_computerByte>:

byte computerByte;										//used to store data coming from the computer
byte USB_Byte;											//used to store data coming from the USB stick
int LED = 13;											//the LED is connected to digital pin 13 
int timeOut = 2000;										//TimeOut is 2 seconds. This is the amount of time you wish to wait for a response from the CH376S module.
String wrData = "What is the meaning of life ?";		//We will write this data to a newly created file.
     15a:	6a e0       	ldi	r22, 0x0A	; 10
     15c:	71 e0       	ldi	r23, 0x01	; 1
     15e:	87 ee       	ldi	r24, 0xE7	; 231
     160:	96 e0       	ldi	r25, 0x06	; 6
     162:	0e 94 05 10 	call	0x200a	; 0x200a <_ZN6StringC1EPKc>
String wrData2 = "42";                                   //We will append this data to an already existing file.
     166:	68 e2       	ldi	r22, 0x28	; 40
     168:	71 e0       	ldi	r23, 0x01	; 1
     16a:	81 ee       	ldi	r24, 0xE1	; 225
     16c:	96 e0       	ldi	r25, 0x06	; 6
     16e:	0e 94 05 10 	call	0x200a	; 0x200a <_ZN6StringC1EPKc>

SoftwareSerial USB(10, 11);								// Digital pin 10 on Arduino (RX) connects to TXD on the CH376S module
     172:	20 e0       	ldi	r18, 0x00	; 0
     174:	4b e0       	ldi	r20, 0x0B	; 11
     176:	6a e0       	ldi	r22, 0x0A	; 10
     178:	82 ec       	ldi	r24, 0xC2	; 194
     17a:	96 e0       	ldi	r25, 0x06	; 6
     17c:	0c 94 cd 03 	jmp	0x79a	; 0x79a <_ZN14SoftwareSerialC1Ehhb>

00000180 <_GLOBAL__sub_D_computerByte>:
     180:	82 ec       	ldi	r24, 0xC2	; 194
     182:	96 e0       	ldi	r25, 0x06	; 6
     184:	0e 94 74 03 	call	0x6e8	; 0x6e8 <_ZN14SoftwareSerialD1Ev>
byte computerByte;										//used to store data coming from the computer
byte USB_Byte;											//used to store data coming from the USB stick
int LED = 13;											//the LED is connected to digital pin 13 
int timeOut = 2000;										//TimeOut is 2 seconds. This is the amount of time you wish to wait for a response from the CH376S module.
String wrData = "What is the meaning of life ?";		//We will write this data to a newly created file.
String wrData2 = "42";                                   //We will append this data to an already existing file.
     188:	81 ee       	ldi	r24, 0xE1	; 225
     18a:	96 e0       	ldi	r25, 0x06	; 6
     18c:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <_ZN6StringD1Ev>

byte computerByte;										//used to store data coming from the computer
byte USB_Byte;											//used to store data coming from the USB stick
int LED = 13;											//the LED is connected to digital pin 13 
int timeOut = 2000;										//TimeOut is 2 seconds. This is the amount of time you wish to wait for a response from the CH376S module.
String wrData = "What is the meaning of life ?";		//We will write this data to a newly created file.
     190:	87 ee       	ldi	r24, 0xE7	; 231
     192:	96 e0       	ldi	r25, 0x06	; 6
     194:	0c 94 97 0f 	jmp	0x1f2e	; 0x1f2e <_ZN6StringD1Ev>

00000198 <loop>:
  pinMode(LED,OUTPUT);									// Define digital pin 13 as an OUTPUT pin - so that we can use it with an LED
  digitalWrite(LED,LOW);								// Turn off the LED
}

//================================================================================================================================================
void loop() {
     198:	cf 93       	push	r28
     19a:	df 93       	push	r29
     19c:	cd b7       	in	r28, 0x3d	; 61
     19e:	de b7       	in	r29, 0x3e	; 62
     1a0:	2c 97       	sbiw	r28, 0x0c	; 12
     1a2:	0f b6       	in	r0, 0x3f	; 63
     1a4:	f8 94       	cli
     1a6:	de bf       	out	0x3e, r29	; 62
     1a8:	0f be       	out	0x3f, r0	; 63
     1aa:	cd bf       	out	0x3d, r28	; 61
  if(Serial.available()){
     1ac:	83 e3       	ldi	r24, 0x33	; 51
     1ae:	97 e0       	ldi	r25, 0x07	; 7
     1b0:	0e 94 0c 0b 	call	0x1618	; 0x1618 <_ZN14HardwareSerial9availableEv>
     1b4:	89 2b       	or	r24, r25
     1b6:	09 f4       	brne	.+2      	; 0x1ba <loop+0x22>
     1b8:	1c c1       	rjmp	.+568    	; 0x3f2 <loop+0x25a>
    computerByte = Serial.read();						//read any incoming bytes from the Serial monitor, and store this byte in the variable called computerByte
     1ba:	83 e3       	ldi	r24, 0x33	; 51
     1bc:	97 e0       	ldi	r25, 0x07	; 7
     1be:	0e 94 26 0b 	call	0x164c	; 0x164c <_ZN14HardwareSerial4readEv>
     1c2:	80 93 ee 06 	sts	0x06EE, r24	; 0x8006ee <computerByte>
    if(computerByte==49){               //1				//If you send the number 1 from the serial monitor, the arduino will read it as digital number 49. Google "ascii table" for more info.
     1c6:	81 33       	cpi	r24, 0x31	; 49
     1c8:	89 f4       	brne	.+34     	; 0x1ec <loop+0x54>
	    printCommandHeader("COMMAND1: CHECK CONNECTION");
     1ca:	6b e2       	ldi	r22, 0x2B	; 43
     1cc:	71 e0       	ldi	r23, 0x01	; 1
     1ce:	ce 01       	movw	r24, r28
     1d0:	01 96       	adiw	r24, 0x01	; 1
     1d2:	0e 94 05 10 	call	0x200a	; 0x200a <_ZN6StringC1EPKc>
     1d6:	ce 01       	movw	r24, r28
     1d8:	01 96       	adiw	r24, 0x01	; 1
     1da:	0e 94 86 04 	call	0x90c	; 0x90c <_Z18printCommandHeader6String>
     1de:	ce 01       	movw	r24, r28
     1e0:	01 96       	adiw	r24, 0x01	; 1
     1e2:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <_ZN6StringD1Ev>
	    checkConnection(0x01);							// Check for successful connection and communication with the CH376S module.
     1e6:	81 e0       	ldi	r24, 0x01	; 1
     1e8:	0e 94 2c 06 	call	0xc58	; 0xc58 <_Z15checkConnectionh>
    }
    if(computerByte==50){               //2
     1ec:	80 91 ee 06 	lds	r24, 0x06EE	; 0x8006ee <computerByte>
     1f0:	82 33       	cpi	r24, 0x32	; 50
     1f2:	89 f4       	brne	.+34     	; 0x216 <loop+0x7e>
	    printCommandHeader("COMMAND2: set_USB_Mode");
     1f4:	66 e4       	ldi	r22, 0x46	; 70
     1f6:	71 e0       	ldi	r23, 0x01	; 1
     1f8:	ce 01       	movw	r24, r28
     1fa:	01 96       	adiw	r24, 0x01	; 1
     1fc:	0e 94 05 10 	call	0x200a	; 0x200a <_ZN6StringC1EPKc>
     200:	ce 01       	movw	r24, r28
     202:	01 96       	adiw	r24, 0x01	; 1
     204:	0e 94 86 04 	call	0x90c	; 0x90c <_Z18printCommandHeader6String>
     208:	ce 01       	movw	r24, r28
     20a:	01 96       	adiw	r24, 0x01	; 1
     20c:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <_ZN6StringD1Ev>
	    set_USB_Mode(0x06);								// Code used to enable read/write communication and monitoring of the USB stick
     210:	86 e0       	ldi	r24, 0x06	; 6
     212:	0e 94 3a 05 	call	0xa74	; 0xa74 <_Z12set_USB_Modeh>
    }
    if(computerByte==51){               //3
     216:	80 91 ee 06 	lds	r24, 0x06EE	; 0x8006ee <computerByte>
     21a:	83 33       	cpi	r24, 0x33	; 51
     21c:	81 f4       	brne	.+32     	; 0x23e <loop+0xa6>
	    printCommandHeader("COMMAND3: resetALL");
     21e:	6d e5       	ldi	r22, 0x5D	; 93
     220:	71 e0       	ldi	r23, 0x01	; 1
     222:	ce 01       	movw	r24, r28
     224:	01 96       	adiw	r24, 0x01	; 1
     226:	0e 94 05 10 	call	0x200a	; 0x200a <_ZN6StringC1EPKc>
     22a:	ce 01       	movw	r24, r28
     22c:	01 96       	adiw	r24, 0x01	; 1
     22e:	0e 94 86 04 	call	0x90c	; 0x90c <_Z18printCommandHeader6String>
     232:	ce 01       	movw	r24, r28
     234:	01 96       	adiw	r24, 0x01	; 1
     236:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <_ZN6StringD1Ev>
	    resetALL();// Reset the USB device
     23a:	0e 94 b6 04 	call	0x96c	; 0x96c <_Z8resetALLv>
    }
    if(computerByte==52){               //4
     23e:	80 91 ee 06 	lds	r24, 0x06EE	; 0x8006ee <computerByte>
     242:	84 33       	cpi	r24, 0x34	; 52
     244:	49 f5       	brne	.+82     	; 0x298 <loop+0x100>
      printCommandHeader("COMMAND4: Create and Write to File : TEST4.TXT");
     246:	60 e7       	ldi	r22, 0x70	; 112
     248:	71 e0       	ldi	r23, 0x01	; 1
     24a:	ce 01       	movw	r24, r28
     24c:	01 96       	adiw	r24, 0x01	; 1
     24e:	0e 94 05 10 	call	0x200a	; 0x200a <_ZN6StringC1EPKc>
     252:	ce 01       	movw	r24, r28
     254:	01 96       	adiw	r24, 0x01	; 1
     256:	0e 94 86 04 	call	0x90c	; 0x90c <_Z18printCommandHeader6String>
     25a:	ce 01       	movw	r24, r28
     25c:	01 96       	adiw	r24, 0x01	; 1
     25e:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <_ZN6StringD1Ev>
      writeFile("TEST4.TXT", wrData);					// Create a file called TEST4.TXT and then Write the contents of wrData to this file
     262:	67 ee       	ldi	r22, 0xE7	; 231
     264:	76 e0       	ldi	r23, 0x06	; 6
     266:	ce 01       	movw	r24, r28
     268:	01 96       	adiw	r24, 0x01	; 1
     26a:	0e 94 31 10 	call	0x2062	; 0x2062 <_ZN6StringC1ERKS_>
     26e:	65 e9       	ldi	r22, 0x95	; 149
     270:	71 e0       	ldi	r23, 0x01	; 1
     272:	ce 01       	movw	r24, r28
     274:	07 96       	adiw	r24, 0x07	; 7
     276:	0e 94 05 10 	call	0x200a	; 0x200a <_ZN6StringC1EPKc>
     27a:	be 01       	movw	r22, r28
     27c:	6f 5f       	subi	r22, 0xFF	; 255
     27e:	7f 4f       	sbci	r23, 0xFF	; 255
     280:	ce 01       	movw	r24, r28
     282:	07 96       	adiw	r24, 0x07	; 7
     284:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <_Z9writeFile6StringS_>
     288:	ce 01       	movw	r24, r28
     28a:	07 96       	adiw	r24, 0x07	; 7
     28c:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <_ZN6StringD1Ev>
     290:	ce 01       	movw	r24, r28
     292:	01 96       	adiw	r24, 0x01	; 1
     294:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <_ZN6StringD1Ev>
    }
    if(computerByte==53){				//5
     298:	80 91 ee 06 	lds	r24, 0x06EE	; 0x8006ee <computerByte>
     29c:	85 33       	cpi	r24, 0x35	; 53
     29e:	e1 f4       	brne	.+56     	; 0x2d8 <loop+0x140>
      printCommandHeader("COMMAND5: Read File: TEST4.TXT");
     2a0:	6f e9       	ldi	r22, 0x9F	; 159
     2a2:	71 e0       	ldi	r23, 0x01	; 1
     2a4:	ce 01       	movw	r24, r28
     2a6:	01 96       	adiw	r24, 0x01	; 1
     2a8:	0e 94 05 10 	call	0x200a	; 0x200a <_ZN6StringC1EPKc>
     2ac:	ce 01       	movw	r24, r28
     2ae:	01 96       	adiw	r24, 0x01	; 1
     2b0:	0e 94 86 04 	call	0x90c	; 0x90c <_Z18printCommandHeader6String>
     2b4:	ce 01       	movw	r24, r28
     2b6:	01 96       	adiw	r24, 0x01	; 1
     2b8:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <_ZN6StringD1Ev>
      readFile("TEST4.TXT");							// Read the contents of this file on the USB disk, and display contents in the Serial Monitor
     2bc:	65 e9       	ldi	r22, 0x95	; 149
     2be:	71 e0       	ldi	r23, 0x01	; 1
     2c0:	ce 01       	movw	r24, r28
     2c2:	01 96       	adiw	r24, 0x01	; 1
     2c4:	0e 94 05 10 	call	0x200a	; 0x200a <_ZN6StringC1EPKc>
     2c8:	ce 01       	movw	r24, r28
     2ca:	01 96       	adiw	r24, 0x01	; 1
     2cc:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <_Z8readFile6String>
     2d0:	ce 01       	movw	r24, r28
     2d2:	01 96       	adiw	r24, 0x01	; 1
     2d4:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <_ZN6StringD1Ev>
    }
    if(computerByte==54){               //6
     2d8:	80 91 ee 06 	lds	r24, 0x06EE	; 0x8006ee <computerByte>
     2dc:	86 33       	cpi	r24, 0x36	; 54
     2de:	49 f5       	brne	.+82     	; 0x332 <loop+0x19a>
      printCommandHeader("COMMAND6: Append data to file: TEST4.TXT");
     2e0:	6e eb       	ldi	r22, 0xBE	; 190
     2e2:	71 e0       	ldi	r23, 0x01	; 1
     2e4:	ce 01       	movw	r24, r28
     2e6:	01 96       	adiw	r24, 0x01	; 1
     2e8:	0e 94 05 10 	call	0x200a	; 0x200a <_ZN6StringC1EPKc>
     2ec:	ce 01       	movw	r24, r28
     2ee:	01 96       	adiw	r24, 0x01	; 1
     2f0:	0e 94 86 04 	call	0x90c	; 0x90c <_Z18printCommandHeader6String>
     2f4:	ce 01       	movw	r24, r28
     2f6:	01 96       	adiw	r24, 0x01	; 1
     2f8:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <_ZN6StringD1Ev>
      appendFile("TEST4.TXT", wrData2);					// Append data to the end of the file.
     2fc:	61 ee       	ldi	r22, 0xE1	; 225
     2fe:	76 e0       	ldi	r23, 0x06	; 6
     300:	ce 01       	movw	r24, r28
     302:	01 96       	adiw	r24, 0x01	; 1
     304:	0e 94 31 10 	call	0x2062	; 0x2062 <_ZN6StringC1ERKS_>
     308:	65 e9       	ldi	r22, 0x95	; 149
     30a:	71 e0       	ldi	r23, 0x01	; 1
     30c:	ce 01       	movw	r24, r28
     30e:	07 96       	adiw	r24, 0x07	; 7
     310:	0e 94 05 10 	call	0x200a	; 0x200a <_ZN6StringC1EPKc>
     314:	be 01       	movw	r22, r28
     316:	6f 5f       	subi	r22, 0xFF	; 255
     318:	7f 4f       	sbci	r23, 0xFF	; 255
     31a:	ce 01       	movw	r24, r28
     31c:	07 96       	adiw	r24, 0x07	; 7
     31e:	0e 94 2d 0a 	call	0x145a	; 0x145a <_Z10appendFile6StringS_>
     322:	ce 01       	movw	r24, r28
     324:	07 96       	adiw	r24, 0x07	; 7
     326:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <_ZN6StringD1Ev>
     32a:	ce 01       	movw	r24, r28
     32c:	01 96       	adiw	r24, 0x01	; 1
     32e:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <_ZN6StringD1Ev>
    }
    if(computerByte==55){               //7
     332:	80 91 ee 06 	lds	r24, 0x06EE	; 0x8006ee <computerByte>
     336:	87 33       	cpi	r24, 0x37	; 55
     338:	e1 f4       	brne	.+56     	; 0x372 <loop+0x1da>
      printCommandHeader("COMMAND7: Delete File: TEST4.TXT");
     33a:	67 ee       	ldi	r22, 0xE7	; 231
     33c:	71 e0       	ldi	r23, 0x01	; 1
     33e:	ce 01       	movw	r24, r28
     340:	01 96       	adiw	r24, 0x01	; 1
     342:	0e 94 05 10 	call	0x200a	; 0x200a <_ZN6StringC1EPKc>
     346:	ce 01       	movw	r24, r28
     348:	01 96       	adiw	r24, 0x01	; 1
     34a:	0e 94 86 04 	call	0x90c	; 0x90c <_Z18printCommandHeader6String>
     34e:	ce 01       	movw	r24, r28
     350:	01 96       	adiw	r24, 0x01	; 1
     352:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <_ZN6StringD1Ev>
      fileDelete("TEST4.TXT");							// Delete the file named TEST4.TXT
     356:	65 e9       	ldi	r22, 0x95	; 149
     358:	71 e0       	ldi	r23, 0x01	; 1
     35a:	ce 01       	movw	r24, r28
     35c:	01 96       	adiw	r24, 0x01	; 1
     35e:	0e 94 05 10 	call	0x200a	; 0x200a <_ZN6StringC1EPKc>
     362:	ce 01       	movw	r24, r28
     364:	01 96       	adiw	r24, 0x01	; 1
     366:	0e 94 d7 07 	call	0xfae	; 0xfae <_Z10fileDelete6String>
     36a:	ce 01       	movw	r24, r28
     36c:	01 96       	adiw	r24, 0x01	; 1
     36e:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <_ZN6StringD1Ev>
    }
    if(computerByte==56){               //8
     372:	80 91 ee 06 	lds	r24, 0x06EE	; 0x8006ee <computerByte>
     376:	88 33       	cpi	r24, 0x38	; 56
     378:	e1 f4       	brne	.+56     	; 0x3b2 <loop+0x21a>
      printCommandHeader("COMMAND8: Read File: TEST2.TXT");
     37a:	68 e0       	ldi	r22, 0x08	; 8
     37c:	72 e0       	ldi	r23, 0x02	; 2
     37e:	ce 01       	movw	r24, r28
     380:	01 96       	adiw	r24, 0x01	; 1
     382:	0e 94 05 10 	call	0x200a	; 0x200a <_ZN6StringC1EPKc>
     386:	ce 01       	movw	r24, r28
     388:	01 96       	adiw	r24, 0x01	; 1
     38a:	0e 94 86 04 	call	0x90c	; 0x90c <_Z18printCommandHeader6String>
     38e:	ce 01       	movw	r24, r28
     390:	01 96       	adiw	r24, 0x01	; 1
     392:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <_ZN6StringD1Ev>
      readFile("TEST2.TXT");							// Read the contents of the TEST2.TXT file on the USB disk, and display contents in the Serial Monitor
     396:	6d e1       	ldi	r22, 0x1D	; 29
     398:	72 e0       	ldi	r23, 0x02	; 2
     39a:	ce 01       	movw	r24, r28
     39c:	01 96       	adiw	r24, 0x01	; 1
     39e:	0e 94 05 10 	call	0x200a	; 0x200a <_ZN6StringC1EPKc>
     3a2:	ce 01       	movw	r24, r28
     3a4:	01 96       	adiw	r24, 0x01	; 1
     3a6:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <_Z8readFile6String>
     3aa:	ce 01       	movw	r24, r28
     3ac:	01 96       	adiw	r24, 0x01	; 1
     3ae:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <_ZN6StringD1Ev>
    }
    if(computerByte==57){               //9
     3b2:	80 91 ee 06 	lds	r24, 0x06EE	; 0x8006ee <computerByte>
     3b6:	89 33       	cpi	r24, 0x39	; 57
     3b8:	e1 f4       	brne	.+56     	; 0x3f2 <loop+0x25a>
      printCommandHeader("COMMAND9: Read File: TEST3.TXT");
     3ba:	67 e2       	ldi	r22, 0x27	; 39
     3bc:	72 e0       	ldi	r23, 0x02	; 2
     3be:	ce 01       	movw	r24, r28
     3c0:	01 96       	adiw	r24, 0x01	; 1
     3c2:	0e 94 05 10 	call	0x200a	; 0x200a <_ZN6StringC1EPKc>
     3c6:	ce 01       	movw	r24, r28
     3c8:	01 96       	adiw	r24, 0x01	; 1
     3ca:	0e 94 86 04 	call	0x90c	; 0x90c <_Z18printCommandHeader6String>
     3ce:	ce 01       	movw	r24, r28
     3d0:	01 96       	adiw	r24, 0x01	; 1
     3d2:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <_ZN6StringD1Ev>
      readFile("TEST3.TXT");							// Read the contents of the TEST3.TXT file on the USB disk, and display contents in the Serial Monitor
     3d6:	6c e3       	ldi	r22, 0x3C	; 60
     3d8:	72 e0       	ldi	r23, 0x02	; 2
     3da:	ce 01       	movw	r24, r28
     3dc:	01 96       	adiw	r24, 0x01	; 1
     3de:	0e 94 05 10 	call	0x200a	; 0x200a <_ZN6StringC1EPKc>
     3e2:	ce 01       	movw	r24, r28
     3e4:	01 96       	adiw	r24, 0x01	; 1
     3e6:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <_Z8readFile6String>
     3ea:	ce 01       	movw	r24, r28
     3ec:	01 96       	adiw	r24, 0x01	; 1
     3ee:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <_ZN6StringD1Ev>
    }
  }
  
  if(USB.available()){									// This is here to capture any unexpected data transmitted by the CH376S module
     3f2:	82 ec       	ldi	r24, 0xC2	; 194
     3f4:	96 e0       	ldi	r25, 0x06	; 6
     3f6:	0e 94 a3 02 	call	0x546	; 0x546 <_ZN14SoftwareSerial9availableEv>
     3fa:	89 2b       	or	r24, r25
     3fc:	89 f0       	breq	.+34     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
    Serial.print("CH376S has just sent this code:");
     3fe:	66 e4       	ldi	r22, 0x46	; 70
     400:	72 e0       	ldi	r23, 0x02	; 2
     402:	83 e3       	ldi	r24, 0x33	; 51
     404:	97 e0       	ldi	r25, 0x07	; 7
     406:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <_ZN5Print5printEPKc>
    Serial.println(USB.read(), HEX);
     40a:	82 ec       	ldi	r24, 0xC2	; 194
     40c:	96 e0       	ldi	r25, 0x06	; 6
     40e:	0e 94 19 02 	call	0x432	; 0x432 <_ZN14SoftwareSerial4readEv>
     412:	40 e1       	ldi	r20, 0x10	; 16
     414:	50 e0       	ldi	r21, 0x00	; 0
     416:	bc 01       	movw	r22, r24
     418:	83 e3       	ldi	r24, 0x33	; 51
     41a:	97 e0       	ldi	r25, 0x07	; 7
     41c:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <_ZN5Print7printlnEii>
  }
}
     420:	2c 96       	adiw	r28, 0x0c	; 12
     422:	0f b6       	in	r0, 0x3f	; 63
     424:	f8 94       	cli
     426:	de bf       	out	0x3e, r29	; 62
     428:	0f be       	out	0x3f, r0	; 63
     42a:	cd bf       	out	0x3d, r28	; 61
     42c:	df 91       	pop	r29
     42e:	cf 91       	pop	r28
     430:	08 95       	ret

00000432 <_ZN14SoftwareSerial4readEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
     432:	20 91 31 07 	lds	r18, 0x0731	; 0x800731 <_ZN14SoftwareSerial13active_objectE>
     436:	30 91 32 07 	lds	r19, 0x0732	; 0x800732 <_ZN14SoftwareSerial13active_objectE+0x1>
     43a:	28 17       	cp	r18, r24
     43c:	39 07       	cpc	r19, r25
     43e:	b9 f4       	brne	.+46     	; 0x46e <_ZN14SoftwareSerial4readEv+0x3c>
     440:	90 91 ef 06 	lds	r25, 0x06EF	; 0x8006ef <_ZN14SoftwareSerial20_receive_buffer_headE>
     444:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <_ZN14SoftwareSerial20_receive_buffer_tailE>
     448:	98 17       	cp	r25, r24
     44a:	89 f0       	breq	.+34     	; 0x46e <_ZN14SoftwareSerial4readEv+0x3c>
     44c:	e0 91 ef 06 	lds	r30, 0x06EF	; 0x8006ef <_ZN14SoftwareSerial20_receive_buffer_headE>
     450:	f0 e0       	ldi	r31, 0x00	; 0
     452:	ef 50       	subi	r30, 0x0F	; 15
     454:	f9 4f       	sbci	r31, 0xF9	; 249
     456:	80 81       	ld	r24, Z
     458:	20 91 ef 06 	lds	r18, 0x06EF	; 0x8006ef <_ZN14SoftwareSerial20_receive_buffer_headE>
     45c:	30 e0       	ldi	r19, 0x00	; 0
     45e:	2f 5f       	subi	r18, 0xFF	; 255
     460:	3f 4f       	sbci	r19, 0xFF	; 255
     462:	2f 73       	andi	r18, 0x3F	; 63
     464:	33 27       	eor	r19, r19
     466:	20 93 ef 06 	sts	0x06EF, r18	; 0x8006ef <_ZN14SoftwareSerial20_receive_buffer_headE>
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	08 95       	ret
     46e:	8f ef       	ldi	r24, 0xFF	; 255
     470:	9f ef       	ldi	r25, 0xFF	; 255
     472:	08 95       	ret

00000474 <_ZN14SoftwareSerial5writeEh>:
     474:	1f 93       	push	r17
     476:	cf 93       	push	r28
     478:	df 93       	push	r29
     47a:	dc 01       	movw	r26, r24
     47c:	5c 96       	adiw	r26, 0x1c	; 28
     47e:	8d 91       	ld	r24, X+
     480:	9c 91       	ld	r25, X
     482:	5d 97       	sbiw	r26, 0x1d	; 29
     484:	00 97       	sbiw	r24, 0x00	; 0
     486:	39 f4       	brne	.+14     	; 0x496 <_ZN14SoftwareSerial5writeEh+0x22>
     488:	21 e0       	ldi	r18, 0x01	; 1
     48a:	30 e0       	ldi	r19, 0x00	; 0
     48c:	13 96       	adiw	r26, 0x03	; 3
     48e:	3c 93       	st	X, r19
     490:	2e 93       	st	-X, r18
     492:	12 97       	sbiw	r26, 0x02	; 2
     494:	3b c0       	rjmp	.+118    	; 0x50c <_ZN14SoftwareSerial5writeEh+0x98>
     496:	51 96       	adiw	r26, 0x11	; 17
     498:	ed 91       	ld	r30, X+
     49a:	fc 91       	ld	r31, X
     49c:	52 97       	sbiw	r26, 0x12	; 18
     49e:	50 96       	adiw	r26, 0x10	; 16
     4a0:	2c 91       	ld	r18, X
     4a2:	50 97       	sbiw	r26, 0x10	; 16
     4a4:	32 2f       	mov	r19, r18
     4a6:	30 95       	com	r19
     4a8:	1f b7       	in	r17, 0x3f	; 63
     4aa:	5e 96       	adiw	r26, 0x1e	; 30
     4ac:	4c 91       	ld	r20, X
     4ae:	5e 97       	sbiw	r26, 0x1e	; 30
     4b0:	74 2f       	mov	r23, r20
     4b2:	72 70       	andi	r23, 0x02	; 2
     4b4:	41 fd       	sbrc	r20, 1
     4b6:	60 95       	com	r22
     4b8:	f8 94       	cli
     4ba:	40 81       	ld	r20, Z
     4bc:	77 23       	and	r23, r23
     4be:	11 f0       	breq	.+4      	; 0x4c4 <_ZN14SoftwareSerial5writeEh+0x50>
     4c0:	42 2b       	or	r20, r18
     4c2:	01 c0       	rjmp	.+2      	; 0x4c6 <_ZN14SoftwareSerial5writeEh+0x52>
     4c4:	43 23       	and	r20, r19
     4c6:	40 83       	st	Z, r20
     4c8:	ec 01       	movw	r28, r24
     4ca:	21 97       	sbiw	r28, 0x01	; 1
     4cc:	f1 f7       	brne	.-4      	; 0x4ca <_ZN14SoftwareSerial5writeEh+0x56>
     4ce:	48 e0       	ldi	r20, 0x08	; 8
     4d0:	50 81       	ld	r21, Z
     4d2:	60 ff       	sbrs	r22, 0
     4d4:	02 c0       	rjmp	.+4      	; 0x4da <_ZN14SoftwareSerial5writeEh+0x66>
     4d6:	52 2b       	or	r21, r18
     4d8:	01 c0       	rjmp	.+2      	; 0x4dc <_ZN14SoftwareSerial5writeEh+0x68>
     4da:	53 23       	and	r21, r19
     4dc:	50 83       	st	Z, r21
     4de:	ec 01       	movw	r28, r24
     4e0:	21 97       	sbiw	r28, 0x01	; 1
     4e2:	f1 f7       	brne	.-4      	; 0x4e0 <_ZN14SoftwareSerial5writeEh+0x6c>
     4e4:	66 95       	lsr	r22
     4e6:	41 50       	subi	r20, 0x01	; 1
     4e8:	99 f7       	brne	.-26     	; 0x4d0 <_ZN14SoftwareSerial5writeEh+0x5c>
     4ea:	80 81       	ld	r24, Z
     4ec:	77 23       	and	r23, r23
     4ee:	19 f0       	breq	.+6      	; 0x4f6 <_ZN14SoftwareSerial5writeEh+0x82>
     4f0:	83 23       	and	r24, r19
     4f2:	80 83       	st	Z, r24
     4f4:	02 c0       	rjmp	.+4      	; 0x4fa <_ZN14SoftwareSerial5writeEh+0x86>
     4f6:	28 2b       	or	r18, r24
     4f8:	20 83       	st	Z, r18
     4fa:	1f bf       	out	0x3f, r17	; 63
     4fc:	5c 96       	adiw	r26, 0x1c	; 28
     4fe:	8d 91       	ld	r24, X+
     500:	9c 91       	ld	r25, X
     502:	5d 97       	sbiw	r26, 0x1d	; 29
     504:	01 97       	sbiw	r24, 0x01	; 1
     506:	f1 f7       	brne	.-4      	; 0x504 <_ZN14SoftwareSerial5writeEh+0x90>
     508:	81 e0       	ldi	r24, 0x01	; 1
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	df 91       	pop	r29
     50e:	cf 91       	pop	r28
     510:	1f 91       	pop	r17
     512:	08 95       	ret

00000514 <_ZN14SoftwareSerial5flushEv>:
     514:	08 95       	ret

00000516 <_ZN14SoftwareSerial4peekEv>:
     516:	20 91 31 07 	lds	r18, 0x0731	; 0x800731 <_ZN14SoftwareSerial13active_objectE>
     51a:	30 91 32 07 	lds	r19, 0x0732	; 0x800732 <_ZN14SoftwareSerial13active_objectE+0x1>
     51e:	28 17       	cp	r18, r24
     520:	39 07       	cpc	r19, r25
     522:	71 f4       	brne	.+28     	; 0x540 <_ZN14SoftwareSerial4peekEv+0x2a>
     524:	90 91 ef 06 	lds	r25, 0x06EF	; 0x8006ef <_ZN14SoftwareSerial20_receive_buffer_headE>
     528:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <_ZN14SoftwareSerial20_receive_buffer_tailE>
     52c:	98 17       	cp	r25, r24
     52e:	41 f0       	breq	.+16     	; 0x540 <_ZN14SoftwareSerial4peekEv+0x2a>
     530:	e0 91 ef 06 	lds	r30, 0x06EF	; 0x8006ef <_ZN14SoftwareSerial20_receive_buffer_headE>
     534:	f0 e0       	ldi	r31, 0x00	; 0
     536:	ef 50       	subi	r30, 0x0F	; 15
     538:	f9 4f       	sbci	r31, 0xF9	; 249
     53a:	80 81       	ld	r24, Z
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	08 95       	ret
     540:	8f ef       	ldi	r24, 0xFF	; 255
     542:	9f ef       	ldi	r25, 0xFF	; 255
     544:	08 95       	ret

00000546 <_ZN14SoftwareSerial9availableEv>:
     546:	20 91 31 07 	lds	r18, 0x0731	; 0x800731 <_ZN14SoftwareSerial13active_objectE>
     54a:	30 91 32 07 	lds	r19, 0x0732	; 0x800732 <_ZN14SoftwareSerial13active_objectE+0x1>
     54e:	28 17       	cp	r18, r24
     550:	39 07       	cpc	r19, r25
     552:	71 f4       	brne	.+28     	; 0x570 <_ZN14SoftwareSerial9availableEv+0x2a>
     554:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <_ZN14SoftwareSerial20_receive_buffer_tailE>
     558:	20 91 ef 06 	lds	r18, 0x06EF	; 0x8006ef <_ZN14SoftwareSerial20_receive_buffer_headE>
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	80 5c       	subi	r24, 0xC0	; 192
     560:	9f 4f       	sbci	r25, 0xFF	; 255
     562:	82 1b       	sub	r24, r18
     564:	91 09       	sbc	r25, r1
     566:	60 e4       	ldi	r22, 0x40	; 64
     568:	70 e0       	ldi	r23, 0x00	; 0
     56a:	0e 94 3b 10 	call	0x2076	; 0x2076 <__divmodhi4>
     56e:	08 95       	ret
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	08 95       	ret

00000576 <_ZN14SoftwareSerial13stopListeningEv>:
     576:	e0 91 31 07 	lds	r30, 0x0731	; 0x800731 <_ZN14SoftwareSerial13active_objectE>
     57a:	f0 91 32 07 	lds	r31, 0x0732	; 0x800732 <_ZN14SoftwareSerial13active_objectE+0x1>
     57e:	e8 17       	cp	r30, r24
     580:	f9 07       	cpc	r31, r25
     582:	69 f4       	brne	.+26     	; 0x59e <_ZN14SoftwareSerial13stopListeningEv+0x28>
     584:	a3 89       	ldd	r26, Z+19	; 0x13
     586:	b4 89       	ldd	r27, Z+20	; 0x14
     588:	9c 91       	ld	r25, X
     58a:	85 89       	ldd	r24, Z+21	; 0x15
     58c:	80 95       	com	r24
     58e:	89 23       	and	r24, r25
     590:	8c 93       	st	X, r24
     592:	10 92 32 07 	sts	0x0732, r1	; 0x800732 <_ZN14SoftwareSerial13active_objectE+0x1>
     596:	10 92 31 07 	sts	0x0731, r1	; 0x800731 <_ZN14SoftwareSerial13active_objectE>
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	08 95       	ret
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	08 95       	ret

000005a2 <_ZN14SoftwareSerial6listenEv>:
     5a2:	cf 93       	push	r28
     5a4:	df 93       	push	r29
     5a6:	ec 01       	movw	r28, r24
     5a8:	8a 8d       	ldd	r24, Y+26	; 0x1a
     5aa:	9b 8d       	ldd	r25, Y+27	; 0x1b
     5ac:	89 2b       	or	r24, r25
     5ae:	f1 f0       	breq	.+60     	; 0x5ec <_ZN14SoftwareSerial6listenEv+0x4a>
     5b0:	80 91 31 07 	lds	r24, 0x0731	; 0x800731 <_ZN14SoftwareSerial13active_objectE>
     5b4:	90 91 32 07 	lds	r25, 0x0732	; 0x800732 <_ZN14SoftwareSerial13active_objectE+0x1>
     5b8:	c8 17       	cp	r28, r24
     5ba:	d9 07       	cpc	r29, r25
     5bc:	b9 f0       	breq	.+46     	; 0x5ec <_ZN14SoftwareSerial6listenEv+0x4a>
     5be:	00 97       	sbiw	r24, 0x00	; 0
     5c0:	11 f0       	breq	.+4      	; 0x5c6 <_ZN14SoftwareSerial6listenEv+0x24>
     5c2:	0e 94 bb 02 	call	0x576	; 0x576 <_ZN14SoftwareSerial13stopListeningEv>
     5c6:	8e 8d       	ldd	r24, Y+30	; 0x1e
     5c8:	8e 7f       	andi	r24, 0xFE	; 254
     5ca:	8e 8f       	std	Y+30, r24	; 0x1e
     5cc:	10 92 f0 06 	sts	0x06F0, r1	; 0x8006f0 <_ZN14SoftwareSerial20_receive_buffer_tailE>
     5d0:	10 92 ef 06 	sts	0x06EF, r1	; 0x8006ef <_ZN14SoftwareSerial20_receive_buffer_headE>
     5d4:	d0 93 32 07 	sts	0x0732, r29	; 0x800732 <_ZN14SoftwareSerial13active_objectE+0x1>
     5d8:	c0 93 31 07 	sts	0x0731, r28	; 0x800731 <_ZN14SoftwareSerial13active_objectE>
     5dc:	eb 89       	ldd	r30, Y+19	; 0x13
     5de:	fc 89       	ldd	r31, Y+20	; 0x14
     5e0:	90 81       	ld	r25, Z
     5e2:	8d 89       	ldd	r24, Y+21	; 0x15
     5e4:	89 2b       	or	r24, r25
     5e6:	80 83       	st	Z, r24
     5e8:	81 e0       	ldi	r24, 0x01	; 1
     5ea:	01 c0       	rjmp	.+2      	; 0x5ee <_ZN14SoftwareSerial6listenEv+0x4c>
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	df 91       	pop	r29
     5f0:	cf 91       	pop	r28
     5f2:	08 95       	ret

000005f4 <__vector_3>:
     5f4:	1f 92       	push	r1
     5f6:	0f 92       	push	r0
     5f8:	0f b6       	in	r0, 0x3f	; 63
     5fa:	0f 92       	push	r0
     5fc:	11 24       	eor	r1, r1
     5fe:	2f 93       	push	r18
     600:	3f 93       	push	r19
     602:	4f 93       	push	r20
     604:	5f 93       	push	r21
     606:	6f 93       	push	r22
     608:	7f 93       	push	r23
     60a:	8f 93       	push	r24
     60c:	9f 93       	push	r25
     60e:	af 93       	push	r26
     610:	bf 93       	push	r27
     612:	ef 93       	push	r30
     614:	ff 93       	push	r31
     616:	e0 91 31 07 	lds	r30, 0x0731	; 0x800731 <_ZN14SoftwareSerial13active_objectE>
     61a:	f0 91 32 07 	lds	r31, 0x0732	; 0x800732 <_ZN14SoftwareSerial13active_objectE+0x1>
     61e:	30 97       	sbiw	r30, 0x00	; 0
     620:	09 f4       	brne	.+2      	; 0x624 <__vector_3+0x30>
     622:	51 c0       	rjmp	.+162    	; 0x6c6 <__vector_3+0xd2>
     624:	96 8d       	ldd	r25, Z+30	; 0x1e
     626:	a6 85       	ldd	r26, Z+14	; 0x0e
     628:	b7 85       	ldd	r27, Z+15	; 0x0f
     62a:	85 85       	ldd	r24, Z+13	; 0x0d
     62c:	91 ff       	sbrs	r25, 1
     62e:	04 c0       	rjmp	.+8      	; 0x638 <__vector_3+0x44>
     630:	9c 91       	ld	r25, X
     632:	89 23       	and	r24, r25
     634:	29 f4       	brne	.+10     	; 0x640 <__vector_3+0x4c>
     636:	47 c0       	rjmp	.+142    	; 0x6c6 <__vector_3+0xd2>
     638:	9c 91       	ld	r25, X
     63a:	89 23       	and	r24, r25
     63c:	09 f0       	breq	.+2      	; 0x640 <__vector_3+0x4c>
     63e:	43 c0       	rjmp	.+134    	; 0x6c6 <__vector_3+0xd2>
     640:	a3 89       	ldd	r26, Z+19	; 0x13
     642:	b4 89       	ldd	r27, Z+20	; 0x14
     644:	9c 91       	ld	r25, X
     646:	85 89       	ldd	r24, Z+21	; 0x15
     648:	80 95       	com	r24
     64a:	89 23       	and	r24, r25
     64c:	8c 93       	st	X, r24
     64e:	86 89       	ldd	r24, Z+22	; 0x16
     650:	97 89       	ldd	r25, Z+23	; 0x17
     652:	01 97       	sbiw	r24, 0x01	; 1
     654:	f1 f7       	brne	.-4      	; 0x652 <__vector_3+0x5e>
     656:	60 8d       	ldd	r22, Z+24	; 0x18
     658:	71 8d       	ldd	r23, Z+25	; 0x19
     65a:	a6 85       	ldd	r26, Z+14	; 0x0e
     65c:	b7 85       	ldd	r27, Z+15	; 0x0f
     65e:	55 85       	ldd	r21, Z+13	; 0x0d
     660:	38 e0       	ldi	r19, 0x08	; 8
     662:	20 e0       	ldi	r18, 0x00	; 0
     664:	cb 01       	movw	r24, r22
     666:	01 97       	sbiw	r24, 0x01	; 1
     668:	f1 f7       	brne	.-4      	; 0x666 <__vector_3+0x72>
     66a:	82 2f       	mov	r24, r18
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	95 95       	asr	r25
     670:	87 95       	ror	r24
     672:	28 2f       	mov	r18, r24
     674:	4c 91       	ld	r20, X
     676:	45 23       	and	r20, r21
     678:	09 f0       	breq	.+2      	; 0x67c <__vector_3+0x88>
     67a:	20 68       	ori	r18, 0x80	; 128
     67c:	31 50       	subi	r19, 0x01	; 1
     67e:	91 f7       	brne	.-28     	; 0x664 <__vector_3+0x70>
     680:	86 8d       	ldd	r24, Z+30	; 0x1e
     682:	81 fd       	sbrc	r24, 1
     684:	20 95       	com	r18
     686:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <_ZN14SoftwareSerial20_receive_buffer_tailE>
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	01 96       	adiw	r24, 0x01	; 1
     68e:	8f 73       	andi	r24, 0x3F	; 63
     690:	99 27       	eor	r25, r25
     692:	30 91 ef 06 	lds	r19, 0x06EF	; 0x8006ef <_ZN14SoftwareSerial20_receive_buffer_headE>
     696:	38 17       	cp	r19, r24
     698:	49 f0       	breq	.+18     	; 0x6ac <__vector_3+0xb8>
     69a:	a0 91 f0 06 	lds	r26, 0x06F0	; 0x8006f0 <_ZN14SoftwareSerial20_receive_buffer_tailE>
     69e:	b0 e0       	ldi	r27, 0x00	; 0
     6a0:	af 50       	subi	r26, 0x0F	; 15
     6a2:	b9 4f       	sbci	r27, 0xF9	; 249
     6a4:	2c 93       	st	X, r18
     6a6:	80 93 f0 06 	sts	0x06F0, r24	; 0x8006f0 <_ZN14SoftwareSerial20_receive_buffer_tailE>
     6aa:	03 c0       	rjmp	.+6      	; 0x6b2 <__vector_3+0xbe>
     6ac:	86 8d       	ldd	r24, Z+30	; 0x1e
     6ae:	81 60       	ori	r24, 0x01	; 1
     6b0:	86 8f       	std	Z+30, r24	; 0x1e
     6b2:	82 8d       	ldd	r24, Z+26	; 0x1a
     6b4:	93 8d       	ldd	r25, Z+27	; 0x1b
     6b6:	01 97       	sbiw	r24, 0x01	; 1
     6b8:	f1 f7       	brne	.-4      	; 0x6b6 <__vector_3+0xc2>
     6ba:	a3 89       	ldd	r26, Z+19	; 0x13
     6bc:	b4 89       	ldd	r27, Z+20	; 0x14
     6be:	9c 91       	ld	r25, X
     6c0:	85 89       	ldd	r24, Z+21	; 0x15
     6c2:	89 2b       	or	r24, r25
     6c4:	8c 93       	st	X, r24
     6c6:	ff 91       	pop	r31
     6c8:	ef 91       	pop	r30
     6ca:	bf 91       	pop	r27
     6cc:	af 91       	pop	r26
     6ce:	9f 91       	pop	r25
     6d0:	8f 91       	pop	r24
     6d2:	7f 91       	pop	r23
     6d4:	6f 91       	pop	r22
     6d6:	5f 91       	pop	r21
     6d8:	4f 91       	pop	r20
     6da:	3f 91       	pop	r19
     6dc:	2f 91       	pop	r18
     6de:	0f 90       	pop	r0
     6e0:	0f be       	out	0x3f, r0	; 63
     6e2:	0f 90       	pop	r0
     6e4:	1f 90       	pop	r1
     6e6:	18 95       	reti

000006e8 <_ZN14SoftwareSerialD1Ev>:
     6e8:	2a e6       	ldi	r18, 0x6A	; 106
     6ea:	32 e0       	ldi	r19, 0x02	; 2
     6ec:	fc 01       	movw	r30, r24
     6ee:	31 83       	std	Z+1, r19	; 0x01
     6f0:	20 83       	st	Z, r18
     6f2:	0c 94 bb 02 	jmp	0x576	; 0x576 <_ZN14SoftwareSerial13stopListeningEv>

000006f6 <_ZN14SoftwareSerial5setTXEh>:
     6f6:	1f 93       	push	r17
     6f8:	cf 93       	push	r28
     6fa:	df 93       	push	r29
     6fc:	ec 01       	movw	r28, r24
     6fe:	16 2f       	mov	r17, r22
     700:	6e 8d       	ldd	r22, Y+30	; 0x1e
     702:	66 95       	lsr	r22
     704:	61 70       	andi	r22, 0x01	; 1
     706:	81 e0       	ldi	r24, 0x01	; 1
     708:	68 27       	eor	r22, r24
     70a:	81 2f       	mov	r24, r17
     70c:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <digitalWrite>
     710:	61 e0       	ldi	r22, 0x01	; 1
     712:	81 2f       	mov	r24, r17
     714:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <pinMode>
     718:	81 2f       	mov	r24, r17
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	fc 01       	movw	r30, r24
     71e:	e4 58       	subi	r30, 0x84	; 132
     720:	ff 4f       	sbci	r31, 0xFF	; 255
     722:	e4 91       	lpm	r30, Z
     724:	e8 8b       	std	Y+16, r30	; 0x10
     726:	fc 01       	movw	r30, r24
     728:	e0 57       	subi	r30, 0x70	; 112
     72a:	ff 4f       	sbci	r31, 0xFF	; 255
     72c:	e4 91       	lpm	r30, Z
     72e:	f0 e0       	ldi	r31, 0x00	; 0
     730:	ee 0f       	add	r30, r30
     732:	ff 1f       	adc	r31, r31
     734:	e2 55       	subi	r30, 0x52	; 82
     736:	ff 4f       	sbci	r31, 0xFF	; 255
     738:	85 91       	lpm	r24, Z+
     73a:	94 91       	lpm	r25, Z
     73c:	9a 8b       	std	Y+18, r25	; 0x12
     73e:	89 8b       	std	Y+17, r24	; 0x11
     740:	df 91       	pop	r29
     742:	cf 91       	pop	r28
     744:	1f 91       	pop	r17
     746:	08 95       	ret

00000748 <_ZN14SoftwareSerial5setRXEh>:
     748:	1f 93       	push	r17
     74a:	cf 93       	push	r28
     74c:	df 93       	push	r29
     74e:	ec 01       	movw	r28, r24
     750:	16 2f       	mov	r17, r22
     752:	60 e0       	ldi	r22, 0x00	; 0
     754:	81 2f       	mov	r24, r17
     756:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <pinMode>
     75a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     75c:	81 fd       	sbrc	r24, 1
     75e:	04 c0       	rjmp	.+8      	; 0x768 <_ZN14SoftwareSerial5setRXEh+0x20>
     760:	61 e0       	ldi	r22, 0x01	; 1
     762:	81 2f       	mov	r24, r17
     764:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <digitalWrite>
     768:	1c 87       	std	Y+12, r17	; 0x0c
     76a:	81 2f       	mov	r24, r17
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	fc 01       	movw	r30, r24
     770:	e4 58       	subi	r30, 0x84	; 132
     772:	ff 4f       	sbci	r31, 0xFF	; 255
     774:	e4 91       	lpm	r30, Z
     776:	ed 87       	std	Y+13, r30	; 0x0d
     778:	fc 01       	movw	r30, r24
     77a:	e0 57       	subi	r30, 0x70	; 112
     77c:	ff 4f       	sbci	r31, 0xFF	; 255
     77e:	e4 91       	lpm	r30, Z
     780:	f0 e0       	ldi	r31, 0x00	; 0
     782:	ee 0f       	add	r30, r30
     784:	ff 1f       	adc	r31, r31
     786:	ec 55       	subi	r30, 0x5C	; 92
     788:	ff 4f       	sbci	r31, 0xFF	; 255
     78a:	85 91       	lpm	r24, Z+
     78c:	94 91       	lpm	r25, Z
     78e:	9f 87       	std	Y+15, r25	; 0x0f
     790:	8e 87       	std	Y+14, r24	; 0x0e
     792:	df 91       	pop	r29
     794:	cf 91       	pop	r28
     796:	1f 91       	pop	r17
     798:	08 95       	ret

0000079a <_ZN14SoftwareSerialC1Ehhb>:
     79a:	1f 93       	push	r17
     79c:	cf 93       	push	r28
     79e:	df 93       	push	r29
     7a0:	ec 01       	movw	r28, r24
     7a2:	16 2f       	mov	r17, r22
     7a4:	1b 82       	std	Y+3, r1	; 0x03
     7a6:	1a 82       	std	Y+2, r1	; 0x02
     7a8:	88 ee       	ldi	r24, 0xE8	; 232
     7aa:	93 e0       	ldi	r25, 0x03	; 3
     7ac:	a0 e0       	ldi	r26, 0x00	; 0
     7ae:	b0 e0       	ldi	r27, 0x00	; 0
     7b0:	8c 83       	std	Y+4, r24	; 0x04
     7b2:	9d 83       	std	Y+5, r25	; 0x05
     7b4:	ae 83       	std	Y+6, r26	; 0x06
     7b6:	bf 83       	std	Y+7, r27	; 0x07
     7b8:	8a e6       	ldi	r24, 0x6A	; 106
     7ba:	92 e0       	ldi	r25, 0x02	; 2
     7bc:	99 83       	std	Y+1, r25	; 0x01
     7be:	88 83       	st	Y, r24
     7c0:	1f 8a       	std	Y+23, r1	; 0x17
     7c2:	1e 8a       	std	Y+22, r1	; 0x16
     7c4:	19 8e       	std	Y+25, r1	; 0x19
     7c6:	18 8e       	std	Y+24, r1	; 0x18
     7c8:	1b 8e       	std	Y+27, r1	; 0x1b
     7ca:	1a 8e       	std	Y+26, r1	; 0x1a
     7cc:	1d 8e       	std	Y+29, r1	; 0x1d
     7ce:	1c 8e       	std	Y+28, r1	; 0x1c
     7d0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     7d2:	8e 7f       	andi	r24, 0xFE	; 254
     7d4:	20 fb       	bst	r18, 0
     7d6:	81 f9       	bld	r24, 1
     7d8:	8e 8f       	std	Y+30, r24	; 0x1e
     7da:	64 2f       	mov	r22, r20
     7dc:	ce 01       	movw	r24, r28
     7de:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <_ZN14SoftwareSerial5setTXEh>
     7e2:	61 2f       	mov	r22, r17
     7e4:	ce 01       	movw	r24, r28
     7e6:	df 91       	pop	r29
     7e8:	cf 91       	pop	r28
     7ea:	1f 91       	pop	r17
     7ec:	0c 94 a4 03 	jmp	0x748	; 0x748 <_ZN14SoftwareSerial5setRXEh>

000007f0 <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
     7f0:	cf 93       	push	r28
     7f2:	df 93       	push	r29
     7f4:	ec 01       	movw	r28, r24
     7f6:	9a 01       	movw	r18, r20
     7f8:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
     7fa:	1b 8e       	std	Y+27, r1	; 0x1b
     7fc:	1a 8e       	std	Y+26, r1	; 0x1a
     7fe:	19 8e       	std	Y+25, r1	; 0x19
     800:	18 8e       	std	Y+24, r1	; 0x18
     802:	1f 8a       	std	Y+23, r1	; 0x17
     804:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
     806:	60 e0       	ldi	r22, 0x00	; 0
     808:	79 e0       	ldi	r23, 0x09	; 9
     80a:	8d e3       	ldi	r24, 0x3D	; 61
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	0e 94 71 10 	call	0x20e2	; 0x20e2 <__divmodsi4>
     812:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
     814:	24 30       	cpi	r18, 0x04	; 4
     816:	31 05       	cpc	r19, r1
     818:	18 f0       	brcs	.+6      	; 0x820 <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
     81a:	c9 01       	movw	r24, r18
     81c:	03 97       	sbiw	r24, 0x03	; 3
     81e:	02 c0       	rjmp	.+4      	; 0x824 <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
     820:	81 e0       	ldi	r24, 0x01	; 1
     822:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
     824:	9d 8f       	std	Y+29, r25	; 0x1d
     826:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
     828:	6c 85       	ldd	r22, Y+12	; 0x0c
     82a:	66 31       	cpi	r22, 0x16	; 22
     82c:	08 f0       	brcs	.+2      	; 0x830 <_ZN14SoftwareSerial5beginEl+0x40>
     82e:	69 c0       	rjmp	.+210    	; 0x902 <__stack+0x3>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
     830:	c9 01       	movw	r24, r18
     832:	96 95       	lsr	r25
     834:	87 95       	ror	r24
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
     836:	84 31       	cpi	r24, 0x14	; 20
     838:	91 05       	cpc	r25, r1
     83a:	10 f0       	brcs	.+4      	; 0x840 <_ZN14SoftwareSerial5beginEl+0x50>
    return num - sub;
     83c:	43 97       	sbiw	r24, 0x13	; 19
     83e:	02 c0       	rjmp	.+4      	; 0x844 <_ZN14SoftwareSerial5beginEl+0x54>
  else
    return 1;
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	90 e0       	ldi	r25, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
     844:	9f 8b       	std	Y+23, r25	; 0x17
     846:	8e 8b       	std	Y+22, r24	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
     848:	36 97       	sbiw	r30, 0x06	; 6
     84a:	18 f0       	brcs	.+6      	; 0x852 <_ZN14SoftwareSerial5beginEl+0x62>
    return num - sub;
     84c:	c9 01       	movw	r24, r18
     84e:	05 97       	sbiw	r24, 0x05	; 5
     850:	02 c0       	rjmp	.+4      	; 0x856 <_ZN14SoftwareSerial5beginEl+0x66>
  else
    return 1;
     852:	81 e0       	ldi	r24, 0x01	; 1
     854:	90 e0       	ldi	r25, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
     856:	99 8f       	std	Y+25, r25	; 0x19
     858:	88 8f       	std	Y+24, r24	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
     85a:	c9 01       	movw	r24, r18
     85c:	88 0f       	add	r24, r24
     85e:	99 1f       	adc	r25, r25
     860:	28 0f       	add	r18, r24
     862:	39 1f       	adc	r19, r25
     864:	36 95       	lsr	r19
     866:	27 95       	ror	r18
     868:	36 95       	lsr	r19
     86a:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
     86c:	2d 30       	cpi	r18, 0x0D	; 13
     86e:	31 05       	cpc	r19, r1
     870:	18 f0       	brcs	.+6      	; 0x878 <_ZN14SoftwareSerial5beginEl+0x88>
    return num - sub;
     872:	2c 50       	subi	r18, 0x0C	; 12
     874:	31 09       	sbc	r19, r1
     876:	02 c0       	rjmp	.+4      	; 0x87c <_ZN14SoftwareSerial5beginEl+0x8c>
  else
    return 1;
     878:	21 e0       	ldi	r18, 0x01	; 1
     87a:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
     87c:	3b 8f       	std	Y+27, r19	; 0x1b
     87e:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
     880:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
     884:	68 30       	cpi	r22, 0x08	; 8
     886:	50 f0       	brcs	.+20     	; 0x89c <_ZN14SoftwareSerial5beginEl+0xac>
     888:	21 e0       	ldi	r18, 0x01	; 1
     88a:	6e 30       	cpi	r22, 0x0E	; 14
     88c:	08 f4       	brcc	.+2      	; 0x890 <_ZN14SoftwareSerial5beginEl+0xa0>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	01 c0       	rjmp	.+2      	; 0x896 <_ZN14SoftwareSerial5beginEl+0xa6>
     894:	88 0f       	add	r24, r24
     896:	2a 95       	dec	r18
     898:	ea f7       	brpl	.-6      	; 0x894 <_ZN14SoftwareSerial5beginEl+0xa4>
     89a:	01 c0       	rjmp	.+2      	; 0x89e <_ZN14SoftwareSerial5beginEl+0xae>
     89c:	84 e0       	ldi	r24, 0x04	; 4
     89e:	89 2b       	or	r24, r25
     8a0:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
     8a4:	9c 85       	ldd	r25, Y+12	; 0x0c
     8a6:	98 30       	cpi	r25, 0x08	; 8
     8a8:	38 f0       	brcs	.+14     	; 0x8b8 <_ZN14SoftwareSerial5beginEl+0xc8>
     8aa:	9e 30       	cpi	r25, 0x0E	; 14
     8ac:	40 f0       	brcs	.+16     	; 0x8be <_ZN14SoftwareSerial5beginEl+0xce>
     8ae:	96 31       	cpi	r25, 0x16	; 22
     8b0:	48 f0       	brcs	.+18     	; 0x8c4 <_ZN14SoftwareSerial5beginEl+0xd4>
     8b2:	20 e0       	ldi	r18, 0x00	; 0
     8b4:	30 e0       	ldi	r19, 0x00	; 0
     8b6:	08 c0       	rjmp	.+16     	; 0x8c8 <_ZN14SoftwareSerial5beginEl+0xd8>
     8b8:	2d e6       	ldi	r18, 0x6D	; 109
     8ba:	30 e0       	ldi	r19, 0x00	; 0
     8bc:	05 c0       	rjmp	.+10     	; 0x8c8 <_ZN14SoftwareSerial5beginEl+0xd8>
     8be:	2b e6       	ldi	r18, 0x6B	; 107
     8c0:	30 e0       	ldi	r19, 0x00	; 0
     8c2:	02 c0       	rjmp	.+4      	; 0x8c8 <_ZN14SoftwareSerial5beginEl+0xd8>
     8c4:	2c e6       	ldi	r18, 0x6C	; 108
     8c6:	30 e0       	ldi	r19, 0x00	; 0
     8c8:	3c 8b       	std	Y+20, r19	; 0x14
     8ca:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
     8cc:	98 30       	cpi	r25, 0x08	; 8
     8ce:	30 f4       	brcc	.+12     	; 0x8dc <_ZN14SoftwareSerial5beginEl+0xec>
     8d0:	81 e0       	ldi	r24, 0x01	; 1
     8d2:	01 c0       	rjmp	.+2      	; 0x8d6 <_ZN14SoftwareSerial5beginEl+0xe6>
     8d4:	88 0f       	add	r24, r24
     8d6:	9a 95       	dec	r25
     8d8:	ea f7       	brpl	.-6      	; 0x8d4 <_ZN14SoftwareSerial5beginEl+0xe4>
     8da:	0e c0       	rjmp	.+28     	; 0x8f8 <_ZN14SoftwareSerial5beginEl+0x108>
     8dc:	29 2f       	mov	r18, r25
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	9e 30       	cpi	r25, 0x0E	; 14
     8e2:	18 f4       	brcc	.+6      	; 0x8ea <_ZN14SoftwareSerial5beginEl+0xfa>
     8e4:	28 50       	subi	r18, 0x08	; 8
     8e6:	31 09       	sbc	r19, r1
     8e8:	02 c0       	rjmp	.+4      	; 0x8ee <_ZN14SoftwareSerial5beginEl+0xfe>
     8ea:	2e 50       	subi	r18, 0x0E	; 14
     8ec:	31 09       	sbc	r19, r1
     8ee:	81 e0       	ldi	r24, 0x01	; 1
     8f0:	01 c0       	rjmp	.+2      	; 0x8f4 <_ZN14SoftwareSerial5beginEl+0x104>
     8f2:	88 0f       	add	r24, r24
     8f4:	2a 95       	dec	r18
     8f6:	ea f7       	brpl	.-6      	; 0x8f2 <_ZN14SoftwareSerial5beginEl+0x102>
     8f8:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     8fa:	8c 8d       	ldd	r24, Y+28	; 0x1c
     8fc:	9d 8d       	ldd	r25, Y+29	; 0x1d
     8fe:	01 97       	sbiw	r24, 0x01	; 1
     900:	f1 f7       	brne	.-4      	; 0x8fe <_ZN14SoftwareSerial5beginEl+0x10e>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
     902:	ce 01       	movw	r24, r28
}
     904:	df 91       	pop	r29
     906:	cf 91       	pop	r28
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
     908:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <_ZN14SoftwareSerial6listenEv>

0000090c <_Z18printCommandHeader6String>:
																// Digital pin 11 on Arduino (TX) connects to RXD on the CH376S module
																// GND on Arduino to GND on CH376S module
																// 5V on Arduino to 5V on CH376S module

//print Command header
void printCommandHeader(String header){
     90c:	cf 93       	push	r28
     90e:	df 93       	push	r29
     910:	ec 01       	movw	r28, r24
   Serial.println("======================");
     912:	66 e7       	ldi	r22, 0x76	; 118
     914:	72 e0       	ldi	r23, 0x02	; 2
     916:	83 e3       	ldi	r24, 0x33	; 51
     918:	97 e0       	ldi	r25, 0x07	; 7
     91a:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <_ZN5Print7printlnEPKc>
   Serial.println("");
     91e:	65 eb       	ldi	r22, 0xB5	; 181
     920:	76 e0       	ldi	r23, 0x06	; 6
     922:	83 e3       	ldi	r24, 0x33	; 51
     924:	97 e0       	ldi	r25, 0x07	; 7
     926:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <_ZN5Print7printlnEPKc>
   Serial.println(header);
     92a:	be 01       	movw	r22, r28
     92c:	83 e3       	ldi	r24, 0x33	; 51
     92e:	97 e0       	ldi	r25, 0x07	; 7
     930:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <_ZN5Print7printlnERK6String>
   Serial.println("----------------------");
     934:	6d e8       	ldi	r22, 0x8D	; 141
     936:	72 e0       	ldi	r23, 0x02	; 2
     938:	83 e3       	ldi	r24, 0x33	; 51
     93a:	97 e0       	ldi	r25, 0x07	; 7
}
     93c:	df 91       	pop	r29
     93e:	cf 91       	pop	r28
//print Command header
void printCommandHeader(String header){
   Serial.println("======================");
   Serial.println("");
   Serial.println(header);
   Serial.println("----------------------");
     940:	0c 94 42 0d 	jmp	0x1a84	; 0x1a84 <_ZN5Print7printlnEPKc>

00000944 <_Z8blinkLEDv>:



//blinkLED==========================================================================================
//Turn an LED on for 1 second
void blinkLED(){
     944:	cf 93       	push	r28
     946:	df 93       	push	r29
  digitalWrite(LED, HIGH);
     948:	c8 e0       	ldi	r28, 0x08	; 8
     94a:	d1 e0       	ldi	r29, 0x01	; 1
     94c:	61 e0       	ldi	r22, 0x01	; 1
     94e:	88 81       	ld	r24, Y
     950:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <digitalWrite>
  delay(1000);
     954:	68 ee       	ldi	r22, 0xE8	; 232
     956:	73 e0       	ldi	r23, 0x03	; 3
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <delay>
  digitalWrite(LED,LOW);
     960:	60 e0       	ldi	r22, 0x00	; 0
     962:	88 81       	ld	r24, Y
     964:	df 91       	pop	r29
     966:	cf 91       	pop	r28
//blinkLED==========================================================================================
//Turn an LED on for 1 second
void blinkLED(){
  digitalWrite(LED, HIGH);
  delay(1000);
  digitalWrite(LED,LOW);
     968:	0c 94 68 0f 	jmp	0x1ed0	; 0x1ed0 <digitalWrite>

0000096c <_Z8resetALLv>:
}

//resetALL=========================================================================================
//This will perform a hardware reset of the CH376S module - which usually takes about 35 msecs =====
void resetALL(){
    USB.write(0x57);
     96c:	67 e5       	ldi	r22, 0x57	; 87
     96e:	82 ec       	ldi	r24, 0xC2	; 194
     970:	96 e0       	ldi	r25, 0x06	; 6
     972:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
    USB.write(0xAB);
     976:	6b ea       	ldi	r22, 0xAB	; 171
     978:	82 ec       	ldi	r24, 0xC2	; 194
     97a:	96 e0       	ldi	r25, 0x06	; 6
     97c:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
    USB.write(0x05);
     980:	65 e0       	ldi	r22, 0x05	; 5
     982:	82 ec       	ldi	r24, 0xC2	; 194
     984:	96 e0       	ldi	r25, 0x06	; 6
     986:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
    Serial.println("The CH376S module has been reset !");
     98a:	64 ea       	ldi	r22, 0xA4	; 164
     98c:	72 e0       	ldi	r23, 0x02	; 2
     98e:	83 e3       	ldi	r24, 0x33	; 51
     990:	97 e0       	ldi	r25, 0x07	; 7
     992:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <_ZN5Print7printlnEPKc>
    delay(200);
     996:	68 ec       	ldi	r22, 0xC8	; 200
     998:	70 e0       	ldi	r23, 0x00	; 0
     99a:	80 e0       	ldi	r24, 0x00	; 0
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	0c 94 a0 0e 	jmp	0x1d40	; 0x1d40 <delay>

000009a2 <_Z11setFileName6String>:
    fileClose(0x01);                //Close the file using 0x01 - which means to update the size of the file on close. 
}
  
//setFileName======================================================================================
//This sets the name of the file to work with
void setFileName(String fileName){
     9a2:	cf 93       	push	r28
     9a4:	df 93       	push	r29
     9a6:	ec 01       	movw	r28, r24
  Serial.print("Setting filename to:");
     9a8:	67 ec       	ldi	r22, 0xC7	; 199
     9aa:	72 e0       	ldi	r23, 0x02	; 2
     9ac:	83 e3       	ldi	r24, 0x33	; 51
     9ae:	97 e0       	ldi	r25, 0x07	; 7
     9b0:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <_ZN5Print5printEPKc>
  Serial.println(fileName);
     9b4:	be 01       	movw	r22, r28
     9b6:	83 e3       	ldi	r24, 0x33	; 51
     9b8:	97 e0       	ldi	r25, 0x07	; 7
     9ba:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <_ZN5Print7printlnERK6String>
  USB.write(0x57);
     9be:	67 e5       	ldi	r22, 0x57	; 87
     9c0:	82 ec       	ldi	r24, 0xC2	; 194
     9c2:	96 e0       	ldi	r25, 0x06	; 6
     9c4:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
  USB.write(0xAB);
     9c8:	6b ea       	ldi	r22, 0xAB	; 171
     9ca:	82 ec       	ldi	r24, 0xC2	; 194
     9cc:	96 e0       	ldi	r25, 0x06	; 6
     9ce:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
  USB.write(0x2F);
     9d2:	6f e2       	ldi	r22, 0x2F	; 47
     9d4:	82 ec       	ldi	r24, 0xC2	; 194
     9d6:	96 e0       	ldi	r25, 0x06	; 6
     9d8:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
  USB.write(0x2F);         // Every filename must have this byte to indicate the start of the file name.
     9dc:	6f e2       	ldi	r22, 0x2F	; 47
     9de:	82 ec       	ldi	r24, 0xC2	; 194
     9e0:	96 e0       	ldi	r25, 0x06	; 6
     9e2:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
  USB.print(fileName);     // "fileName" is a variable that holds the name of the file.  eg. TEST.TXT
     9e6:	be 01       	movw	r22, r28
     9e8:	82 ec       	ldi	r24, 0xC2	; 194
     9ea:	96 e0       	ldi	r25, 0x06	; 6
     9ec:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <_ZN5Print5printERK6String>
  USB.write((byte)0x00);   // you need to cast as a byte - otherwise it will not compile.  The null byte indicates the end of the file name.
     9f0:	60 e0       	ldi	r22, 0x00	; 0
     9f2:	82 ec       	ldi	r24, 0xC2	; 194
     9f4:	96 e0       	ldi	r25, 0x06	; 6
     9f6:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
  delay(20);
     9fa:	64 e1       	ldi	r22, 0x14	; 20
     9fc:	70 e0       	ldi	r23, 0x00	; 0
     9fe:	80 e0       	ldi	r24, 0x00	; 0
     a00:	90 e0       	ldi	r25, 0x00	; 0
}
     a02:	df 91       	pop	r29
     a04:	cf 91       	pop	r28
  USB.write(0xAB);
  USB.write(0x2F);
  USB.write(0x2F);         // Every filename must have this byte to indicate the start of the file name.
  USB.print(fileName);     // "fileName" is a variable that holds the name of the file.  eg. TEST.TXT
  USB.write((byte)0x00);   // you need to cast as a byte - otherwise it will not compile.  The null byte indicates the end of the file name.
  delay(20);
     a06:	0c 94 a0 0e 	jmp	0x1d40	; 0x1d40 <delay>

00000a0a <_Z15waitForResponse6String>:
  }
}

//waitForResponse===================================================================================
//is used to wait for a response from USB. Returns true when bytes become available, false if it times out.
boolean waitForResponse(String errorMsg){
     a0a:	0f 93       	push	r16
     a0c:	1f 93       	push	r17
     a0e:	cf 93       	push	r28
     a10:	df 93       	push	r29
     a12:	8c 01       	movw	r16, r24
  boolean bytesAvailable = true;
  int counter=0;
     a14:	c0 e0       	ldi	r28, 0x00	; 0
     a16:	d0 e0       	ldi	r29, 0x00	; 0
  while(!USB.available()){     //wait for CH376S to verify command
     a18:	82 ec       	ldi	r24, 0xC2	; 194
     a1a:	96 e0       	ldi	r25, 0x06	; 6
     a1c:	0e 94 a3 02 	call	0x546	; 0x546 <_ZN14SoftwareSerial9availableEv>
     a20:	89 2b       	or	r24, r25
     a22:	d9 f4       	brne	.+54     	; 0xa5a <_Z15waitForResponse6String+0x50>
    delay(1);
     a24:	61 e0       	ldi	r22, 0x01	; 1
     a26:	70 e0       	ldi	r23, 0x00	; 0
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <delay>
    counter++;
     a30:	21 96       	adiw	r28, 0x01	; 1
    if(counter>timeOut){
     a32:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <timeOut>
     a36:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <timeOut+0x1>
     a3a:	8c 17       	cp	r24, r28
     a3c:	9d 07       	cpc	r25, r29
     a3e:	64 f7       	brge	.-40     	; 0xa18 <_Z15waitForResponse6String+0xe>
      Serial.print("TimeOut waiting for response: Error while: ");
     a40:	6c ed       	ldi	r22, 0xDC	; 220
     a42:	72 e0       	ldi	r23, 0x02	; 2
     a44:	83 e3       	ldi	r24, 0x33	; 51
     a46:	97 e0       	ldi	r25, 0x07	; 7
     a48:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <_ZN5Print5printEPKc>
      Serial.println(errorMsg);
     a4c:	b8 01       	movw	r22, r16
     a4e:	83 e3       	ldi	r24, 0x33	; 51
     a50:	97 e0       	ldi	r25, 0x07	; 7
     a52:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <_ZN5Print7printlnERK6String>
      bytesAvailable = false;
     a56:	c0 e0       	ldi	r28, 0x00	; 0
      break;
     a58:	01 c0       	rjmp	.+2      	; 0xa5c <_Z15waitForResponse6String+0x52>
}

//waitForResponse===================================================================================
//is used to wait for a response from USB. Returns true when bytes become available, false if it times out.
boolean waitForResponse(String errorMsg){
  boolean bytesAvailable = true;
     a5a:	c1 e0       	ldi	r28, 0x01	; 1
      Serial.println(errorMsg);
      bytesAvailable = false;
      break;
    }
  }
  delay(1);
     a5c:	61 e0       	ldi	r22, 0x01	; 1
     a5e:	70 e0       	ldi	r23, 0x00	; 0
     a60:	80 e0       	ldi	r24, 0x00	; 0
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <delay>
  return(bytesAvailable);
}
     a68:	8c 2f       	mov	r24, r28
     a6a:	df 91       	pop	r29
     a6c:	cf 91       	pop	r28
     a6e:	1f 91       	pop	r17
     a70:	0f 91       	pop	r16
     a72:	08 95       	ret

00000a74 <_Z12set_USB_Modeh>:
  }
}

//set_USB_Mode=====================================================================================
//Make sure that the USB is inserted when using 0x06 as the value in this specific code sequence
void set_USB_Mode (byte value){
     a74:	cf 93       	push	r28
     a76:	c8 2f       	mov	r28, r24
  USB.write(0x57);
     a78:	67 e5       	ldi	r22, 0x57	; 87
     a7a:	82 ec       	ldi	r24, 0xC2	; 194
     a7c:	96 e0       	ldi	r25, 0x06	; 6
     a7e:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
  USB.write(0xAB);
     a82:	6b ea       	ldi	r22, 0xAB	; 171
     a84:	82 ec       	ldi	r24, 0xC2	; 194
     a86:	96 e0       	ldi	r25, 0x06	; 6
     a88:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
  USB.write(0x15);
     a8c:	65 e1       	ldi	r22, 0x15	; 21
     a8e:	82 ec       	ldi	r24, 0xC2	; 194
     a90:	96 e0       	ldi	r25, 0x06	; 6
     a92:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
  USB.write(value);
     a96:	6c 2f       	mov	r22, r28
     a98:	82 ec       	ldi	r24, 0xC2	; 194
     a9a:	96 e0       	ldi	r25, 0x06	; 6
     a9c:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
  
  delay(20);
     aa0:	64 e1       	ldi	r22, 0x14	; 20
     aa2:	70 e0       	ldi	r23, 0x00	; 0
     aa4:	80 e0       	ldi	r24, 0x00	; 0
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <delay>
  
  if(USB.available()){
     aac:	82 ec       	ldi	r24, 0xC2	; 194
     aae:	96 e0       	ldi	r25, 0x06	; 6
     ab0:	0e 94 a3 02 	call	0x546	; 0x546 <_ZN14SoftwareSerial9availableEv>
     ab4:	89 2b       	or	r24, r25
     ab6:	b1 f1       	breq	.+108    	; 0xb24 <_Z12set_USB_Modeh+0xb0>
    USB_Byte=USB.read();
     ab8:	82 ec       	ldi	r24, 0xC2	; 194
     aba:	96 e0       	ldi	r25, 0x06	; 6
     abc:	0e 94 19 02 	call	0x432	; 0x432 <_ZN14SoftwareSerial4readEv>
     ac0:	80 93 ed 06 	sts	0x06ED, r24	; 0x8006ed <USB_Byte>
    //Check to see if the command has been successfully transmitted and acknowledged.
    if(USB_Byte==0x51){                                   // If true - the CH376S has acknowledged the command.
     ac4:	81 35       	cpi	r24, 0x51	; 81
     ac6:	d1 f4       	brne	.+52     	; 0xafc <_Z12set_USB_Modeh+0x88>
        Serial.println("set_USB_Mode command acknowledged"); //The CH376S will now check and monitor the USB port
     ac8:	68 e0       	ldi	r22, 0x08	; 8
     aca:	73 e0       	ldi	r23, 0x03	; 3
     acc:	83 e3       	ldi	r24, 0x33	; 51
     ace:	97 e0       	ldi	r25, 0x07	; 7
     ad0:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <_ZN5Print7printlnEPKc>
        USB_Byte = USB.read();
     ad4:	82 ec       	ldi	r24, 0xC2	; 194
     ad6:	96 e0       	ldi	r25, 0x06	; 6
     ad8:	0e 94 19 02 	call	0x432	; 0x432 <_ZN14SoftwareSerial4readEv>
     adc:	80 93 ed 06 	sts	0x06ED, r24	; 0x8006ed <USB_Byte>
        
        //Check to see if the USB stick is connected or not.
        if(USB_Byte==0x15){                               // If true - there is a USB stick connected
     ae0:	85 31       	cpi	r24, 0x15	; 21
     ae2:	49 f4       	brne	.+18     	; 0xaf6 <_Z12set_USB_Modeh+0x82>
          Serial.println("USB is present");
     ae4:	6a e2       	ldi	r22, 0x2A	; 42
     ae6:	73 e0       	ldi	r23, 0x03	; 3
     ae8:	83 e3       	ldi	r24, 0x33	; 51
     aea:	97 e0       	ldi	r25, 0x07	; 7
     aec:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <_ZN5Print7printlnEPKc>
          blinkLED();                                     // If the process was successful, then turn the LED on for 1 second 
     af0:	0e 94 a2 04 	call	0x944	; 0x944 <_Z8blinkLEDv>
     af4:	17 c0       	rjmp	.+46     	; 0xb24 <_Z12set_USB_Modeh+0xb0>
        } else {
          Serial.print("USB Not present. Error code:");   // If the USB is not connected - it should return an Error code = FFH
     af6:	69 e3       	ldi	r22, 0x39	; 57
     af8:	73 e0       	ldi	r23, 0x03	; 3
     afa:	02 c0       	rjmp	.+4      	; 0xb00 <_Z12set_USB_Modeh+0x8c>
          Serial.print(USB_Byte, HEX);
          Serial.println("H");
        }
        
    } else {
        Serial.print("CH3765 error!   Error code:");
     afc:	68 e5       	ldi	r22, 0x58	; 88
     afe:	73 e0       	ldi	r23, 0x03	; 3
     b00:	83 e3       	ldi	r24, 0x33	; 51
     b02:	97 e0       	ldi	r25, 0x07	; 7
     b04:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <_ZN5Print5printEPKc>
        Serial.print(USB_Byte, HEX);
     b08:	40 e1       	ldi	r20, 0x10	; 16
     b0a:	50 e0       	ldi	r21, 0x00	; 0
     b0c:	60 91 ed 06 	lds	r22, 0x06ED	; 0x8006ed <USB_Byte>
     b10:	83 e3       	ldi	r24, 0x33	; 51
     b12:	97 e0       	ldi	r25, 0x07	; 7
     b14:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <_ZN5Print5printEhi>
        Serial.println("H");
     b18:	66 e5       	ldi	r22, 0x56	; 86
     b1a:	73 e0       	ldi	r23, 0x03	; 3
     b1c:	83 e3       	ldi	r24, 0x33	; 51
     b1e:	97 e0       	ldi	r25, 0x07	; 7
     b20:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <_ZN5Print7printlnEPKc>
    }   
  }
  delay(20);
     b24:	64 e1       	ldi	r22, 0x14	; 20
     b26:	70 e0       	ldi	r23, 0x00	; 0
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	90 e0       	ldi	r25, 0x00	; 0
}
     b2c:	cf 91       	pop	r28
        Serial.print("CH3765 error!   Error code:");
        Serial.print(USB_Byte, HEX);
        Serial.println("H");
    }   
  }
  delay(20);
     b2e:	0c 94 a0 0e 	jmp	0x1d40	; 0x1d40 <delay>

00000b32 <_Z11getFileSizev>:
  return(bytesToRead);
} 

//getFileSize()===================================================================================
//writes the file size to the serial Monitor.
int getFileSize(){
     b32:	cf 93       	push	r28
     b34:	df 93       	push	r29
  int fileSize=0;
  Serial.println("Getting File Size");
     b36:	64 e7       	ldi	r22, 0x74	; 116
     b38:	73 e0       	ldi	r23, 0x03	; 3
     b3a:	83 e3       	ldi	r24, 0x33	; 51
     b3c:	97 e0       	ldi	r25, 0x07	; 7
     b3e:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <_ZN5Print7printlnEPKc>
  USB.write(0x57);
     b42:	67 e5       	ldi	r22, 0x57	; 87
     b44:	82 ec       	ldi	r24, 0xC2	; 194
     b46:	96 e0       	ldi	r25, 0x06	; 6
     b48:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
  USB.write(0xAB);
     b4c:	6b ea       	ldi	r22, 0xAB	; 171
     b4e:	82 ec       	ldi	r24, 0xC2	; 194
     b50:	96 e0       	ldi	r25, 0x06	; 6
     b52:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
  USB.write(0x0C);
     b56:	6c e0       	ldi	r22, 0x0C	; 12
     b58:	82 ec       	ldi	r24, 0xC2	; 194
     b5a:	96 e0       	ldi	r25, 0x06	; 6
     b5c:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
  USB.write(0x68);
     b60:	68 e6       	ldi	r22, 0x68	; 104
     b62:	82 ec       	ldi	r24, 0xC2	; 194
     b64:	96 e0       	ldi	r25, 0x06	; 6
     b66:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
  delay(100);
     b6a:	64 e6       	ldi	r22, 0x64	; 100
     b6c:	70 e0       	ldi	r23, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <delay>
  Serial.print("FileSize =");
     b76:	66 e8       	ldi	r22, 0x86	; 134
     b78:	73 e0       	ldi	r23, 0x03	; 3
     b7a:	83 e3       	ldi	r24, 0x33	; 51
     b7c:	97 e0       	ldi	r25, 0x07	; 7
     b7e:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <_ZN5Print5printEPKc>
  if(USB.available()){
     b82:	82 ec       	ldi	r24, 0xC2	; 194
     b84:	96 e0       	ldi	r25, 0x06	; 6
     b86:	0e 94 a3 02 	call	0x546	; 0x546 <_ZN14SoftwareSerial9availableEv>
     b8a:	89 2b       	or	r24, r25
     b8c:	31 f0       	breq	.+12     	; 0xb9a <_Z11getFileSizev+0x68>
    fileSize = fileSize + USB.read();
     b8e:	82 ec       	ldi	r24, 0xC2	; 194
     b90:	96 e0       	ldi	r25, 0x06	; 6
     b92:	0e 94 19 02 	call	0x432	; 0x432 <_ZN14SoftwareSerial4readEv>
     b96:	ec 01       	movw	r28, r24
     b98:	02 c0       	rjmp	.+4      	; 0xb9e <_Z11getFileSizev+0x6c>
} 

//getFileSize()===================================================================================
//writes the file size to the serial Monitor.
int getFileSize(){
  int fileSize=0;
     b9a:	c0 e0       	ldi	r28, 0x00	; 0
     b9c:	d0 e0       	ldi	r29, 0x00	; 0
  delay(100);
  Serial.print("FileSize =");
  if(USB.available()){
    fileSize = fileSize + USB.read();
  } 
  if(USB.available()){
     b9e:	82 ec       	ldi	r24, 0xC2	; 194
     ba0:	96 e0       	ldi	r25, 0x06	; 6
     ba2:	0e 94 a3 02 	call	0x546	; 0x546 <_ZN14SoftwareSerial9availableEv>
     ba6:	89 2b       	or	r24, r25
     ba8:	69 f0       	breq	.+26     	; 0xbc4 <_Z11getFileSizev+0x92>
    fileSize = fileSize + (USB.read()*255);
     baa:	82 ec       	ldi	r24, 0xC2	; 194
     bac:	96 e0       	ldi	r25, 0x06	; 6
     bae:	0e 94 19 02 	call	0x432	; 0x432 <_ZN14SoftwareSerial4readEv>
     bb2:	2f ef       	ldi	r18, 0xFF	; 255
     bb4:	ac 01       	movw	r20, r24
     bb6:	24 9f       	mul	r18, r20
     bb8:	c0 01       	movw	r24, r0
     bba:	25 9f       	mul	r18, r21
     bbc:	90 0d       	add	r25, r0
     bbe:	11 24       	eor	r1, r1
     bc0:	c8 0f       	add	r28, r24
     bc2:	d9 1f       	adc	r29, r25
  } 
  if(USB.available()){
     bc4:	82 ec       	ldi	r24, 0xC2	; 194
     bc6:	96 e0       	ldi	r25, 0x06	; 6
     bc8:	0e 94 a3 02 	call	0x546	; 0x546 <_ZN14SoftwareSerial9availableEv>
     bcc:	89 2b       	or	r24, r25
     bce:	81 f0       	breq	.+32     	; 0xbf0 <_Z11getFileSizev+0xbe>
    fileSize = fileSize + (USB.read()*255*255);
     bd0:	82 ec       	ldi	r24, 0xC2	; 194
     bd2:	96 e0       	ldi	r25, 0x06	; 6
     bd4:	0e 94 19 02 	call	0x432	; 0x432 <_ZN14SoftwareSerial4readEv>
     bd8:	21 e0       	ldi	r18, 0x01	; 1
     bda:	3e ef       	ldi	r19, 0xFE	; 254
     bdc:	ac 01       	movw	r20, r24
     bde:	42 9f       	mul	r20, r18
     be0:	c0 01       	movw	r24, r0
     be2:	43 9f       	mul	r20, r19
     be4:	90 0d       	add	r25, r0
     be6:	52 9f       	mul	r21, r18
     be8:	90 0d       	add	r25, r0
     bea:	11 24       	eor	r1, r1
     bec:	c8 0f       	add	r28, r24
     bee:	d9 1f       	adc	r29, r25
  } 
  if(USB.available()){
     bf0:	82 ec       	ldi	r24, 0xC2	; 194
     bf2:	96 e0       	ldi	r25, 0x06	; 6
     bf4:	0e 94 a3 02 	call	0x546	; 0x546 <_ZN14SoftwareSerial9availableEv>
     bf8:	89 2b       	or	r24, r25
     bfa:	81 f0       	breq	.+32     	; 0xc1c <_Z11getFileSizev+0xea>
    fileSize = fileSize + (USB.read()*255*255*255);
     bfc:	82 ec       	ldi	r24, 0xC2	; 194
     bfe:	96 e0       	ldi	r25, 0x06	; 6
     c00:	0e 94 19 02 	call	0x432	; 0x432 <_ZN14SoftwareSerial4readEv>
     c04:	2f ef       	ldi	r18, 0xFF	; 255
     c06:	32 e0       	ldi	r19, 0x02	; 2
     c08:	ac 01       	movw	r20, r24
     c0a:	42 9f       	mul	r20, r18
     c0c:	c0 01       	movw	r24, r0
     c0e:	43 9f       	mul	r20, r19
     c10:	90 0d       	add	r25, r0
     c12:	52 9f       	mul	r21, r18
     c14:	90 0d       	add	r25, r0
     c16:	11 24       	eor	r1, r1
     c18:	c8 0f       	add	r28, r24
     c1a:	d9 1f       	adc	r29, r25
  }     
  Serial.println(fileSize);
     c1c:	4a e0       	ldi	r20, 0x0A	; 10
     c1e:	50 e0       	ldi	r21, 0x00	; 0
     c20:	be 01       	movw	r22, r28
     c22:	83 e3       	ldi	r24, 0x33	; 51
     c24:	97 e0       	ldi	r25, 0x07	; 7
     c26:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <_ZN5Print7printlnEii>
  delay(10);
     c2a:	6a e0       	ldi	r22, 0x0A	; 10
     c2c:	70 e0       	ldi	r23, 0x00	; 0
     c2e:	80 e0       	ldi	r24, 0x00	; 0
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <delay>
  return(fileSize);
}
     c36:	ce 01       	movw	r24, r28
     c38:	df 91       	pop	r29
     c3a:	cf 91       	pop	r28
     c3c:	08 95       	ret

00000c3e <_Z18getResponseFromUSBv>:

//getResponseFromUSB================================================================================
//is used to get any error codes or messages from the CH376S module (in response to certain commands)
byte getResponseFromUSB(){
  byte response = byte(0x00);
  if (USB.available()){
     c3e:	82 ec       	ldi	r24, 0xC2	; 194
     c40:	96 e0       	ldi	r25, 0x06	; 6
     c42:	0e 94 a3 02 	call	0x546	; 0x546 <_ZN14SoftwareSerial9availableEv>
     c46:	89 2b       	or	r24, r25
     c48:	29 f0       	breq	.+10     	; 0xc54 <_Z18getResponseFromUSBv+0x16>
    response = USB.read();
     c4a:	82 ec       	ldi	r24, 0xC2	; 194
     c4c:	96 e0       	ldi	r25, 0x06	; 6
     c4e:	0e 94 19 02 	call	0x432	; 0x432 <_ZN14SoftwareSerial4readEv>
     c52:	08 95       	ret
}

//getResponseFromUSB================================================================================
//is used to get any error codes or messages from the CH376S module (in response to certain commands)
byte getResponseFromUSB(){
  byte response = byte(0x00);
     c54:	80 e0       	ldi	r24, 0x00	; 0
  if (USB.available()){
    response = USB.read();
  }
  return(response);
}
     c56:	08 95       	ret

00000c58 <_Z15checkConnectionh>:
}

//checkConnection==================================================================================
//This function is used to check for successful communication with the CH376S module. This is not dependant of the presence of a USB stick.
//Send any value between 0 to 255, and the CH376S module will return a number = 255 - value. 
void checkConnection(byte value){
     c58:	0f 93       	push	r16
     c5a:	1f 93       	push	r17
     c5c:	cf 93       	push	r28
     c5e:	df 93       	push	r29
     c60:	00 d0       	rcall	.+0      	; 0xc62 <_Z15checkConnectionh+0xa>
     c62:	00 d0       	rcall	.+0      	; 0xc64 <_Z15checkConnectionh+0xc>
     c64:	00 d0       	rcall	.+0      	; 0xc66 <_Z15checkConnectionh+0xe>
     c66:	cd b7       	in	r28, 0x3d	; 61
     c68:	de b7       	in	r29, 0x3e	; 62
     c6a:	18 2f       	mov	r17, r24
  USB.write(0x57);
     c6c:	67 e5       	ldi	r22, 0x57	; 87
     c6e:	82 ec       	ldi	r24, 0xC2	; 194
     c70:	96 e0       	ldi	r25, 0x06	; 6
     c72:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
  USB.write(0xAB);
     c76:	6b ea       	ldi	r22, 0xAB	; 171
     c78:	82 ec       	ldi	r24, 0xC2	; 194
     c7a:	96 e0       	ldi	r25, 0x06	; 6
     c7c:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
  USB.write(0x06);
     c80:	66 e0       	ldi	r22, 0x06	; 6
     c82:	82 ec       	ldi	r24, 0xC2	; 194
     c84:	96 e0       	ldi	r25, 0x06	; 6
     c86:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
  USB.write(value);
     c8a:	61 2f       	mov	r22, r17
     c8c:	82 ec       	ldi	r24, 0xC2	; 194
     c8e:	96 e0       	ldi	r25, 0x06	; 6
     c90:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
  
  if(waitForResponse("checking connection")){       //wait for a response from the CH376S. If CH376S responds, it will be true. If it times out, it will be false.
     c94:	61 e9       	ldi	r22, 0x91	; 145
     c96:	73 e0       	ldi	r23, 0x03	; 3
     c98:	ce 01       	movw	r24, r28
     c9a:	01 96       	adiw	r24, 0x01	; 1
     c9c:	0e 94 05 10 	call	0x200a	; 0x200a <_ZN6StringC1EPKc>
     ca0:	ce 01       	movw	r24, r28
     ca2:	01 96       	adiw	r24, 0x01	; 1
     ca4:	0e 94 05 05 	call	0xa0a	; 0xa0a <_Z15waitForResponse6String>
     ca8:	08 2f       	mov	r16, r24
     caa:	ce 01       	movw	r24, r28
     cac:	01 96       	adiw	r24, 0x01	; 1
     cae:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <_ZN6StringD1Ev>
     cb2:	00 23       	and	r16, r16
     cb4:	c9 f0       	breq	.+50     	; 0xce8 <_Z15checkConnectionh+0x90>
    if(getResponseFromUSB()==(255-value)){
     cb6:	0e 94 1f 06 	call	0xc3e	; 0xc3e <_Z18getResponseFromUSBv>
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	2f ef       	ldi	r18, 0xFF	; 255
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	21 1b       	sub	r18, r17
     cc2:	31 09       	sbc	r19, r1
     cc4:	82 17       	cp	r24, r18
     cc6:	93 07       	cpc	r25, r19
     cc8:	49 f4       	brne	.+18     	; 0xcdc <_Z15checkConnectionh+0x84>
       Serial.println(">Connection to CH376S was successful.");
     cca:	65 ea       	ldi	r22, 0xA5	; 165
     ccc:	73 e0       	ldi	r23, 0x03	; 3
     cce:	83 e3       	ldi	r24, 0x33	; 51
     cd0:	97 e0       	ldi	r25, 0x07	; 7
     cd2:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <_ZN5Print7printlnEPKc>
       blinkLED();                               //blink the LED for 1 second if the connection was successful
     cd6:	0e 94 a2 04 	call	0x944	; 0x944 <_Z8blinkLEDv>
     cda:	06 c0       	rjmp	.+12     	; 0xce8 <_Z15checkConnectionh+0x90>
    } else {
      Serial.print(">Connection to CH376S - FAILED.");
     cdc:	6b ec       	ldi	r22, 0xCB	; 203
     cde:	73 e0       	ldi	r23, 0x03	; 3
     ce0:	83 e3       	ldi	r24, 0x33	; 51
     ce2:	97 e0       	ldi	r25, 0x07	; 7
     ce4:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <_ZN5Print5printEPKc>
    }
  }
}
     ce8:	26 96       	adiw	r28, 0x06	; 6
     cea:	0f b6       	in	r0, 0x3f	; 63
     cec:	f8 94       	cli
     cee:	de bf       	out	0x3e, r29	; 62
     cf0:	0f be       	out	0x3f, r0	; 63
     cf2:	cd bf       	out	0x3d, r28	; 61
     cf4:	df 91       	pop	r29
     cf6:	cf 91       	pop	r28
     cf8:	1f 91       	pop	r17
     cfa:	0f 91       	pop	r16
     cfc:	08 95       	ret

00000cfe <_Z20diskConnectionStatusv>:
  delay(20);
}

//diskConnectionStatus================================================================================
//Check the disk connection status
void diskConnectionStatus(){
     cfe:	1f 93       	push	r17
     d00:	cf 93       	push	r28
     d02:	df 93       	push	r29
     d04:	00 d0       	rcall	.+0      	; 0xd06 <_Z20diskConnectionStatusv+0x8>
     d06:	00 d0       	rcall	.+0      	; 0xd08 <_Z20diskConnectionStatusv+0xa>
     d08:	00 d0       	rcall	.+0      	; 0xd0a <_Z20diskConnectionStatusv+0xc>
     d0a:	cd b7       	in	r28, 0x3d	; 61
     d0c:	de b7       	in	r29, 0x3e	; 62
  Serial.println("Checking USB disk connection status");
     d0e:	6b ee       	ldi	r22, 0xEB	; 235
     d10:	73 e0       	ldi	r23, 0x03	; 3
     d12:	83 e3       	ldi	r24, 0x33	; 51
     d14:	97 e0       	ldi	r25, 0x07	; 7
     d16:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <_ZN5Print7printlnEPKc>
  USB.write(0x57);
     d1a:	67 e5       	ldi	r22, 0x57	; 87
     d1c:	82 ec       	ldi	r24, 0xC2	; 194
     d1e:	96 e0       	ldi	r25, 0x06	; 6
     d20:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
  USB.write(0xAB);
     d24:	6b ea       	ldi	r22, 0xAB	; 171
     d26:	82 ec       	ldi	r24, 0xC2	; 194
     d28:	96 e0       	ldi	r25, 0x06	; 6
     d2a:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
  USB.write(0x30);
     d2e:	60 e3       	ldi	r22, 0x30	; 48
     d30:	82 ec       	ldi	r24, 0xC2	; 194
     d32:	96 e0       	ldi	r25, 0x06	; 6
     d34:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>

  if(waitForResponse("Connecting to USB disk")){       //wait for a response from the CH376S. If CH376S responds, it will be true. If it times out, it will be false.
     d38:	6f e0       	ldi	r22, 0x0F	; 15
     d3a:	74 e0       	ldi	r23, 0x04	; 4
     d3c:	ce 01       	movw	r24, r28
     d3e:	01 96       	adiw	r24, 0x01	; 1
     d40:	0e 94 05 10 	call	0x200a	; 0x200a <_ZN6StringC1EPKc>
     d44:	ce 01       	movw	r24, r28
     d46:	01 96       	adiw	r24, 0x01	; 1
     d48:	0e 94 05 05 	call	0xa0a	; 0xa0a <_Z15waitForResponse6String>
     d4c:	18 2f       	mov	r17, r24
     d4e:	ce 01       	movw	r24, r28
     d50:	01 96       	adiw	r24, 0x01	; 1
     d52:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <_ZN6StringD1Ev>
     d56:	11 23       	and	r17, r17
     d58:	89 f0       	breq	.+34     	; 0xd7c <_Z20diskConnectionStatusv+0x7e>
    if(getResponseFromUSB()==0x14){               //CH376S will send 0x14 if this command was successful
     d5a:	0e 94 1f 06 	call	0xc3e	; 0xc3e <_Z18getResponseFromUSBv>
     d5e:	84 31       	cpi	r24, 0x14	; 20
     d60:	39 f4       	brne	.+14     	; 0xd70 <_Z20diskConnectionStatusv+0x72>
       Serial.println(">Connection to USB OK");
     d62:	66 e2       	ldi	r22, 0x26	; 38
     d64:	74 e0       	ldi	r23, 0x04	; 4
     d66:	83 e3       	ldi	r24, 0x33	; 51
     d68:	97 e0       	ldi	r25, 0x07	; 7
     d6a:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <_ZN5Print7printlnEPKc>
     d6e:	06 c0       	rjmp	.+12     	; 0xd7c <_Z20diskConnectionStatusv+0x7e>
    } else {
      Serial.print(">Connection to USB - FAILED.");
     d70:	6c e3       	ldi	r22, 0x3C	; 60
     d72:	74 e0       	ldi	r23, 0x04	; 4
     d74:	83 e3       	ldi	r24, 0x33	; 51
     d76:	97 e0       	ldi	r25, 0x07	; 7
     d78:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <_ZN5Print5printEPKc>
    }
  }
}
     d7c:	26 96       	adiw	r28, 0x06	; 6
     d7e:	0f b6       	in	r0, 0x3f	; 63
     d80:	f8 94       	cli
     d82:	de bf       	out	0x3e, r29	; 62
     d84:	0f be       	out	0x3f, r0	; 63
     d86:	cd bf       	out	0x3d, r28	; 61
     d88:	df 91       	pop	r29
     d8a:	cf 91       	pop	r28
     d8c:	1f 91       	pop	r17
     d8e:	08 95       	ret

00000d90 <_Z12USBdiskMountv>:

//USBdiskMount========================================================================================
//initialise the USB disk and check that it is ready - this process is required if you want to find the manufacturing information of the USB disk
void USBdiskMount(){
     d90:	1f 93       	push	r17
     d92:	cf 93       	push	r28
     d94:	df 93       	push	r29
     d96:	00 d0       	rcall	.+0      	; 0xd98 <_Z12USBdiskMountv+0x8>
     d98:	00 d0       	rcall	.+0      	; 0xd9a <_Z12USBdiskMountv+0xa>
     d9a:	00 d0       	rcall	.+0      	; 0xd9c <_Z12USBdiskMountv+0xc>
     d9c:	cd b7       	in	r28, 0x3d	; 61
     d9e:	de b7       	in	r29, 0x3e	; 62
  Serial.println("Mounting USB disk");
     da0:	69 e5       	ldi	r22, 0x59	; 89
     da2:	74 e0       	ldi	r23, 0x04	; 4
     da4:	83 e3       	ldi	r24, 0x33	; 51
     da6:	97 e0       	ldi	r25, 0x07	; 7
     da8:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <_ZN5Print7printlnEPKc>
  USB.write(0x57);
     dac:	67 e5       	ldi	r22, 0x57	; 87
     dae:	82 ec       	ldi	r24, 0xC2	; 194
     db0:	96 e0       	ldi	r25, 0x06	; 6
     db2:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
  USB.write(0xAB);
     db6:	6b ea       	ldi	r22, 0xAB	; 171
     db8:	82 ec       	ldi	r24, 0xC2	; 194
     dba:	96 e0       	ldi	r25, 0x06	; 6
     dbc:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
  USB.write(0x31);
     dc0:	61 e3       	ldi	r22, 0x31	; 49
     dc2:	82 ec       	ldi	r24, 0xC2	; 194
     dc4:	96 e0       	ldi	r25, 0x06	; 6
     dc6:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>

  if(waitForResponse("mounting USB disk")){       //wait for a response from the CH376S. If CH376S responds, it will be true. If it times out, it will be false.
     dca:	6b e6       	ldi	r22, 0x6B	; 107
     dcc:	74 e0       	ldi	r23, 0x04	; 4
     dce:	ce 01       	movw	r24, r28
     dd0:	01 96       	adiw	r24, 0x01	; 1
     dd2:	0e 94 05 10 	call	0x200a	; 0x200a <_ZN6StringC1EPKc>
     dd6:	ce 01       	movw	r24, r28
     dd8:	01 96       	adiw	r24, 0x01	; 1
     dda:	0e 94 05 05 	call	0xa0a	; 0xa0a <_Z15waitForResponse6String>
     dde:	18 2f       	mov	r17, r24
     de0:	ce 01       	movw	r24, r28
     de2:	01 96       	adiw	r24, 0x01	; 1
     de4:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <_ZN6StringD1Ev>
     de8:	11 23       	and	r17, r17
     dea:	89 f0       	breq	.+34     	; 0xe0e <_Z12USBdiskMountv+0x7e>
    if(getResponseFromUSB()==0x14){               //CH376S will send 0x14 if this command was successful
     dec:	0e 94 1f 06 	call	0xc3e	; 0xc3e <_Z18getResponseFromUSBv>
     df0:	84 31       	cpi	r24, 0x14	; 20
     df2:	39 f4       	brne	.+14     	; 0xe02 <_Z12USBdiskMountv+0x72>
       Serial.println(">USB Mounted - OK");
     df4:	6d e7       	ldi	r22, 0x7D	; 125
     df6:	74 e0       	ldi	r23, 0x04	; 4
     df8:	83 e3       	ldi	r24, 0x33	; 51
     dfa:	97 e0       	ldi	r25, 0x07	; 7
     dfc:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <_ZN5Print7printlnEPKc>
     e00:	06 c0       	rjmp	.+12     	; 0xe0e <_Z12USBdiskMountv+0x7e>
    } else {
      Serial.print(">Failed to Mount USB disk.");
     e02:	6f e8       	ldi	r22, 0x8F	; 143
     e04:	74 e0       	ldi	r23, 0x04	; 4
     e06:	83 e3       	ldi	r24, 0x33	; 51
     e08:	97 e0       	ldi	r25, 0x07	; 7
     e0a:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <_ZN5Print5printEPKc>
    }
  }
}
     e0e:	26 96       	adiw	r28, 0x06	; 6
     e10:	0f b6       	in	r0, 0x3f	; 63
     e12:	f8 94       	cli
     e14:	de bf       	out	0x3e, r29	; 62
     e16:	0f be       	out	0x3f, r0	; 63
     e18:	cd bf       	out	0x3d, r28	; 61
     e1a:	df 91       	pop	r29
     e1c:	cf 91       	pop	r28
     e1e:	1f 91       	pop	r17
     e20:	08 95       	ret

00000e22 <_Z8fileOpenv>:

//fileOpen========================================================================================
//opens the file for reading or writing
void fileOpen(){
     e22:	1f 93       	push	r17
     e24:	cf 93       	push	r28
     e26:	df 93       	push	r29
     e28:	00 d0       	rcall	.+0      	; 0xe2a <_Z8fileOpenv+0x8>
     e2a:	00 d0       	rcall	.+0      	; 0xe2c <_Z8fileOpenv+0xa>
     e2c:	00 d0       	rcall	.+0      	; 0xe2e <_Z8fileOpenv+0xc>
     e2e:	cd b7       	in	r28, 0x3d	; 61
     e30:	de b7       	in	r29, 0x3e	; 62
  Serial.println("Opening file.");
     e32:	6a ea       	ldi	r22, 0xAA	; 170
     e34:	74 e0       	ldi	r23, 0x04	; 4
     e36:	83 e3       	ldi	r24, 0x33	; 51
     e38:	97 e0       	ldi	r25, 0x07	; 7
     e3a:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <_ZN5Print7printlnEPKc>
  USB.write(0x57);
     e3e:	67 e5       	ldi	r22, 0x57	; 87
     e40:	82 ec       	ldi	r24, 0xC2	; 194
     e42:	96 e0       	ldi	r25, 0x06	; 6
     e44:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
  USB.write(0xAB);
     e48:	6b ea       	ldi	r22, 0xAB	; 171
     e4a:	82 ec       	ldi	r24, 0xC2	; 194
     e4c:	96 e0       	ldi	r25, 0x06	; 6
     e4e:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
  USB.write(0x32);
     e52:	62 e3       	ldi	r22, 0x32	; 50
     e54:	82 ec       	ldi	r24, 0xC2	; 194
     e56:	96 e0       	ldi	r25, 0x06	; 6
     e58:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
  if(waitForResponse("file Open")){                 //wait for a response from the CH376S. If CH376S responds, it will be true. If it times out, it will be false.
     e5c:	68 eb       	ldi	r22, 0xB8	; 184
     e5e:	74 e0       	ldi	r23, 0x04	; 4
     e60:	ce 01       	movw	r24, r28
     e62:	01 96       	adiw	r24, 0x01	; 1
     e64:	0e 94 05 10 	call	0x200a	; 0x200a <_ZN6StringC1EPKc>
     e68:	ce 01       	movw	r24, r28
     e6a:	01 96       	adiw	r24, 0x01	; 1
     e6c:	0e 94 05 05 	call	0xa0a	; 0xa0a <_Z15waitForResponse6String>
     e70:	18 2f       	mov	r17, r24
     e72:	ce 01       	movw	r24, r28
     e74:	01 96       	adiw	r24, 0x01	; 1
     e76:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <_ZN6StringD1Ev>
     e7a:	11 23       	and	r17, r17
     e7c:	89 f0       	breq	.+34     	; 0xea0 <_Z8fileOpenv+0x7e>
    if(getResponseFromUSB()==0x14){                 //CH376S will send 0x14 if this command was successful  
     e7e:	0e 94 1f 06 	call	0xc3e	; 0xc3e <_Z18getResponseFromUSBv>
     e82:	84 31       	cpi	r24, 0x14	; 20
     e84:	39 f4       	brne	.+14     	; 0xe94 <_Z8fileOpenv+0x72>
       Serial.println(">File opened successfully.");
     e86:	62 ec       	ldi	r22, 0xC2	; 194
     e88:	74 e0       	ldi	r23, 0x04	; 4
     e8a:	83 e3       	ldi	r24, 0x33	; 51
     e8c:	97 e0       	ldi	r25, 0x07	; 7
     e8e:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <_ZN5Print7printlnEPKc>
     e92:	06 c0       	rjmp	.+12     	; 0xea0 <_Z8fileOpenv+0x7e>
    } else {
      Serial.print(">Failed to open file.");
     e94:	6d ed       	ldi	r22, 0xDD	; 221
     e96:	74 e0       	ldi	r23, 0x04	; 4
     e98:	83 e3       	ldi	r24, 0x33	; 51
     e9a:	97 e0       	ldi	r25, 0x07	; 7
     e9c:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <_ZN5Print5printEPKc>
    }
  }
}
     ea0:	26 96       	adiw	r28, 0x06	; 6
     ea2:	0f b6       	in	r0, 0x3f	; 63
     ea4:	f8 94       	cli
     ea6:	de bf       	out	0x3e, r29	; 62
     ea8:	0f be       	out	0x3f, r0	; 63
     eaa:	cd bf       	out	0x3d, r28	; 61
     eac:	df 91       	pop	r29
     eae:	cf 91       	pop	r28
     eb0:	1f 91       	pop	r17
     eb2:	08 95       	ret

00000eb4 <_Z11setByteReadh>:

//setByteRead=====================================================================================
//This function is required if you want to read data from the file. 
boolean setByteRead(byte numBytes){
     eb4:	1f 93       	push	r17
     eb6:	cf 93       	push	r28
     eb8:	df 93       	push	r29
     eba:	00 d0       	rcall	.+0      	; 0xebc <_Z11setByteReadh+0x8>
     ebc:	00 d0       	rcall	.+0      	; 0xebe <_Z11setByteReadh+0xa>
     ebe:	00 d0       	rcall	.+0      	; 0xec0 <_Z11setByteReadh+0xc>
     ec0:	cd b7       	in	r28, 0x3d	; 61
     ec2:	de b7       	in	r29, 0x3e	; 62
     ec4:	18 2f       	mov	r17, r24
  boolean bytesToRead=false;
  int timeCounter = 0;
  USB.write(0x57);
     ec6:	67 e5       	ldi	r22, 0x57	; 87
     ec8:	82 ec       	ldi	r24, 0xC2	; 194
     eca:	96 e0       	ldi	r25, 0x06	; 6
     ecc:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
  USB.write(0xAB);
     ed0:	6b ea       	ldi	r22, 0xAB	; 171
     ed2:	82 ec       	ldi	r24, 0xC2	; 194
     ed4:	96 e0       	ldi	r25, 0x06	; 6
     ed6:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
  USB.write(0x3A);
     eda:	6a e3       	ldi	r22, 0x3A	; 58
     edc:	82 ec       	ldi	r24, 0xC2	; 194
     ede:	96 e0       	ldi	r25, 0x06	; 6
     ee0:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
  USB.write((byte)numBytes);   //tells the CH376S how many bytes to read at a time
     ee4:	61 2f       	mov	r22, r17
     ee6:	82 ec       	ldi	r24, 0xC2	; 194
     ee8:	96 e0       	ldi	r25, 0x06	; 6
     eea:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
  USB.write((byte)0x00);
     eee:	60 e0       	ldi	r22, 0x00	; 0
     ef0:	82 ec       	ldi	r24, 0xC2	; 194
     ef2:	96 e0       	ldi	r25, 0x06	; 6
     ef4:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
  if(waitForResponse("setByteRead")){       //wait for a response from the CH376S. If CH376S responds, it will be true. If it times out, it will be false.
     ef8:	63 ef       	ldi	r22, 0xF3	; 243
     efa:	74 e0       	ldi	r23, 0x04	; 4
     efc:	ce 01       	movw	r24, r28
     efe:	01 96       	adiw	r24, 0x01	; 1
     f00:	0e 94 05 10 	call	0x200a	; 0x200a <_ZN6StringC1EPKc>
     f04:	ce 01       	movw	r24, r28
     f06:	01 96       	adiw	r24, 0x01	; 1
     f08:	0e 94 05 05 	call	0xa0a	; 0xa0a <_Z15waitForResponse6String>
     f0c:	18 2f       	mov	r17, r24
     f0e:	ce 01       	movw	r24, r28
     f10:	01 96       	adiw	r24, 0x01	; 1
     f12:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <_ZN6StringD1Ev>
     f16:	11 23       	and	r17, r17
     f18:	29 f0       	breq	.+10     	; 0xf24 <_Z11setByteReadh+0x70>
    if(getResponseFromUSB()==0x1D){         //read the CH376S message. If equal to 0x1D, data is present, so return true. Will return 0x14 if no data is present.
     f1a:	0e 94 1f 06 	call	0xc3e	; 0xc3e <_Z18getResponseFromUSBv>
     f1e:	91 e0       	ldi	r25, 0x01	; 1
     f20:	8d 31       	cpi	r24, 0x1D	; 29
     f22:	09 f0       	breq	.+2      	; 0xf26 <_Z11setByteReadh+0x72>
}

//setByteRead=====================================================================================
//This function is required if you want to read data from the file. 
boolean setByteRead(byte numBytes){
  boolean bytesToRead=false;
     f24:	90 e0       	ldi	r25, 0x00	; 0
    if(getResponseFromUSB()==0x1D){         //read the CH376S message. If equal to 0x1D, data is present, so return true. Will return 0x14 if no data is present.
      bytesToRead=true;
    }
  }
  return(bytesToRead);
} 
     f26:	89 2f       	mov	r24, r25
     f28:	26 96       	adiw	r28, 0x06	; 6
     f2a:	0f b6       	in	r0, 0x3f	; 63
     f2c:	f8 94       	cli
     f2e:	de bf       	out	0x3e, r29	; 62
     f30:	0f be       	out	0x3f, r0	; 63
     f32:	cd bf       	out	0x3d, r28	; 61
     f34:	df 91       	pop	r29
     f36:	cf 91       	pop	r28
     f38:	1f 91       	pop	r17
     f3a:	08 95       	ret

00000f3c <_Z10fileCreatev>:
  return(readAgain);
} 

//fileCreate()========================================================================================
//the command sequence to create a file
boolean fileCreate(){
     f3c:	1f 93       	push	r17
     f3e:	cf 93       	push	r28
     f40:	df 93       	push	r29
     f42:	00 d0       	rcall	.+0      	; 0xf44 <_Z10fileCreatev+0x8>
     f44:	00 d0       	rcall	.+0      	; 0xf46 <_Z10fileCreatev+0xa>
     f46:	00 d0       	rcall	.+0      	; 0xf48 <_Z10fileCreatev+0xc>
     f48:	cd b7       	in	r28, 0x3d	; 61
     f4a:	de b7       	in	r29, 0x3e	; 62
  boolean createdFile = false;
  USB.write(0x57);
     f4c:	67 e5       	ldi	r22, 0x57	; 87
     f4e:	82 ec       	ldi	r24, 0xC2	; 194
     f50:	96 e0       	ldi	r25, 0x06	; 6
     f52:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
  USB.write(0xAB);
     f56:	6b ea       	ldi	r22, 0xAB	; 171
     f58:	82 ec       	ldi	r24, 0xC2	; 194
     f5a:	96 e0       	ldi	r25, 0x06	; 6
     f5c:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
  USB.write(0x34);
     f60:	64 e3       	ldi	r22, 0x34	; 52
     f62:	82 ec       	ldi	r24, 0xC2	; 194
     f64:	96 e0       	ldi	r25, 0x06	; 6
     f66:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
  if(waitForResponse("creating file")){       //wait for a response from the CH376S. If file has been created successfully, it will return true.
     f6a:	6f ef       	ldi	r22, 0xFF	; 255
     f6c:	74 e0       	ldi	r23, 0x04	; 4
     f6e:	ce 01       	movw	r24, r28
     f70:	01 96       	adiw	r24, 0x01	; 1
     f72:	0e 94 05 10 	call	0x200a	; 0x200a <_ZN6StringC1EPKc>
     f76:	ce 01       	movw	r24, r28
     f78:	01 96       	adiw	r24, 0x01	; 1
     f7a:	0e 94 05 05 	call	0xa0a	; 0xa0a <_Z15waitForResponse6String>
     f7e:	18 2f       	mov	r17, r24
     f80:	ce 01       	movw	r24, r28
     f82:	01 96       	adiw	r24, 0x01	; 1
     f84:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <_ZN6StringD1Ev>
     f88:	11 23       	and	r17, r17
     f8a:	29 f0       	breq	.+10     	; 0xf96 <_Z10fileCreatev+0x5a>
     if(getResponseFromUSB()==0x14){          //CH376S will send 0x14 if this command was successful
     f8c:	0e 94 1f 06 	call	0xc3e	; 0xc3e <_Z18getResponseFromUSBv>
     f90:	91 e0       	ldi	r25, 0x01	; 1
     f92:	84 31       	cpi	r24, 0x14	; 20
     f94:	09 f0       	breq	.+2      	; 0xf98 <_Z10fileCreatev+0x5c>
} 

//fileCreate()========================================================================================
//the command sequence to create a file
boolean fileCreate(){
  boolean createdFile = false;
     f96:	90 e0       	ldi	r25, 0x00	; 0
     if(getResponseFromUSB()==0x14){          //CH376S will send 0x14 if this command was successful
       createdFile=true;
     }
  }
  return(createdFile);
}
     f98:	89 2f       	mov	r24, r25
     f9a:	26 96       	adiw	r28, 0x06	; 6
     f9c:	0f b6       	in	r0, 0x3f	; 63
     f9e:	f8 94       	cli
     fa0:	de bf       	out	0x3e, r29	; 62
     fa2:	0f be       	out	0x3f, r0	; 63
     fa4:	cd bf       	out	0x3d, r28	; 61
     fa6:	df 91       	pop	r29
     fa8:	cf 91       	pop	r28
     faa:	1f 91       	pop	r17
     fac:	08 95       	ret

00000fae <_Z10fileDelete6String>:


//fileDelete()========================================================================================
//the command sequence to delete a file
void fileDelete(String fileName){
     fae:	1f 93       	push	r17
     fb0:	cf 93       	push	r28
     fb2:	df 93       	push	r29
     fb4:	00 d0       	rcall	.+0      	; 0xfb6 <_Z10fileDelete6String+0x8>
     fb6:	00 d0       	rcall	.+0      	; 0xfb8 <_Z10fileDelete6String+0xa>
     fb8:	00 d0       	rcall	.+0      	; 0xfba <_Z10fileDelete6String+0xc>
     fba:	cd b7       	in	r28, 0x3d	; 61
     fbc:	de b7       	in	r29, 0x3e	; 62
  setFileName(fileName);
     fbe:	bc 01       	movw	r22, r24
     fc0:	ce 01       	movw	r24, r28
     fc2:	01 96       	adiw	r24, 0x01	; 1
     fc4:	0e 94 31 10 	call	0x2062	; 0x2062 <_ZN6StringC1ERKS_>
     fc8:	ce 01       	movw	r24, r28
     fca:	01 96       	adiw	r24, 0x01	; 1
     fcc:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <_Z11setFileName6String>
     fd0:	ce 01       	movw	r24, r28
     fd2:	01 96       	adiw	r24, 0x01	; 1
     fd4:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <_ZN6StringD1Ev>
  delay(20);
     fd8:	64 e1       	ldi	r22, 0x14	; 20
     fda:	70 e0       	ldi	r23, 0x00	; 0
     fdc:	80 e0       	ldi	r24, 0x00	; 0
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <delay>
  USB.write(0x57);
     fe4:	67 e5       	ldi	r22, 0x57	; 87
     fe6:	82 ec       	ldi	r24, 0xC2	; 194
     fe8:	96 e0       	ldi	r25, 0x06	; 6
     fea:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
  USB.write(0xAB);
     fee:	6b ea       	ldi	r22, 0xAB	; 171
     ff0:	82 ec       	ldi	r24, 0xC2	; 194
     ff2:	96 e0       	ldi	r25, 0x06	; 6
     ff4:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
  USB.write(0x35);
     ff8:	65 e3       	ldi	r22, 0x35	; 53
     ffa:	82 ec       	ldi	r24, 0xC2	; 194
     ffc:	96 e0       	ldi	r25, 0x06	; 6
     ffe:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
  if(waitForResponse("deleting file")){       //wait for a response from the CH376S. If file has been created successfully, it will return true.
    1002:	6d e0       	ldi	r22, 0x0D	; 13
    1004:	75 e0       	ldi	r23, 0x05	; 5
    1006:	ce 01       	movw	r24, r28
    1008:	01 96       	adiw	r24, 0x01	; 1
    100a:	0e 94 05 10 	call	0x200a	; 0x200a <_ZN6StringC1EPKc>
    100e:	ce 01       	movw	r24, r28
    1010:	01 96       	adiw	r24, 0x01	; 1
    1012:	0e 94 05 05 	call	0xa0a	; 0xa0a <_Z15waitForResponse6String>
    1016:	18 2f       	mov	r17, r24
    1018:	ce 01       	movw	r24, r28
    101a:	01 96       	adiw	r24, 0x01	; 1
    101c:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <_ZN6StringD1Ev>
    1020:	11 23       	and	r17, r17
    1022:	51 f0       	breq	.+20     	; 0x1038 <_Z10fileDelete6String+0x8a>
     if(getResponseFromUSB()==0x14){          //CH376S will send 0x14 if this command was successful
    1024:	0e 94 1f 06 	call	0xc3e	; 0xc3e <_Z18getResponseFromUSBv>
    1028:	84 31       	cpi	r24, 0x14	; 20
    102a:	31 f4       	brne	.+12     	; 0x1038 <_Z10fileDelete6String+0x8a>
       Serial.println("Successfully deleted file");
    102c:	6b e1       	ldi	r22, 0x1B	; 27
    102e:	75 e0       	ldi	r23, 0x05	; 5
    1030:	83 e3       	ldi	r24, 0x33	; 51
    1032:	97 e0       	ldi	r25, 0x07	; 7
    1034:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <_ZN5Print7printlnEPKc>
     }
  }
}
    1038:	26 96       	adiw	r28, 0x06	; 6
    103a:	0f b6       	in	r0, 0x3f	; 63
    103c:	f8 94       	cli
    103e:	de bf       	out	0x3e, r29	; 62
    1040:	0f be       	out	0x3f, r0	; 63
    1042:	cd bf       	out	0x3d, r28	; 61
    1044:	df 91       	pop	r29
    1046:	cf 91       	pop	r28
    1048:	1f 91       	pop	r17
    104a:	08 95       	ret

0000104c <_Z11filePointerb>:
  

//filePointer========================================================================================
//is used to set the file pointer position. true for beginning of file, false for the end of the file.
void filePointer(boolean fileBeginning){
    104c:	1f 93       	push	r17
    104e:	cf 93       	push	r28
    1050:	df 93       	push	r29
    1052:	00 d0       	rcall	.+0      	; 0x1054 <_Z11filePointerb+0x8>
    1054:	00 d0       	rcall	.+0      	; 0x1056 <_Z11filePointerb+0xa>
    1056:	00 d0       	rcall	.+0      	; 0x1058 <_Z11filePointerb+0xc>
    1058:	cd b7       	in	r28, 0x3d	; 61
    105a:	de b7       	in	r29, 0x3e	; 62
    105c:	18 2f       	mov	r17, r24
  USB.write(0x57);
    105e:	67 e5       	ldi	r22, 0x57	; 87
    1060:	82 ec       	ldi	r24, 0xC2	; 194
    1062:	96 e0       	ldi	r25, 0x06	; 6
    1064:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
  USB.write(0xAB);
    1068:	6b ea       	ldi	r22, 0xAB	; 171
    106a:	82 ec       	ldi	r24, 0xC2	; 194
    106c:	96 e0       	ldi	r25, 0x06	; 6
    106e:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
  USB.write(0x39);
    1072:	69 e3       	ldi	r22, 0x39	; 57
    1074:	82 ec       	ldi	r24, 0xC2	; 194
    1076:	96 e0       	ldi	r25, 0x06	; 6
    1078:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
  if(fileBeginning){
    107c:	11 23       	and	r17, r17
    107e:	89 f0       	breq	.+34     	; 0x10a2 <_Z11filePointerb+0x56>
    USB.write((byte)0x00);             //beginning of file
    1080:	60 e0       	ldi	r22, 0x00	; 0
    1082:	82 ec       	ldi	r24, 0xC2	; 194
    1084:	96 e0       	ldi	r25, 0x06	; 6
    1086:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
    USB.write((byte)0x00);
    108a:	60 e0       	ldi	r22, 0x00	; 0
    108c:	82 ec       	ldi	r24, 0xC2	; 194
    108e:	96 e0       	ldi	r25, 0x06	; 6
    1090:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
    USB.write((byte)0x00);
    1094:	60 e0       	ldi	r22, 0x00	; 0
    1096:	82 ec       	ldi	r24, 0xC2	; 194
    1098:	96 e0       	ldi	r25, 0x06	; 6
    109a:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
    USB.write((byte)0x00);
    109e:	60 e0       	ldi	r22, 0x00	; 0
    10a0:	10 c0       	rjmp	.+32     	; 0x10c2 <_Z11filePointerb+0x76>
  } else {
    USB.write((byte)0xFF);             //end of file
    10a2:	6f ef       	ldi	r22, 0xFF	; 255
    10a4:	82 ec       	ldi	r24, 0xC2	; 194
    10a6:	96 e0       	ldi	r25, 0x06	; 6
    10a8:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
    USB.write((byte)0xFF);
    10ac:	6f ef       	ldi	r22, 0xFF	; 255
    10ae:	82 ec       	ldi	r24, 0xC2	; 194
    10b0:	96 e0       	ldi	r25, 0x06	; 6
    10b2:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
    USB.write((byte)0xFF);
    10b6:	6f ef       	ldi	r22, 0xFF	; 255
    10b8:	82 ec       	ldi	r24, 0xC2	; 194
    10ba:	96 e0       	ldi	r25, 0x06	; 6
    10bc:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
    USB.write((byte)0xFF);
    10c0:	6f ef       	ldi	r22, 0xFF	; 255
    10c2:	82 ec       	ldi	r24, 0xC2	; 194
    10c4:	96 e0       	ldi	r25, 0x06	; 6
    10c6:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
  }
  if(waitForResponse("setting file pointer")){       //wait for a response from the CH376S. 
    10ca:	65 e3       	ldi	r22, 0x35	; 53
    10cc:	75 e0       	ldi	r23, 0x05	; 5
    10ce:	ce 01       	movw	r24, r28
    10d0:	01 96       	adiw	r24, 0x01	; 1
    10d2:	0e 94 05 10 	call	0x200a	; 0x200a <_ZN6StringC1EPKc>
    10d6:	ce 01       	movw	r24, r28
    10d8:	01 96       	adiw	r24, 0x01	; 1
    10da:	0e 94 05 05 	call	0xa0a	; 0xa0a <_Z15waitForResponse6String>
    10de:	18 2f       	mov	r17, r24
    10e0:	ce 01       	movw	r24, r28
    10e2:	01 96       	adiw	r24, 0x01	; 1
    10e4:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <_ZN6StringD1Ev>
    10e8:	11 23       	and	r17, r17
    10ea:	51 f0       	breq	.+20     	; 0x1100 <_Z11filePointerb+0xb4>
     if(getResponseFromUSB()==0x14){                 //CH376S will send 0x14 if this command was successful
    10ec:	0e 94 1f 06 	call	0xc3e	; 0xc3e <_Z18getResponseFromUSBv>
    10f0:	84 31       	cpi	r24, 0x14	; 20
    10f2:	31 f4       	brne	.+12     	; 0x1100 <_Z11filePointerb+0xb4>
       Serial.println("Pointer successfully applied");
    10f4:	6a e4       	ldi	r22, 0x4A	; 74
    10f6:	75 e0       	ldi	r23, 0x05	; 5
    10f8:	83 e3       	ldi	r24, 0x33	; 51
    10fa:	97 e0       	ldi	r25, 0x07	; 7
    10fc:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <_ZN5Print7printlnEPKc>
     }
  }
}
    1100:	26 96       	adiw	r28, 0x06	; 6
    1102:	0f b6       	in	r0, 0x3f	; 63
    1104:	f8 94       	cli
    1106:	de bf       	out	0x3e, r29	; 62
    1108:	0f be       	out	0x3f, r0	; 63
    110a:	cd bf       	out	0x3d, r28	; 61
    110c:	df 91       	pop	r29
    110e:	cf 91       	pop	r28
    1110:	1f 91       	pop	r17
    1112:	08 95       	ret

00001114 <_Z9fileCloseh>:


//fileClose=======================================================================================
//closes the file
void fileClose(byte closeCmd){
    1114:	1f 93       	push	r17
    1116:	cf 93       	push	r28
    1118:	df 93       	push	r29
    111a:	00 d0       	rcall	.+0      	; 0x111c <_Z9fileCloseh+0x8>
    111c:	00 d0       	rcall	.+0      	; 0x111e <_Z9fileCloseh+0xa>
    111e:	00 d0       	rcall	.+0      	; 0x1120 <_Z9fileCloseh+0xc>
    1120:	cd b7       	in	r28, 0x3d	; 61
    1122:	de b7       	in	r29, 0x3e	; 62
    1124:	18 2f       	mov	r17, r24
  Serial.println("Closing file:");
    1126:	67 e6       	ldi	r22, 0x67	; 103
    1128:	75 e0       	ldi	r23, 0x05	; 5
    112a:	83 e3       	ldi	r24, 0x33	; 51
    112c:	97 e0       	ldi	r25, 0x07	; 7
    112e:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <_ZN5Print7printlnEPKc>
  USB.write(0x57);
    1132:	67 e5       	ldi	r22, 0x57	; 87
    1134:	82 ec       	ldi	r24, 0xC2	; 194
    1136:	96 e0       	ldi	r25, 0x06	; 6
    1138:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
  USB.write(0xAB);
    113c:	6b ea       	ldi	r22, 0xAB	; 171
    113e:	82 ec       	ldi	r24, 0xC2	; 194
    1140:	96 e0       	ldi	r25, 0x06	; 6
    1142:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
  USB.write(0x36);
    1146:	66 e3       	ldi	r22, 0x36	; 54
    1148:	82 ec       	ldi	r24, 0xC2	; 194
    114a:	96 e0       	ldi	r25, 0x06	; 6
    114c:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
  USB.write((byte)closeCmd);                                // closeCmd = 0x00 = close without updating file Size, 0x01 = close and update file Size
    1150:	61 2f       	mov	r22, r17
    1152:	82 ec       	ldi	r24, 0xC2	; 194
    1154:	96 e0       	ldi	r25, 0x06	; 6
    1156:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>

  if(waitForResponse("closing file")){                      // wait for a response from the CH376S. 
    115a:	65 e7       	ldi	r22, 0x75	; 117
    115c:	75 e0       	ldi	r23, 0x05	; 5
    115e:	ce 01       	movw	r24, r28
    1160:	01 96       	adiw	r24, 0x01	; 1
    1162:	0e 94 05 10 	call	0x200a	; 0x200a <_ZN6StringC1EPKc>
    1166:	ce 01       	movw	r24, r28
    1168:	01 96       	adiw	r24, 0x01	; 1
    116a:	0e 94 05 05 	call	0xa0a	; 0xa0a <_Z15waitForResponse6String>
    116e:	18 2f       	mov	r17, r24
    1170:	ce 01       	movw	r24, r28
    1172:	01 96       	adiw	r24, 0x01	; 1
    1174:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <_ZN6StringD1Ev>
    1178:	11 23       	and	r17, r17
    117a:	c9 f0       	breq	.+50     	; 0x11ae <_Z9fileCloseh+0x9a>
     byte resp = getResponseFromUSB();
    117c:	0e 94 1f 06 	call	0xc3e	; 0xc3e <_Z18getResponseFromUSBv>
    1180:	18 2f       	mov	r17, r24
     if(resp==0x14){                                        // CH376S will send 0x14 if this command was successful
    1182:	84 31       	cpi	r24, 0x14	; 20
    1184:	39 f4       	brne	.+14     	; 0x1194 <_Z9fileCloseh+0x80>
       Serial.println(">File closed successfully.");
    1186:	62 e8       	ldi	r22, 0x82	; 130
    1188:	75 e0       	ldi	r23, 0x05	; 5
    118a:	83 e3       	ldi	r24, 0x33	; 51
    118c:	97 e0       	ldi	r25, 0x07	; 7
    118e:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <_ZN5Print7printlnEPKc>
    1192:	0d c0       	rjmp	.+26     	; 0x11ae <_Z9fileCloseh+0x9a>
     } else {
       Serial.print(">Failed to close file. Error code:");
    1194:	6d e9       	ldi	r22, 0x9D	; 157
    1196:	75 e0       	ldi	r23, 0x05	; 5
    1198:	83 e3       	ldi	r24, 0x33	; 51
    119a:	97 e0       	ldi	r25, 0x07	; 7
    119c:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <_ZN5Print5printEPKc>
       Serial.println(resp, HEX);
    11a0:	40 e1       	ldi	r20, 0x10	; 16
    11a2:	50 e0       	ldi	r21, 0x00	; 0
    11a4:	61 2f       	mov	r22, r17
    11a6:	83 e3       	ldi	r24, 0x33	; 51
    11a8:	97 e0       	ldi	r25, 0x07	; 7
    11aa:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <_ZN5Print7printlnEhi>
     }  
  }
}
    11ae:	26 96       	adiw	r28, 0x06	; 6
    11b0:	0f b6       	in	r0, 0x3f	; 63
    11b2:	f8 94       	cli
    11b4:	de bf       	out	0x3e, r29	; 62
    11b6:	0f be       	out	0x3f, r0	; 63
    11b8:	cd bf       	out	0x3d, r28	; 61
    11ba:	df 91       	pop	r29
    11bc:	cf 91       	pop	r28
    11be:	1f 91       	pop	r17
    11c0:	08 95       	ret

000011c2 <_Z12continueReadv>:
  }
}

//continueRead()==================================================================================
//continue to read the file : I could not get this function to work as intended.
boolean continueRead(){
    11c2:	1f 93       	push	r17
    11c4:	cf 93       	push	r28
    11c6:	df 93       	push	r29
    11c8:	00 d0       	rcall	.+0      	; 0x11ca <_Z12continueReadv+0x8>
    11ca:	00 d0       	rcall	.+0      	; 0x11cc <_Z12continueReadv+0xa>
    11cc:	00 d0       	rcall	.+0      	; 0x11ce <_Z12continueReadv+0xc>
    11ce:	cd b7       	in	r28, 0x3d	; 61
    11d0:	de b7       	in	r29, 0x3e	; 62
  boolean readAgain = false;
  USB.write(0x57);
    11d2:	67 e5       	ldi	r22, 0x57	; 87
    11d4:	82 ec       	ldi	r24, 0xC2	; 194
    11d6:	96 e0       	ldi	r25, 0x06	; 6
    11d8:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
  USB.write(0xAB);
    11dc:	6b ea       	ldi	r22, 0xAB	; 171
    11de:	82 ec       	ldi	r24, 0xC2	; 194
    11e0:	96 e0       	ldi	r25, 0x06	; 6
    11e2:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
  USB.write(0x3B);
    11e6:	6b e3       	ldi	r22, 0x3B	; 59
    11e8:	82 ec       	ldi	r24, 0xC2	; 194
    11ea:	96 e0       	ldi	r25, 0x06	; 6
    11ec:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
  if(waitForResponse("continueRead")){       //wait for a response from the CH376S. If CH376S responds, it will be true. If it times out, it will be false.
    11f0:	60 ec       	ldi	r22, 0xC0	; 192
    11f2:	75 e0       	ldi	r23, 0x05	; 5
    11f4:	ce 01       	movw	r24, r28
    11f6:	01 96       	adiw	r24, 0x01	; 1
    11f8:	0e 94 05 10 	call	0x200a	; 0x200a <_ZN6StringC1EPKc>
    11fc:	ce 01       	movw	r24, r28
    11fe:	01 96       	adiw	r24, 0x01	; 1
    1200:	0e 94 05 05 	call	0xa0a	; 0xa0a <_Z15waitForResponse6String>
    1204:	18 2f       	mov	r17, r24
    1206:	ce 01       	movw	r24, r28
    1208:	01 96       	adiw	r24, 0x01	; 1
    120a:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <_ZN6StringD1Ev>
    120e:	11 23       	and	r17, r17
    1210:	29 f0       	breq	.+10     	; 0x121c <_Z12continueReadv+0x5a>
  boolean createdFile = false;
  USB.write(0x57);
  USB.write(0xAB);
  USB.write(0x34);
  if(waitForResponse("creating file")){       //wait for a response from the CH376S. If file has been created successfully, it will return true.
     if(getResponseFromUSB()==0x14){          //CH376S will send 0x14 if this command was successful
    1212:	0e 94 1f 06 	call	0xc3e	; 0xc3e <_Z18getResponseFromUSBv>
    1216:	91 e0       	ldi	r25, 0x01	; 1
    1218:	84 31       	cpi	r24, 0x14	; 20
    121a:	09 f0       	breq	.+2      	; 0x121e <_Z12continueReadv+0x5c>
}

//continueRead()==================================================================================
//continue to read the file : I could not get this function to work as intended.
boolean continueRead(){
  boolean readAgain = false;
    121c:	90 e0       	ldi	r25, 0x00	; 0
     if(getResponseFromUSB()==0x14){         //CH376S will send 0x14 if this command was successful
       readAgain=true;
     }
  }
  return(readAgain);
} 
    121e:	89 2f       	mov	r24, r25
    1220:	26 96       	adiw	r28, 0x06	; 6
    1222:	0f b6       	in	r0, 0x3f	; 63
    1224:	f8 94       	cli
    1226:	de bf       	out	0x3e, r29	; 62
    1228:	0f be       	out	0x3f, r0	; 63
    122a:	cd bf       	out	0x3d, r28	; 61
    122c:	df 91       	pop	r29
    122e:	cf 91       	pop	r28
    1230:	1f 91       	pop	r17
    1232:	08 95       	ret

00001234 <_Z9fileWrite6String>:
  Serial.println("NO MORE DATA");
}

//fileWrite=======================================================================================
//are the commands used to write to the file
void fileWrite(String data){
    1234:	ff 92       	push	r15
    1236:	0f 93       	push	r16
    1238:	1f 93       	push	r17
    123a:	cf 93       	push	r28
    123c:	df 93       	push	r29
    123e:	00 d0       	rcall	.+0      	; 0x1240 <_Z9fileWrite6String+0xc>
    1240:	00 d0       	rcall	.+0      	; 0x1242 <_Z9fileWrite6String+0xe>
    1242:	00 d0       	rcall	.+0      	; 0x1244 <_Z9fileWrite6String+0x10>
    1244:	cd b7       	in	r28, 0x3d	; 61
    1246:	de b7       	in	r29, 0x3e	; 62
    1248:	8c 01       	movw	r16, r24
  Serial.println("Writing to file:");
    124a:	6d ec       	ldi	r22, 0xCD	; 205
    124c:	75 e0       	ldi	r23, 0x05	; 5
    124e:	83 e3       	ldi	r24, 0x33	; 51
    1250:	97 e0       	ldi	r25, 0x07	; 7
    1252:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <_ZN5Print7printlnEPKc>
  byte dataLength = (byte) data.length();         // This variable holds the length of the data to be written (in bytes)
    1256:	f8 01       	movw	r30, r16
    1258:	f4 80       	ldd	r15, Z+4	; 0x04
  Serial.println(data);
    125a:	b8 01       	movw	r22, r16
    125c:	83 e3       	ldi	r24, 0x33	; 51
    125e:	97 e0       	ldi	r25, 0x07	; 7
    1260:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <_ZN5Print7printlnERK6String>
  Serial.print("Data Length:");
    1264:	6e ed       	ldi	r22, 0xDE	; 222
    1266:	75 e0       	ldi	r23, 0x05	; 5
    1268:	83 e3       	ldi	r24, 0x33	; 51
    126a:	97 e0       	ldi	r25, 0x07	; 7
    126c:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <_ZN5Print5printEPKc>
  Serial.println(dataLength);
    1270:	4a e0       	ldi	r20, 0x0A	; 10
    1272:	50 e0       	ldi	r21, 0x00	; 0
    1274:	6f 2d       	mov	r22, r15
    1276:	83 e3       	ldi	r24, 0x33	; 51
    1278:	97 e0       	ldi	r25, 0x07	; 7
    127a:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <_ZN5Print7printlnEhi>
  delay(100);
    127e:	64 e6       	ldi	r22, 0x64	; 100
    1280:	70 e0       	ldi	r23, 0x00	; 0
    1282:	80 e0       	ldi	r24, 0x00	; 0
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <delay>
  // This set of commands tells the CH376S module how many bytes to expect from the Arduino.  (defined by the "dataLength" variable)
  USB.write(0x57);
    128a:	67 e5       	ldi	r22, 0x57	; 87
    128c:	82 ec       	ldi	r24, 0xC2	; 194
    128e:	96 e0       	ldi	r25, 0x06	; 6
    1290:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
  USB.write(0xAB);
    1294:	6b ea       	ldi	r22, 0xAB	; 171
    1296:	82 ec       	ldi	r24, 0xC2	; 194
    1298:	96 e0       	ldi	r25, 0x06	; 6
    129a:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
  USB.write(0x3C);
    129e:	6c e3       	ldi	r22, 0x3C	; 60
    12a0:	82 ec       	ldi	r24, 0xC2	; 194
    12a2:	96 e0       	ldi	r25, 0x06	; 6
    12a4:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
  USB.write((byte) dataLength);
    12a8:	6f 2d       	mov	r22, r15
    12aa:	82 ec       	ldi	r24, 0xC2	; 194
    12ac:	96 e0       	ldi	r25, 0x06	; 6
    12ae:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
  USB.write((byte) 0x00);
    12b2:	60 e0       	ldi	r22, 0x00	; 0
    12b4:	82 ec       	ldi	r24, 0xC2	; 194
    12b6:	96 e0       	ldi	r25, 0x06	; 6
    12b8:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
  if(waitForResponse("setting data Length")){      // Wait for an acknowledgement from the CH376S module before trying to send data to it
    12bc:	6b ee       	ldi	r22, 0xEB	; 235
    12be:	75 e0       	ldi	r23, 0x05	; 5
    12c0:	ce 01       	movw	r24, r28
    12c2:	01 96       	adiw	r24, 0x01	; 1
    12c4:	0e 94 05 10 	call	0x200a	; 0x200a <_ZN6StringC1EPKc>
    12c8:	ce 01       	movw	r24, r28
    12ca:	01 96       	adiw	r24, 0x01	; 1
    12cc:	0e 94 05 05 	call	0xa0a	; 0xa0a <_Z15waitForResponse6String>
    12d0:	f8 2e       	mov	r15, r24
    12d2:	ce 01       	movw	r24, r28
    12d4:	01 96       	adiw	r24, 0x01	; 1
    12d6:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <_ZN6StringD1Ev>
    12da:	ff 20       	and	r15, r15
    12dc:	09 f4       	brne	.+2      	; 0x12e0 <_Z9fileWrite6String+0xac>
    12de:	66 c0       	rjmp	.+204    	; 0x13ac <_Z9fileWrite6String+0x178>
    if(getResponseFromUSB()==0x1E){                // 0x1E indicates that the USB device is in write mode.
    12e0:	0e 94 1f 06 	call	0xc3e	; 0xc3e <_Z18getResponseFromUSBv>
    12e4:	8e 31       	cpi	r24, 0x1E	; 30
    12e6:	09 f0       	breq	.+2      	; 0x12ea <_Z9fileWrite6String+0xb6>
    12e8:	61 c0       	rjmp	.+194    	; 0x13ac <_Z9fileWrite6String+0x178>
      USB.write(0x57);
    12ea:	67 e5       	ldi	r22, 0x57	; 87
    12ec:	82 ec       	ldi	r24, 0xC2	; 194
    12ee:	96 e0       	ldi	r25, 0x06	; 6
    12f0:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
      USB.write(0xAB);
    12f4:	6b ea       	ldi	r22, 0xAB	; 171
    12f6:	82 ec       	ldi	r24, 0xC2	; 194
    12f8:	96 e0       	ldi	r25, 0x06	; 6
    12fa:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
      USB.write(0x2D);
    12fe:	6d e2       	ldi	r22, 0x2D	; 45
    1300:	82 ec       	ldi	r24, 0xC2	; 194
    1302:	96 e0       	ldi	r25, 0x06	; 6
    1304:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
      USB.print(data);                             // write the data to the file
    1308:	b8 01       	movw	r22, r16
    130a:	82 ec       	ldi	r24, 0xC2	; 194
    130c:	96 e0       	ldi	r25, 0x06	; 6
    130e:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <_ZN5Print5printERK6String>
  
      if(waitForResponse("writing data to file")){   // wait for an acknowledgement from the CH376S module
    1312:	6f ef       	ldi	r22, 0xFF	; 255
    1314:	75 e0       	ldi	r23, 0x05	; 5
    1316:	ce 01       	movw	r24, r28
    1318:	01 96       	adiw	r24, 0x01	; 1
    131a:	0e 94 05 10 	call	0x200a	; 0x200a <_ZN6StringC1EPKc>
    131e:	ce 01       	movw	r24, r28
    1320:	01 96       	adiw	r24, 0x01	; 1
    1322:	0e 94 05 05 	call	0xa0a	; 0xa0a <_Z15waitForResponse6String>
    1326:	ce 01       	movw	r24, r28
    1328:	01 96       	adiw	r24, 0x01	; 1
    132a:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <_ZN6StringD1Ev>
      }
      Serial.print("Write code (normally FF and 14): ");
    132e:	64 e1       	ldi	r22, 0x14	; 20
    1330:	76 e0       	ldi	r23, 0x06	; 6
    1332:	83 e3       	ldi	r24, 0x33	; 51
    1334:	97 e0       	ldi	r25, 0x07	; 7
    1336:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <_ZN5Print5printEPKc>
      Serial.print(USB.read(),HEX);                // code is normally 0xFF
    133a:	82 ec       	ldi	r24, 0xC2	; 194
    133c:	96 e0       	ldi	r25, 0x06	; 6
    133e:	0e 94 19 02 	call	0x432	; 0x432 <_ZN14SoftwareSerial4readEv>
    1342:	40 e1       	ldi	r20, 0x10	; 16
    1344:	50 e0       	ldi	r21, 0x00	; 0
    1346:	bc 01       	movw	r22, r24
    1348:	83 e3       	ldi	r24, 0x33	; 51
    134a:	97 e0       	ldi	r25, 0x07	; 7
    134c:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <_ZN5Print5printEii>
      Serial.print(",");
    1350:	66 e3       	ldi	r22, 0x36	; 54
    1352:	76 e0       	ldi	r23, 0x06	; 6
    1354:	83 e3       	ldi	r24, 0x33	; 51
    1356:	97 e0       	ldi	r25, 0x07	; 7
    1358:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <_ZN5Print5printEPKc>
      USB.write(0x57);
    135c:	67 e5       	ldi	r22, 0x57	; 87
    135e:	82 ec       	ldi	r24, 0xC2	; 194
    1360:	96 e0       	ldi	r25, 0x06	; 6
    1362:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
      USB.write(0xAB);
    1366:	6b ea       	ldi	r22, 0xAB	; 171
    1368:	82 ec       	ldi	r24, 0xC2	; 194
    136a:	96 e0       	ldi	r25, 0x06	; 6
    136c:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
      USB.write(0x3D);                             // This is used to update the file size. Not sure if this is necessary for successful writing.
    1370:	6d e3       	ldi	r22, 0x3D	; 61
    1372:	82 ec       	ldi	r24, 0xC2	; 194
    1374:	96 e0       	ldi	r25, 0x06	; 6
    1376:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
      if(waitForResponse("updating file size")){   // wait for an acknowledgement from the CH376S module
    137a:	68 e3       	ldi	r22, 0x38	; 56
    137c:	76 e0       	ldi	r23, 0x06	; 6
    137e:	ce 01       	movw	r24, r28
    1380:	01 96       	adiw	r24, 0x01	; 1
    1382:	0e 94 05 10 	call	0x200a	; 0x200a <_ZN6StringC1EPKc>
    1386:	ce 01       	movw	r24, r28
    1388:	01 96       	adiw	r24, 0x01	; 1
    138a:	0e 94 05 05 	call	0xa0a	; 0xa0a <_Z15waitForResponse6String>
    138e:	ce 01       	movw	r24, r28
    1390:	01 96       	adiw	r24, 0x01	; 1
    1392:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <_ZN6StringD1Ev>
      }
      Serial.println(USB.read(),HEX);              //code is normally 0x14
    1396:	82 ec       	ldi	r24, 0xC2	; 194
    1398:	96 e0       	ldi	r25, 0x06	; 6
    139a:	0e 94 19 02 	call	0x432	; 0x432 <_ZN14SoftwareSerial4readEv>
    139e:	40 e1       	ldi	r20, 0x10	; 16
    13a0:	50 e0       	ldi	r21, 0x00	; 0
    13a2:	bc 01       	movw	r22, r24
    13a4:	83 e3       	ldi	r24, 0x33	; 51
    13a6:	97 e0       	ldi	r25, 0x07	; 7
    13a8:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <_ZN5Print7printlnEii>
    }
  }
}
    13ac:	26 96       	adiw	r28, 0x06	; 6
    13ae:	0f b6       	in	r0, 0x3f	; 63
    13b0:	f8 94       	cli
    13b2:	de bf       	out	0x3e, r29	; 62
    13b4:	0f be       	out	0x3f, r0	; 63
    13b6:	cd bf       	out	0x3d, r28	; 61
    13b8:	df 91       	pop	r29
    13ba:	cf 91       	pop	r28
    13bc:	1f 91       	pop	r17
    13be:	0f 91       	pop	r16
    13c0:	ff 90       	pop	r15
    13c2:	08 95       	ret

000013c4 <_Z9writeFile6StringS_>:
  fileClose(0x00);                //Close the file
}

//writeFile========================================================================================
//is used to create a new file and then write data to that file. "fileName" is a variable used to hold the name of the file (e.g TEST.TXT). "data" should not be greater than 255 bytes long. 
void writeFile(String fileName, String data){
    13c4:	ef 92       	push	r14
    13c6:	ff 92       	push	r15
    13c8:	0f 93       	push	r16
    13ca:	1f 93       	push	r17
    13cc:	cf 93       	push	r28
    13ce:	df 93       	push	r29
    13d0:	00 d0       	rcall	.+0      	; 0x13d2 <_Z9writeFile6StringS_+0xe>
    13d2:	00 d0       	rcall	.+0      	; 0x13d4 <_Z9writeFile6StringS_+0x10>
    13d4:	00 d0       	rcall	.+0      	; 0x13d6 <_Z9writeFile6StringS_+0x12>
    13d6:	cd b7       	in	r28, 0x3d	; 61
    13d8:	de b7       	in	r29, 0x3e	; 62
    13da:	7c 01       	movw	r14, r24
    13dc:	8b 01       	movw	r16, r22
  resetALL();                     //Reset the module
    13de:	0e 94 b6 04 	call	0x96c	; 0x96c <_Z8resetALLv>
  set_USB_Mode(0x06);             //Set to USB Mode
    13e2:	86 e0       	ldi	r24, 0x06	; 6
    13e4:	0e 94 3a 05 	call	0xa74	; 0xa74 <_Z12set_USB_Modeh>
  diskConnectionStatus();         //Check that communication with the USB device is possible
    13e8:	0e 94 7f 06 	call	0xcfe	; 0xcfe <_Z20diskConnectionStatusv>
  USBdiskMount();                 //Prepare the USB for reading/writing - you need to mount the USB disk for proper read/write operations.
    13ec:	0e 94 c8 06 	call	0xd90	; 0xd90 <_Z12USBdiskMountv>
  setFileName(fileName);          //Set File name
    13f0:	b7 01       	movw	r22, r14
    13f2:	ce 01       	movw	r24, r28
    13f4:	01 96       	adiw	r24, 0x01	; 1
    13f6:	0e 94 31 10 	call	0x2062	; 0x2062 <_ZN6StringC1ERKS_>
    13fa:	ce 01       	movw	r24, r28
    13fc:	01 96       	adiw	r24, 0x01	; 1
    13fe:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <_Z11setFileName6String>
    1402:	ce 01       	movw	r24, r28
    1404:	01 96       	adiw	r24, 0x01	; 1
    1406:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <_ZN6StringD1Ev>
  if(fileCreate()){               //Try to create a new file. If file creation is successful
    140a:	0e 94 9e 07 	call	0xf3c	; 0xf3c <_Z10fileCreatev>
    140e:	88 23       	and	r24, r24
    1410:	71 f0       	breq	.+28     	; 0x142e <_Z9writeFile6StringS_+0x6a>
    fileWrite(data);              //write data to the file.
    1412:	b8 01       	movw	r22, r16
    1414:	ce 01       	movw	r24, r28
    1416:	01 96       	adiw	r24, 0x01	; 1
    1418:	0e 94 31 10 	call	0x2062	; 0x2062 <_ZN6StringC1ERKS_>
    141c:	ce 01       	movw	r24, r28
    141e:	01 96       	adiw	r24, 0x01	; 1
    1420:	0e 94 1a 09 	call	0x1234	; 0x1234 <_Z9fileWrite6String>
    1424:	ce 01       	movw	r24, r28
    1426:	01 96       	adiw	r24, 0x01	; 1
    1428:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <_ZN6StringD1Ev>
    142c:	06 c0       	rjmp	.+12     	; 0x143a <_Z9writeFile6StringS_+0x76>
  } else {
    Serial.println("File could not be created, or it already exists");
    142e:	6b e4       	ldi	r22, 0x4B	; 75
    1430:	76 e0       	ldi	r23, 0x06	; 6
    1432:	83 e3       	ldi	r24, 0x33	; 51
    1434:	97 e0       	ldi	r25, 0x07	; 7
    1436:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <_ZN5Print7printlnEPKc>
  }
  fileClose(0x01);
    143a:	81 e0       	ldi	r24, 0x01	; 1
    143c:	0e 94 8a 08 	call	0x1114	; 0x1114 <_Z9fileCloseh>
}
    1440:	26 96       	adiw	r28, 0x06	; 6
    1442:	0f b6       	in	r0, 0x3f	; 63
    1444:	f8 94       	cli
    1446:	de bf       	out	0x3e, r29	; 62
    1448:	0f be       	out	0x3f, r0	; 63
    144a:	cd bf       	out	0x3d, r28	; 61
    144c:	df 91       	pop	r29
    144e:	cf 91       	pop	r28
    1450:	1f 91       	pop	r17
    1452:	0f 91       	pop	r16
    1454:	ff 90       	pop	r15
    1456:	ef 90       	pop	r14
    1458:	08 95       	ret

0000145a <_Z10appendFile6StringS_>:

//appendFile()====================================================================================
//is used to write data to the end of the file, without erasing the contents of the file.
void appendFile(String fileName, String data){
    145a:	ef 92       	push	r14
    145c:	ff 92       	push	r15
    145e:	0f 93       	push	r16
    1460:	1f 93       	push	r17
    1462:	cf 93       	push	r28
    1464:	df 93       	push	r29
    1466:	00 d0       	rcall	.+0      	; 0x1468 <_Z10appendFile6StringS_+0xe>
    1468:	00 d0       	rcall	.+0      	; 0x146a <_Z10appendFile6StringS_+0x10>
    146a:	00 d0       	rcall	.+0      	; 0x146c <_Z10appendFile6StringS_+0x12>
    146c:	cd b7       	in	r28, 0x3d	; 61
    146e:	de b7       	in	r29, 0x3e	; 62
    1470:	7c 01       	movw	r14, r24
    1472:	8b 01       	movw	r16, r22
    resetALL();                     //Reset the module
    1474:	0e 94 b6 04 	call	0x96c	; 0x96c <_Z8resetALLv>
    set_USB_Mode(0x06);             //Set to USB Mode
    1478:	86 e0       	ldi	r24, 0x06	; 6
    147a:	0e 94 3a 05 	call	0xa74	; 0xa74 <_Z12set_USB_Modeh>
    diskConnectionStatus();         //Check that communication with the USB device is possible
    147e:	0e 94 7f 06 	call	0xcfe	; 0xcfe <_Z20diskConnectionStatusv>
    USBdiskMount();                 //Prepare the USB for reading/writing - you need to mount the USB disk for proper read/write operations.
    1482:	0e 94 c8 06 	call	0xd90	; 0xd90 <_Z12USBdiskMountv>
    setFileName(fileName);          //Set File name
    1486:	b7 01       	movw	r22, r14
    1488:	ce 01       	movw	r24, r28
    148a:	01 96       	adiw	r24, 0x01	; 1
    148c:	0e 94 31 10 	call	0x2062	; 0x2062 <_ZN6StringC1ERKS_>
    1490:	ce 01       	movw	r24, r28
    1492:	01 96       	adiw	r24, 0x01	; 1
    1494:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <_Z11setFileName6String>
    1498:	ce 01       	movw	r24, r28
    149a:	01 96       	adiw	r24, 0x01	; 1
    149c:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <_ZN6StringD1Ev>
    fileOpen();                     //Open the file
    14a0:	0e 94 11 07 	call	0xe22	; 0xe22 <_Z8fileOpenv>
    filePointer(false);             //filePointer(false) is to set the pointer at the end of the file.  filePointer(true) will set the pointer to the beginning.
    14a4:	80 e0       	ldi	r24, 0x00	; 0
    14a6:	0e 94 26 08 	call	0x104c	; 0x104c <_Z11filePointerb>
    fileWrite(data);                //Write data to the end of the file
    14aa:	b8 01       	movw	r22, r16
    14ac:	ce 01       	movw	r24, r28
    14ae:	01 96       	adiw	r24, 0x01	; 1
    14b0:	0e 94 31 10 	call	0x2062	; 0x2062 <_ZN6StringC1ERKS_>
    14b4:	ce 01       	movw	r24, r28
    14b6:	01 96       	adiw	r24, 0x01	; 1
    14b8:	0e 94 1a 09 	call	0x1234	; 0x1234 <_Z9fileWrite6String>
    14bc:	ce 01       	movw	r24, r28
    14be:	01 96       	adiw	r24, 0x01	; 1
    14c0:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <_ZN6StringD1Ev>
    fileClose(0x01);                //Close the file using 0x01 - which means to update the size of the file on close. 
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	0e 94 8a 08 	call	0x1114	; 0x1114 <_Z9fileCloseh>
}
    14ca:	26 96       	adiw	r28, 0x06	; 6
    14cc:	0f b6       	in	r0, 0x3f	; 63
    14ce:	f8 94       	cli
    14d0:	de bf       	out	0x3e, r29	; 62
    14d2:	0f be       	out	0x3f, r0	; 63
    14d4:	cd bf       	out	0x3d, r28	; 61
    14d6:	df 91       	pop	r29
    14d8:	cf 91       	pop	r28
    14da:	1f 91       	pop	r17
    14dc:	0f 91       	pop	r16
    14de:	ff 90       	pop	r15
    14e0:	ef 90       	pop	r14
    14e2:	08 95       	ret

000014e4 <_Z8fileReadv>:
}


//fileRead========================================================================================
//read the contents of the file
void fileRead(){
    14e4:	1f 93       	push	r17
    14e6:	cf 93       	push	r28
    14e8:	df 93       	push	r29
    14ea:	00 d0       	rcall	.+0      	; 0x14ec <_Z8fileReadv+0x8>
    14ec:	00 d0       	rcall	.+0      	; 0x14ee <_Z8fileReadv+0xa>
    14ee:	00 d0       	rcall	.+0      	; 0x14f0 <_Z8fileReadv+0xc>
    14f0:	cd b7       	in	r28, 0x3d	; 61
    14f2:	de b7       	in	r29, 0x3e	; 62
  Serial.println("Reading file:");
    14f4:	6b e7       	ldi	r22, 0x7B	; 123
    14f6:	76 e0       	ldi	r23, 0x06	; 6
    14f8:	83 e3       	ldi	r24, 0x33	; 51
    14fa:	97 e0       	ldi	r25, 0x07	; 7
    14fc:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <_ZN5Print7printlnEPKc>
  byte firstByte = 0x00;                     //Variable to hold the firstByte from every transmission.  Can be used as a checkSum if required.
  byte numBytes = 0x40;                      //The maximum value is 0x40  =  64 bytes
 
  while(setByteRead(numBytes)){              //This tells the CH376S module how many bytes to read on the next reading step. In this example, we will read 0x10 bytes at a time. Returns true if there are bytes to read, false if there are no more bytes to read.
    1500:	80 e4       	ldi	r24, 0x40	; 64
    1502:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <_Z11setByteReadh>
    1506:	81 11       	cpse	r24, r1
    1508:	14 c0       	rjmp	.+40     	; 0x1532 <_Z8fileReadv+0x4e>
    }
    if(!continueRead()){                       //prepares the module for further reading. If false, stop reading.
      break;                                   //You need the continueRead() method if the data to be read from the USB device is greater than numBytes.
    }
  }
  Serial.println();
    150a:	83 e3       	ldi	r24, 0x33	; 51
    150c:	97 e0       	ldi	r25, 0x07	; 7
    150e:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <_ZN5Print7printlnEv>
  Serial.println("NO MORE DATA");
    1512:	69 e8       	ldi	r22, 0x89	; 137
    1514:	76 e0       	ldi	r23, 0x06	; 6
    1516:	83 e3       	ldi	r24, 0x33	; 51
    1518:	97 e0       	ldi	r25, 0x07	; 7
    151a:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <_ZN5Print7printlnEPKc>
}
    151e:	26 96       	adiw	r28, 0x06	; 6
    1520:	0f b6       	in	r0, 0x3f	; 63
    1522:	f8 94       	cli
    1524:	de bf       	out	0x3e, r29	; 62
    1526:	0f be       	out	0x3f, r0	; 63
    1528:	cd bf       	out	0x3d, r28	; 61
    152a:	df 91       	pop	r29
    152c:	cf 91       	pop	r28
    152e:	1f 91       	pop	r17
    1530:	08 95       	ret
  Serial.println("Reading file:");
  byte firstByte = 0x00;                     //Variable to hold the firstByte from every transmission.  Can be used as a checkSum if required.
  byte numBytes = 0x40;                      //The maximum value is 0x40  =  64 bytes
 
  while(setByteRead(numBytes)){              //This tells the CH376S module how many bytes to read on the next reading step. In this example, we will read 0x10 bytes at a time. Returns true if there are bytes to read, false if there are no more bytes to read.
    USB.write(0x57);
    1532:	67 e5       	ldi	r22, 0x57	; 87
    1534:	82 ec       	ldi	r24, 0xC2	; 194
    1536:	96 e0       	ldi	r25, 0x06	; 6
    1538:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
    USB.write(0xAB);
    153c:	6b ea       	ldi	r22, 0xAB	; 171
    153e:	82 ec       	ldi	r24, 0xC2	; 194
    1540:	96 e0       	ldi	r25, 0x06	; 6
    1542:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
    USB.write(0x27);                          //Command to read ALL of the bytes (allocated by setByteRead(x))
    1546:	67 e2       	ldi	r22, 0x27	; 39
    1548:	82 ec       	ldi	r24, 0xC2	; 194
    154a:	96 e0       	ldi	r25, 0x06	; 6
    154c:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN14SoftwareSerial5writeEh>
    if(waitForResponse("reading data")){      //Wait for the CH376S module to return data. TimeOut will return false. If data is being transmitted, it will return true.
    1550:	66 e9       	ldi	r22, 0x96	; 150
    1552:	76 e0       	ldi	r23, 0x06	; 6
    1554:	ce 01       	movw	r24, r28
    1556:	01 96       	adiw	r24, 0x01	; 1
    1558:	0e 94 05 10 	call	0x200a	; 0x200a <_ZN6StringC1EPKc>
    155c:	ce 01       	movw	r24, r28
    155e:	01 96       	adiw	r24, 0x01	; 1
    1560:	0e 94 05 05 	call	0xa0a	; 0xa0a <_Z15waitForResponse6String>
    1564:	18 2f       	mov	r17, r24
    1566:	ce 01       	movw	r24, r28
    1568:	01 96       	adiw	r24, 0x01	; 1
    156a:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <_ZN6StringD1Ev>
    156e:	11 23       	and	r17, r17
    1570:	d1 f0       	breq	.+52     	; 0x15a6 <_Z8fileReadv+0xc2>
        firstByte=USB.read();                 //Read the first byte
    1572:	82 ec       	ldi	r24, 0xC2	; 194
    1574:	96 e0       	ldi	r25, 0x06	; 6
    1576:	0e 94 19 02 	call	0x432	; 0x432 <_ZN14SoftwareSerial4readEv>
        while(USB.available()){
    157a:	82 ec       	ldi	r24, 0xC2	; 194
    157c:	96 e0       	ldi	r25, 0x06	; 6
    157e:	0e 94 a3 02 	call	0x546	; 0x546 <_ZN14SoftwareSerial9availableEv>
    1582:	89 2b       	or	r24, r25
    1584:	81 f0       	breq	.+32     	; 0x15a6 <_Z8fileReadv+0xc2>
          Serial.write(USB.read());           //Send the data from the USB disk to the Serial monitor
    1586:	82 ec       	ldi	r24, 0xC2	; 194
    1588:	96 e0       	ldi	r25, 0x06	; 6
    158a:	0e 94 19 02 	call	0x432	; 0x432 <_ZN14SoftwareSerial4readEv>
    virtual void flush(void);
    virtual size_t write(uint8_t);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    158e:	68 2f       	mov	r22, r24
    1590:	83 e3       	ldi	r24, 0x33	; 51
    1592:	97 e0       	ldi	r25, 0x07	; 7
    1594:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <_ZN14HardwareSerial5writeEh>
          delay(1);                           //This delay is necessary for successful Serial transmission
    1598:	61 e0       	ldi	r22, 0x01	; 1
    159a:	70 e0       	ldi	r23, 0x00	; 0
    159c:	80 e0       	ldi	r24, 0x00	; 0
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <delay>
    USB.write(0x57);
    USB.write(0xAB);
    USB.write(0x27);                          //Command to read ALL of the bytes (allocated by setByteRead(x))
    if(waitForResponse("reading data")){      //Wait for the CH376S module to return data. TimeOut will return false. If data is being transmitted, it will return true.
        firstByte=USB.read();                 //Read the first byte
        while(USB.available()){
    15a4:	ea cf       	rjmp	.-44     	; 0x157a <_Z8fileReadv+0x96>
          Serial.write(USB.read());           //Send the data from the USB disk to the Serial monitor
          delay(1);                           //This delay is necessary for successful Serial transmission
        }
    }
    if(!continueRead()){                       //prepares the module for further reading. If false, stop reading.
    15a6:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <_Z12continueReadv>
    15aa:	81 11       	cpse	r24, r1
    15ac:	a9 cf       	rjmp	.-174    	; 0x1500 <_Z8fileReadv+0x1c>
    15ae:	ad cf       	rjmp	.-166    	; 0x150a <_Z8fileReadv+0x26>

000015b0 <_Z8readFile6String>:
    delay(200);
}

//readFile=====================================================================================
//This will send a series of commands to read data from a specific file (defined by fileName)
void readFile(String fileName){
    15b0:	0f 93       	push	r16
    15b2:	1f 93       	push	r17
    15b4:	cf 93       	push	r28
    15b6:	df 93       	push	r29
    15b8:	00 d0       	rcall	.+0      	; 0x15ba <_Z8readFile6String+0xa>
    15ba:	00 d0       	rcall	.+0      	; 0x15bc <_Z8readFile6String+0xc>
    15bc:	00 d0       	rcall	.+0      	; 0x15be <_Z8readFile6String+0xe>
    15be:	cd b7       	in	r28, 0x3d	; 61
    15c0:	de b7       	in	r29, 0x3e	; 62
    15c2:	8c 01       	movw	r16, r24
  resetALL();                     //Reset the module
    15c4:	0e 94 b6 04 	call	0x96c	; 0x96c <_Z8resetALLv>
  set_USB_Mode(0x06);             //Set to USB Mode
    15c8:	86 e0       	ldi	r24, 0x06	; 6
    15ca:	0e 94 3a 05 	call	0xa74	; 0xa74 <_Z12set_USB_Modeh>
  diskConnectionStatus();         //Check that communication with the USB device is possible
    15ce:	0e 94 7f 06 	call	0xcfe	; 0xcfe <_Z20diskConnectionStatusv>
  USBdiskMount();                 //Prepare the USB for reading/writing - you need to mount the USB disk for proper read/write operations.
    15d2:	0e 94 c8 06 	call	0xd90	; 0xd90 <_Z12USBdiskMountv>
  setFileName(fileName);          //Set File name
    15d6:	b8 01       	movw	r22, r16
    15d8:	ce 01       	movw	r24, r28
    15da:	01 96       	adiw	r24, 0x01	; 1
    15dc:	0e 94 31 10 	call	0x2062	; 0x2062 <_ZN6StringC1ERKS_>
    15e0:	ce 01       	movw	r24, r28
    15e2:	01 96       	adiw	r24, 0x01	; 1
    15e4:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <_Z11setFileName6String>
    15e8:	ce 01       	movw	r24, r28
    15ea:	01 96       	adiw	r24, 0x01	; 1
    15ec:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <_ZN6StringD1Ev>
  fileOpen();                     //Open the file for reading
    15f0:	0e 94 11 07 	call	0xe22	; 0xe22 <_Z8fileOpenv>
  int fs = getFileSize();         //Get the size of the file
    15f4:	0e 94 99 05 	call	0xb32	; 0xb32 <_Z11getFileSizev>
  fileRead();                     //***** Send the command to read the file ***
    15f8:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <_Z8fileReadv>
  fileClose(0x00);                //Close the file
    15fc:	80 e0       	ldi	r24, 0x00	; 0
    15fe:	0e 94 8a 08 	call	0x1114	; 0x1114 <_Z9fileCloseh>
}
    1602:	26 96       	adiw	r28, 0x06	; 6
    1604:	0f b6       	in	r0, 0x3f	; 63
    1606:	f8 94       	cli
    1608:	de bf       	out	0x3e, r29	; 62
    160a:	0f be       	out	0x3f, r0	; 63
    160c:	cd bf       	out	0x3d, r28	; 61
    160e:	df 91       	pop	r29
    1610:	cf 91       	pop	r28
    1612:	1f 91       	pop	r17
    1614:	0f 91       	pop	r16
    1616:	08 95       	ret

00001618 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1618:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    161a:	91 8d       	ldd	r25, Z+25	; 0x19
    161c:	22 8d       	ldd	r18, Z+26	; 0x1a
    161e:	89 2f       	mov	r24, r25
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	80 5c       	subi	r24, 0xC0	; 192
    1624:	9f 4f       	sbci	r25, 0xFF	; 255
    1626:	82 1b       	sub	r24, r18
    1628:	91 09       	sbc	r25, r1
}
    162a:	8f 73       	andi	r24, 0x3F	; 63
    162c:	99 27       	eor	r25, r25
    162e:	08 95       	ret

00001630 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    1630:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    1632:	91 8d       	ldd	r25, Z+25	; 0x19
    1634:	82 8d       	ldd	r24, Z+26	; 0x1a
    1636:	98 17       	cp	r25, r24
    1638:	31 f0       	breq	.+12     	; 0x1646 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    163a:	82 8d       	ldd	r24, Z+26	; 0x1a
    163c:	e8 0f       	add	r30, r24
    163e:	f1 1d       	adc	r31, r1
    1640:	85 8d       	ldd	r24, Z+29	; 0x1d
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1646:	8f ef       	ldi	r24, 0xFF	; 255
    1648:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    164a:	08 95       	ret

0000164c <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    164c:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    164e:	91 8d       	ldd	r25, Z+25	; 0x19
    1650:	82 8d       	ldd	r24, Z+26	; 0x1a
    1652:	98 17       	cp	r25, r24
    1654:	61 f0       	breq	.+24     	; 0x166e <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1656:	82 8d       	ldd	r24, Z+26	; 0x1a
    1658:	df 01       	movw	r26, r30
    165a:	a8 0f       	add	r26, r24
    165c:	b1 1d       	adc	r27, r1
    165e:	5d 96       	adiw	r26, 0x1d	; 29
    1660:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1662:	92 8d       	ldd	r25, Z+26	; 0x1a
    1664:	9f 5f       	subi	r25, 0xFF	; 255
    1666:	9f 73       	andi	r25, 0x3F	; 63
    1668:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    166e:	8f ef       	ldi	r24, 0xFF	; 255
    1670:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1672:	08 95       	ret

00001674 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1674:	8f e8       	ldi	r24, 0x8F	; 143
    1676:	9c e0       	ldi	r25, 0x0C	; 12
    1678:	89 2b       	or	r24, r25
    167a:	49 f0       	breq	.+18     	; 0x168e <_Z14serialEventRunv+0x1a>
    167c:	80 e0       	ldi	r24, 0x00	; 0
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	89 2b       	or	r24, r25
    1682:	29 f0       	breq	.+10     	; 0x168e <_Z14serialEventRunv+0x1a>
    1684:	0e 94 8f 0c 	call	0x191e	; 0x191e <_Z17Serial0_availablev>
    1688:	81 11       	cpse	r24, r1
    168a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    168e:	08 95       	ret

00001690 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1690:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1692:	84 8d       	ldd	r24, Z+28	; 0x1c
    1694:	df 01       	movw	r26, r30
    1696:	a8 0f       	add	r26, r24
    1698:	b1 1d       	adc	r27, r1
    169a:	a3 5a       	subi	r26, 0xA3	; 163
    169c:	bf 4f       	sbci	r27, 0xFF	; 255
    169e:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    16a0:	84 8d       	ldd	r24, Z+28	; 0x1c
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	01 96       	adiw	r24, 0x01	; 1
    16a6:	8f 73       	andi	r24, 0x3F	; 63
    16a8:	99 27       	eor	r25, r25
    16aa:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    16ac:	a6 89       	ldd	r26, Z+22	; 0x16
    16ae:	b7 89       	ldd	r27, Z+23	; 0x17
    16b0:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    16b2:	a0 89       	ldd	r26, Z+16	; 0x10
    16b4:	b1 89       	ldd	r27, Z+17	; 0x11
    16b6:	8c 91       	ld	r24, X
    16b8:	80 64       	ori	r24, 0x40	; 64
    16ba:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    16bc:	93 8d       	ldd	r25, Z+27	; 0x1b
    16be:	84 8d       	ldd	r24, Z+28	; 0x1c
    16c0:	98 13       	cpse	r25, r24
    16c2:	06 c0       	rjmp	.+12     	; 0x16d0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    16c4:	02 88       	ldd	r0, Z+18	; 0x12
    16c6:	f3 89       	ldd	r31, Z+19	; 0x13
    16c8:	e0 2d       	mov	r30, r0
    16ca:	80 81       	ld	r24, Z
    16cc:	8f 7d       	andi	r24, 0xDF	; 223
    16ce:	80 83       	st	Z, r24
    16d0:	08 95       	ret

000016d2 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    16d2:	ef 92       	push	r14
    16d4:	ff 92       	push	r15
    16d6:	0f 93       	push	r16
    16d8:	1f 93       	push	r17
    16da:	cf 93       	push	r28
    16dc:	df 93       	push	r29
    16de:	ec 01       	movw	r28, r24
  _written = true;
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    16e4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    16e6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    16e8:	98 13       	cpse	r25, r24
    16ea:	05 c0       	rjmp	.+10     	; 0x16f6 <_ZN14HardwareSerial5writeEh+0x24>
    16ec:	e8 89       	ldd	r30, Y+16	; 0x10
    16ee:	f9 89       	ldd	r31, Y+17	; 0x11
    16f0:	80 81       	ld	r24, Z
    16f2:	85 fd       	sbrc	r24, 5
    16f4:	24 c0       	rjmp	.+72     	; 0x173e <_ZN14HardwareSerial5writeEh+0x6c>
    16f6:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    16f8:	0b 8d       	ldd	r16, Y+27	; 0x1b
    16fa:	10 e0       	ldi	r17, 0x00	; 0
    16fc:	0f 5f       	subi	r16, 0xFF	; 255
    16fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1700:	0f 73       	andi	r16, 0x3F	; 63
    1702:	11 27       	eor	r17, r17
    1704:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1706:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1708:	e8 12       	cpse	r14, r24
    170a:	0c c0       	rjmp	.+24     	; 0x1724 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    170c:	0f b6       	in	r0, 0x3f	; 63
    170e:	07 fc       	sbrc	r0, 7
    1710:	fa cf       	rjmp	.-12     	; 0x1706 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1712:	e8 89       	ldd	r30, Y+16	; 0x10
    1714:	f9 89       	ldd	r31, Y+17	; 0x11
    1716:	80 81       	ld	r24, Z
    1718:	85 ff       	sbrs	r24, 5
    171a:	f5 cf       	rjmp	.-22     	; 0x1706 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    171c:	ce 01       	movw	r24, r28
    171e:	0e 94 48 0b 	call	0x1690	; 0x1690 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1722:	f1 cf       	rjmp	.-30     	; 0x1706 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1724:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1726:	fe 01       	movw	r30, r28
    1728:	e8 0f       	add	r30, r24
    172a:	f1 1d       	adc	r31, r1
    172c:	e3 5a       	subi	r30, 0xA3	; 163
    172e:	ff 4f       	sbci	r31, 0xFF	; 255
    1730:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    1732:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    1734:	ea 89       	ldd	r30, Y+18	; 0x12
    1736:	fb 89       	ldd	r31, Y+19	; 0x13
    1738:	80 81       	ld	r24, Z
    173a:	80 62       	ori	r24, 0x20	; 32
    173c:	07 c0       	rjmp	.+14     	; 0x174c <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    173e:	ee 89       	ldd	r30, Y+22	; 0x16
    1740:	ff 89       	ldd	r31, Y+23	; 0x17
    1742:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    1744:	e8 89       	ldd	r30, Y+16	; 0x10
    1746:	f9 89       	ldd	r31, Y+17	; 0x11
    1748:	80 81       	ld	r24, Z
    174a:	80 64       	ori	r24, 0x40	; 64
    174c:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    174e:	81 e0       	ldi	r24, 0x01	; 1
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	df 91       	pop	r29
    1754:	cf 91       	pop	r28
    1756:	1f 91       	pop	r17
    1758:	0f 91       	pop	r16
    175a:	ff 90       	pop	r15
    175c:	ef 90       	pop	r14
    175e:	08 95       	ret

00001760 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1760:	cf 93       	push	r28
    1762:	df 93       	push	r29
    1764:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1766:	88 8d       	ldd	r24, Y+24	; 0x18
    1768:	88 23       	and	r24, r24
    176a:	c9 f0       	breq	.+50     	; 0x179e <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    176c:	ea 89       	ldd	r30, Y+18	; 0x12
    176e:	fb 89       	ldd	r31, Y+19	; 0x13
    1770:	80 81       	ld	r24, Z
    1772:	85 fd       	sbrc	r24, 5
    1774:	05 c0       	rjmp	.+10     	; 0x1780 <_ZN14HardwareSerial5flushEv+0x20>
    1776:	a8 89       	ldd	r26, Y+16	; 0x10
    1778:	b9 89       	ldd	r27, Y+17	; 0x11
    177a:	8c 91       	ld	r24, X
    177c:	86 fd       	sbrc	r24, 6
    177e:	0f c0       	rjmp	.+30     	; 0x179e <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1780:	0f b6       	in	r0, 0x3f	; 63
    1782:	07 fc       	sbrc	r0, 7
    1784:	f5 cf       	rjmp	.-22     	; 0x1770 <_ZN14HardwareSerial5flushEv+0x10>
    1786:	80 81       	ld	r24, Z
    1788:	85 ff       	sbrs	r24, 5
    178a:	f2 cf       	rjmp	.-28     	; 0x1770 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    178c:	a8 89       	ldd	r26, Y+16	; 0x10
    178e:	b9 89       	ldd	r27, Y+17	; 0x11
    1790:	8c 91       	ld	r24, X
    1792:	85 ff       	sbrs	r24, 5
    1794:	ed cf       	rjmp	.-38     	; 0x1770 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1796:	ce 01       	movw	r24, r28
    1798:	0e 94 48 0b 	call	0x1690	; 0x1690 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    179c:	e7 cf       	rjmp	.-50     	; 0x176c <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    179e:	df 91       	pop	r29
    17a0:	cf 91       	pop	r28
    17a2:	08 95       	ret

000017a4 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    17a4:	cf 92       	push	r12
    17a6:	df 92       	push	r13
    17a8:	ef 92       	push	r14
    17aa:	ff 92       	push	r15
    17ac:	1f 93       	push	r17
    17ae:	cf 93       	push	r28
    17b0:	df 93       	push	r29
    17b2:	ec 01       	movw	r28, r24
    17b4:	6a 01       	movw	r12, r20
    17b6:	7b 01       	movw	r14, r22
    17b8:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    17ba:	e8 89       	ldd	r30, Y+16	; 0x10
    17bc:	f9 89       	ldd	r31, Y+17	; 0x11
    17be:	82 e0       	ldi	r24, 0x02	; 2
    17c0:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    17c2:	41 15       	cp	r20, r1
    17c4:	51 4e       	sbci	r21, 0xE1	; 225
    17c6:	61 05       	cpc	r22, r1
    17c8:	71 05       	cpc	r23, r1
    17ca:	b1 f0       	breq	.+44     	; 0x17f8 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    17cc:	60 e0       	ldi	r22, 0x00	; 0
    17ce:	79 e0       	ldi	r23, 0x09	; 9
    17d0:	8d e3       	ldi	r24, 0x3D	; 61
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	a7 01       	movw	r20, r14
    17d6:	96 01       	movw	r18, r12
    17d8:	0e 94 4f 10 	call	0x209e	; 0x209e <__udivmodsi4>
    17dc:	da 01       	movw	r26, r20
    17de:	c9 01       	movw	r24, r18
    17e0:	01 97       	sbiw	r24, 0x01	; 1
    17e2:	a1 09       	sbc	r26, r1
    17e4:	b1 09       	sbc	r27, r1
    17e6:	b6 95       	lsr	r27
    17e8:	a7 95       	ror	r26
    17ea:	97 95       	ror	r25
    17ec:	87 95       	ror	r24
    17ee:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    17f0:	21 15       	cp	r18, r1
    17f2:	80 e1       	ldi	r24, 0x10	; 16
    17f4:	38 07       	cpc	r19, r24
    17f6:	a8 f0       	brcs	.+42     	; 0x1822 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    17f8:	e8 89       	ldd	r30, Y+16	; 0x10
    17fa:	f9 89       	ldd	r31, Y+17	; 0x11
    17fc:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    17fe:	60 e8       	ldi	r22, 0x80	; 128
    1800:	74 e8       	ldi	r23, 0x84	; 132
    1802:	8e e1       	ldi	r24, 0x1E	; 30
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	a7 01       	movw	r20, r14
    1808:	96 01       	movw	r18, r12
    180a:	0e 94 4f 10 	call	0x209e	; 0x209e <__udivmodsi4>
    180e:	da 01       	movw	r26, r20
    1810:	c9 01       	movw	r24, r18
    1812:	01 97       	sbiw	r24, 0x01	; 1
    1814:	a1 09       	sbc	r26, r1
    1816:	b1 09       	sbc	r27, r1
    1818:	b6 95       	lsr	r27
    181a:	a7 95       	ror	r26
    181c:	97 95       	ror	r25
    181e:	87 95       	ror	r24
    1820:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1822:	ec 85       	ldd	r30, Y+12	; 0x0c
    1824:	fd 85       	ldd	r31, Y+13	; 0x0d
    1826:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1828:	ee 85       	ldd	r30, Y+14	; 0x0e
    182a:	ff 85       	ldd	r31, Y+15	; 0x0f
    182c:	20 83       	st	Z, r18

  _written = false;
    182e:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1830:	ec 89       	ldd	r30, Y+20	; 0x14
    1832:	fd 89       	ldd	r31, Y+21	; 0x15
    1834:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    1836:	ea 89       	ldd	r30, Y+18	; 0x12
    1838:	fb 89       	ldd	r31, Y+19	; 0x13
    183a:	80 81       	ld	r24, Z
    183c:	80 61       	ori	r24, 0x10	; 16
    183e:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1840:	ea 89       	ldd	r30, Y+18	; 0x12
    1842:	fb 89       	ldd	r31, Y+19	; 0x13
    1844:	80 81       	ld	r24, Z
    1846:	88 60       	ori	r24, 0x08	; 8
    1848:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    184a:	ea 89       	ldd	r30, Y+18	; 0x12
    184c:	fb 89       	ldd	r31, Y+19	; 0x13
    184e:	80 81       	ld	r24, Z
    1850:	80 68       	ori	r24, 0x80	; 128
    1852:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1854:	ea 89       	ldd	r30, Y+18	; 0x12
    1856:	fb 89       	ldd	r31, Y+19	; 0x13
    1858:	80 81       	ld	r24, Z
    185a:	8f 7d       	andi	r24, 0xDF	; 223
    185c:	80 83       	st	Z, r24
}
    185e:	df 91       	pop	r29
    1860:	cf 91       	pop	r28
    1862:	1f 91       	pop	r17
    1864:	ff 90       	pop	r15
    1866:	ef 90       	pop	r14
    1868:	df 90       	pop	r13
    186a:	cf 90       	pop	r12
    186c:	08 95       	ret

0000186e <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    186e:	1f 92       	push	r1
    1870:	0f 92       	push	r0
    1872:	0f b6       	in	r0, 0x3f	; 63
    1874:	0f 92       	push	r0
    1876:	11 24       	eor	r1, r1
    1878:	2f 93       	push	r18
    187a:	8f 93       	push	r24
    187c:	9f 93       	push	r25
    187e:	ef 93       	push	r30
    1880:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1882:	e0 91 43 07 	lds	r30, 0x0743	; 0x800743 <Serial+0x10>
    1886:	f0 91 44 07 	lds	r31, 0x0744	; 0x800744 <Serial+0x11>
    188a:	80 81       	ld	r24, Z
    188c:	e0 91 49 07 	lds	r30, 0x0749	; 0x800749 <Serial+0x16>
    1890:	f0 91 4a 07 	lds	r31, 0x074A	; 0x80074a <Serial+0x17>
    1894:	82 fd       	sbrc	r24, 2
    1896:	12 c0       	rjmp	.+36     	; 0x18bc <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1898:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    189a:	80 91 4c 07 	lds	r24, 0x074C	; 0x80074c <Serial+0x19>
    189e:	8f 5f       	subi	r24, 0xFF	; 255
    18a0:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    18a2:	20 91 4d 07 	lds	r18, 0x074D	; 0x80074d <Serial+0x1a>
    18a6:	82 17       	cp	r24, r18
    18a8:	51 f0       	breq	.+20     	; 0x18be <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    18aa:	e0 91 4c 07 	lds	r30, 0x074C	; 0x80074c <Serial+0x19>
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	ed 5c       	subi	r30, 0xCD	; 205
    18b2:	f8 4f       	sbci	r31, 0xF8	; 248
    18b4:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    18b6:	80 93 4c 07 	sts	0x074C, r24	; 0x80074c <Serial+0x19>
    18ba:	01 c0       	rjmp	.+2      	; 0x18be <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    18bc:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    18be:	ff 91       	pop	r31
    18c0:	ef 91       	pop	r30
    18c2:	9f 91       	pop	r25
    18c4:	8f 91       	pop	r24
    18c6:	2f 91       	pop	r18
    18c8:	0f 90       	pop	r0
    18ca:	0f be       	out	0x3f, r0	; 63
    18cc:	0f 90       	pop	r0
    18ce:	1f 90       	pop	r1
    18d0:	18 95       	reti

000018d2 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    18d2:	1f 92       	push	r1
    18d4:	0f 92       	push	r0
    18d6:	0f b6       	in	r0, 0x3f	; 63
    18d8:	0f 92       	push	r0
    18da:	11 24       	eor	r1, r1
    18dc:	2f 93       	push	r18
    18de:	3f 93       	push	r19
    18e0:	4f 93       	push	r20
    18e2:	5f 93       	push	r21
    18e4:	6f 93       	push	r22
    18e6:	7f 93       	push	r23
    18e8:	8f 93       	push	r24
    18ea:	9f 93       	push	r25
    18ec:	af 93       	push	r26
    18ee:	bf 93       	push	r27
    18f0:	ef 93       	push	r30
    18f2:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    18f4:	83 e3       	ldi	r24, 0x33	; 51
    18f6:	97 e0       	ldi	r25, 0x07	; 7
    18f8:	0e 94 48 0b 	call	0x1690	; 0x1690 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    18fc:	ff 91       	pop	r31
    18fe:	ef 91       	pop	r30
    1900:	bf 91       	pop	r27
    1902:	af 91       	pop	r26
    1904:	9f 91       	pop	r25
    1906:	8f 91       	pop	r24
    1908:	7f 91       	pop	r23
    190a:	6f 91       	pop	r22
    190c:	5f 91       	pop	r21
    190e:	4f 91       	pop	r20
    1910:	3f 91       	pop	r19
    1912:	2f 91       	pop	r18
    1914:	0f 90       	pop	r0
    1916:	0f be       	out	0x3f, r0	; 63
    1918:	0f 90       	pop	r0
    191a:	1f 90       	pop	r1
    191c:	18 95       	reti

0000191e <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    191e:	83 e3       	ldi	r24, 0x33	; 51
    1920:	97 e0       	ldi	r25, 0x07	; 7
    1922:	0e 94 0c 0b 	call	0x1618	; 0x1618 <_ZN14HardwareSerial9availableEv>
    1926:	21 e0       	ldi	r18, 0x01	; 1
    1928:	89 2b       	or	r24, r25
    192a:	09 f4       	brne	.+2      	; 0x192e <_Z17Serial0_availablev+0x10>
    192c:	20 e0       	ldi	r18, 0x00	; 0
}
    192e:	82 2f       	mov	r24, r18
    1930:	08 95       	ret

00001932 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1932:	e3 e3       	ldi	r30, 0x33	; 51
    1934:	f7 e0       	ldi	r31, 0x07	; 7
    1936:	13 82       	std	Z+3, r1	; 0x03
    1938:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    193a:	88 ee       	ldi	r24, 0xE8	; 232
    193c:	93 e0       	ldi	r25, 0x03	; 3
    193e:	a0 e0       	ldi	r26, 0x00	; 0
    1940:	b0 e0       	ldi	r27, 0x00	; 0
    1942:	84 83       	std	Z+4, r24	; 0x04
    1944:	95 83       	std	Z+5, r25	; 0x05
    1946:	a6 83       	std	Z+6, r26	; 0x06
    1948:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    194a:	87 ea       	ldi	r24, 0xA7	; 167
    194c:	96 e0       	ldi	r25, 0x06	; 6
    194e:	91 83       	std	Z+1, r25	; 0x01
    1950:	80 83       	st	Z, r24
    1952:	85 ec       	ldi	r24, 0xC5	; 197
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	95 87       	std	Z+13, r25	; 0x0d
    1958:	84 87       	std	Z+12, r24	; 0x0c
    195a:	84 ec       	ldi	r24, 0xC4	; 196
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	97 87       	std	Z+15, r25	; 0x0f
    1960:	86 87       	std	Z+14, r24	; 0x0e
    1962:	80 ec       	ldi	r24, 0xC0	; 192
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	91 8b       	std	Z+17, r25	; 0x11
    1968:	80 8b       	std	Z+16, r24	; 0x10
    196a:	81 ec       	ldi	r24, 0xC1	; 193
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	93 8b       	std	Z+19, r25	; 0x13
    1970:	82 8b       	std	Z+18, r24	; 0x12
    1972:	82 ec       	ldi	r24, 0xC2	; 194
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	95 8b       	std	Z+21, r25	; 0x15
    1978:	84 8b       	std	Z+20, r24	; 0x14
    197a:	86 ec       	ldi	r24, 0xC6	; 198
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	97 8b       	std	Z+23, r25	; 0x17
    1980:	86 8b       	std	Z+22, r24	; 0x16
    1982:	11 8e       	std	Z+25, r1	; 0x19
    1984:	12 8e       	std	Z+26, r1	; 0x1a
    1986:	13 8e       	std	Z+27, r1	; 0x1b
    1988:	14 8e       	std	Z+28, r1	; 0x1c
    198a:	08 95       	ret

0000198c <initVariant>:
    198c:	08 95       	ret

0000198e <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    198e:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <init>

	initVariant();
    1992:	0e 94 c6 0c 	call	0x198c	; 0x198c <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1996:	0e 94 8e 00 	call	0x11c	; 0x11c <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    199a:	ca e3       	ldi	r28, 0x3A	; 58
    199c:	db e0       	ldi	r29, 0x0B	; 11
#endif
	
	setup();
    
	for (;;) {
		loop();
    199e:	0e 94 cc 00 	call	0x198	; 0x198 <loop>
		if (serialEventRun) serialEventRun();
    19a2:	20 97       	sbiw	r28, 0x00	; 0
    19a4:	e1 f3       	breq	.-8      	; 0x199e <main+0x10>
    19a6:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_Z14serialEventRunv>
    19aa:	f9 cf       	rjmp	.-14     	; 0x199e <main+0x10>

000019ac <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    19ac:	cf 92       	push	r12
    19ae:	df 92       	push	r13
    19b0:	ef 92       	push	r14
    19b2:	ff 92       	push	r15
    19b4:	0f 93       	push	r16
    19b6:	1f 93       	push	r17
    19b8:	cf 93       	push	r28
    19ba:	df 93       	push	r29
    19bc:	6c 01       	movw	r12, r24
    19be:	7a 01       	movw	r14, r20
    19c0:	8b 01       	movw	r16, r22
    19c2:	c0 e0       	ldi	r28, 0x00	; 0
    19c4:	d0 e0       	ldi	r29, 0x00	; 0
    19c6:	ce 15       	cp	r28, r14
    19c8:	df 05       	cpc	r29, r15
    19ca:	81 f0       	breq	.+32     	; 0x19ec <_ZN5Print5writeEPKhj+0x40>
    19cc:	d8 01       	movw	r26, r16
    19ce:	6d 91       	ld	r22, X+
    19d0:	8d 01       	movw	r16, r26
    19d2:	d6 01       	movw	r26, r12
    19d4:	ed 91       	ld	r30, X+
    19d6:	fc 91       	ld	r31, X
    19d8:	01 90       	ld	r0, Z+
    19da:	f0 81       	ld	r31, Z
    19dc:	e0 2d       	mov	r30, r0
    19de:	c6 01       	movw	r24, r12
    19e0:	09 95       	icall
    19e2:	89 2b       	or	r24, r25
    19e4:	11 f0       	breq	.+4      	; 0x19ea <_ZN5Print5writeEPKhj+0x3e>
    19e6:	21 96       	adiw	r28, 0x01	; 1
    19e8:	ee cf       	rjmp	.-36     	; 0x19c6 <_ZN5Print5writeEPKhj+0x1a>
    19ea:	7e 01       	movw	r14, r28
    19ec:	c7 01       	movw	r24, r14
    19ee:	df 91       	pop	r29
    19f0:	cf 91       	pop	r28
    19f2:	1f 91       	pop	r17
    19f4:	0f 91       	pop	r16
    19f6:	ff 90       	pop	r15
    19f8:	ef 90       	pop	r14
    19fa:	df 90       	pop	r13
    19fc:	cf 90       	pop	r12
    19fe:	08 95       	ret

00001a00 <_ZN5Print5writeEPKc>:
    1a00:	61 15       	cp	r22, r1
    1a02:	71 05       	cpc	r23, r1
    1a04:	79 f0       	breq	.+30     	; 0x1a24 <_ZN5Print5writeEPKc+0x24>
    1a06:	fb 01       	movw	r30, r22
    1a08:	01 90       	ld	r0, Z+
    1a0a:	00 20       	and	r0, r0
    1a0c:	e9 f7       	brne	.-6      	; 0x1a08 <_ZN5Print5writeEPKc+0x8>
    1a0e:	31 97       	sbiw	r30, 0x01	; 1
    1a10:	af 01       	movw	r20, r30
    1a12:	46 1b       	sub	r20, r22
    1a14:	57 0b       	sbc	r21, r23
    1a16:	dc 01       	movw	r26, r24
    1a18:	ed 91       	ld	r30, X+
    1a1a:	fc 91       	ld	r31, X
    1a1c:	02 80       	ldd	r0, Z+2	; 0x02
    1a1e:	f3 81       	ldd	r31, Z+3	; 0x03
    1a20:	e0 2d       	mov	r30, r0
    1a22:	09 94       	ijmp
    1a24:	80 e0       	ldi	r24, 0x00	; 0
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	08 95       	ret

00001a2a <_ZN5Print5printERK6String>:
    1a2a:	db 01       	movw	r26, r22
    1a2c:	14 96       	adiw	r26, 0x04	; 4
    1a2e:	4d 91       	ld	r20, X+
    1a30:	5c 91       	ld	r21, X
    1a32:	15 97       	sbiw	r26, 0x05	; 5
    1a34:	6d 91       	ld	r22, X+
    1a36:	7c 91       	ld	r23, X
    1a38:	dc 01       	movw	r26, r24
    1a3a:	ed 91       	ld	r30, X+
    1a3c:	fc 91       	ld	r31, X
    1a3e:	02 80       	ldd	r0, Z+2	; 0x02
    1a40:	f3 81       	ldd	r31, Z+3	; 0x03
    1a42:	e0 2d       	mov	r30, r0
    1a44:	09 94       	ijmp

00001a46 <_ZN5Print5printEPKc>:
    1a46:	0c 94 00 0d 	jmp	0x1a00	; 0x1a00 <_ZN5Print5writeEPKc>

00001a4a <_ZN5Print5printEc>:
    1a4a:	dc 01       	movw	r26, r24
    1a4c:	ed 91       	ld	r30, X+
    1a4e:	fc 91       	ld	r31, X
    1a50:	01 90       	ld	r0, Z+
    1a52:	f0 81       	ld	r31, Z
    1a54:	e0 2d       	mov	r30, r0
    1a56:	09 94       	ijmp

00001a58 <_ZN5Print7printlnEv>:
    1a58:	63 eb       	ldi	r22, 0xB3	; 179
    1a5a:	76 e0       	ldi	r23, 0x06	; 6
    1a5c:	0c 94 00 0d 	jmp	0x1a00	; 0x1a00 <_ZN5Print5writeEPKc>

00001a60 <_ZN5Print7printlnERK6String>:
    1a60:	0f 93       	push	r16
    1a62:	1f 93       	push	r17
    1a64:	cf 93       	push	r28
    1a66:	df 93       	push	r29
    1a68:	ec 01       	movw	r28, r24
    1a6a:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <_ZN5Print5printERK6String>
    1a6e:	8c 01       	movw	r16, r24
    1a70:	ce 01       	movw	r24, r28
    1a72:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <_ZN5Print7printlnEv>
    1a76:	80 0f       	add	r24, r16
    1a78:	91 1f       	adc	r25, r17
    1a7a:	df 91       	pop	r29
    1a7c:	cf 91       	pop	r28
    1a7e:	1f 91       	pop	r17
    1a80:	0f 91       	pop	r16
    1a82:	08 95       	ret

00001a84 <_ZN5Print7printlnEPKc>:
    1a84:	0f 93       	push	r16
    1a86:	1f 93       	push	r17
    1a88:	cf 93       	push	r28
    1a8a:	df 93       	push	r29
    1a8c:	ec 01       	movw	r28, r24
    1a8e:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <_ZN5Print5writeEPKc>
    1a92:	8c 01       	movw	r16, r24
    1a94:	ce 01       	movw	r24, r28
    1a96:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <_ZN5Print7printlnEv>
    1a9a:	80 0f       	add	r24, r16
    1a9c:	91 1f       	adc	r25, r17
    1a9e:	df 91       	pop	r29
    1aa0:	cf 91       	pop	r28
    1aa2:	1f 91       	pop	r17
    1aa4:	0f 91       	pop	r16
    1aa6:	08 95       	ret

00001aa8 <_ZN5Print11printNumberEmh>:
    1aa8:	8f 92       	push	r8
    1aaa:	9f 92       	push	r9
    1aac:	af 92       	push	r10
    1aae:	bf 92       	push	r11
    1ab0:	cf 92       	push	r12
    1ab2:	df 92       	push	r13
    1ab4:	ef 92       	push	r14
    1ab6:	ff 92       	push	r15
    1ab8:	0f 93       	push	r16
    1aba:	1f 93       	push	r17
    1abc:	cf 93       	push	r28
    1abe:	df 93       	push	r29
    1ac0:	cd b7       	in	r28, 0x3d	; 61
    1ac2:	de b7       	in	r29, 0x3e	; 62
    1ac4:	a1 97       	sbiw	r28, 0x21	; 33
    1ac6:	0f b6       	in	r0, 0x3f	; 63
    1ac8:	f8 94       	cli
    1aca:	de bf       	out	0x3e, r29	; 62
    1acc:	0f be       	out	0x3f, r0	; 63
    1ace:	cd bf       	out	0x3d, r28	; 61
    1ad0:	6c 01       	movw	r12, r24
    1ad2:	14 2f       	mov	r17, r20
    1ad4:	e5 2f       	mov	r30, r21
    1ad6:	cb 01       	movw	r24, r22
    1ad8:	02 2f       	mov	r16, r18
    1ada:	19 a2       	std	Y+33, r1	; 0x21
    1adc:	22 30       	cpi	r18, 0x02	; 2
    1ade:	08 f4       	brcc	.+2      	; 0x1ae2 <_ZN5Print11printNumberEmh+0x3a>
    1ae0:	0a e0       	ldi	r16, 0x0A	; 10
    1ae2:	7e 01       	movw	r14, r28
    1ae4:	21 e2       	ldi	r18, 0x21	; 33
    1ae6:	e2 0e       	add	r14, r18
    1ae8:	f1 1c       	adc	r15, r1
    1aea:	80 2e       	mov	r8, r16
    1aec:	91 2c       	mov	r9, r1
    1aee:	a1 2c       	mov	r10, r1
    1af0:	b1 2c       	mov	r11, r1
    1af2:	61 2f       	mov	r22, r17
    1af4:	7e 2f       	mov	r23, r30
    1af6:	a5 01       	movw	r20, r10
    1af8:	94 01       	movw	r18, r8
    1afa:	0e 94 4f 10 	call	0x209e	; 0x209e <__udivmodsi4>
    1afe:	02 9f       	mul	r16, r18
    1b00:	10 19       	sub	r17, r0
    1b02:	11 24       	eor	r1, r1
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	e8 1a       	sub	r14, r24
    1b08:	f1 08       	sbc	r15, r1
    1b0a:	1a 30       	cpi	r17, 0x0A	; 10
    1b0c:	10 f4       	brcc	.+4      	; 0x1b12 <_ZN5Print11printNumberEmh+0x6a>
    1b0e:	10 5d       	subi	r17, 0xD0	; 208
    1b10:	01 c0       	rjmp	.+2      	; 0x1b14 <_ZN5Print11printNumberEmh+0x6c>
    1b12:	19 5c       	subi	r17, 0xC9	; 201
    1b14:	f7 01       	movw	r30, r14
    1b16:	10 83       	st	Z, r17
    1b18:	12 2f       	mov	r17, r18
    1b1a:	e3 2f       	mov	r30, r19
    1b1c:	ca 01       	movw	r24, r20
    1b1e:	23 2b       	or	r18, r19
    1b20:	24 2b       	or	r18, r20
    1b22:	25 2b       	or	r18, r21
    1b24:	31 f7       	brne	.-52     	; 0x1af2 <_ZN5Print11printNumberEmh+0x4a>
    1b26:	b7 01       	movw	r22, r14
    1b28:	c6 01       	movw	r24, r12
    1b2a:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <_ZN5Print5writeEPKc>
    1b2e:	a1 96       	adiw	r28, 0x21	; 33
    1b30:	0f b6       	in	r0, 0x3f	; 63
    1b32:	f8 94       	cli
    1b34:	de bf       	out	0x3e, r29	; 62
    1b36:	0f be       	out	0x3f, r0	; 63
    1b38:	cd bf       	out	0x3d, r28	; 61
    1b3a:	df 91       	pop	r29
    1b3c:	cf 91       	pop	r28
    1b3e:	1f 91       	pop	r17
    1b40:	0f 91       	pop	r16
    1b42:	ff 90       	pop	r15
    1b44:	ef 90       	pop	r14
    1b46:	df 90       	pop	r13
    1b48:	cf 90       	pop	r12
    1b4a:	bf 90       	pop	r11
    1b4c:	af 90       	pop	r10
    1b4e:	9f 90       	pop	r9
    1b50:	8f 90       	pop	r8
    1b52:	08 95       	ret

00001b54 <_ZN5Print5printEmi>:
    1b54:	21 15       	cp	r18, r1
    1b56:	31 05       	cpc	r19, r1
    1b58:	41 f4       	brne	.+16     	; 0x1b6a <_ZN5Print5printEmi+0x16>
    1b5a:	dc 01       	movw	r26, r24
    1b5c:	ed 91       	ld	r30, X+
    1b5e:	fc 91       	ld	r31, X
    1b60:	01 90       	ld	r0, Z+
    1b62:	f0 81       	ld	r31, Z
    1b64:	e0 2d       	mov	r30, r0
    1b66:	64 2f       	mov	r22, r20
    1b68:	09 94       	ijmp
    1b6a:	0c 94 54 0d 	jmp	0x1aa8	; 0x1aa8 <_ZN5Print11printNumberEmh>

00001b6e <_ZN5Print5printEhi>:
    1b6e:	9a 01       	movw	r18, r20
    1b70:	46 2f       	mov	r20, r22
    1b72:	50 e0       	ldi	r21, 0x00	; 0
    1b74:	60 e0       	ldi	r22, 0x00	; 0
    1b76:	70 e0       	ldi	r23, 0x00	; 0
    1b78:	0c 94 aa 0d 	jmp	0x1b54	; 0x1b54 <_ZN5Print5printEmi>

00001b7c <_ZN5Print7printlnEhi>:
    1b7c:	0f 93       	push	r16
    1b7e:	1f 93       	push	r17
    1b80:	cf 93       	push	r28
    1b82:	df 93       	push	r29
    1b84:	ec 01       	movw	r28, r24
    1b86:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <_ZN5Print5printEhi>
    1b8a:	8c 01       	movw	r16, r24
    1b8c:	ce 01       	movw	r24, r28
    1b8e:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <_ZN5Print7printlnEv>
    1b92:	80 0f       	add	r24, r16
    1b94:	91 1f       	adc	r25, r17
    1b96:	df 91       	pop	r29
    1b98:	cf 91       	pop	r28
    1b9a:	1f 91       	pop	r17
    1b9c:	0f 91       	pop	r16
    1b9e:	08 95       	ret

00001ba0 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    1ba0:	cf 92       	push	r12
    1ba2:	df 92       	push	r13
    1ba4:	ef 92       	push	r14
    1ba6:	ff 92       	push	r15
    1ba8:	0f 93       	push	r16
    1baa:	1f 93       	push	r17
    1bac:	cf 93       	push	r28
    1bae:	df 93       	push	r29
  if (base == 0) {
    1bb0:	21 15       	cp	r18, r1
    1bb2:	31 05       	cpc	r19, r1
    1bb4:	81 f4       	brne	.+32     	; 0x1bd6 <_ZN5Print5printEli+0x36>
    return write(n);
    1bb6:	dc 01       	movw	r26, r24
    1bb8:	ed 91       	ld	r30, X+
    1bba:	fc 91       	ld	r31, X
    1bbc:	01 90       	ld	r0, Z+
    1bbe:	f0 81       	ld	r31, Z
    1bc0:	e0 2d       	mov	r30, r0
    1bc2:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    1bc4:	df 91       	pop	r29
    1bc6:	cf 91       	pop	r28
    1bc8:	1f 91       	pop	r17
    1bca:	0f 91       	pop	r16
    1bcc:	ff 90       	pop	r15
    1bce:	ef 90       	pop	r14
    1bd0:	df 90       	pop	r13
    1bd2:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    1bd4:	09 94       	ijmp
  } else if (base == 10) {
    1bd6:	2a 30       	cpi	r18, 0x0A	; 10
    1bd8:	31 05       	cpc	r19, r1
    1bda:	01 f5       	brne	.+64     	; 0x1c1c <_ZN5Print5printEli+0x7c>
    if (n < 0) {
    1bdc:	77 ff       	sbrs	r23, 7
    1bde:	1d c0       	rjmp	.+58     	; 0x1c1a <_ZN5Print5printEli+0x7a>
    1be0:	6a 01       	movw	r12, r20
    1be2:	7b 01       	movw	r14, r22
    1be4:	ec 01       	movw	r28, r24
      int t = print('-');
    1be6:	6d e2       	ldi	r22, 0x2D	; 45
    1be8:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <_ZN5Print5printEc>
    1bec:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    1bee:	44 27       	eor	r20, r20
    1bf0:	55 27       	eor	r21, r21
    1bf2:	ba 01       	movw	r22, r20
    1bf4:	4c 19       	sub	r20, r12
    1bf6:	5d 09       	sbc	r21, r13
    1bf8:	6e 09       	sbc	r22, r14
    1bfa:	7f 09       	sbc	r23, r15
    1bfc:	2a e0       	ldi	r18, 0x0A	; 10
    1bfe:	ce 01       	movw	r24, r28
    1c00:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <_ZN5Print11printNumberEmh>
    1c04:	80 0f       	add	r24, r16
    1c06:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    1c08:	df 91       	pop	r29
    1c0a:	cf 91       	pop	r28
    1c0c:	1f 91       	pop	r17
    1c0e:	0f 91       	pop	r16
    1c10:	ff 90       	pop	r15
    1c12:	ef 90       	pop	r14
    1c14:	df 90       	pop	r13
    1c16:	cf 90       	pop	r12
    1c18:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    1c1a:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    1c1c:	df 91       	pop	r29
    1c1e:	cf 91       	pop	r28
    1c20:	1f 91       	pop	r17
    1c22:	0f 91       	pop	r16
    1c24:	ff 90       	pop	r15
    1c26:	ef 90       	pop	r14
    1c28:	df 90       	pop	r13
    1c2a:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    1c2c:	0c 94 54 0d 	jmp	0x1aa8	; 0x1aa8 <_ZN5Print11printNumberEmh>

00001c30 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    1c30:	9a 01       	movw	r18, r20
  return print((long) n, base);
    1c32:	ab 01       	movw	r20, r22
    1c34:	77 0f       	add	r23, r23
    1c36:	66 0b       	sbc	r22, r22
    1c38:	77 0b       	sbc	r23, r23
    1c3a:	0c 94 d0 0d 	jmp	0x1ba0	; 0x1ba0 <_ZN5Print5printEli>

00001c3e <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    1c3e:	0f 93       	push	r16
    1c40:	1f 93       	push	r17
    1c42:	cf 93       	push	r28
    1c44:	df 93       	push	r29
    1c46:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    1c48:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <_ZN5Print5printEii>
    1c4c:	8c 01       	movw	r16, r24
  n += println();
    1c4e:	ce 01       	movw	r24, r28
    1c50:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <_ZN5Print7printlnEv>
  return n;
}
    1c54:	80 0f       	add	r24, r16
    1c56:	91 1f       	adc	r25, r17
    1c58:	df 91       	pop	r29
    1c5a:	cf 91       	pop	r28
    1c5c:	1f 91       	pop	r17
    1c5e:	0f 91       	pop	r16
    1c60:	08 95       	ret

00001c62 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1c62:	1f 92       	push	r1
    1c64:	0f 92       	push	r0
    1c66:	0f b6       	in	r0, 0x3f	; 63
    1c68:	0f 92       	push	r0
    1c6a:	11 24       	eor	r1, r1
    1c6c:	2f 93       	push	r18
    1c6e:	3f 93       	push	r19
    1c70:	8f 93       	push	r24
    1c72:	9f 93       	push	r25
    1c74:	af 93       	push	r26
    1c76:	bf 93       	push	r27
    1c78:	80 91 d1 07 	lds	r24, 0x07D1	; 0x8007d1 <timer0_millis>
    1c7c:	90 91 d2 07 	lds	r25, 0x07D2	; 0x8007d2 <timer0_millis+0x1>
    1c80:	a0 91 d3 07 	lds	r26, 0x07D3	; 0x8007d3 <timer0_millis+0x2>
    1c84:	b0 91 d4 07 	lds	r27, 0x07D4	; 0x8007d4 <timer0_millis+0x3>
    1c88:	30 91 d0 07 	lds	r19, 0x07D0	; 0x8007d0 <timer0_fract>
    1c8c:	23 e0       	ldi	r18, 0x03	; 3
    1c8e:	23 0f       	add	r18, r19
    1c90:	2d 37       	cpi	r18, 0x7D	; 125
    1c92:	20 f4       	brcc	.+8      	; 0x1c9c <__vector_16+0x3a>
    1c94:	01 96       	adiw	r24, 0x01	; 1
    1c96:	a1 1d       	adc	r26, r1
    1c98:	b1 1d       	adc	r27, r1
    1c9a:	05 c0       	rjmp	.+10     	; 0x1ca6 <__vector_16+0x44>
    1c9c:	26 e8       	ldi	r18, 0x86	; 134
    1c9e:	23 0f       	add	r18, r19
    1ca0:	02 96       	adiw	r24, 0x02	; 2
    1ca2:	a1 1d       	adc	r26, r1
    1ca4:	b1 1d       	adc	r27, r1
    1ca6:	20 93 d0 07 	sts	0x07D0, r18	; 0x8007d0 <timer0_fract>
    1caa:	80 93 d1 07 	sts	0x07D1, r24	; 0x8007d1 <timer0_millis>
    1cae:	90 93 d2 07 	sts	0x07D2, r25	; 0x8007d2 <timer0_millis+0x1>
    1cb2:	a0 93 d3 07 	sts	0x07D3, r26	; 0x8007d3 <timer0_millis+0x2>
    1cb6:	b0 93 d4 07 	sts	0x07D4, r27	; 0x8007d4 <timer0_millis+0x3>
    1cba:	80 91 d5 07 	lds	r24, 0x07D5	; 0x8007d5 <timer0_overflow_count>
    1cbe:	90 91 d6 07 	lds	r25, 0x07D6	; 0x8007d6 <timer0_overflow_count+0x1>
    1cc2:	a0 91 d7 07 	lds	r26, 0x07D7	; 0x8007d7 <timer0_overflow_count+0x2>
    1cc6:	b0 91 d8 07 	lds	r27, 0x07D8	; 0x8007d8 <timer0_overflow_count+0x3>
    1cca:	01 96       	adiw	r24, 0x01	; 1
    1ccc:	a1 1d       	adc	r26, r1
    1cce:	b1 1d       	adc	r27, r1
    1cd0:	80 93 d5 07 	sts	0x07D5, r24	; 0x8007d5 <timer0_overflow_count>
    1cd4:	90 93 d6 07 	sts	0x07D6, r25	; 0x8007d6 <timer0_overflow_count+0x1>
    1cd8:	a0 93 d7 07 	sts	0x07D7, r26	; 0x8007d7 <timer0_overflow_count+0x2>
    1cdc:	b0 93 d8 07 	sts	0x07D8, r27	; 0x8007d8 <timer0_overflow_count+0x3>
    1ce0:	bf 91       	pop	r27
    1ce2:	af 91       	pop	r26
    1ce4:	9f 91       	pop	r25
    1ce6:	8f 91       	pop	r24
    1ce8:	3f 91       	pop	r19
    1cea:	2f 91       	pop	r18
    1cec:	0f 90       	pop	r0
    1cee:	0f be       	out	0x3f, r0	; 63
    1cf0:	0f 90       	pop	r0
    1cf2:	1f 90       	pop	r1
    1cf4:	18 95       	reti

00001cf6 <micros>:
    1cf6:	3f b7       	in	r19, 0x3f	; 63
    1cf8:	f8 94       	cli
    1cfa:	80 91 d5 07 	lds	r24, 0x07D5	; 0x8007d5 <timer0_overflow_count>
    1cfe:	90 91 d6 07 	lds	r25, 0x07D6	; 0x8007d6 <timer0_overflow_count+0x1>
    1d02:	a0 91 d7 07 	lds	r26, 0x07D7	; 0x8007d7 <timer0_overflow_count+0x2>
    1d06:	b0 91 d8 07 	lds	r27, 0x07D8	; 0x8007d8 <timer0_overflow_count+0x3>
    1d0a:	26 b5       	in	r18, 0x26	; 38
    1d0c:	a8 9b       	sbis	0x15, 0	; 21
    1d0e:	05 c0       	rjmp	.+10     	; 0x1d1a <micros+0x24>
    1d10:	2f 3f       	cpi	r18, 0xFF	; 255
    1d12:	19 f0       	breq	.+6      	; 0x1d1a <micros+0x24>
    1d14:	01 96       	adiw	r24, 0x01	; 1
    1d16:	a1 1d       	adc	r26, r1
    1d18:	b1 1d       	adc	r27, r1
    1d1a:	3f bf       	out	0x3f, r19	; 63
    1d1c:	ba 2f       	mov	r27, r26
    1d1e:	a9 2f       	mov	r26, r25
    1d20:	98 2f       	mov	r25, r24
    1d22:	88 27       	eor	r24, r24
    1d24:	82 0f       	add	r24, r18
    1d26:	91 1d       	adc	r25, r1
    1d28:	a1 1d       	adc	r26, r1
    1d2a:	b1 1d       	adc	r27, r1
    1d2c:	bc 01       	movw	r22, r24
    1d2e:	cd 01       	movw	r24, r26
    1d30:	42 e0       	ldi	r20, 0x02	; 2
    1d32:	66 0f       	add	r22, r22
    1d34:	77 1f       	adc	r23, r23
    1d36:	88 1f       	adc	r24, r24
    1d38:	99 1f       	adc	r25, r25
    1d3a:	4a 95       	dec	r20
    1d3c:	d1 f7       	brne	.-12     	; 0x1d32 <micros+0x3c>
    1d3e:	08 95       	ret

00001d40 <delay>:
    1d40:	cf 92       	push	r12
    1d42:	df 92       	push	r13
    1d44:	ef 92       	push	r14
    1d46:	ff 92       	push	r15
    1d48:	cf 93       	push	r28
    1d4a:	df 93       	push	r29
    1d4c:	6b 01       	movw	r12, r22
    1d4e:	7c 01       	movw	r14, r24
    1d50:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <micros>
    1d54:	eb 01       	movw	r28, r22
    1d56:	c1 14       	cp	r12, r1
    1d58:	d1 04       	cpc	r13, r1
    1d5a:	e1 04       	cpc	r14, r1
    1d5c:	f1 04       	cpc	r15, r1
    1d5e:	89 f0       	breq	.+34     	; 0x1d82 <delay+0x42>
    1d60:	0e 94 3a 10 	call	0x2074	; 0x2074 <yield>
    1d64:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <micros>
    1d68:	6c 1b       	sub	r22, r28
    1d6a:	7d 0b       	sbc	r23, r29
    1d6c:	68 3e       	cpi	r22, 0xE8	; 232
    1d6e:	73 40       	sbci	r23, 0x03	; 3
    1d70:	90 f3       	brcs	.-28     	; 0x1d56 <delay+0x16>
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	c8 1a       	sub	r12, r24
    1d76:	d1 08       	sbc	r13, r1
    1d78:	e1 08       	sbc	r14, r1
    1d7a:	f1 08       	sbc	r15, r1
    1d7c:	c8 51       	subi	r28, 0x18	; 24
    1d7e:	dc 4f       	sbci	r29, 0xFC	; 252
    1d80:	ea cf       	rjmp	.-44     	; 0x1d56 <delay+0x16>
    1d82:	df 91       	pop	r29
    1d84:	cf 91       	pop	r28
    1d86:	ff 90       	pop	r15
    1d88:	ef 90       	pop	r14
    1d8a:	df 90       	pop	r13
    1d8c:	cf 90       	pop	r12
    1d8e:	08 95       	ret

00001d90 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1d90:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1d92:	84 b5       	in	r24, 0x24	; 36
    1d94:	82 60       	ori	r24, 0x02	; 2
    1d96:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1d98:	84 b5       	in	r24, 0x24	; 36
    1d9a:	81 60       	ori	r24, 0x01	; 1
    1d9c:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1d9e:	85 b5       	in	r24, 0x25	; 37
    1da0:	82 60       	ori	r24, 0x02	; 2
    1da2:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1da4:	85 b5       	in	r24, 0x25	; 37
    1da6:	81 60       	ori	r24, 0x01	; 1
    1da8:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1daa:	ee e6       	ldi	r30, 0x6E	; 110
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	80 81       	ld	r24, Z
    1db0:	81 60       	ori	r24, 0x01	; 1
    1db2:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1db4:	e1 e8       	ldi	r30, 0x81	; 129
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1dba:	80 81       	ld	r24, Z
    1dbc:	82 60       	ori	r24, 0x02	; 2
    1dbe:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1dc0:	80 81       	ld	r24, Z
    1dc2:	81 60       	ori	r24, 0x01	; 1
    1dc4:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1dc6:	e0 e8       	ldi	r30, 0x80	; 128
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	80 81       	ld	r24, Z
    1dcc:	81 60       	ori	r24, 0x01	; 1
    1dce:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1dd0:	e1 eb       	ldi	r30, 0xB1	; 177
    1dd2:	f0 e0       	ldi	r31, 0x00	; 0
    1dd4:	80 81       	ld	r24, Z
    1dd6:	84 60       	ori	r24, 0x04	; 4
    1dd8:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1dda:	e0 eb       	ldi	r30, 0xB0	; 176
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	80 81       	ld	r24, Z
    1de0:	81 60       	ori	r24, 0x01	; 1
    1de2:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1de4:	ea e7       	ldi	r30, 0x7A	; 122
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	80 81       	ld	r24, Z
    1dea:	84 60       	ori	r24, 0x04	; 4
    1dec:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1dee:	80 81       	ld	r24, Z
    1df0:	82 60       	ori	r24, 0x02	; 2
    1df2:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1df4:	80 81       	ld	r24, Z
    1df6:	81 60       	ori	r24, 0x01	; 1
    1df8:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1dfa:	80 81       	ld	r24, Z
    1dfc:	80 68       	ori	r24, 0x80	; 128
    1dfe:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1e00:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1e04:	08 95       	ret

00001e06 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1e06:	83 30       	cpi	r24, 0x03	; 3
    1e08:	81 f0       	breq	.+32     	; 0x1e2a <turnOffPWM+0x24>
    1e0a:	28 f4       	brcc	.+10     	; 0x1e16 <turnOffPWM+0x10>
    1e0c:	81 30       	cpi	r24, 0x01	; 1
    1e0e:	99 f0       	breq	.+38     	; 0x1e36 <turnOffPWM+0x30>
    1e10:	82 30       	cpi	r24, 0x02	; 2
    1e12:	a1 f0       	breq	.+40     	; 0x1e3c <turnOffPWM+0x36>
    1e14:	08 95       	ret
    1e16:	87 30       	cpi	r24, 0x07	; 7
    1e18:	a9 f0       	breq	.+42     	; 0x1e44 <turnOffPWM+0x3e>
    1e1a:	88 30       	cpi	r24, 0x08	; 8
    1e1c:	b9 f0       	breq	.+46     	; 0x1e4c <turnOffPWM+0x46>
    1e1e:	84 30       	cpi	r24, 0x04	; 4
    1e20:	d1 f4       	brne	.+52     	; 0x1e56 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1e22:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1e26:	8f 7d       	andi	r24, 0xDF	; 223
    1e28:	03 c0       	rjmp	.+6      	; 0x1e30 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1e2a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1e2e:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1e30:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1e34:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1e36:	84 b5       	in	r24, 0x24	; 36
    1e38:	8f 77       	andi	r24, 0x7F	; 127
    1e3a:	02 c0       	rjmp	.+4      	; 0x1e40 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1e3c:	84 b5       	in	r24, 0x24	; 36
    1e3e:	8f 7d       	andi	r24, 0xDF	; 223
    1e40:	84 bd       	out	0x24, r24	; 36
    1e42:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1e44:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1e48:	8f 77       	andi	r24, 0x7F	; 127
    1e4a:	03 c0       	rjmp	.+6      	; 0x1e52 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1e4c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1e50:	8f 7d       	andi	r24, 0xDF	; 223
    1e52:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1e56:	08 95       	ret

00001e58 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1e58:	cf 93       	push	r28
    1e5a:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	fc 01       	movw	r30, r24
    1e60:	e4 58       	subi	r30, 0x84	; 132
    1e62:	ff 4f       	sbci	r31, 0xFF	; 255
    1e64:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1e66:	fc 01       	movw	r30, r24
    1e68:	e0 57       	subi	r30, 0x70	; 112
    1e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6c:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1e6e:	88 23       	and	r24, r24
    1e70:	61 f1       	breq	.+88     	; 0x1eca <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	88 0f       	add	r24, r24
    1e76:	99 1f       	adc	r25, r25
    1e78:	fc 01       	movw	r30, r24
    1e7a:	e8 54       	subi	r30, 0x48	; 72
    1e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7e:	c5 91       	lpm	r28, Z+
    1e80:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1e82:	fc 01       	movw	r30, r24
    1e84:	e2 55       	subi	r30, 0x52	; 82
    1e86:	ff 4f       	sbci	r31, 0xFF	; 255
    1e88:	a5 91       	lpm	r26, Z+
    1e8a:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1e8c:	61 11       	cpse	r22, r1
    1e8e:	09 c0       	rjmp	.+18     	; 0x1ea2 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1e90:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1e92:	f8 94       	cli
		*reg &= ~bit;
    1e94:	88 81       	ld	r24, Y
    1e96:	20 95       	com	r18
    1e98:	82 23       	and	r24, r18
    1e9a:	88 83       	st	Y, r24
		*out &= ~bit;
    1e9c:	ec 91       	ld	r30, X
    1e9e:	2e 23       	and	r18, r30
    1ea0:	0b c0       	rjmp	.+22     	; 0x1eb8 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1ea2:	62 30       	cpi	r22, 0x02	; 2
    1ea4:	61 f4       	brne	.+24     	; 0x1ebe <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1ea6:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1ea8:	f8 94       	cli
		*reg &= ~bit;
    1eaa:	88 81       	ld	r24, Y
    1eac:	32 2f       	mov	r19, r18
    1eae:	30 95       	com	r19
    1eb0:	83 23       	and	r24, r19
    1eb2:	88 83       	st	Y, r24
		*out |= bit;
    1eb4:	ec 91       	ld	r30, X
    1eb6:	2e 2b       	or	r18, r30
    1eb8:	2c 93       	st	X, r18
		SREG = oldSREG;
    1eba:	9f bf       	out	0x3f, r25	; 63
    1ebc:	06 c0       	rjmp	.+12     	; 0x1eca <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1ebe:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1ec0:	f8 94       	cli
		*reg |= bit;
    1ec2:	e8 81       	ld	r30, Y
    1ec4:	2e 2b       	or	r18, r30
    1ec6:	28 83       	st	Y, r18
		SREG = oldSREG;
    1ec8:	8f bf       	out	0x3f, r24	; 63
	}
}
    1eca:	df 91       	pop	r29
    1ecc:	cf 91       	pop	r28
    1ece:	08 95       	ret

00001ed0 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1ed0:	1f 93       	push	r17
    1ed2:	cf 93       	push	r28
    1ed4:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1ed6:	28 2f       	mov	r18, r24
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	f9 01       	movw	r30, r18
    1edc:	e8 59       	subi	r30, 0x98	; 152
    1ede:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee0:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1ee2:	f9 01       	movw	r30, r18
    1ee4:	e4 58       	subi	r30, 0x84	; 132
    1ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee8:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1eea:	f9 01       	movw	r30, r18
    1eec:	e0 57       	subi	r30, 0x70	; 112
    1eee:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef0:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1ef2:	cc 23       	and	r28, r28
    1ef4:	c1 f0       	breq	.+48     	; 0x1f26 <digitalWrite+0x56>
    1ef6:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1ef8:	81 11       	cpse	r24, r1
    1efa:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <turnOffPWM>

	out = portOutputRegister(port);
    1efe:	ec 2f       	mov	r30, r28
    1f00:	f0 e0       	ldi	r31, 0x00	; 0
    1f02:	ee 0f       	add	r30, r30
    1f04:	ff 1f       	adc	r31, r31
    1f06:	e2 55       	subi	r30, 0x52	; 82
    1f08:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0a:	a5 91       	lpm	r26, Z+
    1f0c:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1f0e:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1f10:	f8 94       	cli

	if (val == LOW) {
    1f12:	11 11       	cpse	r17, r1
    1f14:	04 c0       	rjmp	.+8      	; 0x1f1e <digitalWrite+0x4e>
		*out &= ~bit;
    1f16:	8c 91       	ld	r24, X
    1f18:	d0 95       	com	r29
    1f1a:	d8 23       	and	r29, r24
    1f1c:	02 c0       	rjmp	.+4      	; 0x1f22 <digitalWrite+0x52>
	} else {
		*out |= bit;
    1f1e:	ec 91       	ld	r30, X
    1f20:	de 2b       	or	r29, r30
    1f22:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1f24:	9f bf       	out	0x3f, r25	; 63
}
    1f26:	df 91       	pop	r29
    1f28:	cf 91       	pop	r28
    1f2a:	1f 91       	pop	r17
    1f2c:	08 95       	ret

00001f2e <_ZN6StringD1Ev>:
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
}
    1f2e:	fc 01       	movw	r30, r24
    1f30:	80 81       	ld	r24, Z
    1f32:	91 81       	ldd	r25, Z+1	; 0x01
    1f34:	0c 94 42 11 	jmp	0x2284	; 0x2284 <free>

00001f38 <_ZN6String10invalidateEv>:
    1f38:	cf 93       	push	r28
    1f3a:	df 93       	push	r29
    1f3c:	ec 01       	movw	r28, r24
    1f3e:	88 81       	ld	r24, Y
    1f40:	99 81       	ldd	r25, Y+1	; 0x01
    1f42:	00 97       	sbiw	r24, 0x00	; 0
    1f44:	11 f0       	breq	.+4      	; 0x1f4a <_ZN6String10invalidateEv+0x12>
    1f46:	0e 94 42 11 	call	0x2284	; 0x2284 <free>
    1f4a:	19 82       	std	Y+1, r1	; 0x01
    1f4c:	18 82       	st	Y, r1
    1f4e:	1d 82       	std	Y+5, r1	; 0x05
    1f50:	1c 82       	std	Y+4, r1	; 0x04
    1f52:	1b 82       	std	Y+3, r1	; 0x03
    1f54:	1a 82       	std	Y+2, r1	; 0x02
    1f56:	df 91       	pop	r29
    1f58:	cf 91       	pop	r28
    1f5a:	08 95       	ret

00001f5c <_ZN6String12changeBufferEj>:
    1f5c:	0f 93       	push	r16
    1f5e:	1f 93       	push	r17
    1f60:	cf 93       	push	r28
    1f62:	df 93       	push	r29
    1f64:	ec 01       	movw	r28, r24
    1f66:	8b 01       	movw	r16, r22
    1f68:	6f 5f       	subi	r22, 0xFF	; 255
    1f6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f6c:	88 81       	ld	r24, Y
    1f6e:	99 81       	ldd	r25, Y+1	; 0x01
    1f70:	0e 94 cb 11 	call	0x2396	; 0x2396 <realloc>
    1f74:	00 97       	sbiw	r24, 0x00	; 0
    1f76:	31 f0       	breq	.+12     	; 0x1f84 <_ZN6String12changeBufferEj+0x28>
    1f78:	99 83       	std	Y+1, r25	; 0x01
    1f7a:	88 83       	st	Y, r24
    1f7c:	1b 83       	std	Y+3, r17	; 0x03
    1f7e:	0a 83       	std	Y+2, r16	; 0x02
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	01 c0       	rjmp	.+2      	; 0x1f86 <_ZN6String12changeBufferEj+0x2a>
    1f84:	80 e0       	ldi	r24, 0x00	; 0
    1f86:	df 91       	pop	r29
    1f88:	cf 91       	pop	r28
    1f8a:	1f 91       	pop	r17
    1f8c:	0f 91       	pop	r16
    1f8e:	08 95       	ret

00001f90 <_ZN6String7reserveEj>:
    1f90:	cf 93       	push	r28
    1f92:	df 93       	push	r29
    1f94:	ec 01       	movw	r28, r24
    1f96:	88 81       	ld	r24, Y
    1f98:	99 81       	ldd	r25, Y+1	; 0x01
    1f9a:	89 2b       	or	r24, r25
    1f9c:	29 f0       	breq	.+10     	; 0x1fa8 <_ZN6String7reserveEj+0x18>
    1f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa0:	9b 81       	ldd	r25, Y+3	; 0x03
    1fa2:	86 17       	cp	r24, r22
    1fa4:	97 07       	cpc	r25, r23
    1fa6:	60 f4       	brcc	.+24     	; 0x1fc0 <_ZN6String7reserveEj+0x30>
    1fa8:	ce 01       	movw	r24, r28
    1faa:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <_ZN6String12changeBufferEj>
    1fae:	88 23       	and	r24, r24
    1fb0:	41 f0       	breq	.+16     	; 0x1fc2 <_ZN6String7reserveEj+0x32>
    1fb2:	8c 81       	ldd	r24, Y+4	; 0x04
    1fb4:	9d 81       	ldd	r25, Y+5	; 0x05
    1fb6:	89 2b       	or	r24, r25
    1fb8:	19 f4       	brne	.+6      	; 0x1fc0 <_ZN6String7reserveEj+0x30>
    1fba:	e8 81       	ld	r30, Y
    1fbc:	f9 81       	ldd	r31, Y+1	; 0x01
    1fbe:	10 82       	st	Z, r1
    1fc0:	81 e0       	ldi	r24, 0x01	; 1
    1fc2:	df 91       	pop	r29
    1fc4:	cf 91       	pop	r28
    1fc6:	08 95       	ret

00001fc8 <_ZN6String4copyEPKcj>:
    1fc8:	ef 92       	push	r14
    1fca:	ff 92       	push	r15
    1fcc:	0f 93       	push	r16
    1fce:	1f 93       	push	r17
    1fd0:	cf 93       	push	r28
    1fd2:	df 93       	push	r29
    1fd4:	ec 01       	movw	r28, r24
    1fd6:	7b 01       	movw	r14, r22
    1fd8:	8a 01       	movw	r16, r20
    1fda:	ba 01       	movw	r22, r20
    1fdc:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <_ZN6String7reserveEj>
    1fe0:	81 11       	cpse	r24, r1
    1fe2:	04 c0       	rjmp	.+8      	; 0x1fec <_ZN6String4copyEPKcj+0x24>
    1fe4:	ce 01       	movw	r24, r28
    1fe6:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <_ZN6String10invalidateEv>
    1fea:	07 c0       	rjmp	.+14     	; 0x1ffa <_ZN6String4copyEPKcj+0x32>
    1fec:	1d 83       	std	Y+5, r17	; 0x05
    1fee:	0c 83       	std	Y+4, r16	; 0x04
    1ff0:	b7 01       	movw	r22, r14
    1ff2:	88 81       	ld	r24, Y
    1ff4:	99 81       	ldd	r25, Y+1	; 0x01
    1ff6:	0e 94 9a 12 	call	0x2534	; 0x2534 <strcpy>
    1ffa:	ce 01       	movw	r24, r28
    1ffc:	df 91       	pop	r29
    1ffe:	cf 91       	pop	r28
    2000:	1f 91       	pop	r17
    2002:	0f 91       	pop	r16
    2004:	ff 90       	pop	r15
    2006:	ef 90       	pop	r14
    2008:	08 95       	ret

0000200a <_ZN6StringC1EPKc>:
    200a:	fc 01       	movw	r30, r24
    200c:	11 82       	std	Z+1, r1	; 0x01
    200e:	10 82       	st	Z, r1
    2010:	13 82       	std	Z+3, r1	; 0x03
    2012:	12 82       	std	Z+2, r1	; 0x02
    2014:	15 82       	std	Z+5, r1	; 0x05
    2016:	14 82       	std	Z+4, r1	; 0x04
    2018:	61 15       	cp	r22, r1
    201a:	71 05       	cpc	r23, r1
    201c:	51 f0       	breq	.+20     	; 0x2032 <_ZN6StringC1EPKc+0x28>
    201e:	fb 01       	movw	r30, r22
    2020:	01 90       	ld	r0, Z+
    2022:	00 20       	and	r0, r0
    2024:	e9 f7       	brne	.-6      	; 0x2020 <_ZN6StringC1EPKc+0x16>
    2026:	31 97       	sbiw	r30, 0x01	; 1
    2028:	af 01       	movw	r20, r30
    202a:	46 1b       	sub	r20, r22
    202c:	57 0b       	sbc	r21, r23
    202e:	0c 94 e4 0f 	jmp	0x1fc8	; 0x1fc8 <_ZN6String4copyEPKcj>
    2032:	08 95       	ret

00002034 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
    2034:	cf 93       	push	r28
    2036:	df 93       	push	r29
    2038:	ec 01       	movw	r28, r24
    203a:	fb 01       	movw	r30, r22
	if (this == &rhs) return *this;
    203c:	86 17       	cp	r24, r22
    203e:	97 07       	cpc	r25, r23
    2040:	61 f0       	breq	.+24     	; 0x205a <_ZN6StringaSERKS_+0x26>
	
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
    2042:	60 81       	ld	r22, Z
    2044:	71 81       	ldd	r23, Z+1	; 0x01
    2046:	61 15       	cp	r22, r1
    2048:	71 05       	cpc	r23, r1
    204a:	29 f0       	breq	.+10     	; 0x2056 <_ZN6StringaSERKS_+0x22>
    204c:	44 81       	ldd	r20, Z+4	; 0x04
    204e:	55 81       	ldd	r21, Z+5	; 0x05
    2050:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <_ZN6String4copyEPKcj>
    2054:	02 c0       	rjmp	.+4      	; 0x205a <_ZN6StringaSERKS_+0x26>
	else invalidate();
    2056:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <_ZN6String10invalidateEv>
	
	return *this;
}
    205a:	ce 01       	movw	r24, r28
    205c:	df 91       	pop	r29
    205e:	cf 91       	pop	r28
    2060:	08 95       	ret

00002062 <_ZN6StringC1ERKS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    2062:	fc 01       	movw	r30, r24
    2064:	11 82       	std	Z+1, r1	; 0x01
    2066:	10 82       	st	Z, r1
	capacity = 0;
    2068:	13 82       	std	Z+3, r1	; 0x03
    206a:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    206c:	15 82       	std	Z+5, r1	; 0x05
    206e:	14 82       	std	Z+4, r1	; 0x04
}

String::String(const String &value)
{
	init();
	*this = value;
    2070:	0c 94 1a 10 	jmp	0x2034	; 0x2034 <_ZN6StringaSERKS_>

00002074 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    2074:	08 95       	ret

00002076 <__divmodhi4>:
    2076:	97 fb       	bst	r25, 7
    2078:	07 2e       	mov	r0, r23
    207a:	16 f4       	brtc	.+4      	; 0x2080 <__divmodhi4+0xa>
    207c:	00 94       	com	r0
    207e:	07 d0       	rcall	.+14     	; 0x208e <__divmodhi4_neg1>
    2080:	77 fd       	sbrc	r23, 7
    2082:	09 d0       	rcall	.+18     	; 0x2096 <__divmodhi4_neg2>
    2084:	0e 94 90 10 	call	0x2120	; 0x2120 <__udivmodhi4>
    2088:	07 fc       	sbrc	r0, 7
    208a:	05 d0       	rcall	.+10     	; 0x2096 <__divmodhi4_neg2>
    208c:	3e f4       	brtc	.+14     	; 0x209c <__divmodhi4_exit>

0000208e <__divmodhi4_neg1>:
    208e:	90 95       	com	r25
    2090:	81 95       	neg	r24
    2092:	9f 4f       	sbci	r25, 0xFF	; 255
    2094:	08 95       	ret

00002096 <__divmodhi4_neg2>:
    2096:	70 95       	com	r23
    2098:	61 95       	neg	r22
    209a:	7f 4f       	sbci	r23, 0xFF	; 255

0000209c <__divmodhi4_exit>:
    209c:	08 95       	ret

0000209e <__udivmodsi4>:
    209e:	a1 e2       	ldi	r26, 0x21	; 33
    20a0:	1a 2e       	mov	r1, r26
    20a2:	aa 1b       	sub	r26, r26
    20a4:	bb 1b       	sub	r27, r27
    20a6:	fd 01       	movw	r30, r26
    20a8:	0d c0       	rjmp	.+26     	; 0x20c4 <__udivmodsi4_ep>

000020aa <__udivmodsi4_loop>:
    20aa:	aa 1f       	adc	r26, r26
    20ac:	bb 1f       	adc	r27, r27
    20ae:	ee 1f       	adc	r30, r30
    20b0:	ff 1f       	adc	r31, r31
    20b2:	a2 17       	cp	r26, r18
    20b4:	b3 07       	cpc	r27, r19
    20b6:	e4 07       	cpc	r30, r20
    20b8:	f5 07       	cpc	r31, r21
    20ba:	20 f0       	brcs	.+8      	; 0x20c4 <__udivmodsi4_ep>
    20bc:	a2 1b       	sub	r26, r18
    20be:	b3 0b       	sbc	r27, r19
    20c0:	e4 0b       	sbc	r30, r20
    20c2:	f5 0b       	sbc	r31, r21

000020c4 <__udivmodsi4_ep>:
    20c4:	66 1f       	adc	r22, r22
    20c6:	77 1f       	adc	r23, r23
    20c8:	88 1f       	adc	r24, r24
    20ca:	99 1f       	adc	r25, r25
    20cc:	1a 94       	dec	r1
    20ce:	69 f7       	brne	.-38     	; 0x20aa <__udivmodsi4_loop>
    20d0:	60 95       	com	r22
    20d2:	70 95       	com	r23
    20d4:	80 95       	com	r24
    20d6:	90 95       	com	r25
    20d8:	9b 01       	movw	r18, r22
    20da:	ac 01       	movw	r20, r24
    20dc:	bd 01       	movw	r22, r26
    20de:	cf 01       	movw	r24, r30
    20e0:	08 95       	ret

000020e2 <__divmodsi4>:
    20e2:	05 2e       	mov	r0, r21
    20e4:	97 fb       	bst	r25, 7
    20e6:	1e f4       	brtc	.+6      	; 0x20ee <__divmodsi4+0xc>
    20e8:	00 94       	com	r0
    20ea:	0e 94 88 10 	call	0x2110	; 0x2110 <__negsi2>
    20ee:	57 fd       	sbrc	r21, 7
    20f0:	07 d0       	rcall	.+14     	; 0x2100 <__divmodsi4_neg2>
    20f2:	0e 94 4f 10 	call	0x209e	; 0x209e <__udivmodsi4>
    20f6:	07 fc       	sbrc	r0, 7
    20f8:	03 d0       	rcall	.+6      	; 0x2100 <__divmodsi4_neg2>
    20fa:	4e f4       	brtc	.+18     	; 0x210e <__divmodsi4_exit>
    20fc:	0c 94 88 10 	jmp	0x2110	; 0x2110 <__negsi2>

00002100 <__divmodsi4_neg2>:
    2100:	50 95       	com	r21
    2102:	40 95       	com	r20
    2104:	30 95       	com	r19
    2106:	21 95       	neg	r18
    2108:	3f 4f       	sbci	r19, 0xFF	; 255
    210a:	4f 4f       	sbci	r20, 0xFF	; 255
    210c:	5f 4f       	sbci	r21, 0xFF	; 255

0000210e <__divmodsi4_exit>:
    210e:	08 95       	ret

00002110 <__negsi2>:
    2110:	90 95       	com	r25
    2112:	80 95       	com	r24
    2114:	70 95       	com	r23
    2116:	61 95       	neg	r22
    2118:	7f 4f       	sbci	r23, 0xFF	; 255
    211a:	8f 4f       	sbci	r24, 0xFF	; 255
    211c:	9f 4f       	sbci	r25, 0xFF	; 255
    211e:	08 95       	ret

00002120 <__udivmodhi4>:
    2120:	aa 1b       	sub	r26, r26
    2122:	bb 1b       	sub	r27, r27
    2124:	51 e1       	ldi	r21, 0x11	; 17
    2126:	07 c0       	rjmp	.+14     	; 0x2136 <__udivmodhi4_ep>

00002128 <__udivmodhi4_loop>:
    2128:	aa 1f       	adc	r26, r26
    212a:	bb 1f       	adc	r27, r27
    212c:	a6 17       	cp	r26, r22
    212e:	b7 07       	cpc	r27, r23
    2130:	10 f0       	brcs	.+4      	; 0x2136 <__udivmodhi4_ep>
    2132:	a6 1b       	sub	r26, r22
    2134:	b7 0b       	sbc	r27, r23

00002136 <__udivmodhi4_ep>:
    2136:	88 1f       	adc	r24, r24
    2138:	99 1f       	adc	r25, r25
    213a:	5a 95       	dec	r21
    213c:	a9 f7       	brne	.-22     	; 0x2128 <__udivmodhi4_loop>
    213e:	80 95       	com	r24
    2140:	90 95       	com	r25
    2142:	bc 01       	movw	r22, r24
    2144:	cd 01       	movw	r24, r26
    2146:	08 95       	ret

00002148 <__tablejump2__>:
    2148:	ee 0f       	add	r30, r30
    214a:	ff 1f       	adc	r31, r31
    214c:	05 90       	lpm	r0, Z+
    214e:	f4 91       	lpm	r31, Z
    2150:	e0 2d       	mov	r30, r0
    2152:	09 94       	ijmp

00002154 <malloc>:
    2154:	0f 93       	push	r16
    2156:	1f 93       	push	r17
    2158:	cf 93       	push	r28
    215a:	df 93       	push	r29
    215c:	82 30       	cpi	r24, 0x02	; 2
    215e:	91 05       	cpc	r25, r1
    2160:	10 f4       	brcc	.+4      	; 0x2166 <malloc+0x12>
    2162:	82 e0       	ldi	r24, 0x02	; 2
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	e0 91 db 07 	lds	r30, 0x07DB	; 0x8007db <__flp>
    216a:	f0 91 dc 07 	lds	r31, 0x07DC	; 0x8007dc <__flp+0x1>
    216e:	20 e0       	ldi	r18, 0x00	; 0
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	a0 e0       	ldi	r26, 0x00	; 0
    2174:	b0 e0       	ldi	r27, 0x00	; 0
    2176:	30 97       	sbiw	r30, 0x00	; 0
    2178:	19 f1       	breq	.+70     	; 0x21c0 <malloc+0x6c>
    217a:	40 81       	ld	r20, Z
    217c:	51 81       	ldd	r21, Z+1	; 0x01
    217e:	02 81       	ldd	r16, Z+2	; 0x02
    2180:	13 81       	ldd	r17, Z+3	; 0x03
    2182:	48 17       	cp	r20, r24
    2184:	59 07       	cpc	r21, r25
    2186:	c8 f0       	brcs	.+50     	; 0x21ba <malloc+0x66>
    2188:	84 17       	cp	r24, r20
    218a:	95 07       	cpc	r25, r21
    218c:	69 f4       	brne	.+26     	; 0x21a8 <malloc+0x54>
    218e:	10 97       	sbiw	r26, 0x00	; 0
    2190:	31 f0       	breq	.+12     	; 0x219e <malloc+0x4a>
    2192:	12 96       	adiw	r26, 0x02	; 2
    2194:	0c 93       	st	X, r16
    2196:	12 97       	sbiw	r26, 0x02	; 2
    2198:	13 96       	adiw	r26, 0x03	; 3
    219a:	1c 93       	st	X, r17
    219c:	27 c0       	rjmp	.+78     	; 0x21ec <malloc+0x98>
    219e:	00 93 db 07 	sts	0x07DB, r16	; 0x8007db <__flp>
    21a2:	10 93 dc 07 	sts	0x07DC, r17	; 0x8007dc <__flp+0x1>
    21a6:	22 c0       	rjmp	.+68     	; 0x21ec <malloc+0x98>
    21a8:	21 15       	cp	r18, r1
    21aa:	31 05       	cpc	r19, r1
    21ac:	19 f0       	breq	.+6      	; 0x21b4 <malloc+0x60>
    21ae:	42 17       	cp	r20, r18
    21b0:	53 07       	cpc	r21, r19
    21b2:	18 f4       	brcc	.+6      	; 0x21ba <malloc+0x66>
    21b4:	9a 01       	movw	r18, r20
    21b6:	bd 01       	movw	r22, r26
    21b8:	ef 01       	movw	r28, r30
    21ba:	df 01       	movw	r26, r30
    21bc:	f8 01       	movw	r30, r16
    21be:	db cf       	rjmp	.-74     	; 0x2176 <malloc+0x22>
    21c0:	21 15       	cp	r18, r1
    21c2:	31 05       	cpc	r19, r1
    21c4:	f9 f0       	breq	.+62     	; 0x2204 <malloc+0xb0>
    21c6:	28 1b       	sub	r18, r24
    21c8:	39 0b       	sbc	r19, r25
    21ca:	24 30       	cpi	r18, 0x04	; 4
    21cc:	31 05       	cpc	r19, r1
    21ce:	80 f4       	brcc	.+32     	; 0x21f0 <malloc+0x9c>
    21d0:	8a 81       	ldd	r24, Y+2	; 0x02
    21d2:	9b 81       	ldd	r25, Y+3	; 0x03
    21d4:	61 15       	cp	r22, r1
    21d6:	71 05       	cpc	r23, r1
    21d8:	21 f0       	breq	.+8      	; 0x21e2 <malloc+0x8e>
    21da:	fb 01       	movw	r30, r22
    21dc:	93 83       	std	Z+3, r25	; 0x03
    21de:	82 83       	std	Z+2, r24	; 0x02
    21e0:	04 c0       	rjmp	.+8      	; 0x21ea <malloc+0x96>
    21e2:	90 93 dc 07 	sts	0x07DC, r25	; 0x8007dc <__flp+0x1>
    21e6:	80 93 db 07 	sts	0x07DB, r24	; 0x8007db <__flp>
    21ea:	fe 01       	movw	r30, r28
    21ec:	32 96       	adiw	r30, 0x02	; 2
    21ee:	44 c0       	rjmp	.+136    	; 0x2278 <malloc+0x124>
    21f0:	fe 01       	movw	r30, r28
    21f2:	e2 0f       	add	r30, r18
    21f4:	f3 1f       	adc	r31, r19
    21f6:	81 93       	st	Z+, r24
    21f8:	91 93       	st	Z+, r25
    21fa:	22 50       	subi	r18, 0x02	; 2
    21fc:	31 09       	sbc	r19, r1
    21fe:	39 83       	std	Y+1, r19	; 0x01
    2200:	28 83       	st	Y, r18
    2202:	3a c0       	rjmp	.+116    	; 0x2278 <malloc+0x124>
    2204:	20 91 d9 07 	lds	r18, 0x07D9	; 0x8007d9 <__brkval>
    2208:	30 91 da 07 	lds	r19, 0x07DA	; 0x8007da <__brkval+0x1>
    220c:	23 2b       	or	r18, r19
    220e:	41 f4       	brne	.+16     	; 0x2220 <malloc+0xcc>
    2210:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    2214:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    2218:	30 93 da 07 	sts	0x07DA, r19	; 0x8007da <__brkval+0x1>
    221c:	20 93 d9 07 	sts	0x07D9, r18	; 0x8007d9 <__brkval>
    2220:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    2224:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    2228:	21 15       	cp	r18, r1
    222a:	31 05       	cpc	r19, r1
    222c:	41 f4       	brne	.+16     	; 0x223e <malloc+0xea>
    222e:	2d b7       	in	r18, 0x3d	; 61
    2230:	3e b7       	in	r19, 0x3e	; 62
    2232:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2236:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    223a:	24 1b       	sub	r18, r20
    223c:	35 0b       	sbc	r19, r21
    223e:	e0 91 d9 07 	lds	r30, 0x07D9	; 0x8007d9 <__brkval>
    2242:	f0 91 da 07 	lds	r31, 0x07DA	; 0x8007da <__brkval+0x1>
    2246:	e2 17       	cp	r30, r18
    2248:	f3 07       	cpc	r31, r19
    224a:	a0 f4       	brcc	.+40     	; 0x2274 <malloc+0x120>
    224c:	2e 1b       	sub	r18, r30
    224e:	3f 0b       	sbc	r19, r31
    2250:	28 17       	cp	r18, r24
    2252:	39 07       	cpc	r19, r25
    2254:	78 f0       	brcs	.+30     	; 0x2274 <malloc+0x120>
    2256:	ac 01       	movw	r20, r24
    2258:	4e 5f       	subi	r20, 0xFE	; 254
    225a:	5f 4f       	sbci	r21, 0xFF	; 255
    225c:	24 17       	cp	r18, r20
    225e:	35 07       	cpc	r19, r21
    2260:	48 f0       	brcs	.+18     	; 0x2274 <malloc+0x120>
    2262:	4e 0f       	add	r20, r30
    2264:	5f 1f       	adc	r21, r31
    2266:	50 93 da 07 	sts	0x07DA, r21	; 0x8007da <__brkval+0x1>
    226a:	40 93 d9 07 	sts	0x07D9, r20	; 0x8007d9 <__brkval>
    226e:	81 93       	st	Z+, r24
    2270:	91 93       	st	Z+, r25
    2272:	02 c0       	rjmp	.+4      	; 0x2278 <malloc+0x124>
    2274:	e0 e0       	ldi	r30, 0x00	; 0
    2276:	f0 e0       	ldi	r31, 0x00	; 0
    2278:	cf 01       	movw	r24, r30
    227a:	df 91       	pop	r29
    227c:	cf 91       	pop	r28
    227e:	1f 91       	pop	r17
    2280:	0f 91       	pop	r16
    2282:	08 95       	ret

00002284 <free>:
    2284:	cf 93       	push	r28
    2286:	df 93       	push	r29
    2288:	00 97       	sbiw	r24, 0x00	; 0
    228a:	09 f4       	brne	.+2      	; 0x228e <free+0xa>
    228c:	81 c0       	rjmp	.+258    	; 0x2390 <free+0x10c>
    228e:	fc 01       	movw	r30, r24
    2290:	32 97       	sbiw	r30, 0x02	; 2
    2292:	13 82       	std	Z+3, r1	; 0x03
    2294:	12 82       	std	Z+2, r1	; 0x02
    2296:	a0 91 db 07 	lds	r26, 0x07DB	; 0x8007db <__flp>
    229a:	b0 91 dc 07 	lds	r27, 0x07DC	; 0x8007dc <__flp+0x1>
    229e:	10 97       	sbiw	r26, 0x00	; 0
    22a0:	81 f4       	brne	.+32     	; 0x22c2 <free+0x3e>
    22a2:	20 81       	ld	r18, Z
    22a4:	31 81       	ldd	r19, Z+1	; 0x01
    22a6:	82 0f       	add	r24, r18
    22a8:	93 1f       	adc	r25, r19
    22aa:	20 91 d9 07 	lds	r18, 0x07D9	; 0x8007d9 <__brkval>
    22ae:	30 91 da 07 	lds	r19, 0x07DA	; 0x8007da <__brkval+0x1>
    22b2:	28 17       	cp	r18, r24
    22b4:	39 07       	cpc	r19, r25
    22b6:	51 f5       	brne	.+84     	; 0x230c <free+0x88>
    22b8:	f0 93 da 07 	sts	0x07DA, r31	; 0x8007da <__brkval+0x1>
    22bc:	e0 93 d9 07 	sts	0x07D9, r30	; 0x8007d9 <__brkval>
    22c0:	67 c0       	rjmp	.+206    	; 0x2390 <free+0x10c>
    22c2:	ed 01       	movw	r28, r26
    22c4:	20 e0       	ldi	r18, 0x00	; 0
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	ce 17       	cp	r28, r30
    22ca:	df 07       	cpc	r29, r31
    22cc:	40 f4       	brcc	.+16     	; 0x22de <free+0x5a>
    22ce:	4a 81       	ldd	r20, Y+2	; 0x02
    22d0:	5b 81       	ldd	r21, Y+3	; 0x03
    22d2:	9e 01       	movw	r18, r28
    22d4:	41 15       	cp	r20, r1
    22d6:	51 05       	cpc	r21, r1
    22d8:	f1 f0       	breq	.+60     	; 0x2316 <free+0x92>
    22da:	ea 01       	movw	r28, r20
    22dc:	f5 cf       	rjmp	.-22     	; 0x22c8 <free+0x44>
    22de:	d3 83       	std	Z+3, r29	; 0x03
    22e0:	c2 83       	std	Z+2, r28	; 0x02
    22e2:	40 81       	ld	r20, Z
    22e4:	51 81       	ldd	r21, Z+1	; 0x01
    22e6:	84 0f       	add	r24, r20
    22e8:	95 1f       	adc	r25, r21
    22ea:	c8 17       	cp	r28, r24
    22ec:	d9 07       	cpc	r29, r25
    22ee:	59 f4       	brne	.+22     	; 0x2306 <free+0x82>
    22f0:	88 81       	ld	r24, Y
    22f2:	99 81       	ldd	r25, Y+1	; 0x01
    22f4:	84 0f       	add	r24, r20
    22f6:	95 1f       	adc	r25, r21
    22f8:	02 96       	adiw	r24, 0x02	; 2
    22fa:	91 83       	std	Z+1, r25	; 0x01
    22fc:	80 83       	st	Z, r24
    22fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2300:	9b 81       	ldd	r25, Y+3	; 0x03
    2302:	93 83       	std	Z+3, r25	; 0x03
    2304:	82 83       	std	Z+2, r24	; 0x02
    2306:	21 15       	cp	r18, r1
    2308:	31 05       	cpc	r19, r1
    230a:	29 f4       	brne	.+10     	; 0x2316 <free+0x92>
    230c:	f0 93 dc 07 	sts	0x07DC, r31	; 0x8007dc <__flp+0x1>
    2310:	e0 93 db 07 	sts	0x07DB, r30	; 0x8007db <__flp>
    2314:	3d c0       	rjmp	.+122    	; 0x2390 <free+0x10c>
    2316:	e9 01       	movw	r28, r18
    2318:	fb 83       	std	Y+3, r31	; 0x03
    231a:	ea 83       	std	Y+2, r30	; 0x02
    231c:	49 91       	ld	r20, Y+
    231e:	59 91       	ld	r21, Y+
    2320:	c4 0f       	add	r28, r20
    2322:	d5 1f       	adc	r29, r21
    2324:	ec 17       	cp	r30, r28
    2326:	fd 07       	cpc	r31, r29
    2328:	61 f4       	brne	.+24     	; 0x2342 <free+0xbe>
    232a:	80 81       	ld	r24, Z
    232c:	91 81       	ldd	r25, Z+1	; 0x01
    232e:	84 0f       	add	r24, r20
    2330:	95 1f       	adc	r25, r21
    2332:	02 96       	adiw	r24, 0x02	; 2
    2334:	e9 01       	movw	r28, r18
    2336:	99 83       	std	Y+1, r25	; 0x01
    2338:	88 83       	st	Y, r24
    233a:	82 81       	ldd	r24, Z+2	; 0x02
    233c:	93 81       	ldd	r25, Z+3	; 0x03
    233e:	9b 83       	std	Y+3, r25	; 0x03
    2340:	8a 83       	std	Y+2, r24	; 0x02
    2342:	e0 e0       	ldi	r30, 0x00	; 0
    2344:	f0 e0       	ldi	r31, 0x00	; 0
    2346:	12 96       	adiw	r26, 0x02	; 2
    2348:	8d 91       	ld	r24, X+
    234a:	9c 91       	ld	r25, X
    234c:	13 97       	sbiw	r26, 0x03	; 3
    234e:	00 97       	sbiw	r24, 0x00	; 0
    2350:	19 f0       	breq	.+6      	; 0x2358 <free+0xd4>
    2352:	fd 01       	movw	r30, r26
    2354:	dc 01       	movw	r26, r24
    2356:	f7 cf       	rjmp	.-18     	; 0x2346 <free+0xc2>
    2358:	8d 91       	ld	r24, X+
    235a:	9c 91       	ld	r25, X
    235c:	11 97       	sbiw	r26, 0x01	; 1
    235e:	9d 01       	movw	r18, r26
    2360:	2e 5f       	subi	r18, 0xFE	; 254
    2362:	3f 4f       	sbci	r19, 0xFF	; 255
    2364:	82 0f       	add	r24, r18
    2366:	93 1f       	adc	r25, r19
    2368:	20 91 d9 07 	lds	r18, 0x07D9	; 0x8007d9 <__brkval>
    236c:	30 91 da 07 	lds	r19, 0x07DA	; 0x8007da <__brkval+0x1>
    2370:	28 17       	cp	r18, r24
    2372:	39 07       	cpc	r19, r25
    2374:	69 f4       	brne	.+26     	; 0x2390 <free+0x10c>
    2376:	30 97       	sbiw	r30, 0x00	; 0
    2378:	29 f4       	brne	.+10     	; 0x2384 <free+0x100>
    237a:	10 92 dc 07 	sts	0x07DC, r1	; 0x8007dc <__flp+0x1>
    237e:	10 92 db 07 	sts	0x07DB, r1	; 0x8007db <__flp>
    2382:	02 c0       	rjmp	.+4      	; 0x2388 <free+0x104>
    2384:	13 82       	std	Z+3, r1	; 0x03
    2386:	12 82       	std	Z+2, r1	; 0x02
    2388:	b0 93 da 07 	sts	0x07DA, r27	; 0x8007da <__brkval+0x1>
    238c:	a0 93 d9 07 	sts	0x07D9, r26	; 0x8007d9 <__brkval>
    2390:	df 91       	pop	r29
    2392:	cf 91       	pop	r28
    2394:	08 95       	ret

00002396 <realloc>:
    2396:	a0 e0       	ldi	r26, 0x00	; 0
    2398:	b0 e0       	ldi	r27, 0x00	; 0
    239a:	e1 ed       	ldi	r30, 0xD1	; 209
    239c:	f1 e1       	ldi	r31, 0x11	; 17
    239e:	0c 94 a5 12 	jmp	0x254a	; 0x254a <__prologue_saves__+0x8>
    23a2:	ec 01       	movw	r28, r24
    23a4:	00 97       	sbiw	r24, 0x00	; 0
    23a6:	21 f4       	brne	.+8      	; 0x23b0 <realloc+0x1a>
    23a8:	cb 01       	movw	r24, r22
    23aa:	0e 94 aa 10 	call	0x2154	; 0x2154 <malloc>
    23ae:	b4 c0       	rjmp	.+360    	; 0x2518 <realloc+0x182>
    23b0:	fc 01       	movw	r30, r24
    23b2:	e6 0f       	add	r30, r22
    23b4:	f7 1f       	adc	r31, r23
    23b6:	9c 01       	movw	r18, r24
    23b8:	22 50       	subi	r18, 0x02	; 2
    23ba:	31 09       	sbc	r19, r1
    23bc:	e2 17       	cp	r30, r18
    23be:	f3 07       	cpc	r31, r19
    23c0:	08 f4       	brcc	.+2      	; 0x23c4 <realloc+0x2e>
    23c2:	a8 c0       	rjmp	.+336    	; 0x2514 <realloc+0x17e>
    23c4:	d9 01       	movw	r26, r18
    23c6:	0d 91       	ld	r16, X+
    23c8:	1c 91       	ld	r17, X
    23ca:	11 97       	sbiw	r26, 0x01	; 1
    23cc:	06 17       	cp	r16, r22
    23ce:	17 07       	cpc	r17, r23
    23d0:	b0 f0       	brcs	.+44     	; 0x23fe <realloc+0x68>
    23d2:	05 30       	cpi	r16, 0x05	; 5
    23d4:	11 05       	cpc	r17, r1
    23d6:	08 f4       	brcc	.+2      	; 0x23da <realloc+0x44>
    23d8:	9b c0       	rjmp	.+310    	; 0x2510 <realloc+0x17a>
    23da:	c8 01       	movw	r24, r16
    23dc:	04 97       	sbiw	r24, 0x04	; 4
    23de:	86 17       	cp	r24, r22
    23e0:	97 07       	cpc	r25, r23
    23e2:	08 f4       	brcc	.+2      	; 0x23e6 <realloc+0x50>
    23e4:	95 c0       	rjmp	.+298    	; 0x2510 <realloc+0x17a>
    23e6:	02 50       	subi	r16, 0x02	; 2
    23e8:	11 09       	sbc	r17, r1
    23ea:	06 1b       	sub	r16, r22
    23ec:	17 0b       	sbc	r17, r23
    23ee:	01 93       	st	Z+, r16
    23f0:	11 93       	st	Z+, r17
    23f2:	6d 93       	st	X+, r22
    23f4:	7c 93       	st	X, r23
    23f6:	cf 01       	movw	r24, r30
    23f8:	0e 94 42 11 	call	0x2284	; 0x2284 <free>
    23fc:	89 c0       	rjmp	.+274    	; 0x2510 <realloc+0x17a>
    23fe:	5b 01       	movw	r10, r22
    2400:	a0 1a       	sub	r10, r16
    2402:	b1 0a       	sbc	r11, r17
    2404:	4c 01       	movw	r8, r24
    2406:	80 0e       	add	r8, r16
    2408:	91 1e       	adc	r9, r17
    240a:	a0 91 db 07 	lds	r26, 0x07DB	; 0x8007db <__flp>
    240e:	b0 91 dc 07 	lds	r27, 0x07DC	; 0x8007dc <__flp+0x1>
    2412:	61 2c       	mov	r6, r1
    2414:	71 2c       	mov	r7, r1
    2416:	e1 2c       	mov	r14, r1
    2418:	f1 2c       	mov	r15, r1
    241a:	10 97       	sbiw	r26, 0x00	; 0
    241c:	09 f4       	brne	.+2      	; 0x2420 <realloc+0x8a>
    241e:	46 c0       	rjmp	.+140    	; 0x24ac <realloc+0x116>
    2420:	8d 91       	ld	r24, X+
    2422:	9c 91       	ld	r25, X
    2424:	11 97       	sbiw	r26, 0x01	; 1
    2426:	a8 15       	cp	r26, r8
    2428:	b9 05       	cpc	r27, r9
    242a:	b1 f5       	brne	.+108    	; 0x2498 <realloc+0x102>
    242c:	6c 01       	movw	r12, r24
    242e:	42 e0       	ldi	r20, 0x02	; 2
    2430:	c4 0e       	add	r12, r20
    2432:	d1 1c       	adc	r13, r1
    2434:	ca 14       	cp	r12, r10
    2436:	db 04       	cpc	r13, r11
    2438:	78 f1       	brcs	.+94     	; 0x2498 <realloc+0x102>
    243a:	4c 01       	movw	r8, r24
    243c:	8a 18       	sub	r8, r10
    243e:	9b 08       	sbc	r9, r11
    2440:	64 01       	movw	r12, r8
    2442:	42 e0       	ldi	r20, 0x02	; 2
    2444:	c4 0e       	add	r12, r20
    2446:	d1 1c       	adc	r13, r1
    2448:	12 96       	adiw	r26, 0x02	; 2
    244a:	bc 90       	ld	r11, X
    244c:	12 97       	sbiw	r26, 0x02	; 2
    244e:	13 96       	adiw	r26, 0x03	; 3
    2450:	ac 91       	ld	r26, X
    2452:	b5 e0       	ldi	r27, 0x05	; 5
    2454:	cb 16       	cp	r12, r27
    2456:	d1 04       	cpc	r13, r1
    2458:	40 f0       	brcs	.+16     	; 0x246a <realloc+0xd4>
    245a:	b2 82       	std	Z+2, r11	; 0x02
    245c:	a3 83       	std	Z+3, r26	; 0x03
    245e:	91 82       	std	Z+1, r9	; 0x01
    2460:	80 82       	st	Z, r8
    2462:	d9 01       	movw	r26, r18
    2464:	6d 93       	st	X+, r22
    2466:	7c 93       	st	X, r23
    2468:	09 c0       	rjmp	.+18     	; 0x247c <realloc+0xe6>
    246a:	0e 5f       	subi	r16, 0xFE	; 254
    246c:	1f 4f       	sbci	r17, 0xFF	; 255
    246e:	80 0f       	add	r24, r16
    2470:	91 1f       	adc	r25, r17
    2472:	f9 01       	movw	r30, r18
    2474:	91 83       	std	Z+1, r25	; 0x01
    2476:	80 83       	st	Z, r24
    2478:	eb 2d       	mov	r30, r11
    247a:	fa 2f       	mov	r31, r26
    247c:	e1 14       	cp	r14, r1
    247e:	f1 04       	cpc	r15, r1
    2480:	31 f0       	breq	.+12     	; 0x248e <realloc+0xf8>
    2482:	d7 01       	movw	r26, r14
    2484:	13 96       	adiw	r26, 0x03	; 3
    2486:	fc 93       	st	X, r31
    2488:	ee 93       	st	-X, r30
    248a:	12 97       	sbiw	r26, 0x02	; 2
    248c:	41 c0       	rjmp	.+130    	; 0x2510 <realloc+0x17a>
    248e:	f0 93 dc 07 	sts	0x07DC, r31	; 0x8007dc <__flp+0x1>
    2492:	e0 93 db 07 	sts	0x07DB, r30	; 0x8007db <__flp>
    2496:	3c c0       	rjmp	.+120    	; 0x2510 <realloc+0x17a>
    2498:	68 16       	cp	r6, r24
    249a:	79 06       	cpc	r7, r25
    249c:	08 f4       	brcc	.+2      	; 0x24a0 <realloc+0x10a>
    249e:	3c 01       	movw	r6, r24
    24a0:	7d 01       	movw	r14, r26
    24a2:	12 96       	adiw	r26, 0x02	; 2
    24a4:	0d 90       	ld	r0, X+
    24a6:	bc 91       	ld	r27, X
    24a8:	a0 2d       	mov	r26, r0
    24aa:	b7 cf       	rjmp	.-146    	; 0x241a <realloc+0x84>
    24ac:	80 91 d9 07 	lds	r24, 0x07D9	; 0x8007d9 <__brkval>
    24b0:	90 91 da 07 	lds	r25, 0x07DA	; 0x8007da <__brkval+0x1>
    24b4:	88 16       	cp	r8, r24
    24b6:	99 06       	cpc	r9, r25
    24b8:	e1 f4       	brne	.+56     	; 0x24f2 <realloc+0x15c>
    24ba:	66 16       	cp	r6, r22
    24bc:	77 06       	cpc	r7, r23
    24be:	c8 f4       	brcc	.+50     	; 0x24f2 <realloc+0x15c>
    24c0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    24c4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    24c8:	00 97       	sbiw	r24, 0x00	; 0
    24ca:	41 f4       	brne	.+16     	; 0x24dc <realloc+0x146>
    24cc:	8d b7       	in	r24, 0x3d	; 61
    24ce:	9e b7       	in	r25, 0x3e	; 62
    24d0:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    24d4:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    24d8:	84 1b       	sub	r24, r20
    24da:	95 0b       	sbc	r25, r21
    24dc:	e8 17       	cp	r30, r24
    24de:	f9 07       	cpc	r31, r25
    24e0:	c8 f4       	brcc	.+50     	; 0x2514 <realloc+0x17e>
    24e2:	f0 93 da 07 	sts	0x07DA, r31	; 0x8007da <__brkval+0x1>
    24e6:	e0 93 d9 07 	sts	0x07D9, r30	; 0x8007d9 <__brkval>
    24ea:	f9 01       	movw	r30, r18
    24ec:	71 83       	std	Z+1, r23	; 0x01
    24ee:	60 83       	st	Z, r22
    24f0:	0f c0       	rjmp	.+30     	; 0x2510 <realloc+0x17a>
    24f2:	cb 01       	movw	r24, r22
    24f4:	0e 94 aa 10 	call	0x2154	; 0x2154 <malloc>
    24f8:	7c 01       	movw	r14, r24
    24fa:	00 97       	sbiw	r24, 0x00	; 0
    24fc:	59 f0       	breq	.+22     	; 0x2514 <realloc+0x17e>
    24fe:	a8 01       	movw	r20, r16
    2500:	be 01       	movw	r22, r28
    2502:	0e 94 91 12 	call	0x2522	; 0x2522 <memcpy>
    2506:	ce 01       	movw	r24, r28
    2508:	0e 94 42 11 	call	0x2284	; 0x2284 <free>
    250c:	c7 01       	movw	r24, r14
    250e:	04 c0       	rjmp	.+8      	; 0x2518 <realloc+0x182>
    2510:	ce 01       	movw	r24, r28
    2512:	02 c0       	rjmp	.+4      	; 0x2518 <realloc+0x182>
    2514:	80 e0       	ldi	r24, 0x00	; 0
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	cd b7       	in	r28, 0x3d	; 61
    251a:	de b7       	in	r29, 0x3e	; 62
    251c:	ee e0       	ldi	r30, 0x0E	; 14
    251e:	0c 94 c1 12 	jmp	0x2582	; 0x2582 <__epilogue_restores__+0x8>

00002522 <memcpy>:
    2522:	fb 01       	movw	r30, r22
    2524:	dc 01       	movw	r26, r24
    2526:	02 c0       	rjmp	.+4      	; 0x252c <memcpy+0xa>
    2528:	01 90       	ld	r0, Z+
    252a:	0d 92       	st	X+, r0
    252c:	41 50       	subi	r20, 0x01	; 1
    252e:	50 40       	sbci	r21, 0x00	; 0
    2530:	d8 f7       	brcc	.-10     	; 0x2528 <memcpy+0x6>
    2532:	08 95       	ret

00002534 <strcpy>:
    2534:	fb 01       	movw	r30, r22
    2536:	dc 01       	movw	r26, r24
    2538:	01 90       	ld	r0, Z+
    253a:	0d 92       	st	X+, r0
    253c:	00 20       	and	r0, r0
    253e:	e1 f7       	brne	.-8      	; 0x2538 <strcpy+0x4>
    2540:	08 95       	ret

00002542 <__prologue_saves__>:
    2542:	2f 92       	push	r2
    2544:	3f 92       	push	r3
    2546:	4f 92       	push	r4
    2548:	5f 92       	push	r5
    254a:	6f 92       	push	r6
    254c:	7f 92       	push	r7
    254e:	8f 92       	push	r8
    2550:	9f 92       	push	r9
    2552:	af 92       	push	r10
    2554:	bf 92       	push	r11
    2556:	cf 92       	push	r12
    2558:	df 92       	push	r13
    255a:	ef 92       	push	r14
    255c:	ff 92       	push	r15
    255e:	0f 93       	push	r16
    2560:	1f 93       	push	r17
    2562:	cf 93       	push	r28
    2564:	df 93       	push	r29
    2566:	cd b7       	in	r28, 0x3d	; 61
    2568:	de b7       	in	r29, 0x3e	; 62
    256a:	ca 1b       	sub	r28, r26
    256c:	db 0b       	sbc	r29, r27
    256e:	0f b6       	in	r0, 0x3f	; 63
    2570:	f8 94       	cli
    2572:	de bf       	out	0x3e, r29	; 62
    2574:	0f be       	out	0x3f, r0	; 63
    2576:	cd bf       	out	0x3d, r28	; 61
    2578:	09 94       	ijmp

0000257a <__epilogue_restores__>:
    257a:	2a 88       	ldd	r2, Y+18	; 0x12
    257c:	39 88       	ldd	r3, Y+17	; 0x11
    257e:	48 88       	ldd	r4, Y+16	; 0x10
    2580:	5f 84       	ldd	r5, Y+15	; 0x0f
    2582:	6e 84       	ldd	r6, Y+14	; 0x0e
    2584:	7d 84       	ldd	r7, Y+13	; 0x0d
    2586:	8c 84       	ldd	r8, Y+12	; 0x0c
    2588:	9b 84       	ldd	r9, Y+11	; 0x0b
    258a:	aa 84       	ldd	r10, Y+10	; 0x0a
    258c:	b9 84       	ldd	r11, Y+9	; 0x09
    258e:	c8 84       	ldd	r12, Y+8	; 0x08
    2590:	df 80       	ldd	r13, Y+7	; 0x07
    2592:	ee 80       	ldd	r14, Y+6	; 0x06
    2594:	fd 80       	ldd	r15, Y+5	; 0x05
    2596:	0c 81       	ldd	r16, Y+4	; 0x04
    2598:	1b 81       	ldd	r17, Y+3	; 0x03
    259a:	aa 81       	ldd	r26, Y+2	; 0x02
    259c:	b9 81       	ldd	r27, Y+1	; 0x01
    259e:	ce 0f       	add	r28, r30
    25a0:	d1 1d       	adc	r29, r1
    25a2:	0f b6       	in	r0, 0x3f	; 63
    25a4:	f8 94       	cli
    25a6:	de bf       	out	0x3e, r29	; 62
    25a8:	0f be       	out	0x3f, r0	; 63
    25aa:	cd bf       	out	0x3d, r28	; 61
    25ac:	ed 01       	movw	r28, r26
    25ae:	08 95       	ret

000025b0 <__do_global_dtors>:
    25b0:	10 e0       	ldi	r17, 0x00	; 0
    25b2:	c3 e6       	ldi	r28, 0x63	; 99
    25b4:	d0 e0       	ldi	r29, 0x00	; 0
    25b6:	04 c0       	rjmp	.+8      	; 0x25c0 <__do_global_dtors+0x10>
    25b8:	fe 01       	movw	r30, r28
    25ba:	0e 94 a4 10 	call	0x2148	; 0x2148 <__tablejump2__>
    25be:	21 96       	adiw	r28, 0x01	; 1
    25c0:	c4 36       	cpi	r28, 0x64	; 100
    25c2:	d1 07       	cpc	r29, r17
    25c4:	c9 f7       	brne	.-14     	; 0x25b8 <__do_global_dtors+0x8>
    25c6:	f8 94       	cli

000025c8 <__stop_program>:
    25c8:	ff cf       	rjmp	.-2      	; 0x25c8 <__stop_program>
