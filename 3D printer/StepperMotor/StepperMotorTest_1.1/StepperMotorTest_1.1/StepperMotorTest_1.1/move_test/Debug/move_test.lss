
move_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000fc6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f52  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  00800100  00800100  00000fc6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000fc6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ff8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00001038  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000221d  00000000  00000000  000011a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dbd  00000000  00000000  000033bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d38  00000000  00000000  0000417a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000414  00000000  00000000  00004eb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000aa3  00000000  00000000  000052c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001391  00000000  00000000  00005d6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  000070fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5d 00 	jmp	0xba	; 0xba <__ctors_end>
   4:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
   8:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
   c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  10:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  14:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  18:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  1c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  20:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  24:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  28:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  2c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  30:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  34:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  38:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  3c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  40:	0c 94 08 06 	jmp	0xc10	; 0xc10 <__vector_16>
  44:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  48:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  4c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  50:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  54:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  58:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  5c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  60:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  64:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
  a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
  ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_start>:
  b8:	1d 01       	movw	r2, r26

000000ba <__ctors_end>:
  ba:	11 24       	eor	r1, r1
  bc:	1f be       	out	0x3f, r1	; 63
  be:	cf ef       	ldi	r28, 0xFF	; 255
  c0:	d8 e0       	ldi	r29, 0x08	; 8
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_clear_bss>:
  c6:	21 e0       	ldi	r18, 0x01	; 1
  c8:	a0 e0       	ldi	r26, 0x00	; 0
  ca:	b1 e0       	ldi	r27, 0x01	; 1
  cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
  ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
  d0:	a3 32       	cpi	r26, 0x23	; 35
  d2:	b2 07       	cpc	r27, r18
  d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>

000000d6 <__do_global_ctors>:
  d6:	10 e0       	ldi	r17, 0x00	; 0
  d8:	cd e5       	ldi	r28, 0x5D	; 93
  da:	d0 e0       	ldi	r29, 0x00	; 0
  dc:	04 c0       	rjmp	.+8      	; 0xe6 <__do_global_ctors+0x10>
  de:	21 97       	sbiw	r28, 0x01	; 1
  e0:	fe 01       	movw	r30, r28
  e2:	0e 94 92 07 	call	0xf24	; 0xf24 <__tablejump2__>
  e6:	cc 35       	cpi	r28, 0x5C	; 92
  e8:	d1 07       	cpc	r29, r17
  ea:	c9 f7       	brne	.-14     	; 0xde <__do_global_ctors+0x8>
  ec:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <main>
  f0:	0c 94 a7 07 	jmp	0xf4e	; 0xf4e <_exit>

000000f4 <__bad_interrupt>:
  f4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f8 <setup>:
#define clk_pin 7

StepperDriver ss(motor_steps, step_divisition, en_pin, cw_pin, clk_pin);  

void setup() { 
	ss.setSpeed(160);
  f8:	40 e0       	ldi	r20, 0x00	; 0
  fa:	50 e0       	ldi	r21, 0x00	; 0
  fc:	60 e2       	ldi	r22, 0x20	; 32
  fe:	73 e4       	ldi	r23, 0x43	; 67
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	91 e0       	ldi	r25, 0x01	; 1
 104:	0e 94 68 01 	call	0x2d0	; 0x2d0 <_ZN13StepperDriver8setSpeedEf>
	ss.powerEnable(true);
 108:	61 e0       	ldi	r22, 0x01	; 1
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	91 e0       	ldi	r25, 0x01	; 1
 10e:	0e 94 a2 01 	call	0x344	; 0x344 <_ZN13StepperDriver11powerEnableEb>
	ss.positioning();
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	91 e0       	ldi	r25, 0x01	; 1
 116:	0e 94 6f 02 	call	0x4de	; 0x4de <_ZN13StepperDriver11positioningEv>
	delay(1600);
 11a:	60 e4       	ldi	r22, 0x40	; 64
 11c:	76 e0       	ldi	r23, 0x06	; 6
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0c 94 77 06 	jmp	0xcee	; 0xcee <delay>

00000126 <loop>:
}

void loop() {
 126:	cf 92       	push	r12
 128:	df 92       	push	r13
 12a:	ef 92       	push	r14
 12c:	ff 92       	push	r15
 12e:	0f 93       	push	r16
 130:	1f 93       	push	r17
	ss.setSpeed(160);
 132:	40 e0       	ldi	r20, 0x00	; 0
 134:	50 e0       	ldi	r21, 0x00	; 0
 136:	60 e2       	ldi	r22, 0x20	; 32
 138:	73 e4       	ldi	r23, 0x43	; 67
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <_ZN13StepperDriver8setSpeedEf>
	ss.step(400);
 142:	40 e9       	ldi	r20, 0x90	; 144
 144:	51 e0       	ldi	r21, 0x01	; 1
 146:	60 e0       	ldi	r22, 0x00	; 0
 148:	70 e0       	ldi	r23, 0x00	; 0
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	91 e0       	ldi	r25, 0x01	; 1
 14e:	0e 94 33 02 	call	0x466	; 0x466 <_ZN13StepperDriver4stepEl>
	delay(100);
 152:	64 e6       	ldi	r22, 0x64	; 100
 154:	70 e0       	ldi	r23, 0x00	; 0
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0e 94 77 06 	call	0xcee	; 0xcee <delay>
	ss.step(-400);
 15e:	40 e7       	ldi	r20, 0x70	; 112
 160:	5e ef       	ldi	r21, 0xFE	; 254
 162:	6f ef       	ldi	r22, 0xFF	; 255
 164:	7f ef       	ldi	r23, 0xFF	; 255
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	91 e0       	ldi	r25, 0x01	; 1
 16a:	0e 94 33 02 	call	0x466	; 0x466 <_ZN13StepperDriver4stepEl>
	delay(100);
 16e:	64 e6       	ldi	r22, 0x64	; 100
 170:	70 e0       	ldi	r23, 0x00	; 0
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 77 06 	call	0xcee	; 0xcee <delay>
	ss.step(1200, 144, 160);
 17a:	80 ea       	ldi	r24, 0xA0	; 160
 17c:	c8 2e       	mov	r12, r24
 17e:	d1 2c       	mov	r13, r1
 180:	e1 2c       	mov	r14, r1
 182:	f1 2c       	mov	r15, r1
 184:	00 e9       	ldi	r16, 0x90	; 144
 186:	10 e0       	ldi	r17, 0x00	; 0
 188:	20 e0       	ldi	r18, 0x00	; 0
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	40 eb       	ldi	r20, 0xB0	; 176
 18e:	54 e0       	ldi	r21, 0x04	; 4
 190:	60 e0       	ldi	r22, 0x00	; 0
 192:	70 e0       	ldi	r23, 0x00	; 0
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	91 e0       	ldi	r25, 0x01	; 1
 198:	0e 94 34 03 	call	0x668	; 0x668 <_ZN13StepperDriver4stepElll>
	delay(100);
 19c:	64 e6       	ldi	r22, 0x64	; 100
 19e:	70 e0       	ldi	r23, 0x00	; 0
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	0e 94 77 06 	call	0xcee	; 0xcee <delay>
	ss.step(-1200, 144, 160);
 1a8:	00 e9       	ldi	r16, 0x90	; 144
 1aa:	10 e0       	ldi	r17, 0x00	; 0
 1ac:	20 e0       	ldi	r18, 0x00	; 0
 1ae:	30 e0       	ldi	r19, 0x00	; 0
 1b0:	40 e5       	ldi	r20, 0x50	; 80
 1b2:	5b ef       	ldi	r21, 0xFB	; 251
 1b4:	6f ef       	ldi	r22, 0xFF	; 255
 1b6:	7f ef       	ldi	r23, 0xFF	; 255
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	91 e0       	ldi	r25, 0x01	; 1
 1bc:	0e 94 34 03 	call	0x668	; 0x668 <_ZN13StepperDriver4stepElll>
	delay(100);
 1c0:	64 e6       	ldi	r22, 0x64	; 100
 1c2:	70 e0       	ldi	r23, 0x00	; 0
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	0e 94 77 06 	call	0xcee	; 0xcee <delay>
	ss.setSpeed(200);
 1cc:	40 e0       	ldi	r20, 0x00	; 0
 1ce:	50 e0       	ldi	r21, 0x00	; 0
 1d0:	68 e4       	ldi	r22, 0x48	; 72
 1d2:	73 e4       	ldi	r23, 0x43	; 67
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	91 e0       	ldi	r25, 0x01	; 1
 1d8:	0e 94 68 01 	call	0x2d0	; 0x2d0 <_ZN13StepperDriver8setSpeedEf>
	ss.step(400, 32, 40);
 1dc:	98 e2       	ldi	r25, 0x28	; 40
 1de:	c9 2e       	mov	r12, r25
 1e0:	d1 2c       	mov	r13, r1
 1e2:	e1 2c       	mov	r14, r1
 1e4:	f1 2c       	mov	r15, r1
 1e6:	00 e2       	ldi	r16, 0x20	; 32
 1e8:	10 e0       	ldi	r17, 0x00	; 0
 1ea:	20 e0       	ldi	r18, 0x00	; 0
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	40 e9       	ldi	r20, 0x90	; 144
 1f0:	51 e0       	ldi	r21, 0x01	; 1
 1f2:	60 e0       	ldi	r22, 0x00	; 0
 1f4:	70 e0       	ldi	r23, 0x00	; 0
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	91 e0       	ldi	r25, 0x01	; 1
 1fa:	0e 94 34 03 	call	0x668	; 0x668 <_ZN13StepperDriver4stepElll>
	delay(100);
 1fe:	64 e6       	ldi	r22, 0x64	; 100
 200:	70 e0       	ldi	r23, 0x00	; 0
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	0e 94 77 06 	call	0xcee	; 0xcee <delay>
	ss.step(-400, 32, 40);
 20a:	00 e2       	ldi	r16, 0x20	; 32
 20c:	10 e0       	ldi	r17, 0x00	; 0
 20e:	20 e0       	ldi	r18, 0x00	; 0
 210:	30 e0       	ldi	r19, 0x00	; 0
 212:	40 e7       	ldi	r20, 0x70	; 112
 214:	5e ef       	ldi	r21, 0xFE	; 254
 216:	6f ef       	ldi	r22, 0xFF	; 255
 218:	7f ef       	ldi	r23, 0xFF	; 255
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	91 e0       	ldi	r25, 0x01	; 1
 21e:	0e 94 34 03 	call	0x668	; 0x668 <_ZN13StepperDriver4stepElll>
	delay(200);
 222:	68 ec       	ldi	r22, 0xC8	; 200
 224:	70 e0       	ldi	r23, 0x00	; 0
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	1f 91       	pop	r17
 22c:	0f 91       	pop	r16
 22e:	ff 90       	pop	r15
 230:	ef 90       	pop	r14
 232:	df 90       	pop	r13
 234:	cf 90       	pop	r12
	delay(100);
	ss.setSpeed(200);
	ss.step(400, 32, 40);
	delay(100);
	ss.step(-400, 32, 40);
	delay(200);
 236:	0c 94 77 06 	jmp	0xcee	; 0xcee <delay>

0000023a <_GLOBAL__sub_I_ss>:
 23a:	ef 92       	push	r14
 23c:	ff 92       	push	r15
 23e:	0f 93       	push	r16
 240:	1f 93       	push	r17
#define step_divisition 16
#define en_pin NULL
#define cw_pin 6
#define clk_pin 7

StepperDriver ss(motor_steps, step_divisition, en_pin, cw_pin, clk_pin);  
 242:	87 e0       	ldi	r24, 0x07	; 7
 244:	e8 2e       	mov	r14, r24
 246:	f1 2c       	mov	r15, r1
 248:	06 e0       	ldi	r16, 0x06	; 6
 24a:	10 e0       	ldi	r17, 0x00	; 0
 24c:	20 e0       	ldi	r18, 0x00	; 0
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	40 e1       	ldi	r20, 0x10	; 16
 252:	50 e0       	ldi	r21, 0x00	; 0
 254:	68 ec       	ldi	r22, 0xC8	; 200
 256:	70 e0       	ldi	r23, 0x00	; 0
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	91 e0       	ldi	r25, 0x01	; 1
 25c:	0e 94 35 01 	call	0x26a	; 0x26a <_ZN13StepperDriverC1Eiiiii>
	ss.setSpeed(200);
	ss.step(400, 32, 40);
	delay(100);
	ss.step(-400, 32, 40);
	delay(200);
 260:	1f 91       	pop	r17
 262:	0f 91       	pop	r16
 264:	ff 90       	pop	r15
 266:	ef 90       	pop	r14
 268:	08 95       	ret

0000026a <_ZN13StepperDriverC1Eiiiii>:
#include "Arduino.h"
#include "StepperDriver.h"

StepperDriver::StepperDriver(int number_of_steps, int step_division, int en_pin, int cw_pin, int clk_pin)
 26a:	ef 92       	push	r14
 26c:	ff 92       	push	r15
 26e:	0f 93       	push	r16
 270:	1f 93       	push	r17
 272:	fc 01       	movw	r30, r24
 274:	82 2f       	mov	r24, r18
{
	this->number_of_steps = number_of_steps;
 276:	71 83       	std	Z+1, r23	; 0x01
 278:	60 83       	st	Z, r22
  this->step_division = step_division;
 27a:	53 83       	std	Z+3, r21	; 0x03
 27c:	42 83       	std	Z+2, r20	; 0x02
  this->step_interval = 10000;
 27e:	40 e1       	ldi	r20, 0x10	; 16
 280:	57 e2       	ldi	r21, 0x27	; 39
 282:	60 e0       	ldi	r22, 0x00	; 0
 284:	70 e0       	ldi	r23, 0x00	; 0
 286:	44 83       	std	Z+4, r20	; 0x04
 288:	55 83       	std	Z+5, r21	; 0x05
 28a:	66 83       	std	Z+6, r22	; 0x06
 28c:	77 83       	std	Z+7, r23	; 0x07
  this->last_step_time = 0;
 28e:	10 86       	std	Z+8, r1	; 0x08
 290:	11 86       	std	Z+9, r1	; 0x09
 292:	12 86       	std	Z+10, r1	; 0x0a
 294:	13 86       	std	Z+11, r1	; 0x0b
  this->target_step_time1 = 0;
 296:	14 86       	std	Z+12, r1	; 0x0c
 298:	15 86       	std	Z+13, r1	; 0x0d
 29a:	16 86       	std	Z+14, r1	; 0x0e
 29c:	17 86       	std	Z+15, r1	; 0x0f
  this->target_step_time2 = 0;
 29e:	10 8a       	std	Z+16, r1	; 0x10
 2a0:	11 8a       	std	Z+17, r1	; 0x11
 2a2:	12 8a       	std	Z+18, r1	; 0x12
 2a4:	13 8a       	std	Z+19, r1	; 0x13
  
  // Arduino pins for the motor control connection:
  this->en_pin = en_pin;
 2a6:	24 8b       	std	Z+20, r18	; 0x14
 2a8:	35 8b       	std	Z+21, r19	; 0x15
  this->cw_pin = cw_pin;
 2aa:	06 8b       	std	Z+22, r16	; 0x16
 2ac:	17 8b       	std	Z+23, r17	; 0x17
  this->clk_pin = clk_pin;
 2ae:	e0 8e       	std	Z+24, r14	; 0x18
 2b0:	f1 8e       	std	Z+25, r15	; 0x19

  // setup the pins on the microcontroller:
  pinMode(en_pin, OUTPUT);
 2b2:	61 e0       	ldi	r22, 0x01	; 1
 2b4:	0e 94 03 07 	call	0xe06	; 0xe06 <pinMode>
  pinMode(cw_pin, OUTPUT);
 2b8:	61 e0       	ldi	r22, 0x01	; 1
 2ba:	80 2f       	mov	r24, r16
 2bc:	0e 94 03 07 	call	0xe06	; 0xe06 <pinMode>
  pinMode(clk_pin, OUTPUT);
 2c0:	61 e0       	ldi	r22, 0x01	; 1
 2c2:	8e 2d       	mov	r24, r14
}
 2c4:	1f 91       	pop	r17
 2c6:	0f 91       	pop	r16
 2c8:	ff 90       	pop	r15
 2ca:	ef 90       	pop	r14
  this->clk_pin = clk_pin;

  // setup the pins on the microcontroller:
  pinMode(en_pin, OUTPUT);
  pinMode(cw_pin, OUTPUT);
  pinMode(clk_pin, OUTPUT);
 2cc:	0c 94 03 07 	jmp	0xe06	; 0xe06 <pinMode>

000002d0 <_ZN13StepperDriver8setSpeedEf>:

/*
  Sets the speed in revs per minute
*/
void StepperDriver::setSpeed(float rpm)
{
 2d0:	cf 92       	push	r12
 2d2:	df 92       	push	r13
 2d4:	ef 92       	push	r14
 2d6:	ff 92       	push	r15
 2d8:	cf 93       	push	r28
 2da:	df 93       	push	r29
 2dc:	ec 01       	movw	r28, r24
 2de:	6a 01       	movw	r12, r20
 2e0:	7b 01       	movw	r14, r22
  step_interval = 60000000L / (number_of_steps * rpm * step_division);
 2e2:	68 81       	ld	r22, Y
 2e4:	79 81       	ldd	r23, Y+1	; 0x01
 2e6:	07 2e       	mov	r0, r23
 2e8:	00 0c       	add	r0, r0
 2ea:	88 0b       	sbc	r24, r24
 2ec:	99 0b       	sbc	r25, r25
 2ee:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__floatsisf>
 2f2:	a7 01       	movw	r20, r14
 2f4:	96 01       	movw	r18, r12
 2f6:	0e 94 8b 05 	call	0xb16	; 0xb16 <__mulsf3>
 2fa:	6b 01       	movw	r12, r22
 2fc:	7c 01       	movw	r14, r24
 2fe:	6a 81       	ldd	r22, Y+2	; 0x02
 300:	7b 81       	ldd	r23, Y+3	; 0x03
 302:	07 2e       	mov	r0, r23
 304:	00 0c       	add	r0, r0
 306:	88 0b       	sbc	r24, r24
 308:	99 0b       	sbc	r25, r25
 30a:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__floatsisf>
 30e:	9b 01       	movw	r18, r22
 310:	ac 01       	movw	r20, r24
 312:	c7 01       	movw	r24, r14
 314:	b6 01       	movw	r22, r12
 316:	0e 94 8b 05 	call	0xb16	; 0xb16 <__mulsf3>
 31a:	9b 01       	movw	r18, r22
 31c:	ac 01       	movw	r20, r24
 31e:	60 ec       	ldi	r22, 0xC0	; 192
 320:	71 ee       	ldi	r23, 0xE1	; 225
 322:	84 e6       	ldi	r24, 0x64	; 100
 324:	9c e4       	ldi	r25, 0x4C	; 76
 326:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <__divsf3>
 32a:	0e 94 ce 04 	call	0x99c	; 0x99c <__fixunssfsi>
 32e:	6c 83       	std	Y+4, r22	; 0x04
 330:	7d 83       	std	Y+5, r23	; 0x05
 332:	8e 83       	std	Y+6, r24	; 0x06
 334:	9f 83       	std	Y+7, r25	; 0x07
}
 336:	df 91       	pop	r29
 338:	cf 91       	pop	r28
 33a:	ff 90       	pop	r15
 33c:	ef 90       	pop	r14
 33e:	df 90       	pop	r13
 340:	cf 90       	pop	r12
 342:	08 95       	ret

00000344 <_ZN13StepperDriver11powerEnableEb>:



void StepperDriver::powerEnable(bool ena)
{
  if (ena) {
 344:	66 23       	and	r22, r22
 346:	11 f0       	breq	.+4      	; 0x34c <_ZN13StepperDriver11powerEnableEb+0x8>
    digitalWrite(en_pin, LOW);
 348:	60 e0       	ldi	r22, 0x00	; 0
 34a:	01 c0       	rjmp	.+2      	; 0x34e <_ZN13StepperDriver11powerEnableEb+0xa>
  } else {
    digitalWrite(en_pin, HIGH);
 34c:	61 e0       	ldi	r22, 0x01	; 1
 34e:	fc 01       	movw	r30, r24
 350:	84 89       	ldd	r24, Z+20	; 0x14
 352:	0c 94 3f 07 	jmp	0xe7e	; 0xe7e <digitalWrite>

00000356 <_ZN13StepperDriver12setDirectionEl>:



void StepperDriver::setDirection(long steps_to_move)
{
  if (steps_to_move < 0) {
 356:	77 ff       	sbrs	r23, 7
 358:	02 c0       	rjmp	.+4      	; 0x35e <_ZN13StepperDriver12setDirectionEl+0x8>
    digitalWrite(cw_pin, HIGH);
 35a:	61 e0       	ldi	r22, 0x01	; 1
 35c:	01 c0       	rjmp	.+2      	; 0x360 <_ZN13StepperDriver12setDirectionEl+0xa>
  }
  else {
    digitalWrite(cw_pin, LOW);
 35e:	60 e0       	ldi	r22, 0x00	; 0
 360:	fc 01       	movw	r30, r24
 362:	86 89       	ldd	r24, Z+22	; 0x16
 364:	0c 94 3f 07 	jmp	0xe7e	; 0xe7e <digitalWrite>

00000368 <_ZN13StepperDriver12moveIntervalEm>:
}



void StepperDriver::moveInterval(unsigned long target_delay)
{
 368:	0f 93       	push	r16
 36a:	1f 93       	push	r17
 36c:	cf 93       	push	r28
 36e:	df 93       	push	r29
 370:	ec 01       	movw	r28, r24
  target_step_time1 = last_step_time + (target_delay / 2);
 372:	08 85       	ldd	r16, Y+8	; 0x08
 374:	19 85       	ldd	r17, Y+9	; 0x09
 376:	2a 85       	ldd	r18, Y+10	; 0x0a
 378:	3b 85       	ldd	r19, Y+11	; 0x0b
 37a:	db 01       	movw	r26, r22
 37c:	ca 01       	movw	r24, r20
 37e:	b6 95       	lsr	r27
 380:	a7 95       	ror	r26
 382:	97 95       	ror	r25
 384:	87 95       	ror	r24
 386:	80 0f       	add	r24, r16
 388:	91 1f       	adc	r25, r17
 38a:	a2 1f       	adc	r26, r18
 38c:	b3 1f       	adc	r27, r19
 38e:	8c 87       	std	Y+12, r24	; 0x0c
 390:	9d 87       	std	Y+13, r25	; 0x0d
 392:	ae 87       	std	Y+14, r26	; 0x0e
 394:	bf 87       	std	Y+15, r27	; 0x0f
  target_step_time2 = last_step_time + target_delay;
 396:	40 0f       	add	r20, r16
 398:	51 1f       	adc	r21, r17
 39a:	62 1f       	adc	r22, r18
 39c:	73 1f       	adc	r23, r19
 39e:	48 8b       	std	Y+16, r20	; 0x10
 3a0:	59 8b       	std	Y+17, r21	; 0x11
 3a2:	6a 8b       	std	Y+18, r22	; 0x12
 3a4:	7b 8b       	std	Y+19, r23	; 0x13

  if (target_step_time1 >= last_step_time) {
 3a6:	80 17       	cp	r24, r16
 3a8:	91 07       	cpc	r25, r17
 3aa:	a2 07       	cpc	r26, r18
 3ac:	b3 07       	cpc	r27, r19
 3ae:	e8 f0       	brcs	.+58     	; 0x3ea <_ZN13StepperDriver12moveIntervalEm+0x82>
    while (micros() < target_step_time1) {}
 3b0:	0e 94 52 06 	call	0xca4	; 0xca4 <micros>
 3b4:	0c 85       	ldd	r16, Y+12	; 0x0c
 3b6:	1d 85       	ldd	r17, Y+13	; 0x0d
 3b8:	2e 85       	ldd	r18, Y+14	; 0x0e
 3ba:	3f 85       	ldd	r19, Y+15	; 0x0f
 3bc:	60 17       	cp	r22, r16
 3be:	71 07       	cpc	r23, r17
 3c0:	82 07       	cpc	r24, r18
 3c2:	93 07       	cpc	r25, r19
 3c4:	a8 f3       	brcs	.-22     	; 0x3b0 <_ZN13StepperDriver12moveIntervalEm+0x48>
  }
  else {
    while ((long)(micros()) < (long)target_step_time1) {}
  }

	digitalWrite(clk_pin, LOW);
 3c6:	60 e0       	ldi	r22, 0x00	; 0
 3c8:	88 8d       	ldd	r24, Y+24	; 0x18
 3ca:	0e 94 3f 07 	call	0xe7e	; 0xe7e <digitalWrite>

  if (target_step_time2 >= last_step_time) {
 3ce:	48 89       	ldd	r20, Y+16	; 0x10
 3d0:	59 89       	ldd	r21, Y+17	; 0x11
 3d2:	6a 89       	ldd	r22, Y+18	; 0x12
 3d4:	7b 89       	ldd	r23, Y+19	; 0x13
 3d6:	88 85       	ldd	r24, Y+8	; 0x08
 3d8:	99 85       	ldd	r25, Y+9	; 0x09
 3da:	aa 85       	ldd	r26, Y+10	; 0x0a
 3dc:	bb 85       	ldd	r27, Y+11	; 0x0b
 3de:	48 17       	cp	r20, r24
 3e0:	59 07       	cpc	r21, r25
 3e2:	6a 07       	cpc	r22, r26
 3e4:	7b 07       	cpc	r23, r27
 3e6:	68 f4       	brcc	.+26     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3e8:	22 c0       	rjmp	.+68     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>

  if (target_step_time1 >= last_step_time) {
    while (micros() < target_step_time1) {}
  }
  else {
    while ((long)(micros()) < (long)target_step_time1) {}
 3ea:	0e 94 52 06 	call	0xca4	; 0xca4 <micros>
 3ee:	0c 85       	ldd	r16, Y+12	; 0x0c
 3f0:	1d 85       	ldd	r17, Y+13	; 0x0d
 3f2:	2e 85       	ldd	r18, Y+14	; 0x0e
 3f4:	3f 85       	ldd	r19, Y+15	; 0x0f
 3f6:	60 17       	cp	r22, r16
 3f8:	71 07       	cpc	r23, r17
 3fa:	82 07       	cpc	r24, r18
 3fc:	93 07       	cpc	r25, r19
 3fe:	ac f3       	brlt	.-22     	; 0x3ea <_ZN13StepperDriver12moveIntervalEm+0x82>
 400:	e2 cf       	rjmp	.-60     	; 0x3c6 <_ZN13StepperDriver12moveIntervalEm+0x5e>
  }

	digitalWrite(clk_pin, LOW);

  if (target_step_time2 >= last_step_time) {
    while (micros() < target_step_time2) {}
 402:	0e 94 52 06 	call	0xca4	; 0xca4 <micros>
 406:	08 89       	ldd	r16, Y+16	; 0x10
 408:	19 89       	ldd	r17, Y+17	; 0x11
 40a:	2a 89       	ldd	r18, Y+18	; 0x12
 40c:	3b 89       	ldd	r19, Y+19	; 0x13
 40e:	60 17       	cp	r22, r16
 410:	71 07       	cpc	r23, r17
 412:	82 07       	cpc	r24, r18
 414:	93 07       	cpc	r25, r19
 416:	a8 f3       	brcs	.-22     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
  }
  else {
    while ((long)(micros()) < (long)target_step_time2) {}
  }
  last_step_time = micros();
 418:	0e 94 52 06 	call	0xca4	; 0xca4 <micros>
 41c:	68 87       	std	Y+8, r22	; 0x08
 41e:	79 87       	std	Y+9, r23	; 0x09
 420:	8a 87       	std	Y+10, r24	; 0x0a
 422:	9b 87       	std	Y+11, r25	; 0x0b
}
 424:	df 91       	pop	r29
 426:	cf 91       	pop	r28
 428:	1f 91       	pop	r17
 42a:	0f 91       	pop	r16
 42c:	08 95       	ret

  if (target_step_time2 >= last_step_time) {
    while (micros() < target_step_time2) {}
  }
  else {
    while ((long)(micros()) < (long)target_step_time2) {}
 42e:	0e 94 52 06 	call	0xca4	; 0xca4 <micros>
 432:	08 89       	ldd	r16, Y+16	; 0x10
 434:	19 89       	ldd	r17, Y+17	; 0x11
 436:	2a 89       	ldd	r18, Y+18	; 0x12
 438:	3b 89       	ldd	r19, Y+19	; 0x13
 43a:	60 17       	cp	r22, r16
 43c:	71 07       	cpc	r23, r17
 43e:	82 07       	cpc	r24, r18
 440:	93 07       	cpc	r25, r19
 442:	ac f3       	brlt	.-22     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 444:	e9 cf       	rjmp	.-46     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>

00000446 <_ZN13StepperDriver4moveEv>:
}



void StepperDriver::move()
{
 446:	cf 93       	push	r28
 448:	df 93       	push	r29
 44a:	ec 01       	movw	r28, r24
  digitalWrite(clk_pin, HIGH);
 44c:	61 e0       	ldi	r22, 0x01	; 1
 44e:	88 8d       	ldd	r24, Y+24	; 0x18
 450:	0e 94 3f 07 	call	0xe7e	; 0xe7e <digitalWrite>
  moveInterval(step_interval);
 454:	4c 81       	ldd	r20, Y+4	; 0x04
 456:	5d 81       	ldd	r21, Y+5	; 0x05
 458:	6e 81       	ldd	r22, Y+6	; 0x06
 45a:	7f 81       	ldd	r23, Y+7	; 0x07
 45c:	ce 01       	movw	r24, r28
}
 45e:	df 91       	pop	r29
 460:	cf 91       	pop	r28


void StepperDriver::move()
{
  digitalWrite(clk_pin, HIGH);
  moveInterval(step_interval);
 462:	0c 94 b4 01 	jmp	0x368	; 0x368 <_ZN13StepperDriver12moveIntervalEm>

00000466 <_ZN13StepperDriver4stepEl>:
/*
  Moves the motor steps_to_move steps.  If the number is negative, 
  the motor moves in the reverse direction.
 */
void StepperDriver::step(long steps_to_move)
{
 466:	cf 92       	push	r12
 468:	df 92       	push	r13
 46a:	ef 92       	push	r14
 46c:	ff 92       	push	r15
 46e:	cf 93       	push	r28
 470:	df 93       	push	r29
 472:	ec 01       	movw	r28, r24
	steps_to_move *= step_division;
 474:	aa 81       	ldd	r26, Y+2	; 0x02
 476:	bb 81       	ldd	r27, Y+3	; 0x03
 478:	9a 01       	movw	r18, r20
 47a:	ab 01       	movw	r20, r22
 47c:	0e 94 8a 07 	call	0xf14	; 0xf14 <__mulshisi3>
 480:	6b 01       	movw	r12, r22
 482:	7c 01       	movw	r14, r24
  setDirection(steps_to_move);
 484:	ab 01       	movw	r20, r22
 486:	bc 01       	movw	r22, r24
 488:	ce 01       	movw	r24, r28
 48a:	0e 94 ab 01 	call	0x356	; 0x356 <_ZN13StepperDriver12setDirectionEl>
  last_step_time = micros();
 48e:	0e 94 52 06 	call	0xca4	; 0xca4 <micros>
 492:	68 87       	std	Y+8, r22	; 0x08
 494:	79 87       	std	Y+9, r23	; 0x09
 496:	8a 87       	std	Y+10, r24	; 0x0a
 498:	9b 87       	std	Y+11, r25	; 0x0b

  for (long i = abs(steps_to_move); i > 0; i--) {
 49a:	c6 01       	movw	r24, r12
 49c:	d7 01       	movw	r26, r14
 49e:	b7 ff       	sbrs	r27, 7
 4a0:	07 c0       	rjmp	.+14     	; 0x4b0 <_ZN13StepperDriver4stepEl+0x4a>
 4a2:	b0 95       	com	r27
 4a4:	a0 95       	com	r26
 4a6:	90 95       	com	r25
 4a8:	81 95       	neg	r24
 4aa:	9f 4f       	sbci	r25, 0xFF	; 255
 4ac:	af 4f       	sbci	r26, 0xFF	; 255
 4ae:	bf 4f       	sbci	r27, 0xFF	; 255
 4b0:	6c 01       	movw	r12, r24
 4b2:	7d 01       	movw	r14, r26
 4b4:	c1 14       	cp	r12, r1
 4b6:	d1 04       	cpc	r13, r1
 4b8:	e1 04       	cpc	r14, r1
 4ba:	f1 04       	cpc	r15, r1
 4bc:	49 f0       	breq	.+18     	; 0x4d0 <_ZN13StepperDriver4stepEl+0x6a>
    move();
 4be:	ce 01       	movw	r24, r28
 4c0:	0e 94 23 02 	call	0x446	; 0x446 <_ZN13StepperDriver4moveEv>
{
	steps_to_move *= step_division;
  setDirection(steps_to_move);
  last_step_time = micros();

  for (long i = abs(steps_to_move); i > 0; i--) {
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	c8 1a       	sub	r12, r24
 4c8:	d1 08       	sbc	r13, r1
 4ca:	e1 08       	sbc	r14, r1
 4cc:	f1 08       	sbc	r15, r1
 4ce:	f2 cf       	rjmp	.-28     	; 0x4b4 <_ZN13StepperDriver4stepEl+0x4e>
    move();
  }
}
 4d0:	df 91       	pop	r29
 4d2:	cf 91       	pop	r28
 4d4:	ff 90       	pop	r15
 4d6:	ef 90       	pop	r14
 4d8:	df 90       	pop	r13
 4da:	cf 90       	pop	r12
 4dc:	08 95       	ret

000004de <_ZN13StepperDriver11positioningEv>:
  }
}


void StepperDriver::positioning()
{
 4de:	cf 92       	push	r12
 4e0:	df 92       	push	r13
 4e2:	ef 92       	push	r14
 4e4:	ff 92       	push	r15
 4e6:	cf 93       	push	r28
 4e8:	df 93       	push	r29
 4ea:	ec 01       	movw	r28, r24
	unsigned long step_interval_0 = step_interval;
 4ec:	cc 80       	ldd	r12, Y+4	; 0x04
 4ee:	dd 80       	ldd	r13, Y+5	; 0x05
 4f0:	ee 80       	ldd	r14, Y+6	; 0x06
 4f2:	ff 80       	ldd	r15, Y+7	; 0x07
	step_interval *= 8;
 4f4:	d7 01       	movw	r26, r14
 4f6:	c6 01       	movw	r24, r12
 4f8:	23 e0       	ldi	r18, 0x03	; 3
 4fa:	88 0f       	add	r24, r24
 4fc:	99 1f       	adc	r25, r25
 4fe:	aa 1f       	adc	r26, r26
 500:	bb 1f       	adc	r27, r27
 502:	2a 95       	dec	r18
 504:	d1 f7       	brne	.-12     	; 0x4fa <_ZN13StepperDriver11positioningEv+0x1c>
 506:	8c 83       	std	Y+4, r24	; 0x04
 508:	9d 83       	std	Y+5, r25	; 0x05
 50a:	ae 83       	std	Y+6, r26	; 0x06
 50c:	bf 83       	std	Y+7, r27	; 0x07

	step(4);
 50e:	44 e0       	ldi	r20, 0x04	; 4
 510:	50 e0       	ldi	r21, 0x00	; 0
 512:	60 e0       	ldi	r22, 0x00	; 0
 514:	70 e0       	ldi	r23, 0x00	; 0
 516:	ce 01       	movw	r24, r28
 518:	0e 94 33 02 	call	0x466	; 0x466 <_ZN13StepperDriver4stepEl>
	delay(200);
 51c:	68 ec       	ldi	r22, 0xC8	; 200
 51e:	70 e0       	ldi	r23, 0x00	; 0
 520:	80 e0       	ldi	r24, 0x00	; 0
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	0e 94 77 06 	call	0xcee	; 0xcee <delay>
	step(-4);
 528:	4c ef       	ldi	r20, 0xFC	; 252
 52a:	5f ef       	ldi	r21, 0xFF	; 255
 52c:	6f ef       	ldi	r22, 0xFF	; 255
 52e:	7f ef       	ldi	r23, 0xFF	; 255
 530:	ce 01       	movw	r24, r28
 532:	0e 94 33 02 	call	0x466	; 0x466 <_ZN13StepperDriver4stepEl>
  delay(200);
 536:	68 ec       	ldi	r22, 0xC8	; 200
 538:	70 e0       	ldi	r23, 0x00	; 0
 53a:	80 e0       	ldi	r24, 0x00	; 0
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	0e 94 77 06 	call	0xcee	; 0xcee <delay>

	step_interval = step_interval_0;
 542:	cc 82       	std	Y+4, r12	; 0x04
 544:	dd 82       	std	Y+5, r13	; 0x05
 546:	ee 82       	std	Y+6, r14	; 0x06
 548:	ff 82       	std	Y+7, r15	; 0x07
}
 54a:	df 91       	pop	r29
 54c:	cf 91       	pop	r28
 54e:	ff 90       	pop	r15
 550:	ef 90       	pop	r14
 552:	df 90       	pop	r13
 554:	cf 90       	pop	r12
 556:	08 95       	ret

00000558 <_ZN13StepperDriver11dynamicMoveEii>:
}



void StepperDriver::dynamicMove(int s1, int s2)
{
 558:	4f 92       	push	r4
 55a:	5f 92       	push	r5
 55c:	6f 92       	push	r6
 55e:	7f 92       	push	r7
 560:	8f 92       	push	r8
 562:	9f 92       	push	r9
 564:	af 92       	push	r10
 566:	bf 92       	push	r11
 568:	cf 92       	push	r12
 56a:	df 92       	push	r13
 56c:	ef 92       	push	r14
 56e:	ff 92       	push	r15
 570:	cf 93       	push	r28
 572:	df 93       	push	r29
 574:	ec 01       	movw	r28, r24
 576:	6b 01       	movw	r12, r22
 578:	7a 01       	movw	r14, r20
  digitalWrite(clk_pin, HIGH);
 57a:	61 e0       	ldi	r22, 0x01	; 1
 57c:	88 8d       	ldd	r24, Y+24	; 0x18
 57e:	0e 94 3f 07 	call	0xe7e	; 0xe7e <digitalWrite>
  double r1 = (double)s1 / (double)s2;
 582:	b6 01       	movw	r22, r12
 584:	dd 0c       	add	r13, r13
 586:	88 0b       	sbc	r24, r24
 588:	99 0b       	sbc	r25, r25
 58a:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__floatsisf>
 58e:	4b 01       	movw	r8, r22
 590:	5c 01       	movw	r10, r24
 592:	b7 01       	movw	r22, r14
 594:	ff 0c       	add	r15, r15
 596:	88 0b       	sbc	r24, r24
 598:	99 0b       	sbc	r25, r25
 59a:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__floatsisf>
 59e:	9b 01       	movw	r18, r22
 5a0:	ac 01       	movw	r20, r24
 5a2:	c5 01       	movw	r24, r10
 5a4:	b4 01       	movw	r22, r8
 5a6:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <__divsf3>
 5aa:	6b 01       	movw	r12, r22
 5ac:	7c 01       	movw	r14, r24
  double r2 = 0.1 + 0.2*r1 + 2.2*r1*r1 - 1.5*r1*r1*r1;
  moveInterval( (unsigned long)(step_interval / r2) );
 5ae:	6c 81       	ldd	r22, Y+4	; 0x04
 5b0:	7d 81       	ldd	r23, Y+5	; 0x05
 5b2:	8e 81       	ldd	r24, Y+6	; 0x06
 5b4:	9f 81       	ldd	r25, Y+7	; 0x07
 5b6:	0e 94 fd 04 	call	0x9fa	; 0x9fa <__floatunsisf>
 5ba:	4b 01       	movw	r8, r22
 5bc:	5c 01       	movw	r10, r24
 5be:	2d ec       	ldi	r18, 0xCD	; 205
 5c0:	3c ec       	ldi	r19, 0xCC	; 204
 5c2:	4c e4       	ldi	r20, 0x4C	; 76
 5c4:	5e e3       	ldi	r21, 0x3E	; 62
 5c6:	c7 01       	movw	r24, r14
 5c8:	b6 01       	movw	r22, r12
 5ca:	0e 94 8b 05 	call	0xb16	; 0xb16 <__mulsf3>
 5ce:	2d ec       	ldi	r18, 0xCD	; 205
 5d0:	3c ec       	ldi	r19, 0xCC	; 204
 5d2:	4c ec       	ldi	r20, 0xCC	; 204
 5d4:	5d e3       	ldi	r21, 0x3D	; 61
 5d6:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__addsf3>
 5da:	2b 01       	movw	r4, r22
 5dc:	3c 01       	movw	r6, r24
 5de:	2d ec       	ldi	r18, 0xCD	; 205
 5e0:	3c ec       	ldi	r19, 0xCC	; 204
 5e2:	4c e0       	ldi	r20, 0x0C	; 12
 5e4:	50 e4       	ldi	r21, 0x40	; 64
 5e6:	c7 01       	movw	r24, r14
 5e8:	b6 01       	movw	r22, r12
 5ea:	0e 94 8b 05 	call	0xb16	; 0xb16 <__mulsf3>
 5ee:	a7 01       	movw	r20, r14
 5f0:	96 01       	movw	r18, r12
 5f2:	0e 94 8b 05 	call	0xb16	; 0xb16 <__mulsf3>
 5f6:	9b 01       	movw	r18, r22
 5f8:	ac 01       	movw	r20, r24
 5fa:	c3 01       	movw	r24, r6
 5fc:	b2 01       	movw	r22, r4
 5fe:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__addsf3>
 602:	2b 01       	movw	r4, r22
 604:	3c 01       	movw	r6, r24
 606:	20 e0       	ldi	r18, 0x00	; 0
 608:	30 e0       	ldi	r19, 0x00	; 0
 60a:	40 ec       	ldi	r20, 0xC0	; 192
 60c:	5f e3       	ldi	r21, 0x3F	; 63
 60e:	c7 01       	movw	r24, r14
 610:	b6 01       	movw	r22, r12
 612:	0e 94 8b 05 	call	0xb16	; 0xb16 <__mulsf3>
 616:	a7 01       	movw	r20, r14
 618:	96 01       	movw	r18, r12
 61a:	0e 94 8b 05 	call	0xb16	; 0xb16 <__mulsf3>
 61e:	a7 01       	movw	r20, r14
 620:	96 01       	movw	r18, r12
 622:	0e 94 8b 05 	call	0xb16	; 0xb16 <__mulsf3>
 626:	9b 01       	movw	r18, r22
 628:	ac 01       	movw	r20, r24
 62a:	c3 01       	movw	r24, r6
 62c:	b2 01       	movw	r22, r4
 62e:	0e 94 ef 03 	call	0x7de	; 0x7de <__subsf3>
 632:	9b 01       	movw	r18, r22
 634:	ac 01       	movw	r20, r24
 636:	c5 01       	movw	r24, r10
 638:	b4 01       	movw	r22, r8
 63a:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <__divsf3>
 63e:	0e 94 ce 04 	call	0x99c	; 0x99c <__fixunssfsi>
 642:	ab 01       	movw	r20, r22
 644:	bc 01       	movw	r22, r24
 646:	ce 01       	movw	r24, r28
}
 648:	df 91       	pop	r29
 64a:	cf 91       	pop	r28
 64c:	ff 90       	pop	r15
 64e:	ef 90       	pop	r14
 650:	df 90       	pop	r13
 652:	cf 90       	pop	r12
 654:	bf 90       	pop	r11
 656:	af 90       	pop	r10
 658:	9f 90       	pop	r9
 65a:	8f 90       	pop	r8
 65c:	7f 90       	pop	r7
 65e:	6f 90       	pop	r6
 660:	5f 90       	pop	r5
 662:	4f 90       	pop	r4
void StepperDriver::dynamicMove(int s1, int s2)
{
  digitalWrite(clk_pin, HIGH);
  double r1 = (double)s1 / (double)s2;
  double r2 = 0.1 + 0.2*r1 + 2.2*r1*r1 - 1.5*r1*r1*r1;
  moveInterval( (unsigned long)(step_interval / r2) );
 664:	0c 94 b4 01 	jmp	0x368	; 0x368 <_ZN13StepperDriver12moveIntervalEm>

00000668 <_ZN13StepperDriver4stepElll>:
}



void StepperDriver::step(long steps_to_move, long steps_acc, long steps_dec)
{
 668:	2f 92       	push	r2
 66a:	3f 92       	push	r3
 66c:	4f 92       	push	r4
 66e:	5f 92       	push	r5
 670:	6f 92       	push	r6
 672:	7f 92       	push	r7
 674:	8f 92       	push	r8
 676:	9f 92       	push	r9
 678:	af 92       	push	r10
 67a:	bf 92       	push	r11
 67c:	cf 92       	push	r12
 67e:	df 92       	push	r13
 680:	ef 92       	push	r14
 682:	ff 92       	push	r15
 684:	0f 93       	push	r16
 686:	1f 93       	push	r17
 688:	cf 93       	push	r28
 68a:	df 93       	push	r29
 68c:	ec 01       	movw	r28, r24
 68e:	cb 01       	movw	r24, r22
 690:	ba 01       	movw	r22, r20
 692:	28 01       	movw	r4, r16
 694:	39 01       	movw	r6, r18
	steps_to_move *= step_division;
 696:	8a 80       	ldd	r8, Y+2	; 0x02
 698:	9b 80       	ldd	r9, Y+3	; 0x03
 69a:	09 2c       	mov	r0, r9
 69c:	00 0c       	add	r0, r0
 69e:	aa 08       	sbc	r10, r10
 6a0:	bb 08       	sbc	r11, r11
 6a2:	a5 01       	movw	r20, r10
 6a4:	94 01       	movw	r18, r8
 6a6:	0e 94 6f 07 	call	0xede	; 0xede <__mulsi3>
 6aa:	1b 01       	movw	r2, r22
 6ac:	8c 01       	movw	r16, r24
	steps_acc *= step_division;
 6ae:	c3 01       	movw	r24, r6
 6b0:	b2 01       	movw	r22, r4
 6b2:	0e 94 6f 07 	call	0xede	; 0xede <__mulsi3>
 6b6:	2b 01       	movw	r4, r22
 6b8:	3c 01       	movw	r6, r24
	steps_dec *= step_division;
 6ba:	c7 01       	movw	r24, r14
 6bc:	b6 01       	movw	r22, r12
 6be:	0e 94 6f 07 	call	0xede	; 0xede <__mulsi3>
 6c2:	6b 01       	movw	r12, r22
 6c4:	7c 01       	movw	r14, r24
  setDirection(steps_to_move);
 6c6:	a1 01       	movw	r20, r2
 6c8:	b8 01       	movw	r22, r16
 6ca:	ce 01       	movw	r24, r28
 6cc:	0e 94 ab 01 	call	0x356	; 0x356 <_ZN13StepperDriver12setDirectionEl>
  last_step_time = micros();
 6d0:	0e 94 52 06 	call	0xca4	; 0xca4 <micros>
 6d4:	68 87       	std	Y+8, r22	; 0x08
 6d6:	79 87       	std	Y+9, r23	; 0x09
 6d8:	8a 87       	std	Y+10, r24	; 0x0a
 6da:	9b 87       	std	Y+11, r25	; 0x0b

  if (steps_acc > 0) {
 6dc:	14 14       	cp	r1, r4
 6de:	15 04       	cpc	r1, r5
 6e0:	16 04       	cpc	r1, r6
 6e2:	17 04       	cpc	r1, r7
 6e4:	5c f1       	brlt	.+86     	; 0x73c <_ZN13StepperDriver4stepElll+0xd4>
    for (long i = 1; i <= steps_acc; i++) {
      dynamicMove( i , steps_acc );
    }
  }

  for (long i = (abs(steps_to_move) - abs(steps_acc) - abs(steps_dec)); i > 0; i--) {
 6e6:	c1 01       	movw	r24, r2
 6e8:	d8 01       	movw	r26, r16
 6ea:	b7 ff       	sbrs	r27, 7
 6ec:	07 c0       	rjmp	.+14     	; 0x6fc <_ZN13StepperDriver4stepElll+0x94>
 6ee:	b0 95       	com	r27
 6f0:	a0 95       	com	r26
 6f2:	90 95       	com	r25
 6f4:	81 95       	neg	r24
 6f6:	9f 4f       	sbci	r25, 0xFF	; 255
 6f8:	af 4f       	sbci	r26, 0xFF	; 255
 6fa:	bf 4f       	sbci	r27, 0xFF	; 255
 6fc:	77 fe       	sbrs	r7, 7
 6fe:	08 c0       	rjmp	.+16     	; 0x710 <_ZN13StepperDriver4stepElll+0xa8>
 700:	70 94       	com	r7
 702:	60 94       	com	r6
 704:	50 94       	com	r5
 706:	40 94       	com	r4
 708:	41 1c       	adc	r4, r1
 70a:	51 1c       	adc	r5, r1
 70c:	61 1c       	adc	r6, r1
 70e:	71 1c       	adc	r7, r1
 710:	84 19       	sub	r24, r4
 712:	95 09       	sbc	r25, r5
 714:	a6 09       	sbc	r26, r6
 716:	b7 09       	sbc	r27, r7
 718:	b7 01       	movw	r22, r14
 71a:	a6 01       	movw	r20, r12
 71c:	f7 fe       	sbrs	r15, 7
 71e:	07 c0       	rjmp	.+14     	; 0x72e <_ZN13StepperDriver4stepElll+0xc6>
 720:	44 27       	eor	r20, r20
 722:	55 27       	eor	r21, r21
 724:	ba 01       	movw	r22, r20
 726:	4c 19       	sub	r20, r12
 728:	5d 09       	sbc	r21, r13
 72a:	6e 09       	sbc	r22, r14
 72c:	7f 09       	sbc	r23, r15
 72e:	4c 01       	movw	r8, r24
 730:	5d 01       	movw	r10, r26
 732:	84 1a       	sub	r8, r20
 734:	95 0a       	sbc	r9, r21
 736:	a6 0a       	sbc	r10, r22
 738:	b7 0a       	sbc	r11, r23
 73a:	14 c0       	rjmp	.+40     	; 0x764 <_ZN13StepperDriver4stepElll+0xfc>
 73c:	81 2c       	mov	r8, r1
 73e:	91 2c       	mov	r9, r1
 740:	54 01       	movw	r10, r8
 742:	83 94       	inc	r8
  setDirection(steps_to_move);
  last_step_time = micros();

  if (steps_acc > 0) {
    for (long i = 1; i <= steps_acc; i++) {
      dynamicMove( i , steps_acc );
 744:	a2 01       	movw	r20, r4
 746:	b4 01       	movw	r22, r8
 748:	ce 01       	movw	r24, r28
 74a:	0e 94 ac 02 	call	0x558	; 0x558 <_ZN13StepperDriver11dynamicMoveEii>
	steps_dec *= step_division;
  setDirection(steps_to_move);
  last_step_time = micros();

  if (steps_acc > 0) {
    for (long i = 1; i <= steps_acc; i++) {
 74e:	8f ef       	ldi	r24, 0xFF	; 255
 750:	88 1a       	sub	r8, r24
 752:	98 0a       	sbc	r9, r24
 754:	a8 0a       	sbc	r10, r24
 756:	b8 0a       	sbc	r11, r24
 758:	48 14       	cp	r4, r8
 75a:	59 04       	cpc	r5, r9
 75c:	6a 04       	cpc	r6, r10
 75e:	7b 04       	cpc	r7, r11
 760:	8c f7       	brge	.-30     	; 0x744 <_ZN13StepperDriver4stepElll+0xdc>
 762:	c1 cf       	rjmp	.-126    	; 0x6e6 <_ZN13StepperDriver4stepElll+0x7e>
      dynamicMove( i , steps_acc );
    }
  }

  for (long i = (abs(steps_to_move) - abs(steps_acc) - abs(steps_dec)); i > 0; i--) {
 764:	18 14       	cp	r1, r8
 766:	19 04       	cpc	r1, r9
 768:	1a 04       	cpc	r1, r10
 76a:	1b 04       	cpc	r1, r11
 76c:	4c f4       	brge	.+18     	; 0x780 <_ZN13StepperDriver4stepElll+0x118>
    move();
 76e:	ce 01       	movw	r24, r28
 770:	0e 94 23 02 	call	0x446	; 0x446 <_ZN13StepperDriver4moveEv>
    for (long i = 1; i <= steps_acc; i++) {
      dynamicMove( i , steps_acc );
    }
  }

  for (long i = (abs(steps_to_move) - abs(steps_acc) - abs(steps_dec)); i > 0; i--) {
 774:	81 e0       	ldi	r24, 0x01	; 1
 776:	88 1a       	sub	r8, r24
 778:	91 08       	sbc	r9, r1
 77a:	a1 08       	sbc	r10, r1
 77c:	b1 08       	sbc	r11, r1
 77e:	f2 cf       	rjmp	.-28     	; 0x764 <_ZN13StepperDriver4stepElll+0xfc>
    move();
  }

  if (steps_dec > 0) {
 780:	1c 14       	cp	r1, r12
 782:	1d 04       	cpc	r1, r13
 784:	1e 04       	cpc	r1, r14
 786:	1f 04       	cpc	r1, r15
 788:	bc f4       	brge	.+46     	; 0x7b8 <_ZN13StepperDriver4stepElll+0x150>
    for (long i = (steps_dec - 1); i >= 0; i--) {
 78a:	46 01       	movw	r8, r12
 78c:	57 01       	movw	r10, r14
 78e:	81 e0       	ldi	r24, 0x01	; 1
 790:	88 1a       	sub	r8, r24
 792:	91 08       	sbc	r9, r1
 794:	a1 08       	sbc	r10, r1
 796:	b1 08       	sbc	r11, r1
      dynamicMove( i , steps_dec );
 798:	a6 01       	movw	r20, r12
 79a:	b4 01       	movw	r22, r8
 79c:	ce 01       	movw	r24, r28
 79e:	0e 94 ac 02 	call	0x558	; 0x558 <_ZN13StepperDriver11dynamicMoveEii>
  for (long i = (abs(steps_to_move) - abs(steps_acc) - abs(steps_dec)); i > 0; i--) {
    move();
  }

  if (steps_dec > 0) {
    for (long i = (steps_dec - 1); i >= 0; i--) {
 7a2:	81 e0       	ldi	r24, 0x01	; 1
 7a4:	88 1a       	sub	r8, r24
 7a6:	91 08       	sbc	r9, r1
 7a8:	a1 08       	sbc	r10, r1
 7aa:	b1 08       	sbc	r11, r1
 7ac:	8f ef       	ldi	r24, 0xFF	; 255
 7ae:	88 16       	cp	r8, r24
 7b0:	98 06       	cpc	r9, r24
 7b2:	a8 06       	cpc	r10, r24
 7b4:	b8 06       	cpc	r11, r24
 7b6:	81 f7       	brne	.-32     	; 0x798 <_ZN13StepperDriver4stepElll+0x130>
      dynamicMove( i , steps_dec );
    }
  }
}
 7b8:	df 91       	pop	r29
 7ba:	cf 91       	pop	r28
 7bc:	1f 91       	pop	r17
 7be:	0f 91       	pop	r16
 7c0:	ff 90       	pop	r15
 7c2:	ef 90       	pop	r14
 7c4:	df 90       	pop	r13
 7c6:	cf 90       	pop	r12
 7c8:	bf 90       	pop	r11
 7ca:	af 90       	pop	r10
 7cc:	9f 90       	pop	r9
 7ce:	8f 90       	pop	r8
 7d0:	7f 90       	pop	r7
 7d2:	6f 90       	pop	r6
 7d4:	5f 90       	pop	r5
 7d6:	4f 90       	pop	r4
 7d8:	3f 90       	pop	r3
 7da:	2f 90       	pop	r2
 7dc:	08 95       	ret

000007de <__subsf3>:
 7de:	50 58       	subi	r21, 0x80	; 128

000007e0 <__addsf3>:
 7e0:	bb 27       	eor	r27, r27
 7e2:	aa 27       	eor	r26, r26
 7e4:	0e 94 07 04 	call	0x80e	; 0x80e <__addsf3x>
 7e8:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__fp_round>
 7ec:	0e 94 43 05 	call	0xa86	; 0xa86 <__fp_pscA>
 7f0:	38 f0       	brcs	.+14     	; 0x800 <__addsf3+0x20>
 7f2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fp_pscB>
 7f6:	20 f0       	brcs	.+8      	; 0x800 <__addsf3+0x20>
 7f8:	39 f4       	brne	.+14     	; 0x808 <__addsf3+0x28>
 7fa:	9f 3f       	cpi	r25, 0xFF	; 255
 7fc:	19 f4       	brne	.+6      	; 0x804 <__addsf3+0x24>
 7fe:	26 f4       	brtc	.+8      	; 0x808 <__addsf3+0x28>
 800:	0c 94 40 05 	jmp	0xa80	; 0xa80 <__fp_nan>
 804:	0e f4       	brtc	.+2      	; 0x808 <__addsf3+0x28>
 806:	e0 95       	com	r30
 808:	e7 fb       	bst	r30, 7
 80a:	0c 94 3a 05 	jmp	0xa74	; 0xa74 <__fp_inf>

0000080e <__addsf3x>:
 80e:	e9 2f       	mov	r30, r25
 810:	0e 94 62 05 	call	0xac4	; 0xac4 <__fp_split3>
 814:	58 f3       	brcs	.-42     	; 0x7ec <__addsf3+0xc>
 816:	ba 17       	cp	r27, r26
 818:	62 07       	cpc	r22, r18
 81a:	73 07       	cpc	r23, r19
 81c:	84 07       	cpc	r24, r20
 81e:	95 07       	cpc	r25, r21
 820:	20 f0       	brcs	.+8      	; 0x82a <__addsf3x+0x1c>
 822:	79 f4       	brne	.+30     	; 0x842 <__addsf3x+0x34>
 824:	a6 f5       	brtc	.+104    	; 0x88e <__addsf3x+0x80>
 826:	0c 94 84 05 	jmp	0xb08	; 0xb08 <__fp_zero>
 82a:	0e f4       	brtc	.+2      	; 0x82e <__addsf3x+0x20>
 82c:	e0 95       	com	r30
 82e:	0b 2e       	mov	r0, r27
 830:	ba 2f       	mov	r27, r26
 832:	a0 2d       	mov	r26, r0
 834:	0b 01       	movw	r0, r22
 836:	b9 01       	movw	r22, r18
 838:	90 01       	movw	r18, r0
 83a:	0c 01       	movw	r0, r24
 83c:	ca 01       	movw	r24, r20
 83e:	a0 01       	movw	r20, r0
 840:	11 24       	eor	r1, r1
 842:	ff 27       	eor	r31, r31
 844:	59 1b       	sub	r21, r25
 846:	99 f0       	breq	.+38     	; 0x86e <__addsf3x+0x60>
 848:	59 3f       	cpi	r21, 0xF9	; 249
 84a:	50 f4       	brcc	.+20     	; 0x860 <__addsf3x+0x52>
 84c:	50 3e       	cpi	r21, 0xE0	; 224
 84e:	68 f1       	brcs	.+90     	; 0x8aa <__addsf3x+0x9c>
 850:	1a 16       	cp	r1, r26
 852:	f0 40       	sbci	r31, 0x00	; 0
 854:	a2 2f       	mov	r26, r18
 856:	23 2f       	mov	r18, r19
 858:	34 2f       	mov	r19, r20
 85a:	44 27       	eor	r20, r20
 85c:	58 5f       	subi	r21, 0xF8	; 248
 85e:	f3 cf       	rjmp	.-26     	; 0x846 <__addsf3x+0x38>
 860:	46 95       	lsr	r20
 862:	37 95       	ror	r19
 864:	27 95       	ror	r18
 866:	a7 95       	ror	r26
 868:	f0 40       	sbci	r31, 0x00	; 0
 86a:	53 95       	inc	r21
 86c:	c9 f7       	brne	.-14     	; 0x860 <__addsf3x+0x52>
 86e:	7e f4       	brtc	.+30     	; 0x88e <__addsf3x+0x80>
 870:	1f 16       	cp	r1, r31
 872:	ba 0b       	sbc	r27, r26
 874:	62 0b       	sbc	r22, r18
 876:	73 0b       	sbc	r23, r19
 878:	84 0b       	sbc	r24, r20
 87a:	ba f0       	brmi	.+46     	; 0x8aa <__addsf3x+0x9c>
 87c:	91 50       	subi	r25, 0x01	; 1
 87e:	a1 f0       	breq	.+40     	; 0x8a8 <__addsf3x+0x9a>
 880:	ff 0f       	add	r31, r31
 882:	bb 1f       	adc	r27, r27
 884:	66 1f       	adc	r22, r22
 886:	77 1f       	adc	r23, r23
 888:	88 1f       	adc	r24, r24
 88a:	c2 f7       	brpl	.-16     	; 0x87c <__addsf3x+0x6e>
 88c:	0e c0       	rjmp	.+28     	; 0x8aa <__addsf3x+0x9c>
 88e:	ba 0f       	add	r27, r26
 890:	62 1f       	adc	r22, r18
 892:	73 1f       	adc	r23, r19
 894:	84 1f       	adc	r24, r20
 896:	48 f4       	brcc	.+18     	; 0x8aa <__addsf3x+0x9c>
 898:	87 95       	ror	r24
 89a:	77 95       	ror	r23
 89c:	67 95       	ror	r22
 89e:	b7 95       	ror	r27
 8a0:	f7 95       	ror	r31
 8a2:	9e 3f       	cpi	r25, 0xFE	; 254
 8a4:	08 f0       	brcs	.+2      	; 0x8a8 <__addsf3x+0x9a>
 8a6:	b0 cf       	rjmp	.-160    	; 0x808 <__addsf3+0x28>
 8a8:	93 95       	inc	r25
 8aa:	88 0f       	add	r24, r24
 8ac:	08 f0       	brcs	.+2      	; 0x8b0 <__addsf3x+0xa2>
 8ae:	99 27       	eor	r25, r25
 8b0:	ee 0f       	add	r30, r30
 8b2:	97 95       	ror	r25
 8b4:	87 95       	ror	r24
 8b6:	08 95       	ret

000008b8 <__divsf3>:
 8b8:	0e 94 70 04 	call	0x8e0	; 0x8e0 <__divsf3x>
 8bc:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__fp_round>
 8c0:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fp_pscB>
 8c4:	58 f0       	brcs	.+22     	; 0x8dc <__divsf3+0x24>
 8c6:	0e 94 43 05 	call	0xa86	; 0xa86 <__fp_pscA>
 8ca:	40 f0       	brcs	.+16     	; 0x8dc <__divsf3+0x24>
 8cc:	29 f4       	brne	.+10     	; 0x8d8 <__divsf3+0x20>
 8ce:	5f 3f       	cpi	r21, 0xFF	; 255
 8d0:	29 f0       	breq	.+10     	; 0x8dc <__divsf3+0x24>
 8d2:	0c 94 3a 05 	jmp	0xa74	; 0xa74 <__fp_inf>
 8d6:	51 11       	cpse	r21, r1
 8d8:	0c 94 85 05 	jmp	0xb0a	; 0xb0a <__fp_szero>
 8dc:	0c 94 40 05 	jmp	0xa80	; 0xa80 <__fp_nan>

000008e0 <__divsf3x>:
 8e0:	0e 94 62 05 	call	0xac4	; 0xac4 <__fp_split3>
 8e4:	68 f3       	brcs	.-38     	; 0x8c0 <__divsf3+0x8>

000008e6 <__divsf3_pse>:
 8e6:	99 23       	and	r25, r25
 8e8:	b1 f3       	breq	.-20     	; 0x8d6 <__divsf3+0x1e>
 8ea:	55 23       	and	r21, r21
 8ec:	91 f3       	breq	.-28     	; 0x8d2 <__divsf3+0x1a>
 8ee:	95 1b       	sub	r25, r21
 8f0:	55 0b       	sbc	r21, r21
 8f2:	bb 27       	eor	r27, r27
 8f4:	aa 27       	eor	r26, r26
 8f6:	62 17       	cp	r22, r18
 8f8:	73 07       	cpc	r23, r19
 8fa:	84 07       	cpc	r24, r20
 8fc:	38 f0       	brcs	.+14     	; 0x90c <__stack+0xd>
 8fe:	9f 5f       	subi	r25, 0xFF	; 255
 900:	5f 4f       	sbci	r21, 0xFF	; 255
 902:	22 0f       	add	r18, r18
 904:	33 1f       	adc	r19, r19
 906:	44 1f       	adc	r20, r20
 908:	aa 1f       	adc	r26, r26
 90a:	a9 f3       	breq	.-22     	; 0x8f6 <__divsf3_pse+0x10>
 90c:	35 d0       	rcall	.+106    	; 0x978 <__stack+0x79>
 90e:	0e 2e       	mov	r0, r30
 910:	3a f0       	brmi	.+14     	; 0x920 <__stack+0x21>
 912:	e0 e8       	ldi	r30, 0x80	; 128
 914:	32 d0       	rcall	.+100    	; 0x97a <__stack+0x7b>
 916:	91 50       	subi	r25, 0x01	; 1
 918:	50 40       	sbci	r21, 0x00	; 0
 91a:	e6 95       	lsr	r30
 91c:	00 1c       	adc	r0, r0
 91e:	ca f7       	brpl	.-14     	; 0x912 <__stack+0x13>
 920:	2b d0       	rcall	.+86     	; 0x978 <__stack+0x79>
 922:	fe 2f       	mov	r31, r30
 924:	29 d0       	rcall	.+82     	; 0x978 <__stack+0x79>
 926:	66 0f       	add	r22, r22
 928:	77 1f       	adc	r23, r23
 92a:	88 1f       	adc	r24, r24
 92c:	bb 1f       	adc	r27, r27
 92e:	26 17       	cp	r18, r22
 930:	37 07       	cpc	r19, r23
 932:	48 07       	cpc	r20, r24
 934:	ab 07       	cpc	r26, r27
 936:	b0 e8       	ldi	r27, 0x80	; 128
 938:	09 f0       	breq	.+2      	; 0x93c <__stack+0x3d>
 93a:	bb 0b       	sbc	r27, r27
 93c:	80 2d       	mov	r24, r0
 93e:	bf 01       	movw	r22, r30
 940:	ff 27       	eor	r31, r31
 942:	93 58       	subi	r25, 0x83	; 131
 944:	5f 4f       	sbci	r21, 0xFF	; 255
 946:	3a f0       	brmi	.+14     	; 0x956 <__stack+0x57>
 948:	9e 3f       	cpi	r25, 0xFE	; 254
 94a:	51 05       	cpc	r21, r1
 94c:	78 f0       	brcs	.+30     	; 0x96c <__stack+0x6d>
 94e:	0c 94 3a 05 	jmp	0xa74	; 0xa74 <__fp_inf>
 952:	0c 94 85 05 	jmp	0xb0a	; 0xb0a <__fp_szero>
 956:	5f 3f       	cpi	r21, 0xFF	; 255
 958:	e4 f3       	brlt	.-8      	; 0x952 <__stack+0x53>
 95a:	98 3e       	cpi	r25, 0xE8	; 232
 95c:	d4 f3       	brlt	.-12     	; 0x952 <__stack+0x53>
 95e:	86 95       	lsr	r24
 960:	77 95       	ror	r23
 962:	67 95       	ror	r22
 964:	b7 95       	ror	r27
 966:	f7 95       	ror	r31
 968:	9f 5f       	subi	r25, 0xFF	; 255
 96a:	c9 f7       	brne	.-14     	; 0x95e <__stack+0x5f>
 96c:	88 0f       	add	r24, r24
 96e:	91 1d       	adc	r25, r1
 970:	96 95       	lsr	r25
 972:	87 95       	ror	r24
 974:	97 f9       	bld	r25, 7
 976:	08 95       	ret
 978:	e1 e0       	ldi	r30, 0x01	; 1
 97a:	66 0f       	add	r22, r22
 97c:	77 1f       	adc	r23, r23
 97e:	88 1f       	adc	r24, r24
 980:	bb 1f       	adc	r27, r27
 982:	62 17       	cp	r22, r18
 984:	73 07       	cpc	r23, r19
 986:	84 07       	cpc	r24, r20
 988:	ba 07       	cpc	r27, r26
 98a:	20 f0       	brcs	.+8      	; 0x994 <__stack+0x95>
 98c:	62 1b       	sub	r22, r18
 98e:	73 0b       	sbc	r23, r19
 990:	84 0b       	sbc	r24, r20
 992:	ba 0b       	sbc	r27, r26
 994:	ee 1f       	adc	r30, r30
 996:	88 f7       	brcc	.-30     	; 0x97a <__stack+0x7b>
 998:	e0 95       	com	r30
 99a:	08 95       	ret

0000099c <__fixunssfsi>:
 99c:	0e 94 6a 05 	call	0xad4	; 0xad4 <__fp_splitA>
 9a0:	88 f0       	brcs	.+34     	; 0x9c4 <__fixunssfsi+0x28>
 9a2:	9f 57       	subi	r25, 0x7F	; 127
 9a4:	98 f0       	brcs	.+38     	; 0x9cc <__fixunssfsi+0x30>
 9a6:	b9 2f       	mov	r27, r25
 9a8:	99 27       	eor	r25, r25
 9aa:	b7 51       	subi	r27, 0x17	; 23
 9ac:	b0 f0       	brcs	.+44     	; 0x9da <__fixunssfsi+0x3e>
 9ae:	e1 f0       	breq	.+56     	; 0x9e8 <__fixunssfsi+0x4c>
 9b0:	66 0f       	add	r22, r22
 9b2:	77 1f       	adc	r23, r23
 9b4:	88 1f       	adc	r24, r24
 9b6:	99 1f       	adc	r25, r25
 9b8:	1a f0       	brmi	.+6      	; 0x9c0 <__fixunssfsi+0x24>
 9ba:	ba 95       	dec	r27
 9bc:	c9 f7       	brne	.-14     	; 0x9b0 <__fixunssfsi+0x14>
 9be:	14 c0       	rjmp	.+40     	; 0x9e8 <__fixunssfsi+0x4c>
 9c0:	b1 30       	cpi	r27, 0x01	; 1
 9c2:	91 f0       	breq	.+36     	; 0x9e8 <__fixunssfsi+0x4c>
 9c4:	0e 94 84 05 	call	0xb08	; 0xb08 <__fp_zero>
 9c8:	b1 e0       	ldi	r27, 0x01	; 1
 9ca:	08 95       	ret
 9cc:	0c 94 84 05 	jmp	0xb08	; 0xb08 <__fp_zero>
 9d0:	67 2f       	mov	r22, r23
 9d2:	78 2f       	mov	r23, r24
 9d4:	88 27       	eor	r24, r24
 9d6:	b8 5f       	subi	r27, 0xF8	; 248
 9d8:	39 f0       	breq	.+14     	; 0x9e8 <__fixunssfsi+0x4c>
 9da:	b9 3f       	cpi	r27, 0xF9	; 249
 9dc:	cc f3       	brlt	.-14     	; 0x9d0 <__fixunssfsi+0x34>
 9de:	86 95       	lsr	r24
 9e0:	77 95       	ror	r23
 9e2:	67 95       	ror	r22
 9e4:	b3 95       	inc	r27
 9e6:	d9 f7       	brne	.-10     	; 0x9de <__fixunssfsi+0x42>
 9e8:	3e f4       	brtc	.+14     	; 0x9f8 <__fixunssfsi+0x5c>
 9ea:	90 95       	com	r25
 9ec:	80 95       	com	r24
 9ee:	70 95       	com	r23
 9f0:	61 95       	neg	r22
 9f2:	7f 4f       	sbci	r23, 0xFF	; 255
 9f4:	8f 4f       	sbci	r24, 0xFF	; 255
 9f6:	9f 4f       	sbci	r25, 0xFF	; 255
 9f8:	08 95       	ret

000009fa <__floatunsisf>:
 9fa:	e8 94       	clt
 9fc:	09 c0       	rjmp	.+18     	; 0xa10 <__floatsisf+0x12>

000009fe <__floatsisf>:
 9fe:	97 fb       	bst	r25, 7
 a00:	3e f4       	brtc	.+14     	; 0xa10 <__floatsisf+0x12>
 a02:	90 95       	com	r25
 a04:	80 95       	com	r24
 a06:	70 95       	com	r23
 a08:	61 95       	neg	r22
 a0a:	7f 4f       	sbci	r23, 0xFF	; 255
 a0c:	8f 4f       	sbci	r24, 0xFF	; 255
 a0e:	9f 4f       	sbci	r25, 0xFF	; 255
 a10:	99 23       	and	r25, r25
 a12:	a9 f0       	breq	.+42     	; 0xa3e <__floatsisf+0x40>
 a14:	f9 2f       	mov	r31, r25
 a16:	96 e9       	ldi	r25, 0x96	; 150
 a18:	bb 27       	eor	r27, r27
 a1a:	93 95       	inc	r25
 a1c:	f6 95       	lsr	r31
 a1e:	87 95       	ror	r24
 a20:	77 95       	ror	r23
 a22:	67 95       	ror	r22
 a24:	b7 95       	ror	r27
 a26:	f1 11       	cpse	r31, r1
 a28:	f8 cf       	rjmp	.-16     	; 0xa1a <__floatsisf+0x1c>
 a2a:	fa f4       	brpl	.+62     	; 0xa6a <__floatsisf+0x6c>
 a2c:	bb 0f       	add	r27, r27
 a2e:	11 f4       	brne	.+4      	; 0xa34 <__floatsisf+0x36>
 a30:	60 ff       	sbrs	r22, 0
 a32:	1b c0       	rjmp	.+54     	; 0xa6a <__floatsisf+0x6c>
 a34:	6f 5f       	subi	r22, 0xFF	; 255
 a36:	7f 4f       	sbci	r23, 0xFF	; 255
 a38:	8f 4f       	sbci	r24, 0xFF	; 255
 a3a:	9f 4f       	sbci	r25, 0xFF	; 255
 a3c:	16 c0       	rjmp	.+44     	; 0xa6a <__floatsisf+0x6c>
 a3e:	88 23       	and	r24, r24
 a40:	11 f0       	breq	.+4      	; 0xa46 <__floatsisf+0x48>
 a42:	96 e9       	ldi	r25, 0x96	; 150
 a44:	11 c0       	rjmp	.+34     	; 0xa68 <__floatsisf+0x6a>
 a46:	77 23       	and	r23, r23
 a48:	21 f0       	breq	.+8      	; 0xa52 <__floatsisf+0x54>
 a4a:	9e e8       	ldi	r25, 0x8E	; 142
 a4c:	87 2f       	mov	r24, r23
 a4e:	76 2f       	mov	r23, r22
 a50:	05 c0       	rjmp	.+10     	; 0xa5c <__floatsisf+0x5e>
 a52:	66 23       	and	r22, r22
 a54:	71 f0       	breq	.+28     	; 0xa72 <__floatsisf+0x74>
 a56:	96 e8       	ldi	r25, 0x86	; 134
 a58:	86 2f       	mov	r24, r22
 a5a:	70 e0       	ldi	r23, 0x00	; 0
 a5c:	60 e0       	ldi	r22, 0x00	; 0
 a5e:	2a f0       	brmi	.+10     	; 0xa6a <__floatsisf+0x6c>
 a60:	9a 95       	dec	r25
 a62:	66 0f       	add	r22, r22
 a64:	77 1f       	adc	r23, r23
 a66:	88 1f       	adc	r24, r24
 a68:	da f7       	brpl	.-10     	; 0xa60 <__floatsisf+0x62>
 a6a:	88 0f       	add	r24, r24
 a6c:	96 95       	lsr	r25
 a6e:	87 95       	ror	r24
 a70:	97 f9       	bld	r25, 7
 a72:	08 95       	ret

00000a74 <__fp_inf>:
 a74:	97 f9       	bld	r25, 7
 a76:	9f 67       	ori	r25, 0x7F	; 127
 a78:	80 e8       	ldi	r24, 0x80	; 128
 a7a:	70 e0       	ldi	r23, 0x00	; 0
 a7c:	60 e0       	ldi	r22, 0x00	; 0
 a7e:	08 95       	ret

00000a80 <__fp_nan>:
 a80:	9f ef       	ldi	r25, 0xFF	; 255
 a82:	80 ec       	ldi	r24, 0xC0	; 192
 a84:	08 95       	ret

00000a86 <__fp_pscA>:
 a86:	00 24       	eor	r0, r0
 a88:	0a 94       	dec	r0
 a8a:	16 16       	cp	r1, r22
 a8c:	17 06       	cpc	r1, r23
 a8e:	18 06       	cpc	r1, r24
 a90:	09 06       	cpc	r0, r25
 a92:	08 95       	ret

00000a94 <__fp_pscB>:
 a94:	00 24       	eor	r0, r0
 a96:	0a 94       	dec	r0
 a98:	12 16       	cp	r1, r18
 a9a:	13 06       	cpc	r1, r19
 a9c:	14 06       	cpc	r1, r20
 a9e:	05 06       	cpc	r0, r21
 aa0:	08 95       	ret

00000aa2 <__fp_round>:
 aa2:	09 2e       	mov	r0, r25
 aa4:	03 94       	inc	r0
 aa6:	00 0c       	add	r0, r0
 aa8:	11 f4       	brne	.+4      	; 0xaae <__fp_round+0xc>
 aaa:	88 23       	and	r24, r24
 aac:	52 f0       	brmi	.+20     	; 0xac2 <__fp_round+0x20>
 aae:	bb 0f       	add	r27, r27
 ab0:	40 f4       	brcc	.+16     	; 0xac2 <__fp_round+0x20>
 ab2:	bf 2b       	or	r27, r31
 ab4:	11 f4       	brne	.+4      	; 0xaba <__fp_round+0x18>
 ab6:	60 ff       	sbrs	r22, 0
 ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__fp_round+0x20>
 aba:	6f 5f       	subi	r22, 0xFF	; 255
 abc:	7f 4f       	sbci	r23, 0xFF	; 255
 abe:	8f 4f       	sbci	r24, 0xFF	; 255
 ac0:	9f 4f       	sbci	r25, 0xFF	; 255
 ac2:	08 95       	ret

00000ac4 <__fp_split3>:
 ac4:	57 fd       	sbrc	r21, 7
 ac6:	90 58       	subi	r25, 0x80	; 128
 ac8:	44 0f       	add	r20, r20
 aca:	55 1f       	adc	r21, r21
 acc:	59 f0       	breq	.+22     	; 0xae4 <__fp_splitA+0x10>
 ace:	5f 3f       	cpi	r21, 0xFF	; 255
 ad0:	71 f0       	breq	.+28     	; 0xaee <__fp_splitA+0x1a>
 ad2:	47 95       	ror	r20

00000ad4 <__fp_splitA>:
 ad4:	88 0f       	add	r24, r24
 ad6:	97 fb       	bst	r25, 7
 ad8:	99 1f       	adc	r25, r25
 ada:	61 f0       	breq	.+24     	; 0xaf4 <__fp_splitA+0x20>
 adc:	9f 3f       	cpi	r25, 0xFF	; 255
 ade:	79 f0       	breq	.+30     	; 0xafe <__fp_splitA+0x2a>
 ae0:	87 95       	ror	r24
 ae2:	08 95       	ret
 ae4:	12 16       	cp	r1, r18
 ae6:	13 06       	cpc	r1, r19
 ae8:	14 06       	cpc	r1, r20
 aea:	55 1f       	adc	r21, r21
 aec:	f2 cf       	rjmp	.-28     	; 0xad2 <__fp_split3+0xe>
 aee:	46 95       	lsr	r20
 af0:	f1 df       	rcall	.-30     	; 0xad4 <__fp_splitA>
 af2:	08 c0       	rjmp	.+16     	; 0xb04 <__fp_splitA+0x30>
 af4:	16 16       	cp	r1, r22
 af6:	17 06       	cpc	r1, r23
 af8:	18 06       	cpc	r1, r24
 afa:	99 1f       	adc	r25, r25
 afc:	f1 cf       	rjmp	.-30     	; 0xae0 <__fp_splitA+0xc>
 afe:	86 95       	lsr	r24
 b00:	71 05       	cpc	r23, r1
 b02:	61 05       	cpc	r22, r1
 b04:	08 94       	sec
 b06:	08 95       	ret

00000b08 <__fp_zero>:
 b08:	e8 94       	clt

00000b0a <__fp_szero>:
 b0a:	bb 27       	eor	r27, r27
 b0c:	66 27       	eor	r22, r22
 b0e:	77 27       	eor	r23, r23
 b10:	cb 01       	movw	r24, r22
 b12:	97 f9       	bld	r25, 7
 b14:	08 95       	ret

00000b16 <__mulsf3>:
 b16:	0e 94 9e 05 	call	0xb3c	; 0xb3c <__mulsf3x>
 b1a:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__fp_round>
 b1e:	0e 94 43 05 	call	0xa86	; 0xa86 <__fp_pscA>
 b22:	38 f0       	brcs	.+14     	; 0xb32 <__mulsf3+0x1c>
 b24:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fp_pscB>
 b28:	20 f0       	brcs	.+8      	; 0xb32 <__mulsf3+0x1c>
 b2a:	95 23       	and	r25, r21
 b2c:	11 f0       	breq	.+4      	; 0xb32 <__mulsf3+0x1c>
 b2e:	0c 94 3a 05 	jmp	0xa74	; 0xa74 <__fp_inf>
 b32:	0c 94 40 05 	jmp	0xa80	; 0xa80 <__fp_nan>
 b36:	11 24       	eor	r1, r1
 b38:	0c 94 85 05 	jmp	0xb0a	; 0xb0a <__fp_szero>

00000b3c <__mulsf3x>:
 b3c:	0e 94 62 05 	call	0xac4	; 0xac4 <__fp_split3>
 b40:	70 f3       	brcs	.-36     	; 0xb1e <__mulsf3+0x8>

00000b42 <__mulsf3_pse>:
 b42:	95 9f       	mul	r25, r21
 b44:	c1 f3       	breq	.-16     	; 0xb36 <__mulsf3+0x20>
 b46:	95 0f       	add	r25, r21
 b48:	50 e0       	ldi	r21, 0x00	; 0
 b4a:	55 1f       	adc	r21, r21
 b4c:	62 9f       	mul	r22, r18
 b4e:	f0 01       	movw	r30, r0
 b50:	72 9f       	mul	r23, r18
 b52:	bb 27       	eor	r27, r27
 b54:	f0 0d       	add	r31, r0
 b56:	b1 1d       	adc	r27, r1
 b58:	63 9f       	mul	r22, r19
 b5a:	aa 27       	eor	r26, r26
 b5c:	f0 0d       	add	r31, r0
 b5e:	b1 1d       	adc	r27, r1
 b60:	aa 1f       	adc	r26, r26
 b62:	64 9f       	mul	r22, r20
 b64:	66 27       	eor	r22, r22
 b66:	b0 0d       	add	r27, r0
 b68:	a1 1d       	adc	r26, r1
 b6a:	66 1f       	adc	r22, r22
 b6c:	82 9f       	mul	r24, r18
 b6e:	22 27       	eor	r18, r18
 b70:	b0 0d       	add	r27, r0
 b72:	a1 1d       	adc	r26, r1
 b74:	62 1f       	adc	r22, r18
 b76:	73 9f       	mul	r23, r19
 b78:	b0 0d       	add	r27, r0
 b7a:	a1 1d       	adc	r26, r1
 b7c:	62 1f       	adc	r22, r18
 b7e:	83 9f       	mul	r24, r19
 b80:	a0 0d       	add	r26, r0
 b82:	61 1d       	adc	r22, r1
 b84:	22 1f       	adc	r18, r18
 b86:	74 9f       	mul	r23, r20
 b88:	33 27       	eor	r19, r19
 b8a:	a0 0d       	add	r26, r0
 b8c:	61 1d       	adc	r22, r1
 b8e:	23 1f       	adc	r18, r19
 b90:	84 9f       	mul	r24, r20
 b92:	60 0d       	add	r22, r0
 b94:	21 1d       	adc	r18, r1
 b96:	82 2f       	mov	r24, r18
 b98:	76 2f       	mov	r23, r22
 b9a:	6a 2f       	mov	r22, r26
 b9c:	11 24       	eor	r1, r1
 b9e:	9f 57       	subi	r25, 0x7F	; 127
 ba0:	50 40       	sbci	r21, 0x00	; 0
 ba2:	9a f0       	brmi	.+38     	; 0xbca <__mulsf3_pse+0x88>
 ba4:	f1 f0       	breq	.+60     	; 0xbe2 <__mulsf3_pse+0xa0>
 ba6:	88 23       	and	r24, r24
 ba8:	4a f0       	brmi	.+18     	; 0xbbc <__mulsf3_pse+0x7a>
 baa:	ee 0f       	add	r30, r30
 bac:	ff 1f       	adc	r31, r31
 bae:	bb 1f       	adc	r27, r27
 bb0:	66 1f       	adc	r22, r22
 bb2:	77 1f       	adc	r23, r23
 bb4:	88 1f       	adc	r24, r24
 bb6:	91 50       	subi	r25, 0x01	; 1
 bb8:	50 40       	sbci	r21, 0x00	; 0
 bba:	a9 f7       	brne	.-22     	; 0xba6 <__mulsf3_pse+0x64>
 bbc:	9e 3f       	cpi	r25, 0xFE	; 254
 bbe:	51 05       	cpc	r21, r1
 bc0:	80 f0       	brcs	.+32     	; 0xbe2 <__mulsf3_pse+0xa0>
 bc2:	0c 94 3a 05 	jmp	0xa74	; 0xa74 <__fp_inf>
 bc6:	0c 94 85 05 	jmp	0xb0a	; 0xb0a <__fp_szero>
 bca:	5f 3f       	cpi	r21, 0xFF	; 255
 bcc:	e4 f3       	brlt	.-8      	; 0xbc6 <__mulsf3_pse+0x84>
 bce:	98 3e       	cpi	r25, 0xE8	; 232
 bd0:	d4 f3       	brlt	.-12     	; 0xbc6 <__mulsf3_pse+0x84>
 bd2:	86 95       	lsr	r24
 bd4:	77 95       	ror	r23
 bd6:	67 95       	ror	r22
 bd8:	b7 95       	ror	r27
 bda:	f7 95       	ror	r31
 bdc:	e7 95       	ror	r30
 bde:	9f 5f       	subi	r25, 0xFF	; 255
 be0:	c1 f7       	brne	.-16     	; 0xbd2 <__mulsf3_pse+0x90>
 be2:	fe 2b       	or	r31, r30
 be4:	88 0f       	add	r24, r24
 be6:	91 1d       	adc	r25, r1
 be8:	96 95       	lsr	r25
 bea:	87 95       	ror	r24
 bec:	97 f9       	bld	r25, 7
 bee:	08 95       	ret

00000bf0 <initVariant>:
 bf0:	08 95       	ret

00000bf2 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 bf2:	0e 94 9f 06 	call	0xd3e	; 0xd3e <init>

	initVariant();
 bf6:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 bfa:	0e 94 7c 00 	call	0xf8	; 0xf8 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 bfe:	c0 e0       	ldi	r28, 0x00	; 0
 c00:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 c02:	0e 94 93 00 	call	0x126	; 0x126 <loop>
		if (serialEventRun) serialEventRun();
 c06:	20 97       	sbiw	r28, 0x00	; 0
 c08:	e1 f3       	breq	.-8      	; 0xc02 <main+0x10>
 c0a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 c0e:	f9 cf       	rjmp	.-14     	; 0xc02 <main+0x10>

00000c10 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 c10:	1f 92       	push	r1
 c12:	0f 92       	push	r0
 c14:	0f b6       	in	r0, 0x3f	; 63
 c16:	0f 92       	push	r0
 c18:	11 24       	eor	r1, r1
 c1a:	2f 93       	push	r18
 c1c:	3f 93       	push	r19
 c1e:	8f 93       	push	r24
 c20:	9f 93       	push	r25
 c22:	af 93       	push	r26
 c24:	bf 93       	push	r27
 c26:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <timer0_millis>
 c2a:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <timer0_millis+0x1>
 c2e:	a0 91 1d 01 	lds	r26, 0x011D	; 0x80011d <timer0_millis+0x2>
 c32:	b0 91 1e 01 	lds	r27, 0x011E	; 0x80011e <timer0_millis+0x3>
 c36:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <timer0_fract>
 c3a:	23 e0       	ldi	r18, 0x03	; 3
 c3c:	23 0f       	add	r18, r19
 c3e:	2d 37       	cpi	r18, 0x7D	; 125
 c40:	20 f4       	brcc	.+8      	; 0xc4a <__vector_16+0x3a>
 c42:	01 96       	adiw	r24, 0x01	; 1
 c44:	a1 1d       	adc	r26, r1
 c46:	b1 1d       	adc	r27, r1
 c48:	05 c0       	rjmp	.+10     	; 0xc54 <__vector_16+0x44>
 c4a:	26 e8       	ldi	r18, 0x86	; 134
 c4c:	23 0f       	add	r18, r19
 c4e:	02 96       	adiw	r24, 0x02	; 2
 c50:	a1 1d       	adc	r26, r1
 c52:	b1 1d       	adc	r27, r1
 c54:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <timer0_fract>
 c58:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <timer0_millis>
 c5c:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <timer0_millis+0x1>
 c60:	a0 93 1d 01 	sts	0x011D, r26	; 0x80011d <timer0_millis+0x2>
 c64:	b0 93 1e 01 	sts	0x011E, r27	; 0x80011e <timer0_millis+0x3>
 c68:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <timer0_overflow_count>
 c6c:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <timer0_overflow_count+0x1>
 c70:	a0 91 21 01 	lds	r26, 0x0121	; 0x800121 <timer0_overflow_count+0x2>
 c74:	b0 91 22 01 	lds	r27, 0x0122	; 0x800122 <timer0_overflow_count+0x3>
 c78:	01 96       	adiw	r24, 0x01	; 1
 c7a:	a1 1d       	adc	r26, r1
 c7c:	b1 1d       	adc	r27, r1
 c7e:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <timer0_overflow_count>
 c82:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <timer0_overflow_count+0x1>
 c86:	a0 93 21 01 	sts	0x0121, r26	; 0x800121 <timer0_overflow_count+0x2>
 c8a:	b0 93 22 01 	sts	0x0122, r27	; 0x800122 <timer0_overflow_count+0x3>
 c8e:	bf 91       	pop	r27
 c90:	af 91       	pop	r26
 c92:	9f 91       	pop	r25
 c94:	8f 91       	pop	r24
 c96:	3f 91       	pop	r19
 c98:	2f 91       	pop	r18
 c9a:	0f 90       	pop	r0
 c9c:	0f be       	out	0x3f, r0	; 63
 c9e:	0f 90       	pop	r0
 ca0:	1f 90       	pop	r1
 ca2:	18 95       	reti

00000ca4 <micros>:
 ca4:	3f b7       	in	r19, 0x3f	; 63
 ca6:	f8 94       	cli
 ca8:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <timer0_overflow_count>
 cac:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <timer0_overflow_count+0x1>
 cb0:	a0 91 21 01 	lds	r26, 0x0121	; 0x800121 <timer0_overflow_count+0x2>
 cb4:	b0 91 22 01 	lds	r27, 0x0122	; 0x800122 <timer0_overflow_count+0x3>
 cb8:	26 b5       	in	r18, 0x26	; 38
 cba:	a8 9b       	sbis	0x15, 0	; 21
 cbc:	05 c0       	rjmp	.+10     	; 0xcc8 <micros+0x24>
 cbe:	2f 3f       	cpi	r18, 0xFF	; 255
 cc0:	19 f0       	breq	.+6      	; 0xcc8 <micros+0x24>
 cc2:	01 96       	adiw	r24, 0x01	; 1
 cc4:	a1 1d       	adc	r26, r1
 cc6:	b1 1d       	adc	r27, r1
 cc8:	3f bf       	out	0x3f, r19	; 63
 cca:	ba 2f       	mov	r27, r26
 ccc:	a9 2f       	mov	r26, r25
 cce:	98 2f       	mov	r25, r24
 cd0:	88 27       	eor	r24, r24
 cd2:	82 0f       	add	r24, r18
 cd4:	91 1d       	adc	r25, r1
 cd6:	a1 1d       	adc	r26, r1
 cd8:	b1 1d       	adc	r27, r1
 cda:	bc 01       	movw	r22, r24
 cdc:	cd 01       	movw	r24, r26
 cde:	42 e0       	ldi	r20, 0x02	; 2
 ce0:	66 0f       	add	r22, r22
 ce2:	77 1f       	adc	r23, r23
 ce4:	88 1f       	adc	r24, r24
 ce6:	99 1f       	adc	r25, r25
 ce8:	4a 95       	dec	r20
 cea:	d1 f7       	brne	.-12     	; 0xce0 <micros+0x3c>
 cec:	08 95       	ret

00000cee <delay>:
 cee:	cf 92       	push	r12
 cf0:	df 92       	push	r13
 cf2:	ef 92       	push	r14
 cf4:	ff 92       	push	r15
 cf6:	cf 93       	push	r28
 cf8:	df 93       	push	r29
 cfa:	6b 01       	movw	r12, r22
 cfc:	7c 01       	movw	r14, r24
 cfe:	0e 94 52 06 	call	0xca4	; 0xca4 <micros>
 d02:	eb 01       	movw	r28, r22
 d04:	c1 14       	cp	r12, r1
 d06:	d1 04       	cpc	r13, r1
 d08:	e1 04       	cpc	r14, r1
 d0a:	f1 04       	cpc	r15, r1
 d0c:	89 f0       	breq	.+34     	; 0xd30 <delay+0x42>
 d0e:	0e 94 6e 07 	call	0xedc	; 0xedc <yield>
 d12:	0e 94 52 06 	call	0xca4	; 0xca4 <micros>
 d16:	6c 1b       	sub	r22, r28
 d18:	7d 0b       	sbc	r23, r29
 d1a:	68 3e       	cpi	r22, 0xE8	; 232
 d1c:	73 40       	sbci	r23, 0x03	; 3
 d1e:	90 f3       	brcs	.-28     	; 0xd04 <delay+0x16>
 d20:	81 e0       	ldi	r24, 0x01	; 1
 d22:	c8 1a       	sub	r12, r24
 d24:	d1 08       	sbc	r13, r1
 d26:	e1 08       	sbc	r14, r1
 d28:	f1 08       	sbc	r15, r1
 d2a:	c8 51       	subi	r28, 0x18	; 24
 d2c:	dc 4f       	sbci	r29, 0xFC	; 252
 d2e:	ea cf       	rjmp	.-44     	; 0xd04 <delay+0x16>
 d30:	df 91       	pop	r29
 d32:	cf 91       	pop	r28
 d34:	ff 90       	pop	r15
 d36:	ef 90       	pop	r14
 d38:	df 90       	pop	r13
 d3a:	cf 90       	pop	r12
 d3c:	08 95       	ret

00000d3e <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 d3e:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 d40:	84 b5       	in	r24, 0x24	; 36
 d42:	82 60       	ori	r24, 0x02	; 2
 d44:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 d46:	84 b5       	in	r24, 0x24	; 36
 d48:	81 60       	ori	r24, 0x01	; 1
 d4a:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 d4c:	85 b5       	in	r24, 0x25	; 37
 d4e:	82 60       	ori	r24, 0x02	; 2
 d50:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 d52:	85 b5       	in	r24, 0x25	; 37
 d54:	81 60       	ori	r24, 0x01	; 1
 d56:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 d58:	ee e6       	ldi	r30, 0x6E	; 110
 d5a:	f0 e0       	ldi	r31, 0x00	; 0
 d5c:	80 81       	ld	r24, Z
 d5e:	81 60       	ori	r24, 0x01	; 1
 d60:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 d62:	e1 e8       	ldi	r30, 0x81	; 129
 d64:	f0 e0       	ldi	r31, 0x00	; 0
 d66:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 d68:	80 81       	ld	r24, Z
 d6a:	82 60       	ori	r24, 0x02	; 2
 d6c:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 d6e:	80 81       	ld	r24, Z
 d70:	81 60       	ori	r24, 0x01	; 1
 d72:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 d74:	e0 e8       	ldi	r30, 0x80	; 128
 d76:	f0 e0       	ldi	r31, 0x00	; 0
 d78:	80 81       	ld	r24, Z
 d7a:	81 60       	ori	r24, 0x01	; 1
 d7c:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 d7e:	e1 eb       	ldi	r30, 0xB1	; 177
 d80:	f0 e0       	ldi	r31, 0x00	; 0
 d82:	80 81       	ld	r24, Z
 d84:	84 60       	ori	r24, 0x04	; 4
 d86:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 d88:	e0 eb       	ldi	r30, 0xB0	; 176
 d8a:	f0 e0       	ldi	r31, 0x00	; 0
 d8c:	80 81       	ld	r24, Z
 d8e:	81 60       	ori	r24, 0x01	; 1
 d90:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 d92:	ea e7       	ldi	r30, 0x7A	; 122
 d94:	f0 e0       	ldi	r31, 0x00	; 0
 d96:	80 81       	ld	r24, Z
 d98:	84 60       	ori	r24, 0x04	; 4
 d9a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 d9c:	80 81       	ld	r24, Z
 d9e:	82 60       	ori	r24, 0x02	; 2
 da0:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 da2:	80 81       	ld	r24, Z
 da4:	81 60       	ori	r24, 0x01	; 1
 da6:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 da8:	80 81       	ld	r24, Z
 daa:	80 68       	ori	r24, 0x80	; 128
 dac:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 dae:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 db2:	08 95       	ret

00000db4 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 db4:	83 30       	cpi	r24, 0x03	; 3
 db6:	81 f0       	breq	.+32     	; 0xdd8 <turnOffPWM+0x24>
 db8:	28 f4       	brcc	.+10     	; 0xdc4 <turnOffPWM+0x10>
 dba:	81 30       	cpi	r24, 0x01	; 1
 dbc:	99 f0       	breq	.+38     	; 0xde4 <turnOffPWM+0x30>
 dbe:	82 30       	cpi	r24, 0x02	; 2
 dc0:	a1 f0       	breq	.+40     	; 0xdea <turnOffPWM+0x36>
 dc2:	08 95       	ret
 dc4:	87 30       	cpi	r24, 0x07	; 7
 dc6:	a9 f0       	breq	.+42     	; 0xdf2 <turnOffPWM+0x3e>
 dc8:	88 30       	cpi	r24, 0x08	; 8
 dca:	b9 f0       	breq	.+46     	; 0xdfa <turnOffPWM+0x46>
 dcc:	84 30       	cpi	r24, 0x04	; 4
 dce:	d1 f4       	brne	.+52     	; 0xe04 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 dd0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 dd4:	8f 7d       	andi	r24, 0xDF	; 223
 dd6:	03 c0       	rjmp	.+6      	; 0xdde <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 dd8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 ddc:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 dde:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 de2:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 de4:	84 b5       	in	r24, 0x24	; 36
 de6:	8f 77       	andi	r24, 0x7F	; 127
 de8:	02 c0       	rjmp	.+4      	; 0xdee <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 dea:	84 b5       	in	r24, 0x24	; 36
 dec:	8f 7d       	andi	r24, 0xDF	; 223
 dee:	84 bd       	out	0x24, r24	; 36
 df0:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 df2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 df6:	8f 77       	andi	r24, 0x7F	; 127
 df8:	03 c0       	rjmp	.+6      	; 0xe00 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 dfa:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 dfe:	8f 7d       	andi	r24, 0xDF	; 223
 e00:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 e04:	08 95       	ret

00000e06 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 e06:	cf 93       	push	r28
 e08:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 e0a:	90 e0       	ldi	r25, 0x00	; 0
 e0c:	fc 01       	movw	r30, r24
 e0e:	e4 58       	subi	r30, 0x84	; 132
 e10:	ff 4f       	sbci	r31, 0xFF	; 255
 e12:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 e14:	fc 01       	movw	r30, r24
 e16:	e0 57       	subi	r30, 0x70	; 112
 e18:	ff 4f       	sbci	r31, 0xFF	; 255
 e1a:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 e1c:	88 23       	and	r24, r24
 e1e:	61 f1       	breq	.+88     	; 0xe78 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 e20:	90 e0       	ldi	r25, 0x00	; 0
 e22:	88 0f       	add	r24, r24
 e24:	99 1f       	adc	r25, r25
 e26:	fc 01       	movw	r30, r24
 e28:	e2 55       	subi	r30, 0x52	; 82
 e2a:	ff 4f       	sbci	r31, 0xFF	; 255
 e2c:	c5 91       	lpm	r28, Z+
 e2e:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 e30:	fc 01       	movw	r30, r24
 e32:	ec 55       	subi	r30, 0x5C	; 92
 e34:	ff 4f       	sbci	r31, 0xFF	; 255
 e36:	a5 91       	lpm	r26, Z+
 e38:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 e3a:	61 11       	cpse	r22, r1
 e3c:	09 c0       	rjmp	.+18     	; 0xe50 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 e3e:	9f b7       	in	r25, 0x3f	; 63
                cli();
 e40:	f8 94       	cli
		*reg &= ~bit;
 e42:	88 81       	ld	r24, Y
 e44:	20 95       	com	r18
 e46:	82 23       	and	r24, r18
 e48:	88 83       	st	Y, r24
		*out &= ~bit;
 e4a:	ec 91       	ld	r30, X
 e4c:	2e 23       	and	r18, r30
 e4e:	0b c0       	rjmp	.+22     	; 0xe66 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 e50:	62 30       	cpi	r22, 0x02	; 2
 e52:	61 f4       	brne	.+24     	; 0xe6c <pinMode+0x66>
		uint8_t oldSREG = SREG;
 e54:	9f b7       	in	r25, 0x3f	; 63
                cli();
 e56:	f8 94       	cli
		*reg &= ~bit;
 e58:	88 81       	ld	r24, Y
 e5a:	32 2f       	mov	r19, r18
 e5c:	30 95       	com	r19
 e5e:	83 23       	and	r24, r19
 e60:	88 83       	st	Y, r24
		*out |= bit;
 e62:	ec 91       	ld	r30, X
 e64:	2e 2b       	or	r18, r30
 e66:	2c 93       	st	X, r18
		SREG = oldSREG;
 e68:	9f bf       	out	0x3f, r25	; 63
 e6a:	06 c0       	rjmp	.+12     	; 0xe78 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 e6c:	8f b7       	in	r24, 0x3f	; 63
                cli();
 e6e:	f8 94       	cli
		*reg |= bit;
 e70:	e8 81       	ld	r30, Y
 e72:	2e 2b       	or	r18, r30
 e74:	28 83       	st	Y, r18
		SREG = oldSREG;
 e76:	8f bf       	out	0x3f, r24	; 63
	}
}
 e78:	df 91       	pop	r29
 e7a:	cf 91       	pop	r28
 e7c:	08 95       	ret

00000e7e <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 e7e:	1f 93       	push	r17
 e80:	cf 93       	push	r28
 e82:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 e84:	28 2f       	mov	r18, r24
 e86:	30 e0       	ldi	r19, 0x00	; 0
 e88:	f9 01       	movw	r30, r18
 e8a:	e8 59       	subi	r30, 0x98	; 152
 e8c:	ff 4f       	sbci	r31, 0xFF	; 255
 e8e:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 e90:	f9 01       	movw	r30, r18
 e92:	e4 58       	subi	r30, 0x84	; 132
 e94:	ff 4f       	sbci	r31, 0xFF	; 255
 e96:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 e98:	f9 01       	movw	r30, r18
 e9a:	e0 57       	subi	r30, 0x70	; 112
 e9c:	ff 4f       	sbci	r31, 0xFF	; 255
 e9e:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 ea0:	cc 23       	and	r28, r28
 ea2:	c1 f0       	breq	.+48     	; 0xed4 <digitalWrite+0x56>
 ea4:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 ea6:	81 11       	cpse	r24, r1
 ea8:	0e 94 da 06 	call	0xdb4	; 0xdb4 <turnOffPWM>

	out = portOutputRegister(port);
 eac:	ec 2f       	mov	r30, r28
 eae:	f0 e0       	ldi	r31, 0x00	; 0
 eb0:	ee 0f       	add	r30, r30
 eb2:	ff 1f       	adc	r31, r31
 eb4:	ec 55       	subi	r30, 0x5C	; 92
 eb6:	ff 4f       	sbci	r31, 0xFF	; 255
 eb8:	a5 91       	lpm	r26, Z+
 eba:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 ebc:	9f b7       	in	r25, 0x3f	; 63
	cli();
 ebe:	f8 94       	cli

	if (val == LOW) {
 ec0:	11 11       	cpse	r17, r1
 ec2:	04 c0       	rjmp	.+8      	; 0xecc <digitalWrite+0x4e>
		*out &= ~bit;
 ec4:	8c 91       	ld	r24, X
 ec6:	d0 95       	com	r29
 ec8:	d8 23       	and	r29, r24
 eca:	02 c0       	rjmp	.+4      	; 0xed0 <digitalWrite+0x52>
	} else {
		*out |= bit;
 ecc:	ec 91       	ld	r30, X
 ece:	de 2b       	or	r29, r30
 ed0:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
 ed2:	9f bf       	out	0x3f, r25	; 63
}
 ed4:	df 91       	pop	r29
 ed6:	cf 91       	pop	r28
 ed8:	1f 91       	pop	r17
 eda:	08 95       	ret

00000edc <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 edc:	08 95       	ret

00000ede <__mulsi3>:
 ede:	db 01       	movw	r26, r22
 ee0:	8f 93       	push	r24
 ee2:	9f 93       	push	r25
 ee4:	0e 94 7f 07 	call	0xefe	; 0xefe <__muluhisi3>
 ee8:	bf 91       	pop	r27
 eea:	af 91       	pop	r26
 eec:	a2 9f       	mul	r26, r18
 eee:	80 0d       	add	r24, r0
 ef0:	91 1d       	adc	r25, r1
 ef2:	a3 9f       	mul	r26, r19
 ef4:	90 0d       	add	r25, r0
 ef6:	b2 9f       	mul	r27, r18
 ef8:	90 0d       	add	r25, r0
 efa:	11 24       	eor	r1, r1
 efc:	08 95       	ret

00000efe <__muluhisi3>:
 efe:	0e 94 98 07 	call	0xf30	; 0xf30 <__umulhisi3>
 f02:	a5 9f       	mul	r26, r21
 f04:	90 0d       	add	r25, r0
 f06:	b4 9f       	mul	r27, r20
 f08:	90 0d       	add	r25, r0
 f0a:	a4 9f       	mul	r26, r20
 f0c:	80 0d       	add	r24, r0
 f0e:	91 1d       	adc	r25, r1
 f10:	11 24       	eor	r1, r1
 f12:	08 95       	ret

00000f14 <__mulshisi3>:
 f14:	b7 ff       	sbrs	r27, 7
 f16:	0c 94 7f 07 	jmp	0xefe	; 0xefe <__muluhisi3>

00000f1a <__mulohisi3>:
 f1a:	0e 94 7f 07 	call	0xefe	; 0xefe <__muluhisi3>
 f1e:	82 1b       	sub	r24, r18
 f20:	93 0b       	sbc	r25, r19
 f22:	08 95       	ret

00000f24 <__tablejump2__>:
 f24:	ee 0f       	add	r30, r30
 f26:	ff 1f       	adc	r31, r31
 f28:	05 90       	lpm	r0, Z+
 f2a:	f4 91       	lpm	r31, Z
 f2c:	e0 2d       	mov	r30, r0
 f2e:	09 94       	ijmp

00000f30 <__umulhisi3>:
 f30:	a2 9f       	mul	r26, r18
 f32:	b0 01       	movw	r22, r0
 f34:	b3 9f       	mul	r27, r19
 f36:	c0 01       	movw	r24, r0
 f38:	a3 9f       	mul	r26, r19
 f3a:	70 0d       	add	r23, r0
 f3c:	81 1d       	adc	r24, r1
 f3e:	11 24       	eor	r1, r1
 f40:	91 1d       	adc	r25, r1
 f42:	b2 9f       	mul	r27, r18
 f44:	70 0d       	add	r23, r0
 f46:	81 1d       	adc	r24, r1
 f48:	11 24       	eor	r1, r1
 f4a:	91 1d       	adc	r25, r1
 f4c:	08 95       	ret

00000f4e <_exit>:
 f4e:	f8 94       	cli

00000f50 <__stop_program>:
 f50:	ff cf       	rjmp	.-2      	; 0xf50 <__stop_program>
