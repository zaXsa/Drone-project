
move_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000b3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ac8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  00800100  00800100  00000b3c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b3c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b6c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000bac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001dc8  00000000  00000000  00000ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c92  00000000  00000000  00002aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bc5  00000000  00000000  0000373e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003e8  00000000  00000000  00004304  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009f2  00000000  00000000  000046ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013f9  00000000  00000000  000050de  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  000064d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5d 00 	jmp	0xba	; 0xba <__ctors_end>
   4:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
   8:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
   c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__vector_3>
  10:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  14:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  18:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  1c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  20:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  24:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  28:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  2c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  30:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  34:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  38:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  3c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  40:	0c 94 0e 04 	jmp	0x81c	; 0x81c <__vector_16>
  44:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  48:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  4c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  50:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  54:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  58:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  5c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  60:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  64:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
  a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
  ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_start>:
  b8:	e3 00       	.word	0x00e3	; ????

000000ba <__ctors_end>:
  ba:	11 24       	eor	r1, r1
  bc:	1f be       	out	0x3f, r1	; 63
  be:	cf ef       	ldi	r28, 0xFF	; 255
  c0:	d8 e0       	ldi	r29, 0x08	; 8
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_clear_bss>:
  c6:	21 e0       	ldi	r18, 0x01	; 1
  c8:	a0 e0       	ldi	r26, 0x00	; 0
  ca:	b1 e0       	ldi	r27, 0x01	; 1
  cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
  ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
  d0:	a3 32       	cpi	r26, 0x23	; 35
  d2:	b2 07       	cpc	r27, r18
  d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>

000000d6 <__do_global_ctors>:
  d6:	10 e0       	ldi	r17, 0x00	; 0
  d8:	cd e5       	ldi	r28, 0x5D	; 93
  da:	d0 e0       	ldi	r29, 0x00	; 0
  dc:	04 c0       	rjmp	.+8      	; 0xe6 <__do_global_ctors+0x10>
  de:	21 97       	sbiw	r28, 0x01	; 1
  e0:	fe 01       	movw	r30, r28
  e2:	0e 94 4d 05 	call	0xa9a	; 0xa9a <__tablejump2__>
  e6:	cc 35       	cpi	r28, 0x5C	; 92
  e8:	d1 07       	cpc	r29, r17
  ea:	c9 f7       	brne	.-14     	; 0xde <__do_global_ctors+0x8>
  ec:	0e 94 7c 00 	call	0xf8	; 0xf8 <main>
  f0:	0c 94 62 05 	jmp	0xac4	; 0xac4 <_exit>

000000f4 <__bad_interrupt>:
  f4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f8 <main>:
#define clk_pin 7

StepperDriver ss(motor_steps, step_divisition, en_pin, cw_pin, clk_pin);  

int main(){
	DDRB &= ~(1<<DDB0);				// Arduino pin 8
  f8:	20 98       	cbi	0x04, 0	; 4
	
	PCMSK0 |= (1<<PCINT0);
  fa:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
  fe:	81 60       	ori	r24, 0x01	; 1
 100:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
	PCICR |= (1<<PCIE0);
 104:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
 108:	81 60       	ori	r24, 0x01	; 1
 10a:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>

	ss.setSpeed(160);
 10e:	40 e0       	ldi	r20, 0x00	; 0
 110:	50 e0       	ldi	r21, 0x00	; 0
 112:	60 e2       	ldi	r22, 0x20	; 32
 114:	73 e4       	ldi	r23, 0x43	; 67
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	91 e0       	ldi	r25, 0x01	; 1
 11a:	0e 94 2e 01 	call	0x25c	; 0x25c <_ZN13StepperDriver8setSpeedEf>
	ss.powerEnable(true);
 11e:	61 e0       	ldi	r22, 0x01	; 1
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	91 e0       	ldi	r25, 0x01	; 1
 124:	0e 94 68 01 	call	0x2d0	; 0x2d0 <_ZN13StepperDriver11powerEnableEb>
	ss.positioning();
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	91 e0       	ldi	r25, 0x01	; 1
 12c:	0e 94 35 02 	call	0x46a	; 0x46a <_ZN13StepperDriver11positioningEv>
	delay(1600);
 130:	60 e4       	ldi	r22, 0x40	; 64
 132:	76 e0       	ldi	r23, 0x06	; 6
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0e 94 7d 04 	call	0x8fa	; 0x8fa <delay>

	sei();
 13c:	78 94       	sei

	while (1){
		ss.setSpeed(160);
 13e:	40 e0       	ldi	r20, 0x00	; 0
 140:	50 e0       	ldi	r21, 0x00	; 0
 142:	60 e2       	ldi	r22, 0x20	; 32
 144:	73 e4       	ldi	r23, 0x43	; 67
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	91 e0       	ldi	r25, 0x01	; 1
 14a:	0e 94 2e 01 	call	0x25c	; 0x25c <_ZN13StepperDriver8setSpeedEf>
		ss.step(20);
 14e:	44 e1       	ldi	r20, 0x14	; 20
 150:	50 e0       	ldi	r21, 0x00	; 0
 152:	60 e0       	ldi	r22, 0x00	; 0
 154:	70 e0       	ldi	r23, 0x00	; 0
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	91 e0       	ldi	r25, 0x01	; 1
 15a:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <_ZN13StepperDriver4stepEl>
		delay(100);
 15e:	64 e6       	ldi	r22, 0x64	; 100
 160:	70 e0       	ldi	r23, 0x00	; 0
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0e 94 7d 04 	call	0x8fa	; 0x8fa <delay>
 16a:	e9 cf       	rjmp	.-46     	; 0x13e <main+0x46>

0000016c <__vector_3>:
	}
}

ISR(PCINT0_vect){
 16c:	1f 92       	push	r1
 16e:	0f 92       	push	r0
 170:	0f b6       	in	r0, 0x3f	; 63
 172:	0f 92       	push	r0
 174:	11 24       	eor	r1, r1
 176:	2f 93       	push	r18
 178:	3f 93       	push	r19
 17a:	4f 93       	push	r20
 17c:	5f 93       	push	r21
 17e:	6f 93       	push	r22
 180:	7f 93       	push	r23
 182:	8f 93       	push	r24
 184:	9f 93       	push	r25
 186:	af 93       	push	r26
 188:	bf 93       	push	r27
 18a:	ef 93       	push	r30
 18c:	ff 93       	push	r31
	if ((PINB & (1 << PINB0)) == 1 ){
 18e:	18 9b       	sbis	0x03, 0	; 3
 190:	02 c0       	rjmp	.+4      	; 0x196 <__vector_3+0x2a>
		ss.powerEnable(false);
 192:	60 e0       	ldi	r22, 0x00	; 0
 194:	03 c0       	rjmp	.+6      	; 0x19c <__vector_3+0x30>
	} else if ((PINB & (1 << PINB0)) == 0 ){
 196:	18 99       	sbic	0x03, 0	; 3
 198:	05 c0       	rjmp	.+10     	; 0x1a4 <__vector_3+0x38>
		ss.powerEnable(true);
 19a:	61 e0       	ldi	r22, 0x01	; 1
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	91 e0       	ldi	r25, 0x01	; 1
 1a0:	0e 94 68 01 	call	0x2d0	; 0x2d0 <_ZN13StepperDriver11powerEnableEb>
	}
}
 1a4:	ff 91       	pop	r31
 1a6:	ef 91       	pop	r30
 1a8:	bf 91       	pop	r27
 1aa:	af 91       	pop	r26
 1ac:	9f 91       	pop	r25
 1ae:	8f 91       	pop	r24
 1b0:	7f 91       	pop	r23
 1b2:	6f 91       	pop	r22
 1b4:	5f 91       	pop	r21
 1b6:	4f 91       	pop	r20
 1b8:	3f 91       	pop	r19
 1ba:	2f 91       	pop	r18
 1bc:	0f 90       	pop	r0
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	0f 90       	pop	r0
 1c2:	1f 90       	pop	r1
 1c4:	18 95       	reti

000001c6 <_GLOBAL__sub_I_ss>:
 1c6:	ef 92       	push	r14
 1c8:	ff 92       	push	r15
 1ca:	0f 93       	push	r16
 1cc:	1f 93       	push	r17
#define step_divisition 16
#define en_pin 5
#define cw_pin 6
#define clk_pin 7

StepperDriver ss(motor_steps, step_divisition, en_pin, cw_pin, clk_pin);  
 1ce:	87 e0       	ldi	r24, 0x07	; 7
 1d0:	e8 2e       	mov	r14, r24
 1d2:	f1 2c       	mov	r15, r1
 1d4:	06 e0       	ldi	r16, 0x06	; 6
 1d6:	10 e0       	ldi	r17, 0x00	; 0
 1d8:	25 e0       	ldi	r18, 0x05	; 5
 1da:	30 e0       	ldi	r19, 0x00	; 0
 1dc:	40 e1       	ldi	r20, 0x10	; 16
 1de:	50 e0       	ldi	r21, 0x00	; 0
 1e0:	68 ec       	ldi	r22, 0xC8	; 200
 1e2:	70 e0       	ldi	r23, 0x00	; 0
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	91 e0       	ldi	r25, 0x01	; 1
 1e8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_ZN13StepperDriverC1Eiiiii>
	if ((PINB & (1 << PINB0)) == 1 ){
		ss.powerEnable(false);
	} else if ((PINB & (1 << PINB0)) == 0 ){
		ss.powerEnable(true);
	}
}
 1ec:	1f 91       	pop	r17
 1ee:	0f 91       	pop	r16
 1f0:	ff 90       	pop	r15
 1f2:	ef 90       	pop	r14
 1f4:	08 95       	ret

000001f6 <_ZN13StepperDriverC1Eiiiii>:
#include "Arduino.h"
#include "StepperDriver.h"


StepperDriver::StepperDriver(int number_of_steps, int step_division, int en_pin, int cw_pin, int clk_pin)
 1f6:	ef 92       	push	r14
 1f8:	ff 92       	push	r15
 1fa:	0f 93       	push	r16
 1fc:	1f 93       	push	r17
 1fe:	fc 01       	movw	r30, r24
 200:	82 2f       	mov	r24, r18
{
	this->number_of_steps = number_of_steps;
 202:	71 83       	std	Z+1, r23	; 0x01
 204:	60 83       	st	Z, r22
  this->step_division = step_division;
 206:	53 83       	std	Z+3, r21	; 0x03
 208:	42 83       	std	Z+2, r20	; 0x02
  this->step_interval = 10000;
 20a:	40 e1       	ldi	r20, 0x10	; 16
 20c:	57 e2       	ldi	r21, 0x27	; 39
 20e:	60 e0       	ldi	r22, 0x00	; 0
 210:	70 e0       	ldi	r23, 0x00	; 0
 212:	44 83       	std	Z+4, r20	; 0x04
 214:	55 83       	std	Z+5, r21	; 0x05
 216:	66 83       	std	Z+6, r22	; 0x06
 218:	77 83       	std	Z+7, r23	; 0x07
  this->last_step_time = 0;
 21a:	10 86       	std	Z+8, r1	; 0x08
 21c:	11 86       	std	Z+9, r1	; 0x09
 21e:	12 86       	std	Z+10, r1	; 0x0a
 220:	13 86       	std	Z+11, r1	; 0x0b
  this->target_step_time1 = 0;
 222:	14 86       	std	Z+12, r1	; 0x0c
 224:	15 86       	std	Z+13, r1	; 0x0d
 226:	16 86       	std	Z+14, r1	; 0x0e
 228:	17 86       	std	Z+15, r1	; 0x0f
  this->target_step_time2 = 0;
 22a:	10 8a       	std	Z+16, r1	; 0x10
 22c:	11 8a       	std	Z+17, r1	; 0x11
 22e:	12 8a       	std	Z+18, r1	; 0x12
 230:	13 8a       	std	Z+19, r1	; 0x13
  
  // Arduino pins for the motor control connection:
  this->en_pin = en_pin;
 232:	24 8b       	std	Z+20, r18	; 0x14
 234:	35 8b       	std	Z+21, r19	; 0x15
  this->cw_pin = cw_pin;
 236:	06 8b       	std	Z+22, r16	; 0x16
 238:	17 8b       	std	Z+23, r17	; 0x17
  this->clk_pin = clk_pin;
 23a:	e0 8e       	std	Z+24, r14	; 0x18
 23c:	f1 8e       	std	Z+25, r15	; 0x19

  // setup the pins on the microcontroller:
  pinMode(en_pin, OUTPUT);
 23e:	61 e0       	ldi	r22, 0x01	; 1
 240:	0e 94 ce 04 	call	0x99c	; 0x99c <pinMode>
  pinMode(cw_pin, OUTPUT);
 244:	61 e0       	ldi	r22, 0x01	; 1
 246:	80 2f       	mov	r24, r16
 248:	0e 94 ce 04 	call	0x99c	; 0x99c <pinMode>
  pinMode(clk_pin, OUTPUT);
 24c:	61 e0       	ldi	r22, 0x01	; 1
 24e:	8e 2d       	mov	r24, r14
}
 250:	1f 91       	pop	r17
 252:	0f 91       	pop	r16
 254:	ff 90       	pop	r15
 256:	ef 90       	pop	r14
  this->clk_pin = clk_pin;

  // setup the pins on the microcontroller:
  pinMode(en_pin, OUTPUT);
  pinMode(cw_pin, OUTPUT);
  pinMode(clk_pin, OUTPUT);
 258:	0c 94 ce 04 	jmp	0x99c	; 0x99c <pinMode>

0000025c <_ZN13StepperDriver8setSpeedEf>:

/*
  Sets the speed in revs per minute
*/
void StepperDriver::setSpeed(float rpm)
{
 25c:	cf 92       	push	r12
 25e:	df 92       	push	r13
 260:	ef 92       	push	r14
 262:	ff 92       	push	r15
 264:	cf 93       	push	r28
 266:	df 93       	push	r29
 268:	ec 01       	movw	r28, r24
 26a:	6a 01       	movw	r12, r20
 26c:	7b 01       	movw	r14, r22
  step_interval = 60000000L / (number_of_steps * rpm * step_division);
 26e:	68 81       	ld	r22, Y
 270:	79 81       	ldd	r23, Y+1	; 0x01
 272:	07 2e       	mov	r0, r23
 274:	00 0c       	add	r0, r0
 276:	88 0b       	sbc	r24, r24
 278:	99 0b       	sbc	r25, r25
 27a:	0e 94 15 03 	call	0x62a	; 0x62a <__floatsisf>
 27e:	a7 01       	movw	r20, r14
 280:	96 01       	movw	r18, r12
 282:	0e 94 a1 03 	call	0x742	; 0x742 <__mulsf3>
 286:	6b 01       	movw	r12, r22
 288:	7c 01       	movw	r14, r24
 28a:	6a 81       	ldd	r22, Y+2	; 0x02
 28c:	7b 81       	ldd	r23, Y+3	; 0x03
 28e:	07 2e       	mov	r0, r23
 290:	00 0c       	add	r0, r0
 292:	88 0b       	sbc	r24, r24
 294:	99 0b       	sbc	r25, r25
 296:	0e 94 15 03 	call	0x62a	; 0x62a <__floatsisf>
 29a:	9b 01       	movw	r18, r22
 29c:	ac 01       	movw	r20, r24
 29e:	c7 01       	movw	r24, r14
 2a0:	b6 01       	movw	r22, r12
 2a2:	0e 94 a1 03 	call	0x742	; 0x742 <__mulsf3>
 2a6:	9b 01       	movw	r18, r22
 2a8:	ac 01       	movw	r20, r24
 2aa:	60 ec       	ldi	r22, 0xC0	; 192
 2ac:	71 ee       	ldi	r23, 0xE1	; 225
 2ae:	84 e6       	ldi	r24, 0x64	; 100
 2b0:	9c e4       	ldi	r25, 0x4C	; 76
 2b2:	0e 94 72 02 	call	0x4e4	; 0x4e4 <__divsf3>
 2b6:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <__fixunssfsi>
 2ba:	6c 83       	std	Y+4, r22	; 0x04
 2bc:	7d 83       	std	Y+5, r23	; 0x05
 2be:	8e 83       	std	Y+6, r24	; 0x06
 2c0:	9f 83       	std	Y+7, r25	; 0x07
}
 2c2:	df 91       	pop	r29
 2c4:	cf 91       	pop	r28
 2c6:	ff 90       	pop	r15
 2c8:	ef 90       	pop	r14
 2ca:	df 90       	pop	r13
 2cc:	cf 90       	pop	r12
 2ce:	08 95       	ret

000002d0 <_ZN13StepperDriver11powerEnableEb>:



void StepperDriver::powerEnable(bool ena)
{
  if (ena) {
 2d0:	66 23       	and	r22, r22
 2d2:	11 f0       	breq	.+4      	; 0x2d8 <_ZN13StepperDriver11powerEnableEb+0x8>
    digitalWrite(en_pin, LOW);
 2d4:	60 e0       	ldi	r22, 0x00	; 0
 2d6:	01 c0       	rjmp	.+2      	; 0x2da <_ZN13StepperDriver11powerEnableEb+0xa>
  } else {
    digitalWrite(en_pin, HIGH);
 2d8:	61 e0       	ldi	r22, 0x01	; 1
 2da:	fc 01       	movw	r30, r24
 2dc:	84 89       	ldd	r24, Z+20	; 0x14
 2de:	0c 94 0a 05 	jmp	0xa14	; 0xa14 <digitalWrite>

000002e2 <_ZN13StepperDriver12setDirectionEl>:



void StepperDriver::setDirection(long steps_to_move)
{
  if (steps_to_move < 0) {
 2e2:	77 ff       	sbrs	r23, 7
 2e4:	02 c0       	rjmp	.+4      	; 0x2ea <_ZN13StepperDriver12setDirectionEl+0x8>
    digitalWrite(cw_pin, HIGH);
 2e6:	61 e0       	ldi	r22, 0x01	; 1
 2e8:	01 c0       	rjmp	.+2      	; 0x2ec <_ZN13StepperDriver12setDirectionEl+0xa>
  }
  else {
    digitalWrite(cw_pin, LOW);
 2ea:	60 e0       	ldi	r22, 0x00	; 0
 2ec:	fc 01       	movw	r30, r24
 2ee:	86 89       	ldd	r24, Z+22	; 0x16
 2f0:	0c 94 0a 05 	jmp	0xa14	; 0xa14 <digitalWrite>

000002f4 <_ZN13StepperDriver12moveIntervalEm>:
}



void StepperDriver::moveInterval(unsigned long target_delay)
{
 2f4:	0f 93       	push	r16
 2f6:	1f 93       	push	r17
 2f8:	cf 93       	push	r28
 2fa:	df 93       	push	r29
 2fc:	ec 01       	movw	r28, r24
  target_step_time1 = last_step_time + (target_delay / 2);
 2fe:	08 85       	ldd	r16, Y+8	; 0x08
 300:	19 85       	ldd	r17, Y+9	; 0x09
 302:	2a 85       	ldd	r18, Y+10	; 0x0a
 304:	3b 85       	ldd	r19, Y+11	; 0x0b
 306:	db 01       	movw	r26, r22
 308:	ca 01       	movw	r24, r20
 30a:	b6 95       	lsr	r27
 30c:	a7 95       	ror	r26
 30e:	97 95       	ror	r25
 310:	87 95       	ror	r24
 312:	80 0f       	add	r24, r16
 314:	91 1f       	adc	r25, r17
 316:	a2 1f       	adc	r26, r18
 318:	b3 1f       	adc	r27, r19
 31a:	8c 87       	std	Y+12, r24	; 0x0c
 31c:	9d 87       	std	Y+13, r25	; 0x0d
 31e:	ae 87       	std	Y+14, r26	; 0x0e
 320:	bf 87       	std	Y+15, r27	; 0x0f
  target_step_time2 = last_step_time + target_delay;
 322:	40 0f       	add	r20, r16
 324:	51 1f       	adc	r21, r17
 326:	62 1f       	adc	r22, r18
 328:	73 1f       	adc	r23, r19
 32a:	48 8b       	std	Y+16, r20	; 0x10
 32c:	59 8b       	std	Y+17, r21	; 0x11
 32e:	6a 8b       	std	Y+18, r22	; 0x12
 330:	7b 8b       	std	Y+19, r23	; 0x13

  if (target_step_time1 >= last_step_time) {
 332:	80 17       	cp	r24, r16
 334:	91 07       	cpc	r25, r17
 336:	a2 07       	cpc	r26, r18
 338:	b3 07       	cpc	r27, r19
 33a:	e8 f0       	brcs	.+58     	; 0x376 <_ZN13StepperDriver12moveIntervalEm+0x82>
    while (micros() < target_step_time1) {}
 33c:	0e 94 58 04 	call	0x8b0	; 0x8b0 <micros>
 340:	0c 85       	ldd	r16, Y+12	; 0x0c
 342:	1d 85       	ldd	r17, Y+13	; 0x0d
 344:	2e 85       	ldd	r18, Y+14	; 0x0e
 346:	3f 85       	ldd	r19, Y+15	; 0x0f
 348:	60 17       	cp	r22, r16
 34a:	71 07       	cpc	r23, r17
 34c:	82 07       	cpc	r24, r18
 34e:	93 07       	cpc	r25, r19
 350:	a8 f3       	brcs	.-22     	; 0x33c <_ZN13StepperDriver12moveIntervalEm+0x48>
  }
  else {
    while ((long)(micros()) < (long)target_step_time1) {}
  }

	digitalWrite(clk_pin, LOW);
 352:	60 e0       	ldi	r22, 0x00	; 0
 354:	88 8d       	ldd	r24, Y+24	; 0x18
 356:	0e 94 0a 05 	call	0xa14	; 0xa14 <digitalWrite>

  if (target_step_time2 >= last_step_time) {
 35a:	48 89       	ldd	r20, Y+16	; 0x10
 35c:	59 89       	ldd	r21, Y+17	; 0x11
 35e:	6a 89       	ldd	r22, Y+18	; 0x12
 360:	7b 89       	ldd	r23, Y+19	; 0x13
 362:	88 85       	ldd	r24, Y+8	; 0x08
 364:	99 85       	ldd	r25, Y+9	; 0x09
 366:	aa 85       	ldd	r26, Y+10	; 0x0a
 368:	bb 85       	ldd	r27, Y+11	; 0x0b
 36a:	48 17       	cp	r20, r24
 36c:	59 07       	cpc	r21, r25
 36e:	6a 07       	cpc	r22, r26
 370:	7b 07       	cpc	r23, r27
 372:	68 f4       	brcc	.+26     	; 0x38e <_ZN13StepperDriver12moveIntervalEm+0x9a>
 374:	22 c0       	rjmp	.+68     	; 0x3ba <_ZN13StepperDriver12moveIntervalEm+0xc6>

  if (target_step_time1 >= last_step_time) {
    while (micros() < target_step_time1) {}
  }
  else {
    while ((long)(micros()) < (long)target_step_time1) {}
 376:	0e 94 58 04 	call	0x8b0	; 0x8b0 <micros>
 37a:	0c 85       	ldd	r16, Y+12	; 0x0c
 37c:	1d 85       	ldd	r17, Y+13	; 0x0d
 37e:	2e 85       	ldd	r18, Y+14	; 0x0e
 380:	3f 85       	ldd	r19, Y+15	; 0x0f
 382:	60 17       	cp	r22, r16
 384:	71 07       	cpc	r23, r17
 386:	82 07       	cpc	r24, r18
 388:	93 07       	cpc	r25, r19
 38a:	ac f3       	brlt	.-22     	; 0x376 <_ZN13StepperDriver12moveIntervalEm+0x82>
 38c:	e2 cf       	rjmp	.-60     	; 0x352 <_ZN13StepperDriver12moveIntervalEm+0x5e>
  }

	digitalWrite(clk_pin, LOW);

  if (target_step_time2 >= last_step_time) {
    while (micros() < target_step_time2) {}
 38e:	0e 94 58 04 	call	0x8b0	; 0x8b0 <micros>
 392:	08 89       	ldd	r16, Y+16	; 0x10
 394:	19 89       	ldd	r17, Y+17	; 0x11
 396:	2a 89       	ldd	r18, Y+18	; 0x12
 398:	3b 89       	ldd	r19, Y+19	; 0x13
 39a:	60 17       	cp	r22, r16
 39c:	71 07       	cpc	r23, r17
 39e:	82 07       	cpc	r24, r18
 3a0:	93 07       	cpc	r25, r19
 3a2:	a8 f3       	brcs	.-22     	; 0x38e <_ZN13StepperDriver12moveIntervalEm+0x9a>
  }
  else {
    while ((long)(micros()) < (long)target_step_time2) {}
  }
  last_step_time = micros();
 3a4:	0e 94 58 04 	call	0x8b0	; 0x8b0 <micros>
 3a8:	68 87       	std	Y+8, r22	; 0x08
 3aa:	79 87       	std	Y+9, r23	; 0x09
 3ac:	8a 87       	std	Y+10, r24	; 0x0a
 3ae:	9b 87       	std	Y+11, r25	; 0x0b
}
 3b0:	df 91       	pop	r29
 3b2:	cf 91       	pop	r28
 3b4:	1f 91       	pop	r17
 3b6:	0f 91       	pop	r16
 3b8:	08 95       	ret

  if (target_step_time2 >= last_step_time) {
    while (micros() < target_step_time2) {}
  }
  else {
    while ((long)(micros()) < (long)target_step_time2) {}
 3ba:	0e 94 58 04 	call	0x8b0	; 0x8b0 <micros>
 3be:	08 89       	ldd	r16, Y+16	; 0x10
 3c0:	19 89       	ldd	r17, Y+17	; 0x11
 3c2:	2a 89       	ldd	r18, Y+18	; 0x12
 3c4:	3b 89       	ldd	r19, Y+19	; 0x13
 3c6:	60 17       	cp	r22, r16
 3c8:	71 07       	cpc	r23, r17
 3ca:	82 07       	cpc	r24, r18
 3cc:	93 07       	cpc	r25, r19
 3ce:	ac f3       	brlt	.-22     	; 0x3ba <_ZN13StepperDriver12moveIntervalEm+0xc6>
 3d0:	e9 cf       	rjmp	.-46     	; 0x3a4 <_ZN13StepperDriver12moveIntervalEm+0xb0>

000003d2 <_ZN13StepperDriver4moveEv>:
}



void StepperDriver::move()
{
 3d2:	cf 93       	push	r28
 3d4:	df 93       	push	r29
 3d6:	ec 01       	movw	r28, r24
  digitalWrite(clk_pin, HIGH);
 3d8:	61 e0       	ldi	r22, 0x01	; 1
 3da:	88 8d       	ldd	r24, Y+24	; 0x18
 3dc:	0e 94 0a 05 	call	0xa14	; 0xa14 <digitalWrite>
  moveInterval(step_interval);
 3e0:	4c 81       	ldd	r20, Y+4	; 0x04
 3e2:	5d 81       	ldd	r21, Y+5	; 0x05
 3e4:	6e 81       	ldd	r22, Y+6	; 0x06
 3e6:	7f 81       	ldd	r23, Y+7	; 0x07
 3e8:	ce 01       	movw	r24, r28
}
 3ea:	df 91       	pop	r29
 3ec:	cf 91       	pop	r28


void StepperDriver::move()
{
  digitalWrite(clk_pin, HIGH);
  moveInterval(step_interval);
 3ee:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <_ZN13StepperDriver12moveIntervalEm>

000003f2 <_ZN13StepperDriver4stepEl>:
/*
  Moves the motor steps_to_move steps.  If the number is negative, 
  the motor moves in the reverse direction.
 */
void StepperDriver::step(long steps_to_move)
{
 3f2:	cf 92       	push	r12
 3f4:	df 92       	push	r13
 3f6:	ef 92       	push	r14
 3f8:	ff 92       	push	r15
 3fa:	cf 93       	push	r28
 3fc:	df 93       	push	r29
 3fe:	ec 01       	movw	r28, r24
	steps_to_move *= step_division;
 400:	aa 81       	ldd	r26, Y+2	; 0x02
 402:	bb 81       	ldd	r27, Y+3	; 0x03
 404:	9a 01       	movw	r18, r20
 406:	ab 01       	movw	r20, r22
 408:	0e 94 45 05 	call	0xa8a	; 0xa8a <__mulshisi3>
 40c:	6b 01       	movw	r12, r22
 40e:	7c 01       	movw	r14, r24
  setDirection(steps_to_move);
 410:	ab 01       	movw	r20, r22
 412:	bc 01       	movw	r22, r24
 414:	ce 01       	movw	r24, r28
 416:	0e 94 71 01 	call	0x2e2	; 0x2e2 <_ZN13StepperDriver12setDirectionEl>
  last_step_time = micros();
 41a:	0e 94 58 04 	call	0x8b0	; 0x8b0 <micros>
 41e:	68 87       	std	Y+8, r22	; 0x08
 420:	79 87       	std	Y+9, r23	; 0x09
 422:	8a 87       	std	Y+10, r24	; 0x0a
 424:	9b 87       	std	Y+11, r25	; 0x0b

  for (long i = abs(steps_to_move); i > 0; i--) {
 426:	c6 01       	movw	r24, r12
 428:	d7 01       	movw	r26, r14
 42a:	b7 ff       	sbrs	r27, 7
 42c:	07 c0       	rjmp	.+14     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 42e:	b0 95       	com	r27
 430:	a0 95       	com	r26
 432:	90 95       	com	r25
 434:	81 95       	neg	r24
 436:	9f 4f       	sbci	r25, 0xFF	; 255
 438:	af 4f       	sbci	r26, 0xFF	; 255
 43a:	bf 4f       	sbci	r27, 0xFF	; 255
 43c:	6c 01       	movw	r12, r24
 43e:	7d 01       	movw	r14, r26
 440:	c1 14       	cp	r12, r1
 442:	d1 04       	cpc	r13, r1
 444:	e1 04       	cpc	r14, r1
 446:	f1 04       	cpc	r15, r1
 448:	49 f0       	breq	.+18     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
    move();
 44a:	ce 01       	movw	r24, r28
 44c:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <_ZN13StepperDriver4moveEv>
{
	steps_to_move *= step_division;
  setDirection(steps_to_move);
  last_step_time = micros();

  for (long i = abs(steps_to_move); i > 0; i--) {
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	c8 1a       	sub	r12, r24
 454:	d1 08       	sbc	r13, r1
 456:	e1 08       	sbc	r14, r1
 458:	f1 08       	sbc	r15, r1
 45a:	f2 cf       	rjmp	.-28     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
    move();
  }
}
 45c:	df 91       	pop	r29
 45e:	cf 91       	pop	r28
 460:	ff 90       	pop	r15
 462:	ef 90       	pop	r14
 464:	df 90       	pop	r13
 466:	cf 90       	pop	r12
 468:	08 95       	ret

0000046a <_ZN13StepperDriver11positioningEv>:
  }
}


void StepperDriver::positioning()
{
 46a:	cf 92       	push	r12
 46c:	df 92       	push	r13
 46e:	ef 92       	push	r14
 470:	ff 92       	push	r15
 472:	cf 93       	push	r28
 474:	df 93       	push	r29
 476:	ec 01       	movw	r28, r24
	unsigned long step_interval_0 = step_interval;
 478:	cc 80       	ldd	r12, Y+4	; 0x04
 47a:	dd 80       	ldd	r13, Y+5	; 0x05
 47c:	ee 80       	ldd	r14, Y+6	; 0x06
 47e:	ff 80       	ldd	r15, Y+7	; 0x07
	step_interval *= 8;
 480:	d7 01       	movw	r26, r14
 482:	c6 01       	movw	r24, r12
 484:	23 e0       	ldi	r18, 0x03	; 3
 486:	88 0f       	add	r24, r24
 488:	99 1f       	adc	r25, r25
 48a:	aa 1f       	adc	r26, r26
 48c:	bb 1f       	adc	r27, r27
 48e:	2a 95       	dec	r18
 490:	d1 f7       	brne	.-12     	; 0x486 <_ZN13StepperDriver11positioningEv+0x1c>
 492:	8c 83       	std	Y+4, r24	; 0x04
 494:	9d 83       	std	Y+5, r25	; 0x05
 496:	ae 83       	std	Y+6, r26	; 0x06
 498:	bf 83       	std	Y+7, r27	; 0x07

	step(4);
 49a:	44 e0       	ldi	r20, 0x04	; 4
 49c:	50 e0       	ldi	r21, 0x00	; 0
 49e:	60 e0       	ldi	r22, 0x00	; 0
 4a0:	70 e0       	ldi	r23, 0x00	; 0
 4a2:	ce 01       	movw	r24, r28
 4a4:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <_ZN13StepperDriver4stepEl>
	delay(200);
 4a8:	68 ec       	ldi	r22, 0xC8	; 200
 4aa:	70 e0       	ldi	r23, 0x00	; 0
 4ac:	80 e0       	ldi	r24, 0x00	; 0
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	0e 94 7d 04 	call	0x8fa	; 0x8fa <delay>
	step(-4);
 4b4:	4c ef       	ldi	r20, 0xFC	; 252
 4b6:	5f ef       	ldi	r21, 0xFF	; 255
 4b8:	6f ef       	ldi	r22, 0xFF	; 255
 4ba:	7f ef       	ldi	r23, 0xFF	; 255
 4bc:	ce 01       	movw	r24, r28
 4be:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <_ZN13StepperDriver4stepEl>
  delay(200);
 4c2:	68 ec       	ldi	r22, 0xC8	; 200
 4c4:	70 e0       	ldi	r23, 0x00	; 0
 4c6:	80 e0       	ldi	r24, 0x00	; 0
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	0e 94 7d 04 	call	0x8fa	; 0x8fa <delay>

	step_interval = step_interval_0;
 4ce:	cc 82       	std	Y+4, r12	; 0x04
 4d0:	dd 82       	std	Y+5, r13	; 0x05
 4d2:	ee 82       	std	Y+6, r14	; 0x06
 4d4:	ff 82       	std	Y+7, r15	; 0x07
}
 4d6:	df 91       	pop	r29
 4d8:	cf 91       	pop	r28
 4da:	ff 90       	pop	r15
 4dc:	ef 90       	pop	r14
 4de:	df 90       	pop	r13
 4e0:	cf 90       	pop	r12
 4e2:	08 95       	ret

000004e4 <__divsf3>:
 4e4:	0e 94 86 02 	call	0x50c	; 0x50c <__divsf3x>
 4e8:	0c 94 67 03 	jmp	0x6ce	; 0x6ce <__fp_round>
 4ec:	0e 94 60 03 	call	0x6c0	; 0x6c0 <__fp_pscB>
 4f0:	58 f0       	brcs	.+22     	; 0x508 <__divsf3+0x24>
 4f2:	0e 94 59 03 	call	0x6b2	; 0x6b2 <__fp_pscA>
 4f6:	40 f0       	brcs	.+16     	; 0x508 <__divsf3+0x24>
 4f8:	29 f4       	brne	.+10     	; 0x504 <__divsf3+0x20>
 4fa:	5f 3f       	cpi	r21, 0xFF	; 255
 4fc:	29 f0       	breq	.+10     	; 0x508 <__divsf3+0x24>
 4fe:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__fp_inf>
 502:	51 11       	cpse	r21, r1
 504:	0c 94 9b 03 	jmp	0x736	; 0x736 <__fp_szero>
 508:	0c 94 56 03 	jmp	0x6ac	; 0x6ac <__fp_nan>

0000050c <__divsf3x>:
 50c:	0e 94 78 03 	call	0x6f0	; 0x6f0 <__fp_split3>
 510:	68 f3       	brcs	.-38     	; 0x4ec <__divsf3+0x8>

00000512 <__divsf3_pse>:
 512:	99 23       	and	r25, r25
 514:	b1 f3       	breq	.-20     	; 0x502 <__divsf3+0x1e>
 516:	55 23       	and	r21, r21
 518:	91 f3       	breq	.-28     	; 0x4fe <__divsf3+0x1a>
 51a:	95 1b       	sub	r25, r21
 51c:	55 0b       	sbc	r21, r21
 51e:	bb 27       	eor	r27, r27
 520:	aa 27       	eor	r26, r26
 522:	62 17       	cp	r22, r18
 524:	73 07       	cpc	r23, r19
 526:	84 07       	cpc	r24, r20
 528:	38 f0       	brcs	.+14     	; 0x538 <__divsf3_pse+0x26>
 52a:	9f 5f       	subi	r25, 0xFF	; 255
 52c:	5f 4f       	sbci	r21, 0xFF	; 255
 52e:	22 0f       	add	r18, r18
 530:	33 1f       	adc	r19, r19
 532:	44 1f       	adc	r20, r20
 534:	aa 1f       	adc	r26, r26
 536:	a9 f3       	breq	.-22     	; 0x522 <__divsf3_pse+0x10>
 538:	35 d0       	rcall	.+106    	; 0x5a4 <__divsf3_pse+0x92>
 53a:	0e 2e       	mov	r0, r30
 53c:	3a f0       	brmi	.+14     	; 0x54c <__divsf3_pse+0x3a>
 53e:	e0 e8       	ldi	r30, 0x80	; 128
 540:	32 d0       	rcall	.+100    	; 0x5a6 <__divsf3_pse+0x94>
 542:	91 50       	subi	r25, 0x01	; 1
 544:	50 40       	sbci	r21, 0x00	; 0
 546:	e6 95       	lsr	r30
 548:	00 1c       	adc	r0, r0
 54a:	ca f7       	brpl	.-14     	; 0x53e <__divsf3_pse+0x2c>
 54c:	2b d0       	rcall	.+86     	; 0x5a4 <__divsf3_pse+0x92>
 54e:	fe 2f       	mov	r31, r30
 550:	29 d0       	rcall	.+82     	; 0x5a4 <__divsf3_pse+0x92>
 552:	66 0f       	add	r22, r22
 554:	77 1f       	adc	r23, r23
 556:	88 1f       	adc	r24, r24
 558:	bb 1f       	adc	r27, r27
 55a:	26 17       	cp	r18, r22
 55c:	37 07       	cpc	r19, r23
 55e:	48 07       	cpc	r20, r24
 560:	ab 07       	cpc	r26, r27
 562:	b0 e8       	ldi	r27, 0x80	; 128
 564:	09 f0       	breq	.+2      	; 0x568 <__divsf3_pse+0x56>
 566:	bb 0b       	sbc	r27, r27
 568:	80 2d       	mov	r24, r0
 56a:	bf 01       	movw	r22, r30
 56c:	ff 27       	eor	r31, r31
 56e:	93 58       	subi	r25, 0x83	; 131
 570:	5f 4f       	sbci	r21, 0xFF	; 255
 572:	3a f0       	brmi	.+14     	; 0x582 <__divsf3_pse+0x70>
 574:	9e 3f       	cpi	r25, 0xFE	; 254
 576:	51 05       	cpc	r21, r1
 578:	78 f0       	brcs	.+30     	; 0x598 <__divsf3_pse+0x86>
 57a:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__fp_inf>
 57e:	0c 94 9b 03 	jmp	0x736	; 0x736 <__fp_szero>
 582:	5f 3f       	cpi	r21, 0xFF	; 255
 584:	e4 f3       	brlt	.-8      	; 0x57e <__divsf3_pse+0x6c>
 586:	98 3e       	cpi	r25, 0xE8	; 232
 588:	d4 f3       	brlt	.-12     	; 0x57e <__divsf3_pse+0x6c>
 58a:	86 95       	lsr	r24
 58c:	77 95       	ror	r23
 58e:	67 95       	ror	r22
 590:	b7 95       	ror	r27
 592:	f7 95       	ror	r31
 594:	9f 5f       	subi	r25, 0xFF	; 255
 596:	c9 f7       	brne	.-14     	; 0x58a <__divsf3_pse+0x78>
 598:	88 0f       	add	r24, r24
 59a:	91 1d       	adc	r25, r1
 59c:	96 95       	lsr	r25
 59e:	87 95       	ror	r24
 5a0:	97 f9       	bld	r25, 7
 5a2:	08 95       	ret
 5a4:	e1 e0       	ldi	r30, 0x01	; 1
 5a6:	66 0f       	add	r22, r22
 5a8:	77 1f       	adc	r23, r23
 5aa:	88 1f       	adc	r24, r24
 5ac:	bb 1f       	adc	r27, r27
 5ae:	62 17       	cp	r22, r18
 5b0:	73 07       	cpc	r23, r19
 5b2:	84 07       	cpc	r24, r20
 5b4:	ba 07       	cpc	r27, r26
 5b6:	20 f0       	brcs	.+8      	; 0x5c0 <__divsf3_pse+0xae>
 5b8:	62 1b       	sub	r22, r18
 5ba:	73 0b       	sbc	r23, r19
 5bc:	84 0b       	sbc	r24, r20
 5be:	ba 0b       	sbc	r27, r26
 5c0:	ee 1f       	adc	r30, r30
 5c2:	88 f7       	brcc	.-30     	; 0x5a6 <__divsf3_pse+0x94>
 5c4:	e0 95       	com	r30
 5c6:	08 95       	ret

000005c8 <__fixunssfsi>:
 5c8:	0e 94 80 03 	call	0x700	; 0x700 <__fp_splitA>
 5cc:	88 f0       	brcs	.+34     	; 0x5f0 <__fixunssfsi+0x28>
 5ce:	9f 57       	subi	r25, 0x7F	; 127
 5d0:	98 f0       	brcs	.+38     	; 0x5f8 <__fixunssfsi+0x30>
 5d2:	b9 2f       	mov	r27, r25
 5d4:	99 27       	eor	r25, r25
 5d6:	b7 51       	subi	r27, 0x17	; 23
 5d8:	b0 f0       	brcs	.+44     	; 0x606 <__fixunssfsi+0x3e>
 5da:	e1 f0       	breq	.+56     	; 0x614 <__fixunssfsi+0x4c>
 5dc:	66 0f       	add	r22, r22
 5de:	77 1f       	adc	r23, r23
 5e0:	88 1f       	adc	r24, r24
 5e2:	99 1f       	adc	r25, r25
 5e4:	1a f0       	brmi	.+6      	; 0x5ec <__fixunssfsi+0x24>
 5e6:	ba 95       	dec	r27
 5e8:	c9 f7       	brne	.-14     	; 0x5dc <__fixunssfsi+0x14>
 5ea:	14 c0       	rjmp	.+40     	; 0x614 <__fixunssfsi+0x4c>
 5ec:	b1 30       	cpi	r27, 0x01	; 1
 5ee:	91 f0       	breq	.+36     	; 0x614 <__fixunssfsi+0x4c>
 5f0:	0e 94 9a 03 	call	0x734	; 0x734 <__fp_zero>
 5f4:	b1 e0       	ldi	r27, 0x01	; 1
 5f6:	08 95       	ret
 5f8:	0c 94 9a 03 	jmp	0x734	; 0x734 <__fp_zero>
 5fc:	67 2f       	mov	r22, r23
 5fe:	78 2f       	mov	r23, r24
 600:	88 27       	eor	r24, r24
 602:	b8 5f       	subi	r27, 0xF8	; 248
 604:	39 f0       	breq	.+14     	; 0x614 <__fixunssfsi+0x4c>
 606:	b9 3f       	cpi	r27, 0xF9	; 249
 608:	cc f3       	brlt	.-14     	; 0x5fc <__fixunssfsi+0x34>
 60a:	86 95       	lsr	r24
 60c:	77 95       	ror	r23
 60e:	67 95       	ror	r22
 610:	b3 95       	inc	r27
 612:	d9 f7       	brne	.-10     	; 0x60a <__fixunssfsi+0x42>
 614:	3e f4       	brtc	.+14     	; 0x624 <__fixunssfsi+0x5c>
 616:	90 95       	com	r25
 618:	80 95       	com	r24
 61a:	70 95       	com	r23
 61c:	61 95       	neg	r22
 61e:	7f 4f       	sbci	r23, 0xFF	; 255
 620:	8f 4f       	sbci	r24, 0xFF	; 255
 622:	9f 4f       	sbci	r25, 0xFF	; 255
 624:	08 95       	ret

00000626 <__floatunsisf>:
 626:	e8 94       	clt
 628:	09 c0       	rjmp	.+18     	; 0x63c <__floatsisf+0x12>

0000062a <__floatsisf>:
 62a:	97 fb       	bst	r25, 7
 62c:	3e f4       	brtc	.+14     	; 0x63c <__floatsisf+0x12>
 62e:	90 95       	com	r25
 630:	80 95       	com	r24
 632:	70 95       	com	r23
 634:	61 95       	neg	r22
 636:	7f 4f       	sbci	r23, 0xFF	; 255
 638:	8f 4f       	sbci	r24, 0xFF	; 255
 63a:	9f 4f       	sbci	r25, 0xFF	; 255
 63c:	99 23       	and	r25, r25
 63e:	a9 f0       	breq	.+42     	; 0x66a <__floatsisf+0x40>
 640:	f9 2f       	mov	r31, r25
 642:	96 e9       	ldi	r25, 0x96	; 150
 644:	bb 27       	eor	r27, r27
 646:	93 95       	inc	r25
 648:	f6 95       	lsr	r31
 64a:	87 95       	ror	r24
 64c:	77 95       	ror	r23
 64e:	67 95       	ror	r22
 650:	b7 95       	ror	r27
 652:	f1 11       	cpse	r31, r1
 654:	f8 cf       	rjmp	.-16     	; 0x646 <__floatsisf+0x1c>
 656:	fa f4       	brpl	.+62     	; 0x696 <__floatsisf+0x6c>
 658:	bb 0f       	add	r27, r27
 65a:	11 f4       	brne	.+4      	; 0x660 <__floatsisf+0x36>
 65c:	60 ff       	sbrs	r22, 0
 65e:	1b c0       	rjmp	.+54     	; 0x696 <__floatsisf+0x6c>
 660:	6f 5f       	subi	r22, 0xFF	; 255
 662:	7f 4f       	sbci	r23, 0xFF	; 255
 664:	8f 4f       	sbci	r24, 0xFF	; 255
 666:	9f 4f       	sbci	r25, 0xFF	; 255
 668:	16 c0       	rjmp	.+44     	; 0x696 <__floatsisf+0x6c>
 66a:	88 23       	and	r24, r24
 66c:	11 f0       	breq	.+4      	; 0x672 <__floatsisf+0x48>
 66e:	96 e9       	ldi	r25, 0x96	; 150
 670:	11 c0       	rjmp	.+34     	; 0x694 <__floatsisf+0x6a>
 672:	77 23       	and	r23, r23
 674:	21 f0       	breq	.+8      	; 0x67e <__floatsisf+0x54>
 676:	9e e8       	ldi	r25, 0x8E	; 142
 678:	87 2f       	mov	r24, r23
 67a:	76 2f       	mov	r23, r22
 67c:	05 c0       	rjmp	.+10     	; 0x688 <__floatsisf+0x5e>
 67e:	66 23       	and	r22, r22
 680:	71 f0       	breq	.+28     	; 0x69e <__floatsisf+0x74>
 682:	96 e8       	ldi	r25, 0x86	; 134
 684:	86 2f       	mov	r24, r22
 686:	70 e0       	ldi	r23, 0x00	; 0
 688:	60 e0       	ldi	r22, 0x00	; 0
 68a:	2a f0       	brmi	.+10     	; 0x696 <__floatsisf+0x6c>
 68c:	9a 95       	dec	r25
 68e:	66 0f       	add	r22, r22
 690:	77 1f       	adc	r23, r23
 692:	88 1f       	adc	r24, r24
 694:	da f7       	brpl	.-10     	; 0x68c <__floatsisf+0x62>
 696:	88 0f       	add	r24, r24
 698:	96 95       	lsr	r25
 69a:	87 95       	ror	r24
 69c:	97 f9       	bld	r25, 7
 69e:	08 95       	ret

000006a0 <__fp_inf>:
 6a0:	97 f9       	bld	r25, 7
 6a2:	9f 67       	ori	r25, 0x7F	; 127
 6a4:	80 e8       	ldi	r24, 0x80	; 128
 6a6:	70 e0       	ldi	r23, 0x00	; 0
 6a8:	60 e0       	ldi	r22, 0x00	; 0
 6aa:	08 95       	ret

000006ac <__fp_nan>:
 6ac:	9f ef       	ldi	r25, 0xFF	; 255
 6ae:	80 ec       	ldi	r24, 0xC0	; 192
 6b0:	08 95       	ret

000006b2 <__fp_pscA>:
 6b2:	00 24       	eor	r0, r0
 6b4:	0a 94       	dec	r0
 6b6:	16 16       	cp	r1, r22
 6b8:	17 06       	cpc	r1, r23
 6ba:	18 06       	cpc	r1, r24
 6bc:	09 06       	cpc	r0, r25
 6be:	08 95       	ret

000006c0 <__fp_pscB>:
 6c0:	00 24       	eor	r0, r0
 6c2:	0a 94       	dec	r0
 6c4:	12 16       	cp	r1, r18
 6c6:	13 06       	cpc	r1, r19
 6c8:	14 06       	cpc	r1, r20
 6ca:	05 06       	cpc	r0, r21
 6cc:	08 95       	ret

000006ce <__fp_round>:
 6ce:	09 2e       	mov	r0, r25
 6d0:	03 94       	inc	r0
 6d2:	00 0c       	add	r0, r0
 6d4:	11 f4       	brne	.+4      	; 0x6da <__fp_round+0xc>
 6d6:	88 23       	and	r24, r24
 6d8:	52 f0       	brmi	.+20     	; 0x6ee <__fp_round+0x20>
 6da:	bb 0f       	add	r27, r27
 6dc:	40 f4       	brcc	.+16     	; 0x6ee <__fp_round+0x20>
 6de:	bf 2b       	or	r27, r31
 6e0:	11 f4       	brne	.+4      	; 0x6e6 <__fp_round+0x18>
 6e2:	60 ff       	sbrs	r22, 0
 6e4:	04 c0       	rjmp	.+8      	; 0x6ee <__fp_round+0x20>
 6e6:	6f 5f       	subi	r22, 0xFF	; 255
 6e8:	7f 4f       	sbci	r23, 0xFF	; 255
 6ea:	8f 4f       	sbci	r24, 0xFF	; 255
 6ec:	9f 4f       	sbci	r25, 0xFF	; 255
 6ee:	08 95       	ret

000006f0 <__fp_split3>:
 6f0:	57 fd       	sbrc	r21, 7
 6f2:	90 58       	subi	r25, 0x80	; 128
 6f4:	44 0f       	add	r20, r20
 6f6:	55 1f       	adc	r21, r21
 6f8:	59 f0       	breq	.+22     	; 0x710 <__fp_splitA+0x10>
 6fa:	5f 3f       	cpi	r21, 0xFF	; 255
 6fc:	71 f0       	breq	.+28     	; 0x71a <__fp_splitA+0x1a>
 6fe:	47 95       	ror	r20

00000700 <__fp_splitA>:
 700:	88 0f       	add	r24, r24
 702:	97 fb       	bst	r25, 7
 704:	99 1f       	adc	r25, r25
 706:	61 f0       	breq	.+24     	; 0x720 <__fp_splitA+0x20>
 708:	9f 3f       	cpi	r25, 0xFF	; 255
 70a:	79 f0       	breq	.+30     	; 0x72a <__fp_splitA+0x2a>
 70c:	87 95       	ror	r24
 70e:	08 95       	ret
 710:	12 16       	cp	r1, r18
 712:	13 06       	cpc	r1, r19
 714:	14 06       	cpc	r1, r20
 716:	55 1f       	adc	r21, r21
 718:	f2 cf       	rjmp	.-28     	; 0x6fe <__fp_split3+0xe>
 71a:	46 95       	lsr	r20
 71c:	f1 df       	rcall	.-30     	; 0x700 <__fp_splitA>
 71e:	08 c0       	rjmp	.+16     	; 0x730 <__fp_splitA+0x30>
 720:	16 16       	cp	r1, r22
 722:	17 06       	cpc	r1, r23
 724:	18 06       	cpc	r1, r24
 726:	99 1f       	adc	r25, r25
 728:	f1 cf       	rjmp	.-30     	; 0x70c <__fp_splitA+0xc>
 72a:	86 95       	lsr	r24
 72c:	71 05       	cpc	r23, r1
 72e:	61 05       	cpc	r22, r1
 730:	08 94       	sec
 732:	08 95       	ret

00000734 <__fp_zero>:
 734:	e8 94       	clt

00000736 <__fp_szero>:
 736:	bb 27       	eor	r27, r27
 738:	66 27       	eor	r22, r22
 73a:	77 27       	eor	r23, r23
 73c:	cb 01       	movw	r24, r22
 73e:	97 f9       	bld	r25, 7
 740:	08 95       	ret

00000742 <__mulsf3>:
 742:	0e 94 b4 03 	call	0x768	; 0x768 <__mulsf3x>
 746:	0c 94 67 03 	jmp	0x6ce	; 0x6ce <__fp_round>
 74a:	0e 94 59 03 	call	0x6b2	; 0x6b2 <__fp_pscA>
 74e:	38 f0       	brcs	.+14     	; 0x75e <__mulsf3+0x1c>
 750:	0e 94 60 03 	call	0x6c0	; 0x6c0 <__fp_pscB>
 754:	20 f0       	brcs	.+8      	; 0x75e <__mulsf3+0x1c>
 756:	95 23       	and	r25, r21
 758:	11 f0       	breq	.+4      	; 0x75e <__mulsf3+0x1c>
 75a:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__fp_inf>
 75e:	0c 94 56 03 	jmp	0x6ac	; 0x6ac <__fp_nan>
 762:	11 24       	eor	r1, r1
 764:	0c 94 9b 03 	jmp	0x736	; 0x736 <__fp_szero>

00000768 <__mulsf3x>:
 768:	0e 94 78 03 	call	0x6f0	; 0x6f0 <__fp_split3>
 76c:	70 f3       	brcs	.-36     	; 0x74a <__mulsf3+0x8>

0000076e <__mulsf3_pse>:
 76e:	95 9f       	mul	r25, r21
 770:	c1 f3       	breq	.-16     	; 0x762 <__mulsf3+0x20>
 772:	95 0f       	add	r25, r21
 774:	50 e0       	ldi	r21, 0x00	; 0
 776:	55 1f       	adc	r21, r21
 778:	62 9f       	mul	r22, r18
 77a:	f0 01       	movw	r30, r0
 77c:	72 9f       	mul	r23, r18
 77e:	bb 27       	eor	r27, r27
 780:	f0 0d       	add	r31, r0
 782:	b1 1d       	adc	r27, r1
 784:	63 9f       	mul	r22, r19
 786:	aa 27       	eor	r26, r26
 788:	f0 0d       	add	r31, r0
 78a:	b1 1d       	adc	r27, r1
 78c:	aa 1f       	adc	r26, r26
 78e:	64 9f       	mul	r22, r20
 790:	66 27       	eor	r22, r22
 792:	b0 0d       	add	r27, r0
 794:	a1 1d       	adc	r26, r1
 796:	66 1f       	adc	r22, r22
 798:	82 9f       	mul	r24, r18
 79a:	22 27       	eor	r18, r18
 79c:	b0 0d       	add	r27, r0
 79e:	a1 1d       	adc	r26, r1
 7a0:	62 1f       	adc	r22, r18
 7a2:	73 9f       	mul	r23, r19
 7a4:	b0 0d       	add	r27, r0
 7a6:	a1 1d       	adc	r26, r1
 7a8:	62 1f       	adc	r22, r18
 7aa:	83 9f       	mul	r24, r19
 7ac:	a0 0d       	add	r26, r0
 7ae:	61 1d       	adc	r22, r1
 7b0:	22 1f       	adc	r18, r18
 7b2:	74 9f       	mul	r23, r20
 7b4:	33 27       	eor	r19, r19
 7b6:	a0 0d       	add	r26, r0
 7b8:	61 1d       	adc	r22, r1
 7ba:	23 1f       	adc	r18, r19
 7bc:	84 9f       	mul	r24, r20
 7be:	60 0d       	add	r22, r0
 7c0:	21 1d       	adc	r18, r1
 7c2:	82 2f       	mov	r24, r18
 7c4:	76 2f       	mov	r23, r22
 7c6:	6a 2f       	mov	r22, r26
 7c8:	11 24       	eor	r1, r1
 7ca:	9f 57       	subi	r25, 0x7F	; 127
 7cc:	50 40       	sbci	r21, 0x00	; 0
 7ce:	9a f0       	brmi	.+38     	; 0x7f6 <__mulsf3_pse+0x88>
 7d0:	f1 f0       	breq	.+60     	; 0x80e <__mulsf3_pse+0xa0>
 7d2:	88 23       	and	r24, r24
 7d4:	4a f0       	brmi	.+18     	; 0x7e8 <__mulsf3_pse+0x7a>
 7d6:	ee 0f       	add	r30, r30
 7d8:	ff 1f       	adc	r31, r31
 7da:	bb 1f       	adc	r27, r27
 7dc:	66 1f       	adc	r22, r22
 7de:	77 1f       	adc	r23, r23
 7e0:	88 1f       	adc	r24, r24
 7e2:	91 50       	subi	r25, 0x01	; 1
 7e4:	50 40       	sbci	r21, 0x00	; 0
 7e6:	a9 f7       	brne	.-22     	; 0x7d2 <__mulsf3_pse+0x64>
 7e8:	9e 3f       	cpi	r25, 0xFE	; 254
 7ea:	51 05       	cpc	r21, r1
 7ec:	80 f0       	brcs	.+32     	; 0x80e <__mulsf3_pse+0xa0>
 7ee:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__fp_inf>
 7f2:	0c 94 9b 03 	jmp	0x736	; 0x736 <__fp_szero>
 7f6:	5f 3f       	cpi	r21, 0xFF	; 255
 7f8:	e4 f3       	brlt	.-8      	; 0x7f2 <__mulsf3_pse+0x84>
 7fa:	98 3e       	cpi	r25, 0xE8	; 232
 7fc:	d4 f3       	brlt	.-12     	; 0x7f2 <__mulsf3_pse+0x84>
 7fe:	86 95       	lsr	r24
 800:	77 95       	ror	r23
 802:	67 95       	ror	r22
 804:	b7 95       	ror	r27
 806:	f7 95       	ror	r31
 808:	e7 95       	ror	r30
 80a:	9f 5f       	subi	r25, 0xFF	; 255
 80c:	c1 f7       	brne	.-16     	; 0x7fe <__mulsf3_pse+0x90>
 80e:	fe 2b       	or	r31, r30
 810:	88 0f       	add	r24, r24
 812:	91 1d       	adc	r25, r1
 814:	96 95       	lsr	r25
 816:	87 95       	ror	r24
 818:	97 f9       	bld	r25, 7
 81a:	08 95       	ret

0000081c <__vector_16>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
 81c:	1f 92       	push	r1
 81e:	0f 92       	push	r0
 820:	0f b6       	in	r0, 0x3f	; 63
 822:	0f 92       	push	r0
 824:	11 24       	eor	r1, r1
 826:	2f 93       	push	r18
 828:	3f 93       	push	r19
 82a:	8f 93       	push	r24
 82c:	9f 93       	push	r25
 82e:	af 93       	push	r26
 830:	bf 93       	push	r27
 832:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <timer0_millis>
 836:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <timer0_millis+0x1>
 83a:	a0 91 1d 01 	lds	r26, 0x011D	; 0x80011d <timer0_millis+0x2>
 83e:	b0 91 1e 01 	lds	r27, 0x011E	; 0x80011e <timer0_millis+0x3>
 842:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <timer0_fract>
 846:	23 e0       	ldi	r18, 0x03	; 3
 848:	23 0f       	add	r18, r19
 84a:	2d 37       	cpi	r18, 0x7D	; 125
 84c:	20 f4       	brcc	.+8      	; 0x856 <__vector_16+0x3a>
 84e:	01 96       	adiw	r24, 0x01	; 1
 850:	a1 1d       	adc	r26, r1
 852:	b1 1d       	adc	r27, r1
 854:	05 c0       	rjmp	.+10     	; 0x860 <__vector_16+0x44>
 856:	26 e8       	ldi	r18, 0x86	; 134
 858:	23 0f       	add	r18, r19
 85a:	02 96       	adiw	r24, 0x02	; 2
 85c:	a1 1d       	adc	r26, r1
 85e:	b1 1d       	adc	r27, r1
 860:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <timer0_fract>
 864:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <timer0_millis>
 868:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <timer0_millis+0x1>
 86c:	a0 93 1d 01 	sts	0x011D, r26	; 0x80011d <timer0_millis+0x2>
 870:	b0 93 1e 01 	sts	0x011E, r27	; 0x80011e <timer0_millis+0x3>
 874:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <timer0_overflow_count>
 878:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <timer0_overflow_count+0x1>
 87c:	a0 91 21 01 	lds	r26, 0x0121	; 0x800121 <timer0_overflow_count+0x2>
 880:	b0 91 22 01 	lds	r27, 0x0122	; 0x800122 <timer0_overflow_count+0x3>
 884:	01 96       	adiw	r24, 0x01	; 1
 886:	a1 1d       	adc	r26, r1
 888:	b1 1d       	adc	r27, r1
 88a:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <timer0_overflow_count>
 88e:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <timer0_overflow_count+0x1>
 892:	a0 93 21 01 	sts	0x0121, r26	; 0x800121 <timer0_overflow_count+0x2>
 896:	b0 93 22 01 	sts	0x0122, r27	; 0x800122 <timer0_overflow_count+0x3>
 89a:	bf 91       	pop	r27
 89c:	af 91       	pop	r26
 89e:	9f 91       	pop	r25
 8a0:	8f 91       	pop	r24
 8a2:	3f 91       	pop	r19
 8a4:	2f 91       	pop	r18
 8a6:	0f 90       	pop	r0
 8a8:	0f be       	out	0x3f, r0	; 63
 8aa:	0f 90       	pop	r0
 8ac:	1f 90       	pop	r1
 8ae:	18 95       	reti

000008b0 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
 8b0:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
 8b2:	f8 94       	cli
	m = timer0_overflow_count;
 8b4:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <timer0_overflow_count>
 8b8:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <timer0_overflow_count+0x1>
 8bc:	a0 91 21 01 	lds	r26, 0x0121	; 0x800121 <timer0_overflow_count+0x2>
 8c0:	b0 91 22 01 	lds	r27, 0x0122	; 0x800122 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
 8c4:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 8c6:	a8 9b       	sbis	0x15, 0	; 21
 8c8:	05 c0       	rjmp	.+10     	; 0x8d4 <micros+0x24>
 8ca:	2f 3f       	cpi	r18, 0xFF	; 255
 8cc:	19 f0       	breq	.+6      	; 0x8d4 <micros+0x24>
		m++;
 8ce:	01 96       	adiw	r24, 0x01	; 1
 8d0:	a1 1d       	adc	r26, r1
 8d2:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
 8d4:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
 8d6:	ba 2f       	mov	r27, r26
 8d8:	a9 2f       	mov	r26, r25
 8da:	98 2f       	mov	r25, r24
 8dc:	88 27       	eor	r24, r24
 8de:	82 0f       	add	r24, r18
 8e0:	91 1d       	adc	r25, r1
 8e2:	a1 1d       	adc	r26, r1
 8e4:	b1 1d       	adc	r27, r1
 8e6:	bc 01       	movw	r22, r24
 8e8:	cd 01       	movw	r24, r26
 8ea:	42 e0       	ldi	r20, 0x02	; 2
 8ec:	66 0f       	add	r22, r22
 8ee:	77 1f       	adc	r23, r23
 8f0:	88 1f       	adc	r24, r24
 8f2:	99 1f       	adc	r25, r25
 8f4:	4a 95       	dec	r20
 8f6:	d1 f7       	brne	.-12     	; 0x8ec <micros+0x3c>
}
 8f8:	08 95       	ret

000008fa <delay>:

void delay(unsigned long ms)
{
 8fa:	cf 92       	push	r12
 8fc:	df 92       	push	r13
 8fe:	ef 92       	push	r14
 900:	ff 92       	push	r15
 902:	cf 93       	push	r28
 904:	df 93       	push	r29
 906:	6b 01       	movw	r12, r22
 908:	7c 01       	movw	r14, r24
	uint16_t start = (uint16_t)micros();
 90a:	0e 94 58 04 	call	0x8b0	; 0x8b0 <micros>
 90e:	eb 01       	movw	r28, r22

	while (ms > 0) {
 910:	c1 14       	cp	r12, r1
 912:	d1 04       	cpc	r13, r1
 914:	e1 04       	cpc	r14, r1
 916:	f1 04       	cpc	r15, r1
 918:	89 f0       	breq	.+34     	; 0x93c <__stack+0x3d>
		yield();
 91a:	0e 94 39 05 	call	0xa72	; 0xa72 <yield>
		if (((uint16_t)micros() - start) >= 1000) {
 91e:	0e 94 58 04 	call	0x8b0	; 0x8b0 <micros>
 922:	6c 1b       	sub	r22, r28
 924:	7d 0b       	sbc	r23, r29
 926:	68 3e       	cpi	r22, 0xE8	; 232
 928:	73 40       	sbci	r23, 0x03	; 3
 92a:	90 f3       	brcs	.-28     	; 0x910 <__stack+0x11>
			ms--;
 92c:	81 e0       	ldi	r24, 0x01	; 1
 92e:	c8 1a       	sub	r12, r24
 930:	d1 08       	sbc	r13, r1
 932:	e1 08       	sbc	r14, r1
 934:	f1 08       	sbc	r15, r1
			start += 1000;
 936:	c8 51       	subi	r28, 0x18	; 24
 938:	dc 4f       	sbci	r29, 0xFC	; 252
 93a:	ea cf       	rjmp	.-44     	; 0x910 <__stack+0x11>
		}
	}
}
 93c:	df 91       	pop	r29
 93e:	cf 91       	pop	r28
 940:	ff 90       	pop	r15
 942:	ef 90       	pop	r14
 944:	df 90       	pop	r13
 946:	cf 90       	pop	r12
 948:	08 95       	ret

0000094a <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 94a:	83 30       	cpi	r24, 0x03	; 3
 94c:	81 f0       	breq	.+32     	; 0x96e <turnOffPWM+0x24>
 94e:	28 f4       	brcc	.+10     	; 0x95a <turnOffPWM+0x10>
 950:	81 30       	cpi	r24, 0x01	; 1
 952:	99 f0       	breq	.+38     	; 0x97a <turnOffPWM+0x30>
 954:	82 30       	cpi	r24, 0x02	; 2
 956:	a1 f0       	breq	.+40     	; 0x980 <turnOffPWM+0x36>
 958:	08 95       	ret
 95a:	87 30       	cpi	r24, 0x07	; 7
 95c:	a9 f0       	breq	.+42     	; 0x988 <turnOffPWM+0x3e>
 95e:	88 30       	cpi	r24, 0x08	; 8
 960:	b9 f0       	breq	.+46     	; 0x990 <turnOffPWM+0x46>
 962:	84 30       	cpi	r24, 0x04	; 4
 964:	d1 f4       	brne	.+52     	; 0x99a <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 966:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 96a:	8f 7d       	andi	r24, 0xDF	; 223
 96c:	03 c0       	rjmp	.+6      	; 0x974 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 96e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 972:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 974:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 978:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 97a:	84 b5       	in	r24, 0x24	; 36
 97c:	8f 77       	andi	r24, 0x7F	; 127
 97e:	02 c0       	rjmp	.+4      	; 0x984 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 980:	84 b5       	in	r24, 0x24	; 36
 982:	8f 7d       	andi	r24, 0xDF	; 223
 984:	84 bd       	out	0x24, r24	; 36
 986:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 988:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 98c:	8f 77       	andi	r24, 0x7F	; 127
 98e:	03 c0       	rjmp	.+6      	; 0x996 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 990:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 994:	8f 7d       	andi	r24, 0xDF	; 223
 996:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 99a:	08 95       	ret

0000099c <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 99c:	cf 93       	push	r28
 99e:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 9a0:	90 e0       	ldi	r25, 0x00	; 0
 9a2:	fc 01       	movw	r30, r24
 9a4:	e4 58       	subi	r30, 0x84	; 132
 9a6:	ff 4f       	sbci	r31, 0xFF	; 255
 9a8:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 9aa:	fc 01       	movw	r30, r24
 9ac:	e0 57       	subi	r30, 0x70	; 112
 9ae:	ff 4f       	sbci	r31, 0xFF	; 255
 9b0:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 9b2:	88 23       	and	r24, r24
 9b4:	61 f1       	breq	.+88     	; 0xa0e <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 9b6:	90 e0       	ldi	r25, 0x00	; 0
 9b8:	88 0f       	add	r24, r24
 9ba:	99 1f       	adc	r25, r25
 9bc:	fc 01       	movw	r30, r24
 9be:	e2 55       	subi	r30, 0x52	; 82
 9c0:	ff 4f       	sbci	r31, 0xFF	; 255
 9c2:	c5 91       	lpm	r28, Z+
 9c4:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 9c6:	fc 01       	movw	r30, r24
 9c8:	ec 55       	subi	r30, 0x5C	; 92
 9ca:	ff 4f       	sbci	r31, 0xFF	; 255
 9cc:	a5 91       	lpm	r26, Z+
 9ce:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 9d0:	61 11       	cpse	r22, r1
 9d2:	09 c0       	rjmp	.+18     	; 0x9e6 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 9d4:	9f b7       	in	r25, 0x3f	; 63
                cli();
 9d6:	f8 94       	cli
		*reg &= ~bit;
 9d8:	88 81       	ld	r24, Y
 9da:	20 95       	com	r18
 9dc:	82 23       	and	r24, r18
 9de:	88 83       	st	Y, r24
		*out &= ~bit;
 9e0:	ec 91       	ld	r30, X
 9e2:	2e 23       	and	r18, r30
 9e4:	0b c0       	rjmp	.+22     	; 0x9fc <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 9e6:	62 30       	cpi	r22, 0x02	; 2
 9e8:	61 f4       	brne	.+24     	; 0xa02 <pinMode+0x66>
		uint8_t oldSREG = SREG;
 9ea:	9f b7       	in	r25, 0x3f	; 63
                cli();
 9ec:	f8 94       	cli
		*reg &= ~bit;
 9ee:	88 81       	ld	r24, Y
 9f0:	32 2f       	mov	r19, r18
 9f2:	30 95       	com	r19
 9f4:	83 23       	and	r24, r19
 9f6:	88 83       	st	Y, r24
		*out |= bit;
 9f8:	ec 91       	ld	r30, X
 9fa:	2e 2b       	or	r18, r30
 9fc:	2c 93       	st	X, r18
		SREG = oldSREG;
 9fe:	9f bf       	out	0x3f, r25	; 63
 a00:	06 c0       	rjmp	.+12     	; 0xa0e <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 a02:	8f b7       	in	r24, 0x3f	; 63
                cli();
 a04:	f8 94       	cli
		*reg |= bit;
 a06:	e8 81       	ld	r30, Y
 a08:	2e 2b       	or	r18, r30
 a0a:	28 83       	st	Y, r18
		SREG = oldSREG;
 a0c:	8f bf       	out	0x3f, r24	; 63
	}
}
 a0e:	df 91       	pop	r29
 a10:	cf 91       	pop	r28
 a12:	08 95       	ret

00000a14 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 a14:	1f 93       	push	r17
 a16:	cf 93       	push	r28
 a18:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 a1a:	28 2f       	mov	r18, r24
 a1c:	30 e0       	ldi	r19, 0x00	; 0
 a1e:	f9 01       	movw	r30, r18
 a20:	e8 59       	subi	r30, 0x98	; 152
 a22:	ff 4f       	sbci	r31, 0xFF	; 255
 a24:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 a26:	f9 01       	movw	r30, r18
 a28:	e4 58       	subi	r30, 0x84	; 132
 a2a:	ff 4f       	sbci	r31, 0xFF	; 255
 a2c:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 a2e:	f9 01       	movw	r30, r18
 a30:	e0 57       	subi	r30, 0x70	; 112
 a32:	ff 4f       	sbci	r31, 0xFF	; 255
 a34:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 a36:	cc 23       	and	r28, r28
 a38:	c1 f0       	breq	.+48     	; 0xa6a <digitalWrite+0x56>
 a3a:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 a3c:	81 11       	cpse	r24, r1
 a3e:	0e 94 a5 04 	call	0x94a	; 0x94a <turnOffPWM>

	out = portOutputRegister(port);
 a42:	ec 2f       	mov	r30, r28
 a44:	f0 e0       	ldi	r31, 0x00	; 0
 a46:	ee 0f       	add	r30, r30
 a48:	ff 1f       	adc	r31, r31
 a4a:	ec 55       	subi	r30, 0x5C	; 92
 a4c:	ff 4f       	sbci	r31, 0xFF	; 255
 a4e:	a5 91       	lpm	r26, Z+
 a50:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 a52:	9f b7       	in	r25, 0x3f	; 63
	cli();
 a54:	f8 94       	cli

	if (val == LOW) {
 a56:	11 11       	cpse	r17, r1
 a58:	04 c0       	rjmp	.+8      	; 0xa62 <digitalWrite+0x4e>
		*out &= ~bit;
 a5a:	8c 91       	ld	r24, X
 a5c:	d0 95       	com	r29
 a5e:	d8 23       	and	r29, r24
 a60:	02 c0       	rjmp	.+4      	; 0xa66 <digitalWrite+0x52>
	} else {
		*out |= bit;
 a62:	ec 91       	ld	r30, X
 a64:	de 2b       	or	r29, r30
 a66:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
 a68:	9f bf       	out	0x3f, r25	; 63
}
 a6a:	df 91       	pop	r29
 a6c:	cf 91       	pop	r28
 a6e:	1f 91       	pop	r17
 a70:	08 95       	ret

00000a72 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 a72:	08 95       	ret

00000a74 <__muluhisi3>:
 a74:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__umulhisi3>
 a78:	a5 9f       	mul	r26, r21
 a7a:	90 0d       	add	r25, r0
 a7c:	b4 9f       	mul	r27, r20
 a7e:	90 0d       	add	r25, r0
 a80:	a4 9f       	mul	r26, r20
 a82:	80 0d       	add	r24, r0
 a84:	91 1d       	adc	r25, r1
 a86:	11 24       	eor	r1, r1
 a88:	08 95       	ret

00000a8a <__mulshisi3>:
 a8a:	b7 ff       	sbrs	r27, 7
 a8c:	0c 94 3a 05 	jmp	0xa74	; 0xa74 <__muluhisi3>

00000a90 <__mulohisi3>:
 a90:	0e 94 3a 05 	call	0xa74	; 0xa74 <__muluhisi3>
 a94:	82 1b       	sub	r24, r18
 a96:	93 0b       	sbc	r25, r19
 a98:	08 95       	ret

00000a9a <__tablejump2__>:
 a9a:	ee 0f       	add	r30, r30
 a9c:	ff 1f       	adc	r31, r31
 a9e:	05 90       	lpm	r0, Z+
 aa0:	f4 91       	lpm	r31, Z
 aa2:	e0 2d       	mov	r30, r0
 aa4:	09 94       	ijmp

00000aa6 <__umulhisi3>:
 aa6:	a2 9f       	mul	r26, r18
 aa8:	b0 01       	movw	r22, r0
 aaa:	b3 9f       	mul	r27, r19
 aac:	c0 01       	movw	r24, r0
 aae:	a3 9f       	mul	r26, r19
 ab0:	70 0d       	add	r23, r0
 ab2:	81 1d       	adc	r24, r1
 ab4:	11 24       	eor	r1, r1
 ab6:	91 1d       	adc	r25, r1
 ab8:	b2 9f       	mul	r27, r18
 aba:	70 0d       	add	r23, r0
 abc:	81 1d       	adc	r24, r1
 abe:	11 24       	eor	r1, r1
 ac0:	91 1d       	adc	r25, r1
 ac2:	08 95       	ret

00000ac4 <_exit>:
 ac4:	f8 94       	cli

00000ac6 <__stop_program>:
 ac6:	ff cf       	rjmp	.-2      	; 0xac6 <__stop_program>
