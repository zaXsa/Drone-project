
move_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  000013ca  0000145e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c5  0080012c  0080012c  0000148a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000148a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000014bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000390  00000000  00000000  000014fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b77c  00000000  00000000  0000188c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001ffb  00000000  00000000  0000d008  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000020d7  00000000  00000000  0000f003  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c40  00000000  00000000  000110dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000021b2  00000000  00000000  00011d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004ad0  00000000  00000000  00013ece  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000368  00000000  00000000  0001899e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__ctors_end>
       4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
       8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
       c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      14:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      40:	0c 94 fd 07 	jmp	0xffa	; 0xffa <__vector_16>
      44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      48:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__vector_18>
      4c:	0c 94 d1 05 	jmp	0xba2	; 0xba2 <__vector_19>
      50:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      54:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      60:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
      a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
      ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
      b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <__ctors_start>:
      c2:	b7 00       	.word	0x00b7	; ????
      c4:	01 06       	cpc	r0, r17

000000c6 <__ctors_end>:
      c6:	11 24       	eor	r1, r1
      c8:	1f be       	out	0x3f, r1	; 63
      ca:	cf ef       	ldi	r28, 0xFF	; 255
      cc:	d8 e0       	ldi	r29, 0x08	; 8
      ce:	de bf       	out	0x3e, r29	; 62
      d0:	cd bf       	out	0x3d, r28	; 61

000000d2 <__do_copy_data>:
      d2:	11 e0       	ldi	r17, 0x01	; 1
      d4:	a0 e0       	ldi	r26, 0x00	; 0
      d6:	b1 e0       	ldi	r27, 0x01	; 1
      d8:	ea ec       	ldi	r30, 0xCA	; 202
      da:	f3 e1       	ldi	r31, 0x13	; 19
      dc:	02 c0       	rjmp	.+4      	; 0xe2 <__do_copy_data+0x10>
      de:	05 90       	lpm	r0, Z+
      e0:	0d 92       	st	X+, r0
      e2:	ac 32       	cpi	r26, 0x2C	; 44
      e4:	b1 07       	cpc	r27, r17
      e6:	d9 f7       	brne	.-10     	; 0xde <__do_copy_data+0xc>

000000e8 <__do_clear_bss>:
      e8:	21 e0       	ldi	r18, 0x01	; 1
      ea:	ac e2       	ldi	r26, 0x2C	; 44
      ec:	b1 e0       	ldi	r27, 0x01	; 1
      ee:	01 c0       	rjmp	.+2      	; 0xf2 <.do_clear_bss_start>

000000f0 <.do_clear_bss_loop>:
      f0:	1d 92       	st	X+, r1

000000f2 <.do_clear_bss_start>:
      f2:	a1 3f       	cpi	r26, 0xF1	; 241
      f4:	b2 07       	cpc	r27, r18
      f6:	e1 f7       	brne	.-8      	; 0xf0 <.do_clear_bss_loop>

000000f8 <__do_global_ctors>:
      f8:	10 e0       	ldi	r17, 0x00	; 0
      fa:	c3 e6       	ldi	r28, 0x63	; 99
      fc:	d0 e0       	ldi	r29, 0x00	; 0
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__do_global_ctors+0x10>
     100:	21 97       	sbiw	r28, 0x01	; 1
     102:	fe 01       	movw	r30, r28
     104:	0e 94 ce 09 	call	0x139c	; 0x139c <__tablejump2__>
     108:	c1 36       	cpi	r28, 0x61	; 97
     10a:	d1 07       	cpc	r29, r17
     10c:	c9 f7       	brne	.-14     	; 0x100 <__do_global_ctors+0x8>
     10e:	0e 94 2f 06 	call	0xc5e	; 0xc5e <main>
     112:	0c 94 e3 09 	jmp	0x13c6	; 0x13c6 <_exit>

00000116 <__bad_interrupt>:
     116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     11a:	26 e0       	ldi	r18, 0x06	; 6
     11c:	40 e8       	ldi	r20, 0x80	; 128
     11e:	55 e2       	ldi	r21, 0x25	; 37
     120:	60 e0       	ldi	r22, 0x00	; 0
     122:	70 e0       	ldi	r23, 0x00	; 0
     124:	8b e4       	ldi	r24, 0x4B	; 75
     126:	91 e0       	ldi	r25, 0x01	; 1
     128:	0e 94 3a 05 	call	0xa74	; 0xa74 <_ZN14HardwareSerial5beginEmh>
int ParsedInt, ParseInted;
char C;

void setup() { 
	Serial.begin(9600);
	Serial.print("Serial Test\n");
     12c:	60 e0       	ldi	r22, 0x00	; 0
     12e:	71 e0       	ldi	r23, 0x01	; 1
     130:	8b e4       	ldi	r24, 0x4B	; 75
     132:	91 e0       	ldi	r25, 0x01	; 1
     134:	0e 94 7d 06 	call	0xcfa	; 0xcfa <_ZN5Print5printEPKc>

	pinMode(inPin, INPUT);        // sets the digital pin 8 as input
     138:	60 e0       	ldi	r22, 0x00	; 0
     13a:	88 e0       	ldi	r24, 0x08	; 8
     13c:	0e 94 04 09 	call	0x1208	; 0x1208 <pinMode>

	ss.setSpeed(160);
     140:	40 e0       	ldi	r20, 0x00	; 0
     142:	50 e0       	ldi	r21, 0x00	; 0
     144:	60 e2       	ldi	r22, 0x20	; 32
     146:	73 e4       	ldi	r23, 0x43	; 67
     148:	81 e3       	ldi	r24, 0x31	; 49
     14a:	91 e0       	ldi	r25, 0x01	; 1
     14c:	0e 94 94 01 	call	0x328	; 0x328 <_ZN13StepperDriver8setSpeedEf>
	ss.powerEnable(true);
     150:	61 e0       	ldi	r22, 0x01	; 1
     152:	81 e3       	ldi	r24, 0x31	; 49
     154:	91 e0       	ldi	r25, 0x01	; 1
     156:	0e 94 ce 01 	call	0x39c	; 0x39c <_ZN13StepperDriver11powerEnableEb>
	ss.positioning();
     15a:	81 e3       	ldi	r24, 0x31	; 49
     15c:	91 e0       	ldi	r25, 0x01	; 1
     15e:	0e 94 9b 02 	call	0x536	; 0x536 <_ZN13StepperDriver11positioningEv>
	delay(1600);
     162:	60 e4       	ldi	r22, 0x40	; 64
     164:	76 e0       	ldi	r23, 0x06	; 6
     166:	80 e0       	ldi	r24, 0x00	; 0
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	0c 94 78 08 	jmp	0x10f0	; 0x10f0 <delay>

0000016e <_GLOBAL__sub_I_ss>:
	//	StepsTaken += 1;
	//	ss.step(1);
	//}

	delay(200);
     16e:	ef 92       	push	r14
     170:	ff 92       	push	r15
     172:	0f 93       	push	r16
     174:	1f 93       	push	r17
#define en_pin 5
#define cw_pin 6
#define clk_pin 7
#define inPin 8

StepperDriver ss(motor_steps, step_divisition, en_pin, cw_pin, clk_pin);  
     176:	87 e0       	ldi	r24, 0x07	; 7
     178:	e8 2e       	mov	r14, r24
     17a:	f1 2c       	mov	r15, r1
     17c:	06 e0       	ldi	r16, 0x06	; 6
     17e:	10 e0       	ldi	r17, 0x00	; 0
     180:	25 e0       	ldi	r18, 0x05	; 5
     182:	30 e0       	ldi	r19, 0x00	; 0
     184:	40 e1       	ldi	r20, 0x10	; 16
     186:	50 e0       	ldi	r21, 0x00	; 0
     188:	68 ec       	ldi	r22, 0xC8	; 200
     18a:	70 e0       	ldi	r23, 0x00	; 0
     18c:	81 e3       	ldi	r24, 0x31	; 49
     18e:	91 e0       	ldi	r25, 0x01	; 1
     190:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_ZN13StepperDriverC1Eiiiii>
	//	StepsTaken += 1;
	//	ss.step(1);
	//}

	delay(200);
     194:	1f 91       	pop	r17
     196:	0f 91       	pop	r16
     198:	ff 90       	pop	r15
     19a:	ef 90       	pop	r14
     19c:	08 95       	ret

0000019e <loop>:
	ss.positioning();
	delay(1600);
}

void loop() {
	C = Serial.read();
     19e:	8b e4       	ldi	r24, 0x4B	; 75
     1a0:	91 e0       	ldi	r25, 0x01	; 1
     1a2:	0e 94 8e 04 	call	0x91c	; 0x91c <_ZN14HardwareSerial4readEv>

	if (C == 'x'){
     1a6:	88 37       	cpi	r24, 0x78	; 120
     1a8:	09 f0       	breq	.+2      	; 0x1ac <loop+0xe>
     1aa:	5b c0       	rjmp	.+182    	; 0x262 <loop+0xc4>
		C = 'Z';
     1ac:	8a e5       	ldi	r24, 0x5A	; 90
     1ae:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__data_end>
		StepsTaken = 0;
     1b2:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <StepsTaken+0x1>
     1b6:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <StepsTaken>
		ParsedInt = Serial.parseInt();
     1ba:	41 e0       	ldi	r20, 0x01	; 1
     1bc:	60 e0       	ldi	r22, 0x00	; 0
     1be:	8b e4       	ldi	r24, 0x4B	; 75
     1c0:	91 e0       	ldi	r25, 0x01	; 1
     1c2:	0e 94 97 07 	call	0xf2e	; 0xf2e <_ZN6Stream8parseIntE13LookaheadModec>
     1c6:	70 93 2e 01 	sts	0x012E, r23	; 0x80012e <ParsedInt+0x1>
     1ca:	60 93 2d 01 	sts	0x012D, r22	; 0x80012d <ParsedInt>
		Serial.print(ParsedInt);
     1ce:	4a e0       	ldi	r20, 0x0A	; 10
     1d0:	50 e0       	ldi	r21, 0x00	; 0
     1d2:	8b e4       	ldi	r24, 0x4B	; 75
     1d4:	91 e0       	ldi	r25, 0x01	; 1
     1d6:	0e 94 24 07 	call	0xe48	; 0xe48 <_ZN5Print5printEii>
		Serial.print("\n");
     1da:	69 e1       	ldi	r22, 0x19	; 25
     1dc:	71 e0       	ldi	r23, 0x01	; 1
     1de:	8b e4       	ldi	r24, 0x4B	; 75
     1e0:	91 e0       	ldi	r25, 0x01	; 1
     1e2:	0e 94 7d 06 	call	0xcfa	; 0xcfa <_ZN5Print5printEPKc>
		for (ParsedInt; ParsedInt > 0; ParsedInt--){
     1e6:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <ParsedInt>
     1ea:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <ParsedInt+0x1>
     1ee:	18 16       	cp	r1, r24
     1f0:	19 06       	cpc	r1, r25
     1f2:	0c f0       	brlt	.+2      	; 0x1f6 <loop+0x58>
     1f4:	60 c0       	rjmp	.+192    	; 0x2b6 <loop+0x118>
			if (!digitalRead(8)){
     1f6:	88 e0       	ldi	r24, 0x08	; 8
     1f8:	0e 94 6f 09 	call	0x12de	; 0x12de <digitalRead>
     1fc:	89 2b       	or	r24, r25
     1fe:	39 f5       	brne	.+78     	; 0x24e <loop+0xb0>
			StepsTaken += 1;
     200:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <StepsTaken>
     204:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <StepsTaken+0x1>
     208:	01 96       	adiw	r24, 0x01	; 1
     20a:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <StepsTaken+0x1>
     20e:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <StepsTaken>
			ss.step(1);
     212:	41 e0       	ldi	r20, 0x01	; 1
     214:	50 e0       	ldi	r21, 0x00	; 0
     216:	60 e0       	ldi	r22, 0x00	; 0
     218:	70 e0       	ldi	r23, 0x00	; 0
     21a:	81 e3       	ldi	r24, 0x31	; 49
     21c:	91 e0       	ldi	r25, 0x01	; 1
     21e:	0e 94 5f 02 	call	0x4be	; 0x4be <_ZN13StepperDriver4stepEl>
			Serial.print(StepsTaken);
     222:	60 91 2f 01 	lds	r22, 0x012F	; 0x80012f <StepsTaken>
     226:	70 91 30 01 	lds	r23, 0x0130	; 0x800130 <StepsTaken+0x1>
     22a:	4a e0       	ldi	r20, 0x0A	; 10
     22c:	50 e0       	ldi	r21, 0x00	; 0
     22e:	8b e4       	ldi	r24, 0x4B	; 75
     230:	91 e0       	ldi	r25, 0x01	; 1
     232:	0e 94 24 07 	call	0xe48	; 0xe48 <_ZN5Print5printEii>
			Serial.print(" Taken steps\n");
     236:	6d e0       	ldi	r22, 0x0D	; 13
     238:	71 e0       	ldi	r23, 0x01	; 1
     23a:	8b e4       	ldi	r24, 0x4B	; 75
     23c:	91 e0       	ldi	r25, 0x01	; 1
     23e:	0e 94 7d 06 	call	0xcfa	; 0xcfa <_ZN5Print5printEPKc>
			delay(20);
     242:	64 e1       	ldi	r22, 0x14	; 20
     244:	70 e0       	ldi	r23, 0x00	; 0
     246:	80 e0       	ldi	r24, 0x00	; 0
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	0e 94 78 08 	call	0x10f0	; 0x10f0 <delay>
		C = 'Z';
		StepsTaken = 0;
		ParsedInt = Serial.parseInt();
		Serial.print(ParsedInt);
		Serial.print("\n");
		for (ParsedInt; ParsedInt > 0; ParsedInt--){
     24e:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <ParsedInt>
     252:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <ParsedInt+0x1>
     256:	01 97       	sbiw	r24, 0x01	; 1
     258:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <ParsedInt+0x1>
     25c:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <ParsedInt>
     260:	c2 cf       	rjmp	.-124    	; 0x1e6 <loop+0x48>
			Serial.print(StepsTaken);
			Serial.print(" Taken steps\n");
			delay(20);
			}
		}
	} else if (C == 'y'){
     262:	89 37       	cpi	r24, 0x79	; 121
     264:	19 f0       	breq	.+6      	; 0x26c <loop+0xce>
	ss.positioning();
	delay(1600);
}

void loop() {
	C = Serial.read();
     266:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__data_end>
     26a:	25 c0       	rjmp	.+74     	; 0x2b6 <loop+0x118>
			Serial.print(" Taken steps\n");
			delay(20);
			}
		}
	} else if (C == 'y'){
		C = 'Z';
     26c:	8a e5       	ldi	r24, 0x5A	; 90
     26e:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__data_end>
		ParsedInt = Serial.parseInt();
     272:	41 e0       	ldi	r20, 0x01	; 1
     274:	60 e0       	ldi	r22, 0x00	; 0
     276:	8b e4       	ldi	r24, 0x4B	; 75
     278:	91 e0       	ldi	r25, 0x01	; 1
     27a:	0e 94 97 07 	call	0xf2e	; 0xf2e <_ZN6Stream8parseIntE13LookaheadModec>
     27e:	70 93 2e 01 	sts	0x012E, r23	; 0x80012e <ParsedInt+0x1>
     282:	60 93 2d 01 	sts	0x012D, r22	; 0x80012d <ParsedInt>
		for (ParsedInt; ParsedInt > 0; ParsedInt--){
     286:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <ParsedInt>
     28a:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <ParsedInt+0x1>
     28e:	18 16       	cp	r1, r24
     290:	19 06       	cpc	r1, r25
     292:	8c f4       	brge	.+34     	; 0x2b6 <loop+0x118>
			ss.step(-1);
     294:	4f ef       	ldi	r20, 0xFF	; 255
     296:	5f ef       	ldi	r21, 0xFF	; 255
     298:	ba 01       	movw	r22, r20
     29a:	81 e3       	ldi	r24, 0x31	; 49
     29c:	91 e0       	ldi	r25, 0x01	; 1
     29e:	0e 94 5f 02 	call	0x4be	; 0x4be <_ZN13StepperDriver4stepEl>
			}
		}
	} else if (C == 'y'){
		C = 'Z';
		ParsedInt = Serial.parseInt();
		for (ParsedInt; ParsedInt > 0; ParsedInt--){
     2a2:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <ParsedInt>
     2a6:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <ParsedInt+0x1>
     2aa:	01 97       	sbiw	r24, 0x01	; 1
     2ac:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <ParsedInt+0x1>
     2b0:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <ParsedInt>
     2b4:	e8 cf       	rjmp	.-48     	; 0x286 <loop+0xe8>
	//if (!digitalRead(8)){
	//	StepsTaken += 1;
	//	ss.step(1);
	//}

	delay(200);
     2b6:	68 ec       	ldi	r22, 0xC8	; 200
     2b8:	70 e0       	ldi	r23, 0x00	; 0
     2ba:	80 e0       	ldi	r24, 0x00	; 0
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	0c 94 78 08 	jmp	0x10f0	; 0x10f0 <delay>

000002c2 <_ZN13StepperDriverC1Eiiiii>:
#include "Arduino.h"
#include "StepperDriver.h"


StepperDriver::StepperDriver(int number_of_steps, int step_division, int en_pin, int cw_pin, int clk_pin)
     2c2:	ef 92       	push	r14
     2c4:	ff 92       	push	r15
     2c6:	0f 93       	push	r16
     2c8:	1f 93       	push	r17
     2ca:	fc 01       	movw	r30, r24
     2cc:	82 2f       	mov	r24, r18
{
	this->number_of_steps = number_of_steps;
     2ce:	71 83       	std	Z+1, r23	; 0x01
     2d0:	60 83       	st	Z, r22
  this->step_division = step_division;
     2d2:	53 83       	std	Z+3, r21	; 0x03
     2d4:	42 83       	std	Z+2, r20	; 0x02
  this->step_interval = 10000;
     2d6:	40 e1       	ldi	r20, 0x10	; 16
     2d8:	57 e2       	ldi	r21, 0x27	; 39
     2da:	60 e0       	ldi	r22, 0x00	; 0
     2dc:	70 e0       	ldi	r23, 0x00	; 0
     2de:	44 83       	std	Z+4, r20	; 0x04
     2e0:	55 83       	std	Z+5, r21	; 0x05
     2e2:	66 83       	std	Z+6, r22	; 0x06
     2e4:	77 83       	std	Z+7, r23	; 0x07
  this->last_step_time = 0;
     2e6:	10 86       	std	Z+8, r1	; 0x08
     2e8:	11 86       	std	Z+9, r1	; 0x09
     2ea:	12 86       	std	Z+10, r1	; 0x0a
     2ec:	13 86       	std	Z+11, r1	; 0x0b
  this->target_step_time1 = 0;
     2ee:	14 86       	std	Z+12, r1	; 0x0c
     2f0:	15 86       	std	Z+13, r1	; 0x0d
     2f2:	16 86       	std	Z+14, r1	; 0x0e
     2f4:	17 86       	std	Z+15, r1	; 0x0f
  this->target_step_time2 = 0;
     2f6:	10 8a       	std	Z+16, r1	; 0x10
     2f8:	11 8a       	std	Z+17, r1	; 0x11
     2fa:	12 8a       	std	Z+18, r1	; 0x12
     2fc:	13 8a       	std	Z+19, r1	; 0x13
  
  // Arduino pins for the motor control connection:
  this->en_pin = en_pin;
     2fe:	24 8b       	std	Z+20, r18	; 0x14
     300:	35 8b       	std	Z+21, r19	; 0x15
  this->cw_pin = cw_pin;
     302:	06 8b       	std	Z+22, r16	; 0x16
     304:	17 8b       	std	Z+23, r17	; 0x17
  this->clk_pin = clk_pin;
     306:	e0 8e       	std	Z+24, r14	; 0x18
     308:	f1 8e       	std	Z+25, r15	; 0x19

  // setup the pins on the microcontroller:
  pinMode(en_pin, OUTPUT);
     30a:	61 e0       	ldi	r22, 0x01	; 1
     30c:	0e 94 04 09 	call	0x1208	; 0x1208 <pinMode>
  pinMode(cw_pin, OUTPUT);
     310:	61 e0       	ldi	r22, 0x01	; 1
     312:	80 2f       	mov	r24, r16
     314:	0e 94 04 09 	call	0x1208	; 0x1208 <pinMode>
  pinMode(clk_pin, OUTPUT);
     318:	61 e0       	ldi	r22, 0x01	; 1
     31a:	8e 2d       	mov	r24, r14
}
     31c:	1f 91       	pop	r17
     31e:	0f 91       	pop	r16
     320:	ff 90       	pop	r15
     322:	ef 90       	pop	r14
  this->clk_pin = clk_pin;

  // setup the pins on the microcontroller:
  pinMode(en_pin, OUTPUT);
  pinMode(cw_pin, OUTPUT);
  pinMode(clk_pin, OUTPUT);
     324:	0c 94 04 09 	jmp	0x1208	; 0x1208 <pinMode>

00000328 <_ZN13StepperDriver8setSpeedEf>:

/*
  Sets the speed in revs per minute
*/
void StepperDriver::setSpeed(float rpm)
{
     328:	cf 92       	push	r12
     32a:	df 92       	push	r13
     32c:	ef 92       	push	r14
     32e:	ff 92       	push	r15
     330:	cf 93       	push	r28
     332:	df 93       	push	r29
     334:	ec 01       	movw	r28, r24
     336:	6a 01       	movw	r12, r20
     338:	7b 01       	movw	r14, r22
  step_interval = 60000000L / (number_of_steps * rpm * step_division);
     33a:	68 81       	ld	r22, Y
     33c:	79 81       	ldd	r23, Y+1	; 0x01
     33e:	07 2e       	mov	r0, r23
     340:	00 0c       	add	r0, r0
     342:	88 0b       	sbc	r24, r24
     344:	99 0b       	sbc	r25, r25
     346:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__floatsisf>
     34a:	a7 01       	movw	r20, r14
     34c:	96 01       	movw	r18, r12
     34e:	0e 94 07 04 	call	0x80e	; 0x80e <__mulsf3>
     352:	6b 01       	movw	r12, r22
     354:	7c 01       	movw	r14, r24
     356:	6a 81       	ldd	r22, Y+2	; 0x02
     358:	7b 81       	ldd	r23, Y+3	; 0x03
     35a:	07 2e       	mov	r0, r23
     35c:	00 0c       	add	r0, r0
     35e:	88 0b       	sbc	r24, r24
     360:	99 0b       	sbc	r25, r25
     362:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__floatsisf>
     366:	9b 01       	movw	r18, r22
     368:	ac 01       	movw	r20, r24
     36a:	c7 01       	movw	r24, r14
     36c:	b6 01       	movw	r22, r12
     36e:	0e 94 07 04 	call	0x80e	; 0x80e <__mulsf3>
     372:	9b 01       	movw	r18, r22
     374:	ac 01       	movw	r20, r24
     376:	60 ec       	ldi	r22, 0xC0	; 192
     378:	71 ee       	ldi	r23, 0xE1	; 225
     37a:	84 e6       	ldi	r24, 0x64	; 100
     37c:	9c e4       	ldi	r25, 0x4C	; 76
     37e:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <__divsf3>
     382:	0e 94 4a 03 	call	0x694	; 0x694 <__fixunssfsi>
     386:	6c 83       	std	Y+4, r22	; 0x04
     388:	7d 83       	std	Y+5, r23	; 0x05
     38a:	8e 83       	std	Y+6, r24	; 0x06
     38c:	9f 83       	std	Y+7, r25	; 0x07
}
     38e:	df 91       	pop	r29
     390:	cf 91       	pop	r28
     392:	ff 90       	pop	r15
     394:	ef 90       	pop	r14
     396:	df 90       	pop	r13
     398:	cf 90       	pop	r12
     39a:	08 95       	ret

0000039c <_ZN13StepperDriver11powerEnableEb>:



void StepperDriver::powerEnable(bool ena)
{
  if (ena) {
     39c:	66 23       	and	r22, r22
     39e:	11 f0       	breq	.+4      	; 0x3a4 <_ZN13StepperDriver11powerEnableEb+0x8>
    digitalWrite(en_pin, LOW);
     3a0:	60 e0       	ldi	r22, 0x00	; 0
     3a2:	01 c0       	rjmp	.+2      	; 0x3a6 <_ZN13StepperDriver11powerEnableEb+0xa>
  } else {
    digitalWrite(en_pin, HIGH);
     3a4:	61 e0       	ldi	r22, 0x01	; 1
     3a6:	fc 01       	movw	r30, r24
     3a8:	84 89       	ldd	r24, Z+20	; 0x14
     3aa:	0c 94 40 09 	jmp	0x1280	; 0x1280 <digitalWrite>

000003ae <_ZN13StepperDriver12setDirectionEl>:



void StepperDriver::setDirection(long steps_to_move)
{
  if (steps_to_move < 0) {
     3ae:	77 ff       	sbrs	r23, 7
     3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <_ZN13StepperDriver12setDirectionEl+0x8>
    digitalWrite(cw_pin, HIGH);
     3b2:	61 e0       	ldi	r22, 0x01	; 1
     3b4:	01 c0       	rjmp	.+2      	; 0x3b8 <_ZN13StepperDriver12setDirectionEl+0xa>
  }
  else {
    digitalWrite(cw_pin, LOW);
     3b6:	60 e0       	ldi	r22, 0x00	; 0
     3b8:	fc 01       	movw	r30, r24
     3ba:	86 89       	ldd	r24, Z+22	; 0x16
     3bc:	0c 94 40 09 	jmp	0x1280	; 0x1280 <digitalWrite>

000003c0 <_ZN13StepperDriver12moveIntervalEm>:
}



void StepperDriver::moveInterval(unsigned long target_delay)
{
     3c0:	0f 93       	push	r16
     3c2:	1f 93       	push	r17
     3c4:	cf 93       	push	r28
     3c6:	df 93       	push	r29
     3c8:	ec 01       	movw	r28, r24
  target_step_time1 = last_step_time + (target_delay / 2);
     3ca:	08 85       	ldd	r16, Y+8	; 0x08
     3cc:	19 85       	ldd	r17, Y+9	; 0x09
     3ce:	2a 85       	ldd	r18, Y+10	; 0x0a
     3d0:	3b 85       	ldd	r19, Y+11	; 0x0b
     3d2:	db 01       	movw	r26, r22
     3d4:	ca 01       	movw	r24, r20
     3d6:	b6 95       	lsr	r27
     3d8:	a7 95       	ror	r26
     3da:	97 95       	ror	r25
     3dc:	87 95       	ror	r24
     3de:	80 0f       	add	r24, r16
     3e0:	91 1f       	adc	r25, r17
     3e2:	a2 1f       	adc	r26, r18
     3e4:	b3 1f       	adc	r27, r19
     3e6:	8c 87       	std	Y+12, r24	; 0x0c
     3e8:	9d 87       	std	Y+13, r25	; 0x0d
     3ea:	ae 87       	std	Y+14, r26	; 0x0e
     3ec:	bf 87       	std	Y+15, r27	; 0x0f
  target_step_time2 = last_step_time + target_delay;
     3ee:	40 0f       	add	r20, r16
     3f0:	51 1f       	adc	r21, r17
     3f2:	62 1f       	adc	r22, r18
     3f4:	73 1f       	adc	r23, r19
     3f6:	48 8b       	std	Y+16, r20	; 0x10
     3f8:	59 8b       	std	Y+17, r21	; 0x11
     3fa:	6a 8b       	std	Y+18, r22	; 0x12
     3fc:	7b 8b       	std	Y+19, r23	; 0x13

  if (target_step_time1 >= last_step_time) {
     3fe:	80 17       	cp	r24, r16
     400:	91 07       	cpc	r25, r17
     402:	a2 07       	cpc	r26, r18
     404:	b3 07       	cpc	r27, r19
     406:	e8 f0       	brcs	.+58     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
    while (micros() < target_step_time1) {}
     408:	0e 94 53 08 	call	0x10a6	; 0x10a6 <micros>
     40c:	0c 85       	ldd	r16, Y+12	; 0x0c
     40e:	1d 85       	ldd	r17, Y+13	; 0x0d
     410:	2e 85       	ldd	r18, Y+14	; 0x0e
     412:	3f 85       	ldd	r19, Y+15	; 0x0f
     414:	60 17       	cp	r22, r16
     416:	71 07       	cpc	r23, r17
     418:	82 07       	cpc	r24, r18
     41a:	93 07       	cpc	r25, r19
     41c:	a8 f3       	brcs	.-22     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
  }
  else {
    while ((long)(micros()) < (long)target_step_time1) {}
  }

	digitalWrite(clk_pin, LOW);
     41e:	60 e0       	ldi	r22, 0x00	; 0
     420:	88 8d       	ldd	r24, Y+24	; 0x18
     422:	0e 94 40 09 	call	0x1280	; 0x1280 <digitalWrite>

  if (target_step_time2 >= last_step_time) {
     426:	48 89       	ldd	r20, Y+16	; 0x10
     428:	59 89       	ldd	r21, Y+17	; 0x11
     42a:	6a 89       	ldd	r22, Y+18	; 0x12
     42c:	7b 89       	ldd	r23, Y+19	; 0x13
     42e:	88 85       	ldd	r24, Y+8	; 0x08
     430:	99 85       	ldd	r25, Y+9	; 0x09
     432:	aa 85       	ldd	r26, Y+10	; 0x0a
     434:	bb 85       	ldd	r27, Y+11	; 0x0b
     436:	48 17       	cp	r20, r24
     438:	59 07       	cpc	r21, r25
     43a:	6a 07       	cpc	r22, r26
     43c:	7b 07       	cpc	r23, r27
     43e:	68 f4       	brcc	.+26     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     440:	22 c0       	rjmp	.+68     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>

  if (target_step_time1 >= last_step_time) {
    while (micros() < target_step_time1) {}
  }
  else {
    while ((long)(micros()) < (long)target_step_time1) {}
     442:	0e 94 53 08 	call	0x10a6	; 0x10a6 <micros>
     446:	0c 85       	ldd	r16, Y+12	; 0x0c
     448:	1d 85       	ldd	r17, Y+13	; 0x0d
     44a:	2e 85       	ldd	r18, Y+14	; 0x0e
     44c:	3f 85       	ldd	r19, Y+15	; 0x0f
     44e:	60 17       	cp	r22, r16
     450:	71 07       	cpc	r23, r17
     452:	82 07       	cpc	r24, r18
     454:	93 07       	cpc	r25, r19
     456:	ac f3       	brlt	.-22     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     458:	e2 cf       	rjmp	.-60     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
  }

	digitalWrite(clk_pin, LOW);

  if (target_step_time2 >= last_step_time) {
    while (micros() < target_step_time2) {}
     45a:	0e 94 53 08 	call	0x10a6	; 0x10a6 <micros>
     45e:	08 89       	ldd	r16, Y+16	; 0x10
     460:	19 89       	ldd	r17, Y+17	; 0x11
     462:	2a 89       	ldd	r18, Y+18	; 0x12
     464:	3b 89       	ldd	r19, Y+19	; 0x13
     466:	60 17       	cp	r22, r16
     468:	71 07       	cpc	r23, r17
     46a:	82 07       	cpc	r24, r18
     46c:	93 07       	cpc	r25, r19
     46e:	a8 f3       	brcs	.-22     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
  }
  else {
    while ((long)(micros()) < (long)target_step_time2) {}
  }
  last_step_time = micros();
     470:	0e 94 53 08 	call	0x10a6	; 0x10a6 <micros>
     474:	68 87       	std	Y+8, r22	; 0x08
     476:	79 87       	std	Y+9, r23	; 0x09
     478:	8a 87       	std	Y+10, r24	; 0x0a
     47a:	9b 87       	std	Y+11, r25	; 0x0b
}
     47c:	df 91       	pop	r29
     47e:	cf 91       	pop	r28
     480:	1f 91       	pop	r17
     482:	0f 91       	pop	r16
     484:	08 95       	ret

  if (target_step_time2 >= last_step_time) {
    while (micros() < target_step_time2) {}
  }
  else {
    while ((long)(micros()) < (long)target_step_time2) {}
     486:	0e 94 53 08 	call	0x10a6	; 0x10a6 <micros>
     48a:	08 89       	ldd	r16, Y+16	; 0x10
     48c:	19 89       	ldd	r17, Y+17	; 0x11
     48e:	2a 89       	ldd	r18, Y+18	; 0x12
     490:	3b 89       	ldd	r19, Y+19	; 0x13
     492:	60 17       	cp	r22, r16
     494:	71 07       	cpc	r23, r17
     496:	82 07       	cpc	r24, r18
     498:	93 07       	cpc	r25, r19
     49a:	ac f3       	brlt	.-22     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
     49c:	e9 cf       	rjmp	.-46     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>

0000049e <_ZN13StepperDriver4moveEv>:
}



void StepperDriver::move()
{
     49e:	cf 93       	push	r28
     4a0:	df 93       	push	r29
     4a2:	ec 01       	movw	r28, r24
  digitalWrite(clk_pin, HIGH);
     4a4:	61 e0       	ldi	r22, 0x01	; 1
     4a6:	88 8d       	ldd	r24, Y+24	; 0x18
     4a8:	0e 94 40 09 	call	0x1280	; 0x1280 <digitalWrite>
  moveInterval(step_interval);
     4ac:	4c 81       	ldd	r20, Y+4	; 0x04
     4ae:	5d 81       	ldd	r21, Y+5	; 0x05
     4b0:	6e 81       	ldd	r22, Y+6	; 0x06
     4b2:	7f 81       	ldd	r23, Y+7	; 0x07
     4b4:	ce 01       	movw	r24, r28
}
     4b6:	df 91       	pop	r29
     4b8:	cf 91       	pop	r28


void StepperDriver::move()
{
  digitalWrite(clk_pin, HIGH);
  moveInterval(step_interval);
     4ba:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <_ZN13StepperDriver12moveIntervalEm>

000004be <_ZN13StepperDriver4stepEl>:
/*
  Moves the motor steps_to_move steps.  If the number is negative, 
  the motor moves in the reverse direction.
 */
void StepperDriver::step(long steps_to_move)
{
     4be:	cf 92       	push	r12
     4c0:	df 92       	push	r13
     4c2:	ef 92       	push	r14
     4c4:	ff 92       	push	r15
     4c6:	cf 93       	push	r28
     4c8:	df 93       	push	r29
     4ca:	ec 01       	movw	r28, r24
	steps_to_move *= step_division;
     4cc:	aa 81       	ldd	r26, Y+2	; 0x02
     4ce:	bb 81       	ldd	r27, Y+3	; 0x03
     4d0:	9a 01       	movw	r18, r20
     4d2:	ab 01       	movw	r20, r22
     4d4:	0e 94 c6 09 	call	0x138c	; 0x138c <__mulshisi3>
     4d8:	6b 01       	movw	r12, r22
     4da:	7c 01       	movw	r14, r24
  setDirection(steps_to_move);
     4dc:	ab 01       	movw	r20, r22
     4de:	bc 01       	movw	r22, r24
     4e0:	ce 01       	movw	r24, r28
     4e2:	0e 94 d7 01 	call	0x3ae	; 0x3ae <_ZN13StepperDriver12setDirectionEl>
  last_step_time = micros();
     4e6:	0e 94 53 08 	call	0x10a6	; 0x10a6 <micros>
     4ea:	68 87       	std	Y+8, r22	; 0x08
     4ec:	79 87       	std	Y+9, r23	; 0x09
     4ee:	8a 87       	std	Y+10, r24	; 0x0a
     4f0:	9b 87       	std	Y+11, r25	; 0x0b

  for (long i = abs(steps_to_move); i > 0; i--) {
     4f2:	c6 01       	movw	r24, r12
     4f4:	d7 01       	movw	r26, r14
     4f6:	b7 ff       	sbrs	r27, 7
     4f8:	07 c0       	rjmp	.+14     	; 0x508 <_ZN13StepperDriver4stepEl+0x4a>
     4fa:	b0 95       	com	r27
     4fc:	a0 95       	com	r26
     4fe:	90 95       	com	r25
     500:	81 95       	neg	r24
     502:	9f 4f       	sbci	r25, 0xFF	; 255
     504:	af 4f       	sbci	r26, 0xFF	; 255
     506:	bf 4f       	sbci	r27, 0xFF	; 255
     508:	6c 01       	movw	r12, r24
     50a:	7d 01       	movw	r14, r26
     50c:	c1 14       	cp	r12, r1
     50e:	d1 04       	cpc	r13, r1
     510:	e1 04       	cpc	r14, r1
     512:	f1 04       	cpc	r15, r1
     514:	49 f0       	breq	.+18     	; 0x528 <_ZN13StepperDriver4stepEl+0x6a>
    move();
     516:	ce 01       	movw	r24, r28
     518:	0e 94 4f 02 	call	0x49e	; 0x49e <_ZN13StepperDriver4moveEv>
{
	steps_to_move *= step_division;
  setDirection(steps_to_move);
  last_step_time = micros();

  for (long i = abs(steps_to_move); i > 0; i--) {
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	c8 1a       	sub	r12, r24
     520:	d1 08       	sbc	r13, r1
     522:	e1 08       	sbc	r14, r1
     524:	f1 08       	sbc	r15, r1
     526:	f2 cf       	rjmp	.-28     	; 0x50c <_ZN13StepperDriver4stepEl+0x4e>
    move();
  }
}
     528:	df 91       	pop	r29
     52a:	cf 91       	pop	r28
     52c:	ff 90       	pop	r15
     52e:	ef 90       	pop	r14
     530:	df 90       	pop	r13
     532:	cf 90       	pop	r12
     534:	08 95       	ret

00000536 <_ZN13StepperDriver11positioningEv>:
  }
}


void StepperDriver::positioning()
{
     536:	cf 92       	push	r12
     538:	df 92       	push	r13
     53a:	ef 92       	push	r14
     53c:	ff 92       	push	r15
     53e:	cf 93       	push	r28
     540:	df 93       	push	r29
     542:	ec 01       	movw	r28, r24
	unsigned long step_interval_0 = step_interval;
     544:	cc 80       	ldd	r12, Y+4	; 0x04
     546:	dd 80       	ldd	r13, Y+5	; 0x05
     548:	ee 80       	ldd	r14, Y+6	; 0x06
     54a:	ff 80       	ldd	r15, Y+7	; 0x07
	step_interval *= 8;
     54c:	d7 01       	movw	r26, r14
     54e:	c6 01       	movw	r24, r12
     550:	23 e0       	ldi	r18, 0x03	; 3
     552:	88 0f       	add	r24, r24
     554:	99 1f       	adc	r25, r25
     556:	aa 1f       	adc	r26, r26
     558:	bb 1f       	adc	r27, r27
     55a:	2a 95       	dec	r18
     55c:	d1 f7       	brne	.-12     	; 0x552 <_ZN13StepperDriver11positioningEv+0x1c>
     55e:	8c 83       	std	Y+4, r24	; 0x04
     560:	9d 83       	std	Y+5, r25	; 0x05
     562:	ae 83       	std	Y+6, r26	; 0x06
     564:	bf 83       	std	Y+7, r27	; 0x07

	step(4);
     566:	44 e0       	ldi	r20, 0x04	; 4
     568:	50 e0       	ldi	r21, 0x00	; 0
     56a:	60 e0       	ldi	r22, 0x00	; 0
     56c:	70 e0       	ldi	r23, 0x00	; 0
     56e:	ce 01       	movw	r24, r28
     570:	0e 94 5f 02 	call	0x4be	; 0x4be <_ZN13StepperDriver4stepEl>
	delay(200);
     574:	68 ec       	ldi	r22, 0xC8	; 200
     576:	70 e0       	ldi	r23, 0x00	; 0
     578:	80 e0       	ldi	r24, 0x00	; 0
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	0e 94 78 08 	call	0x10f0	; 0x10f0 <delay>
	step(-4);
     580:	4c ef       	ldi	r20, 0xFC	; 252
     582:	5f ef       	ldi	r21, 0xFF	; 255
     584:	6f ef       	ldi	r22, 0xFF	; 255
     586:	7f ef       	ldi	r23, 0xFF	; 255
     588:	ce 01       	movw	r24, r28
     58a:	0e 94 5f 02 	call	0x4be	; 0x4be <_ZN13StepperDriver4stepEl>
  delay(200);
     58e:	68 ec       	ldi	r22, 0xC8	; 200
     590:	70 e0       	ldi	r23, 0x00	; 0
     592:	80 e0       	ldi	r24, 0x00	; 0
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	0e 94 78 08 	call	0x10f0	; 0x10f0 <delay>

	step_interval = step_interval_0;
     59a:	cc 82       	std	Y+4, r12	; 0x04
     59c:	dd 82       	std	Y+5, r13	; 0x05
     59e:	ee 82       	std	Y+6, r14	; 0x06
     5a0:	ff 82       	std	Y+7, r15	; 0x07
}
     5a2:	df 91       	pop	r29
     5a4:	cf 91       	pop	r28
     5a6:	ff 90       	pop	r15
     5a8:	ef 90       	pop	r14
     5aa:	df 90       	pop	r13
     5ac:	cf 90       	pop	r12
     5ae:	08 95       	ret

000005b0 <__divsf3>:
     5b0:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__divsf3x>
     5b4:	0c 94 cd 03 	jmp	0x79a	; 0x79a <__fp_round>
     5b8:	0e 94 c6 03 	call	0x78c	; 0x78c <__fp_pscB>
     5bc:	58 f0       	brcs	.+22     	; 0x5d4 <__divsf3+0x24>
     5be:	0e 94 bf 03 	call	0x77e	; 0x77e <__fp_pscA>
     5c2:	40 f0       	brcs	.+16     	; 0x5d4 <__divsf3+0x24>
     5c4:	29 f4       	brne	.+10     	; 0x5d0 <__divsf3+0x20>
     5c6:	5f 3f       	cpi	r21, 0xFF	; 255
     5c8:	29 f0       	breq	.+10     	; 0x5d4 <__divsf3+0x24>
     5ca:	0c 94 b6 03 	jmp	0x76c	; 0x76c <__fp_inf>
     5ce:	51 11       	cpse	r21, r1
     5d0:	0c 94 01 04 	jmp	0x802	; 0x802 <__fp_szero>
     5d4:	0c 94 bc 03 	jmp	0x778	; 0x778 <__fp_nan>

000005d8 <__divsf3x>:
     5d8:	0e 94 de 03 	call	0x7bc	; 0x7bc <__fp_split3>
     5dc:	68 f3       	brcs	.-38     	; 0x5b8 <__divsf3+0x8>

000005de <__divsf3_pse>:
     5de:	99 23       	and	r25, r25
     5e0:	b1 f3       	breq	.-20     	; 0x5ce <__divsf3+0x1e>
     5e2:	55 23       	and	r21, r21
     5e4:	91 f3       	breq	.-28     	; 0x5ca <__divsf3+0x1a>
     5e6:	95 1b       	sub	r25, r21
     5e8:	55 0b       	sbc	r21, r21
     5ea:	bb 27       	eor	r27, r27
     5ec:	aa 27       	eor	r26, r26
     5ee:	62 17       	cp	r22, r18
     5f0:	73 07       	cpc	r23, r19
     5f2:	84 07       	cpc	r24, r20
     5f4:	38 f0       	brcs	.+14     	; 0x604 <__divsf3_pse+0x26>
     5f6:	9f 5f       	subi	r25, 0xFF	; 255
     5f8:	5f 4f       	sbci	r21, 0xFF	; 255
     5fa:	22 0f       	add	r18, r18
     5fc:	33 1f       	adc	r19, r19
     5fe:	44 1f       	adc	r20, r20
     600:	aa 1f       	adc	r26, r26
     602:	a9 f3       	breq	.-22     	; 0x5ee <__divsf3_pse+0x10>
     604:	35 d0       	rcall	.+106    	; 0x670 <__divsf3_pse+0x92>
     606:	0e 2e       	mov	r0, r30
     608:	3a f0       	brmi	.+14     	; 0x618 <__divsf3_pse+0x3a>
     60a:	e0 e8       	ldi	r30, 0x80	; 128
     60c:	32 d0       	rcall	.+100    	; 0x672 <__divsf3_pse+0x94>
     60e:	91 50       	subi	r25, 0x01	; 1
     610:	50 40       	sbci	r21, 0x00	; 0
     612:	e6 95       	lsr	r30
     614:	00 1c       	adc	r0, r0
     616:	ca f7       	brpl	.-14     	; 0x60a <__divsf3_pse+0x2c>
     618:	2b d0       	rcall	.+86     	; 0x670 <__divsf3_pse+0x92>
     61a:	fe 2f       	mov	r31, r30
     61c:	29 d0       	rcall	.+82     	; 0x670 <__divsf3_pse+0x92>
     61e:	66 0f       	add	r22, r22
     620:	77 1f       	adc	r23, r23
     622:	88 1f       	adc	r24, r24
     624:	bb 1f       	adc	r27, r27
     626:	26 17       	cp	r18, r22
     628:	37 07       	cpc	r19, r23
     62a:	48 07       	cpc	r20, r24
     62c:	ab 07       	cpc	r26, r27
     62e:	b0 e8       	ldi	r27, 0x80	; 128
     630:	09 f0       	breq	.+2      	; 0x634 <__divsf3_pse+0x56>
     632:	bb 0b       	sbc	r27, r27
     634:	80 2d       	mov	r24, r0
     636:	bf 01       	movw	r22, r30
     638:	ff 27       	eor	r31, r31
     63a:	93 58       	subi	r25, 0x83	; 131
     63c:	5f 4f       	sbci	r21, 0xFF	; 255
     63e:	3a f0       	brmi	.+14     	; 0x64e <__divsf3_pse+0x70>
     640:	9e 3f       	cpi	r25, 0xFE	; 254
     642:	51 05       	cpc	r21, r1
     644:	78 f0       	brcs	.+30     	; 0x664 <__divsf3_pse+0x86>
     646:	0c 94 b6 03 	jmp	0x76c	; 0x76c <__fp_inf>
     64a:	0c 94 01 04 	jmp	0x802	; 0x802 <__fp_szero>
     64e:	5f 3f       	cpi	r21, 0xFF	; 255
     650:	e4 f3       	brlt	.-8      	; 0x64a <__divsf3_pse+0x6c>
     652:	98 3e       	cpi	r25, 0xE8	; 232
     654:	d4 f3       	brlt	.-12     	; 0x64a <__divsf3_pse+0x6c>
     656:	86 95       	lsr	r24
     658:	77 95       	ror	r23
     65a:	67 95       	ror	r22
     65c:	b7 95       	ror	r27
     65e:	f7 95       	ror	r31
     660:	9f 5f       	subi	r25, 0xFF	; 255
     662:	c9 f7       	brne	.-14     	; 0x656 <__divsf3_pse+0x78>
     664:	88 0f       	add	r24, r24
     666:	91 1d       	adc	r25, r1
     668:	96 95       	lsr	r25
     66a:	87 95       	ror	r24
     66c:	97 f9       	bld	r25, 7
     66e:	08 95       	ret
     670:	e1 e0       	ldi	r30, 0x01	; 1
     672:	66 0f       	add	r22, r22
     674:	77 1f       	adc	r23, r23
     676:	88 1f       	adc	r24, r24
     678:	bb 1f       	adc	r27, r27
     67a:	62 17       	cp	r22, r18
     67c:	73 07       	cpc	r23, r19
     67e:	84 07       	cpc	r24, r20
     680:	ba 07       	cpc	r27, r26
     682:	20 f0       	brcs	.+8      	; 0x68c <__divsf3_pse+0xae>
     684:	62 1b       	sub	r22, r18
     686:	73 0b       	sbc	r23, r19
     688:	84 0b       	sbc	r24, r20
     68a:	ba 0b       	sbc	r27, r26
     68c:	ee 1f       	adc	r30, r30
     68e:	88 f7       	brcc	.-30     	; 0x672 <__divsf3_pse+0x94>
     690:	e0 95       	com	r30
     692:	08 95       	ret

00000694 <__fixunssfsi>:
     694:	0e 94 e6 03 	call	0x7cc	; 0x7cc <__fp_splitA>
     698:	88 f0       	brcs	.+34     	; 0x6bc <__fixunssfsi+0x28>
     69a:	9f 57       	subi	r25, 0x7F	; 127
     69c:	98 f0       	brcs	.+38     	; 0x6c4 <__fixunssfsi+0x30>
     69e:	b9 2f       	mov	r27, r25
     6a0:	99 27       	eor	r25, r25
     6a2:	b7 51       	subi	r27, 0x17	; 23
     6a4:	b0 f0       	brcs	.+44     	; 0x6d2 <__fixunssfsi+0x3e>
     6a6:	e1 f0       	breq	.+56     	; 0x6e0 <__fixunssfsi+0x4c>
     6a8:	66 0f       	add	r22, r22
     6aa:	77 1f       	adc	r23, r23
     6ac:	88 1f       	adc	r24, r24
     6ae:	99 1f       	adc	r25, r25
     6b0:	1a f0       	brmi	.+6      	; 0x6b8 <__fixunssfsi+0x24>
     6b2:	ba 95       	dec	r27
     6b4:	c9 f7       	brne	.-14     	; 0x6a8 <__fixunssfsi+0x14>
     6b6:	14 c0       	rjmp	.+40     	; 0x6e0 <__fixunssfsi+0x4c>
     6b8:	b1 30       	cpi	r27, 0x01	; 1
     6ba:	91 f0       	breq	.+36     	; 0x6e0 <__fixunssfsi+0x4c>
     6bc:	0e 94 00 04 	call	0x800	; 0x800 <__fp_zero>
     6c0:	b1 e0       	ldi	r27, 0x01	; 1
     6c2:	08 95       	ret
     6c4:	0c 94 00 04 	jmp	0x800	; 0x800 <__fp_zero>
     6c8:	67 2f       	mov	r22, r23
     6ca:	78 2f       	mov	r23, r24
     6cc:	88 27       	eor	r24, r24
     6ce:	b8 5f       	subi	r27, 0xF8	; 248
     6d0:	39 f0       	breq	.+14     	; 0x6e0 <__fixunssfsi+0x4c>
     6d2:	b9 3f       	cpi	r27, 0xF9	; 249
     6d4:	cc f3       	brlt	.-14     	; 0x6c8 <__fixunssfsi+0x34>
     6d6:	86 95       	lsr	r24
     6d8:	77 95       	ror	r23
     6da:	67 95       	ror	r22
     6dc:	b3 95       	inc	r27
     6de:	d9 f7       	brne	.-10     	; 0x6d6 <__fixunssfsi+0x42>
     6e0:	3e f4       	brtc	.+14     	; 0x6f0 <__fixunssfsi+0x5c>
     6e2:	90 95       	com	r25
     6e4:	80 95       	com	r24
     6e6:	70 95       	com	r23
     6e8:	61 95       	neg	r22
     6ea:	7f 4f       	sbci	r23, 0xFF	; 255
     6ec:	8f 4f       	sbci	r24, 0xFF	; 255
     6ee:	9f 4f       	sbci	r25, 0xFF	; 255
     6f0:	08 95       	ret

000006f2 <__floatunsisf>:
     6f2:	e8 94       	clt
     6f4:	09 c0       	rjmp	.+18     	; 0x708 <__floatsisf+0x12>

000006f6 <__floatsisf>:
     6f6:	97 fb       	bst	r25, 7
     6f8:	3e f4       	brtc	.+14     	; 0x708 <__floatsisf+0x12>
     6fa:	90 95       	com	r25
     6fc:	80 95       	com	r24
     6fe:	70 95       	com	r23
     700:	61 95       	neg	r22
     702:	7f 4f       	sbci	r23, 0xFF	; 255
     704:	8f 4f       	sbci	r24, 0xFF	; 255
     706:	9f 4f       	sbci	r25, 0xFF	; 255
     708:	99 23       	and	r25, r25
     70a:	a9 f0       	breq	.+42     	; 0x736 <__floatsisf+0x40>
     70c:	f9 2f       	mov	r31, r25
     70e:	96 e9       	ldi	r25, 0x96	; 150
     710:	bb 27       	eor	r27, r27
     712:	93 95       	inc	r25
     714:	f6 95       	lsr	r31
     716:	87 95       	ror	r24
     718:	77 95       	ror	r23
     71a:	67 95       	ror	r22
     71c:	b7 95       	ror	r27
     71e:	f1 11       	cpse	r31, r1
     720:	f8 cf       	rjmp	.-16     	; 0x712 <__floatsisf+0x1c>
     722:	fa f4       	brpl	.+62     	; 0x762 <__floatsisf+0x6c>
     724:	bb 0f       	add	r27, r27
     726:	11 f4       	brne	.+4      	; 0x72c <__floatsisf+0x36>
     728:	60 ff       	sbrs	r22, 0
     72a:	1b c0       	rjmp	.+54     	; 0x762 <__floatsisf+0x6c>
     72c:	6f 5f       	subi	r22, 0xFF	; 255
     72e:	7f 4f       	sbci	r23, 0xFF	; 255
     730:	8f 4f       	sbci	r24, 0xFF	; 255
     732:	9f 4f       	sbci	r25, 0xFF	; 255
     734:	16 c0       	rjmp	.+44     	; 0x762 <__floatsisf+0x6c>
     736:	88 23       	and	r24, r24
     738:	11 f0       	breq	.+4      	; 0x73e <__floatsisf+0x48>
     73a:	96 e9       	ldi	r25, 0x96	; 150
     73c:	11 c0       	rjmp	.+34     	; 0x760 <__floatsisf+0x6a>
     73e:	77 23       	and	r23, r23
     740:	21 f0       	breq	.+8      	; 0x74a <__floatsisf+0x54>
     742:	9e e8       	ldi	r25, 0x8E	; 142
     744:	87 2f       	mov	r24, r23
     746:	76 2f       	mov	r23, r22
     748:	05 c0       	rjmp	.+10     	; 0x754 <__floatsisf+0x5e>
     74a:	66 23       	and	r22, r22
     74c:	71 f0       	breq	.+28     	; 0x76a <__floatsisf+0x74>
     74e:	96 e8       	ldi	r25, 0x86	; 134
     750:	86 2f       	mov	r24, r22
     752:	70 e0       	ldi	r23, 0x00	; 0
     754:	60 e0       	ldi	r22, 0x00	; 0
     756:	2a f0       	brmi	.+10     	; 0x762 <__floatsisf+0x6c>
     758:	9a 95       	dec	r25
     75a:	66 0f       	add	r22, r22
     75c:	77 1f       	adc	r23, r23
     75e:	88 1f       	adc	r24, r24
     760:	da f7       	brpl	.-10     	; 0x758 <__floatsisf+0x62>
     762:	88 0f       	add	r24, r24
     764:	96 95       	lsr	r25
     766:	87 95       	ror	r24
     768:	97 f9       	bld	r25, 7
     76a:	08 95       	ret

0000076c <__fp_inf>:
     76c:	97 f9       	bld	r25, 7
     76e:	9f 67       	ori	r25, 0x7F	; 127
     770:	80 e8       	ldi	r24, 0x80	; 128
     772:	70 e0       	ldi	r23, 0x00	; 0
     774:	60 e0       	ldi	r22, 0x00	; 0
     776:	08 95       	ret

00000778 <__fp_nan>:
     778:	9f ef       	ldi	r25, 0xFF	; 255
     77a:	80 ec       	ldi	r24, 0xC0	; 192
     77c:	08 95       	ret

0000077e <__fp_pscA>:
     77e:	00 24       	eor	r0, r0
     780:	0a 94       	dec	r0
     782:	16 16       	cp	r1, r22
     784:	17 06       	cpc	r1, r23
     786:	18 06       	cpc	r1, r24
     788:	09 06       	cpc	r0, r25
     78a:	08 95       	ret

0000078c <__fp_pscB>:
     78c:	00 24       	eor	r0, r0
     78e:	0a 94       	dec	r0
     790:	12 16       	cp	r1, r18
     792:	13 06       	cpc	r1, r19
     794:	14 06       	cpc	r1, r20
     796:	05 06       	cpc	r0, r21
     798:	08 95       	ret

0000079a <__fp_round>:
     79a:	09 2e       	mov	r0, r25
     79c:	03 94       	inc	r0
     79e:	00 0c       	add	r0, r0
     7a0:	11 f4       	brne	.+4      	; 0x7a6 <__fp_round+0xc>
     7a2:	88 23       	and	r24, r24
     7a4:	52 f0       	brmi	.+20     	; 0x7ba <__fp_round+0x20>
     7a6:	bb 0f       	add	r27, r27
     7a8:	40 f4       	brcc	.+16     	; 0x7ba <__fp_round+0x20>
     7aa:	bf 2b       	or	r27, r31
     7ac:	11 f4       	brne	.+4      	; 0x7b2 <__fp_round+0x18>
     7ae:	60 ff       	sbrs	r22, 0
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fp_round+0x20>
     7b2:	6f 5f       	subi	r22, 0xFF	; 255
     7b4:	7f 4f       	sbci	r23, 0xFF	; 255
     7b6:	8f 4f       	sbci	r24, 0xFF	; 255
     7b8:	9f 4f       	sbci	r25, 0xFF	; 255
     7ba:	08 95       	ret

000007bc <__fp_split3>:
     7bc:	57 fd       	sbrc	r21, 7
     7be:	90 58       	subi	r25, 0x80	; 128
     7c0:	44 0f       	add	r20, r20
     7c2:	55 1f       	adc	r21, r21
     7c4:	59 f0       	breq	.+22     	; 0x7dc <__fp_splitA+0x10>
     7c6:	5f 3f       	cpi	r21, 0xFF	; 255
     7c8:	71 f0       	breq	.+28     	; 0x7e6 <__fp_splitA+0x1a>
     7ca:	47 95       	ror	r20

000007cc <__fp_splitA>:
     7cc:	88 0f       	add	r24, r24
     7ce:	97 fb       	bst	r25, 7
     7d0:	99 1f       	adc	r25, r25
     7d2:	61 f0       	breq	.+24     	; 0x7ec <__fp_splitA+0x20>
     7d4:	9f 3f       	cpi	r25, 0xFF	; 255
     7d6:	79 f0       	breq	.+30     	; 0x7f6 <__fp_splitA+0x2a>
     7d8:	87 95       	ror	r24
     7da:	08 95       	ret
     7dc:	12 16       	cp	r1, r18
     7de:	13 06       	cpc	r1, r19
     7e0:	14 06       	cpc	r1, r20
     7e2:	55 1f       	adc	r21, r21
     7e4:	f2 cf       	rjmp	.-28     	; 0x7ca <__fp_split3+0xe>
     7e6:	46 95       	lsr	r20
     7e8:	f1 df       	rcall	.-30     	; 0x7cc <__fp_splitA>
     7ea:	08 c0       	rjmp	.+16     	; 0x7fc <__fp_splitA+0x30>
     7ec:	16 16       	cp	r1, r22
     7ee:	17 06       	cpc	r1, r23
     7f0:	18 06       	cpc	r1, r24
     7f2:	99 1f       	adc	r25, r25
     7f4:	f1 cf       	rjmp	.-30     	; 0x7d8 <__fp_splitA+0xc>
     7f6:	86 95       	lsr	r24
     7f8:	71 05       	cpc	r23, r1
     7fa:	61 05       	cpc	r22, r1
     7fc:	08 94       	sec
     7fe:	08 95       	ret

00000800 <__fp_zero>:
     800:	e8 94       	clt

00000802 <__fp_szero>:
     802:	bb 27       	eor	r27, r27
     804:	66 27       	eor	r22, r22
     806:	77 27       	eor	r23, r23
     808:	cb 01       	movw	r24, r22
     80a:	97 f9       	bld	r25, 7
     80c:	08 95       	ret

0000080e <__mulsf3>:
     80e:	0e 94 1a 04 	call	0x834	; 0x834 <__mulsf3x>
     812:	0c 94 cd 03 	jmp	0x79a	; 0x79a <__fp_round>
     816:	0e 94 bf 03 	call	0x77e	; 0x77e <__fp_pscA>
     81a:	38 f0       	brcs	.+14     	; 0x82a <__mulsf3+0x1c>
     81c:	0e 94 c6 03 	call	0x78c	; 0x78c <__fp_pscB>
     820:	20 f0       	brcs	.+8      	; 0x82a <__mulsf3+0x1c>
     822:	95 23       	and	r25, r21
     824:	11 f0       	breq	.+4      	; 0x82a <__mulsf3+0x1c>
     826:	0c 94 b6 03 	jmp	0x76c	; 0x76c <__fp_inf>
     82a:	0c 94 bc 03 	jmp	0x778	; 0x778 <__fp_nan>
     82e:	11 24       	eor	r1, r1
     830:	0c 94 01 04 	jmp	0x802	; 0x802 <__fp_szero>

00000834 <__mulsf3x>:
     834:	0e 94 de 03 	call	0x7bc	; 0x7bc <__fp_split3>
     838:	70 f3       	brcs	.-36     	; 0x816 <__mulsf3+0x8>

0000083a <__mulsf3_pse>:
     83a:	95 9f       	mul	r25, r21
     83c:	c1 f3       	breq	.-16     	; 0x82e <__mulsf3+0x20>
     83e:	95 0f       	add	r25, r21
     840:	50 e0       	ldi	r21, 0x00	; 0
     842:	55 1f       	adc	r21, r21
     844:	62 9f       	mul	r22, r18
     846:	f0 01       	movw	r30, r0
     848:	72 9f       	mul	r23, r18
     84a:	bb 27       	eor	r27, r27
     84c:	f0 0d       	add	r31, r0
     84e:	b1 1d       	adc	r27, r1
     850:	63 9f       	mul	r22, r19
     852:	aa 27       	eor	r26, r26
     854:	f0 0d       	add	r31, r0
     856:	b1 1d       	adc	r27, r1
     858:	aa 1f       	adc	r26, r26
     85a:	64 9f       	mul	r22, r20
     85c:	66 27       	eor	r22, r22
     85e:	b0 0d       	add	r27, r0
     860:	a1 1d       	adc	r26, r1
     862:	66 1f       	adc	r22, r22
     864:	82 9f       	mul	r24, r18
     866:	22 27       	eor	r18, r18
     868:	b0 0d       	add	r27, r0
     86a:	a1 1d       	adc	r26, r1
     86c:	62 1f       	adc	r22, r18
     86e:	73 9f       	mul	r23, r19
     870:	b0 0d       	add	r27, r0
     872:	a1 1d       	adc	r26, r1
     874:	62 1f       	adc	r22, r18
     876:	83 9f       	mul	r24, r19
     878:	a0 0d       	add	r26, r0
     87a:	61 1d       	adc	r22, r1
     87c:	22 1f       	adc	r18, r18
     87e:	74 9f       	mul	r23, r20
     880:	33 27       	eor	r19, r19
     882:	a0 0d       	add	r26, r0
     884:	61 1d       	adc	r22, r1
     886:	23 1f       	adc	r18, r19
     888:	84 9f       	mul	r24, r20
     88a:	60 0d       	add	r22, r0
     88c:	21 1d       	adc	r18, r1
     88e:	82 2f       	mov	r24, r18
     890:	76 2f       	mov	r23, r22
     892:	6a 2f       	mov	r22, r26
     894:	11 24       	eor	r1, r1
     896:	9f 57       	subi	r25, 0x7F	; 127
     898:	50 40       	sbci	r21, 0x00	; 0
     89a:	9a f0       	brmi	.+38     	; 0x8c2 <__mulsf3_pse+0x88>
     89c:	f1 f0       	breq	.+60     	; 0x8da <__mulsf3_pse+0xa0>
     89e:	88 23       	and	r24, r24
     8a0:	4a f0       	brmi	.+18     	; 0x8b4 <__mulsf3_pse+0x7a>
     8a2:	ee 0f       	add	r30, r30
     8a4:	ff 1f       	adc	r31, r31
     8a6:	bb 1f       	adc	r27, r27
     8a8:	66 1f       	adc	r22, r22
     8aa:	77 1f       	adc	r23, r23
     8ac:	88 1f       	adc	r24, r24
     8ae:	91 50       	subi	r25, 0x01	; 1
     8b0:	50 40       	sbci	r21, 0x00	; 0
     8b2:	a9 f7       	brne	.-22     	; 0x89e <__mulsf3_pse+0x64>
     8b4:	9e 3f       	cpi	r25, 0xFE	; 254
     8b6:	51 05       	cpc	r21, r1
     8b8:	80 f0       	brcs	.+32     	; 0x8da <__mulsf3_pse+0xa0>
     8ba:	0c 94 b6 03 	jmp	0x76c	; 0x76c <__fp_inf>
     8be:	0c 94 01 04 	jmp	0x802	; 0x802 <__fp_szero>
     8c2:	5f 3f       	cpi	r21, 0xFF	; 255
     8c4:	e4 f3       	brlt	.-8      	; 0x8be <__mulsf3_pse+0x84>
     8c6:	98 3e       	cpi	r25, 0xE8	; 232
     8c8:	d4 f3       	brlt	.-12     	; 0x8be <__mulsf3_pse+0x84>
     8ca:	86 95       	lsr	r24
     8cc:	77 95       	ror	r23
     8ce:	67 95       	ror	r22
     8d0:	b7 95       	ror	r27
     8d2:	f7 95       	ror	r31
     8d4:	e7 95       	ror	r30
     8d6:	9f 5f       	subi	r25, 0xFF	; 255
     8d8:	c1 f7       	brne	.-16     	; 0x8ca <__mulsf3_pse+0x90>
     8da:	fe 2b       	or	r31, r30
     8dc:	88 0f       	add	r24, r24
     8de:	91 1d       	adc	r25, r1
     8e0:	96 95       	lsr	r25
     8e2:	87 95       	ror	r24
     8e4:	97 f9       	bld	r25, 7
     8e6:	08 95       	ret

000008e8 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     8e8:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     8ea:	91 8d       	ldd	r25, Z+25	; 0x19
     8ec:	22 8d       	ldd	r18, Z+26	; 0x1a
     8ee:	89 2f       	mov	r24, r25
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	80 5c       	subi	r24, 0xC0	; 192
     8f4:	9f 4f       	sbci	r25, 0xFF	; 255
     8f6:	82 1b       	sub	r24, r18
     8f8:	91 09       	sbc	r25, r1
}
     8fa:	8f 73       	andi	r24, 0x3F	; 63
     8fc:	99 27       	eor	r25, r25
     8fe:	08 95       	ret

00000900 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     900:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     902:	91 8d       	ldd	r25, Z+25	; 0x19
     904:	82 8d       	ldd	r24, Z+26	; 0x1a
     906:	98 17       	cp	r25, r24
     908:	31 f0       	breq	.+12     	; 0x916 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     90a:	82 8d       	ldd	r24, Z+26	; 0x1a
     90c:	e8 0f       	add	r30, r24
     90e:	f1 1d       	adc	r31, r1
     910:	85 8d       	ldd	r24, Z+29	; 0x1d
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     916:	8f ef       	ldi	r24, 0xFF	; 255
     918:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     91a:	08 95       	ret

0000091c <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     91c:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     91e:	91 8d       	ldd	r25, Z+25	; 0x19
     920:	82 8d       	ldd	r24, Z+26	; 0x1a
     922:	98 17       	cp	r25, r24
     924:	61 f0       	breq	.+24     	; 0x93e <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     926:	82 8d       	ldd	r24, Z+26	; 0x1a
     928:	df 01       	movw	r26, r30
     92a:	a8 0f       	add	r26, r24
     92c:	b1 1d       	adc	r27, r1
     92e:	5d 96       	adiw	r26, 0x1d	; 29
     930:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     932:	92 8d       	ldd	r25, Z+26	; 0x1a
     934:	9f 5f       	subi	r25, 0xFF	; 255
     936:	9f 73       	andi	r25, 0x3F	; 63
     938:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     93e:	8f ef       	ldi	r24, 0xFF	; 255
     940:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     942:	08 95       	ret

00000944 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     944:	87 ef       	ldi	r24, 0xF7	; 247
     946:	95 e0       	ldi	r25, 0x05	; 5
     948:	89 2b       	or	r24, r25
     94a:	49 f0       	breq	.+18     	; 0x95e <_Z14serialEventRunv+0x1a>
     94c:	80 e0       	ldi	r24, 0x00	; 0
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	89 2b       	or	r24, r25
     952:	29 f0       	breq	.+10     	; 0x95e <_Z14serialEventRunv+0x1a>
     954:	0e 94 f7 05 	call	0xbee	; 0xbee <_Z17Serial0_availablev>
     958:	81 11       	cpse	r24, r1
     95a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     95e:	08 95       	ret

00000960 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     960:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     962:	84 8d       	ldd	r24, Z+28	; 0x1c
     964:	df 01       	movw	r26, r30
     966:	a8 0f       	add	r26, r24
     968:	b1 1d       	adc	r27, r1
     96a:	a3 5a       	subi	r26, 0xA3	; 163
     96c:	bf 4f       	sbci	r27, 0xFF	; 255
     96e:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     970:	84 8d       	ldd	r24, Z+28	; 0x1c
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	01 96       	adiw	r24, 0x01	; 1
     976:	8f 73       	andi	r24, 0x3F	; 63
     978:	99 27       	eor	r25, r25
     97a:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     97c:	a6 89       	ldd	r26, Z+22	; 0x16
     97e:	b7 89       	ldd	r27, Z+23	; 0x17
     980:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     982:	a0 89       	ldd	r26, Z+16	; 0x10
     984:	b1 89       	ldd	r27, Z+17	; 0x11
     986:	8c 91       	ld	r24, X
     988:	80 64       	ori	r24, 0x40	; 64
     98a:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     98c:	93 8d       	ldd	r25, Z+27	; 0x1b
     98e:	84 8d       	ldd	r24, Z+28	; 0x1c
     990:	98 13       	cpse	r25, r24
     992:	06 c0       	rjmp	.+12     	; 0x9a0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     994:	02 88       	ldd	r0, Z+18	; 0x12
     996:	f3 89       	ldd	r31, Z+19	; 0x13
     998:	e0 2d       	mov	r30, r0
     99a:	80 81       	ld	r24, Z
     99c:	8f 7d       	andi	r24, 0xDF	; 223
     99e:	80 83       	st	Z, r24
     9a0:	08 95       	ret

000009a2 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     9a2:	ef 92       	push	r14
     9a4:	ff 92       	push	r15
     9a6:	0f 93       	push	r16
     9a8:	1f 93       	push	r17
     9aa:	cf 93       	push	r28
     9ac:	df 93       	push	r29
     9ae:	ec 01       	movw	r28, r24
  _written = true;
     9b0:	81 e0       	ldi	r24, 0x01	; 1
     9b2:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     9b4:	9b 8d       	ldd	r25, Y+27	; 0x1b
     9b6:	8c 8d       	ldd	r24, Y+28	; 0x1c
     9b8:	98 13       	cpse	r25, r24
     9ba:	05 c0       	rjmp	.+10     	; 0x9c6 <_ZN14HardwareSerial5writeEh+0x24>
     9bc:	e8 89       	ldd	r30, Y+16	; 0x10
     9be:	f9 89       	ldd	r31, Y+17	; 0x11
     9c0:	80 81       	ld	r24, Z
     9c2:	85 fd       	sbrc	r24, 5
     9c4:	24 c0       	rjmp	.+72     	; 0xa0e <_ZN14HardwareSerial5writeEh+0x6c>
     9c6:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     9c8:	0b 8d       	ldd	r16, Y+27	; 0x1b
     9ca:	10 e0       	ldi	r17, 0x00	; 0
     9cc:	0f 5f       	subi	r16, 0xFF	; 255
     9ce:	1f 4f       	sbci	r17, 0xFF	; 255
     9d0:	0f 73       	andi	r16, 0x3F	; 63
     9d2:	11 27       	eor	r17, r17
     9d4:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     9d6:	8c 8d       	ldd	r24, Y+28	; 0x1c
     9d8:	e8 12       	cpse	r14, r24
     9da:	0c c0       	rjmp	.+24     	; 0x9f4 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
     9dc:	0f b6       	in	r0, 0x3f	; 63
     9de:	07 fc       	sbrc	r0, 7
     9e0:	fa cf       	rjmp	.-12     	; 0x9d6 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     9e2:	e8 89       	ldd	r30, Y+16	; 0x10
     9e4:	f9 89       	ldd	r31, Y+17	; 0x11
     9e6:	80 81       	ld	r24, Z
     9e8:	85 ff       	sbrs	r24, 5
     9ea:	f5 cf       	rjmp	.-22     	; 0x9d6 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     9ec:	ce 01       	movw	r24, r28
     9ee:	0e 94 b0 04 	call	0x960	; 0x960 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     9f2:	f1 cf       	rjmp	.-30     	; 0x9d6 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     9f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     9f6:	fe 01       	movw	r30, r28
     9f8:	e8 0f       	add	r30, r24
     9fa:	f1 1d       	adc	r31, r1
     9fc:	e3 5a       	subi	r30, 0xA3	; 163
     9fe:	ff 4f       	sbci	r31, 0xFF	; 255
     a00:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
     a02:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
     a04:	ea 89       	ldd	r30, Y+18	; 0x12
     a06:	fb 89       	ldd	r31, Y+19	; 0x13
     a08:	80 81       	ld	r24, Z
     a0a:	80 62       	ori	r24, 0x20	; 32
     a0c:	07 c0       	rjmp	.+14     	; 0xa1c <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
     a0e:	ee 89       	ldd	r30, Y+22	; 0x16
     a10:	ff 89       	ldd	r31, Y+23	; 0x17
     a12:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
     a14:	e8 89       	ldd	r30, Y+16	; 0x10
     a16:	f9 89       	ldd	r31, Y+17	; 0x11
     a18:	80 81       	ld	r24, Z
     a1a:	80 64       	ori	r24, 0x40	; 64
     a1c:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
     a1e:	81 e0       	ldi	r24, 0x01	; 1
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	df 91       	pop	r29
     a24:	cf 91       	pop	r28
     a26:	1f 91       	pop	r17
     a28:	0f 91       	pop	r16
     a2a:	ff 90       	pop	r15
     a2c:	ef 90       	pop	r14
     a2e:	08 95       	ret

00000a30 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     a30:	cf 93       	push	r28
     a32:	df 93       	push	r29
     a34:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     a36:	88 8d       	ldd	r24, Y+24	; 0x18
     a38:	88 23       	and	r24, r24
     a3a:	c9 f0       	breq	.+50     	; 0xa6e <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     a3c:	ea 89       	ldd	r30, Y+18	; 0x12
     a3e:	fb 89       	ldd	r31, Y+19	; 0x13
     a40:	80 81       	ld	r24, Z
     a42:	85 fd       	sbrc	r24, 5
     a44:	05 c0       	rjmp	.+10     	; 0xa50 <_ZN14HardwareSerial5flushEv+0x20>
     a46:	a8 89       	ldd	r26, Y+16	; 0x10
     a48:	b9 89       	ldd	r27, Y+17	; 0x11
     a4a:	8c 91       	ld	r24, X
     a4c:	86 fd       	sbrc	r24, 6
     a4e:	0f c0       	rjmp	.+30     	; 0xa6e <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     a50:	0f b6       	in	r0, 0x3f	; 63
     a52:	07 fc       	sbrc	r0, 7
     a54:	f5 cf       	rjmp	.-22     	; 0xa40 <_ZN14HardwareSerial5flushEv+0x10>
     a56:	80 81       	ld	r24, Z
     a58:	85 ff       	sbrs	r24, 5
     a5a:	f2 cf       	rjmp	.-28     	; 0xa40 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     a5c:	a8 89       	ldd	r26, Y+16	; 0x10
     a5e:	b9 89       	ldd	r27, Y+17	; 0x11
     a60:	8c 91       	ld	r24, X
     a62:	85 ff       	sbrs	r24, 5
     a64:	ed cf       	rjmp	.-38     	; 0xa40 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     a66:	ce 01       	movw	r24, r28
     a68:	0e 94 b0 04 	call	0x960	; 0x960 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     a6c:	e7 cf       	rjmp	.-50     	; 0xa3c <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     a6e:	df 91       	pop	r29
     a70:	cf 91       	pop	r28
     a72:	08 95       	ret

00000a74 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     a74:	cf 92       	push	r12
     a76:	df 92       	push	r13
     a78:	ef 92       	push	r14
     a7a:	ff 92       	push	r15
     a7c:	1f 93       	push	r17
     a7e:	cf 93       	push	r28
     a80:	df 93       	push	r29
     a82:	ec 01       	movw	r28, r24
     a84:	6a 01       	movw	r12, r20
     a86:	7b 01       	movw	r14, r22
     a88:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     a8a:	e8 89       	ldd	r30, Y+16	; 0x10
     a8c:	f9 89       	ldd	r31, Y+17	; 0x11
     a8e:	82 e0       	ldi	r24, 0x02	; 2
     a90:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     a92:	41 15       	cp	r20, r1
     a94:	51 4e       	sbci	r21, 0xE1	; 225
     a96:	61 05       	cpc	r22, r1
     a98:	71 05       	cpc	r23, r1
     a9a:	b1 f0       	breq	.+44     	; 0xac8 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     a9c:	60 e0       	ldi	r22, 0x00	; 0
     a9e:	79 e0       	ldi	r23, 0x09	; 9
     aa0:	8d e3       	ldi	r24, 0x3D	; 61
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a7 01       	movw	r20, r14
     aa6:	96 01       	movw	r18, r12
     aa8:	0e 94 99 09 	call	0x1332	; 0x1332 <__udivmodsi4>
     aac:	da 01       	movw	r26, r20
     aae:	c9 01       	movw	r24, r18
     ab0:	01 97       	sbiw	r24, 0x01	; 1
     ab2:	a1 09       	sbc	r26, r1
     ab4:	b1 09       	sbc	r27, r1
     ab6:	b6 95       	lsr	r27
     ab8:	a7 95       	ror	r26
     aba:	97 95       	ror	r25
     abc:	87 95       	ror	r24
     abe:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     ac0:	21 15       	cp	r18, r1
     ac2:	80 e1       	ldi	r24, 0x10	; 16
     ac4:	38 07       	cpc	r19, r24
     ac6:	a8 f0       	brcs	.+42     	; 0xaf2 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     ac8:	e8 89       	ldd	r30, Y+16	; 0x10
     aca:	f9 89       	ldd	r31, Y+17	; 0x11
     acc:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     ace:	60 e8       	ldi	r22, 0x80	; 128
     ad0:	74 e8       	ldi	r23, 0x84	; 132
     ad2:	8e e1       	ldi	r24, 0x1E	; 30
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	a7 01       	movw	r20, r14
     ad8:	96 01       	movw	r18, r12
     ada:	0e 94 99 09 	call	0x1332	; 0x1332 <__udivmodsi4>
     ade:	da 01       	movw	r26, r20
     ae0:	c9 01       	movw	r24, r18
     ae2:	01 97       	sbiw	r24, 0x01	; 1
     ae4:	a1 09       	sbc	r26, r1
     ae6:	b1 09       	sbc	r27, r1
     ae8:	b6 95       	lsr	r27
     aea:	a7 95       	ror	r26
     aec:	97 95       	ror	r25
     aee:	87 95       	ror	r24
     af0:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     af2:	ec 85       	ldd	r30, Y+12	; 0x0c
     af4:	fd 85       	ldd	r31, Y+13	; 0x0d
     af6:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     af8:	ee 85       	ldd	r30, Y+14	; 0x0e
     afa:	ff 85       	ldd	r31, Y+15	; 0x0f
     afc:	20 83       	st	Z, r18

  _written = false;
     afe:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     b00:	ec 89       	ldd	r30, Y+20	; 0x14
     b02:	fd 89       	ldd	r31, Y+21	; 0x15
     b04:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     b06:	ea 89       	ldd	r30, Y+18	; 0x12
     b08:	fb 89       	ldd	r31, Y+19	; 0x13
     b0a:	80 81       	ld	r24, Z
     b0c:	80 61       	ori	r24, 0x10	; 16
     b0e:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     b10:	ea 89       	ldd	r30, Y+18	; 0x12
     b12:	fb 89       	ldd	r31, Y+19	; 0x13
     b14:	80 81       	ld	r24, Z
     b16:	88 60       	ori	r24, 0x08	; 8
     b18:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     b1a:	ea 89       	ldd	r30, Y+18	; 0x12
     b1c:	fb 89       	ldd	r31, Y+19	; 0x13
     b1e:	80 81       	ld	r24, Z
     b20:	80 68       	ori	r24, 0x80	; 128
     b22:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     b24:	ea 89       	ldd	r30, Y+18	; 0x12
     b26:	fb 89       	ldd	r31, Y+19	; 0x13
     b28:	80 81       	ld	r24, Z
     b2a:	8f 7d       	andi	r24, 0xDF	; 223
     b2c:	80 83       	st	Z, r24
}
     b2e:	df 91       	pop	r29
     b30:	cf 91       	pop	r28
     b32:	1f 91       	pop	r17
     b34:	ff 90       	pop	r15
     b36:	ef 90       	pop	r14
     b38:	df 90       	pop	r13
     b3a:	cf 90       	pop	r12
     b3c:	08 95       	ret

00000b3e <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     b3e:	1f 92       	push	r1
     b40:	0f 92       	push	r0
     b42:	0f b6       	in	r0, 0x3f	; 63
     b44:	0f 92       	push	r0
     b46:	11 24       	eor	r1, r1
     b48:	2f 93       	push	r18
     b4a:	8f 93       	push	r24
     b4c:	9f 93       	push	r25
     b4e:	ef 93       	push	r30
     b50:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     b52:	e0 91 5b 01 	lds	r30, 0x015B	; 0x80015b <Serial+0x10>
     b56:	f0 91 5c 01 	lds	r31, 0x015C	; 0x80015c <Serial+0x11>
     b5a:	80 81       	ld	r24, Z
     b5c:	e0 91 61 01 	lds	r30, 0x0161	; 0x800161 <Serial+0x16>
     b60:	f0 91 62 01 	lds	r31, 0x0162	; 0x800162 <Serial+0x17>
     b64:	82 fd       	sbrc	r24, 2
     b66:	12 c0       	rjmp	.+36     	; 0xb8c <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     b68:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     b6a:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <Serial+0x19>
     b6e:	8f 5f       	subi	r24, 0xFF	; 255
     b70:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     b72:	20 91 65 01 	lds	r18, 0x0165	; 0x800165 <Serial+0x1a>
     b76:	82 17       	cp	r24, r18
     b78:	51 f0       	breq	.+20     	; 0xb8e <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
     b7a:	e0 91 64 01 	lds	r30, 0x0164	; 0x800164 <Serial+0x19>
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	e5 5b       	subi	r30, 0xB5	; 181
     b82:	fe 4f       	sbci	r31, 0xFE	; 254
     b84:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     b86:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <Serial+0x19>
     b8a:	01 c0       	rjmp	.+2      	; 0xb8e <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     b8c:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     b8e:	ff 91       	pop	r31
     b90:	ef 91       	pop	r30
     b92:	9f 91       	pop	r25
     b94:	8f 91       	pop	r24
     b96:	2f 91       	pop	r18
     b98:	0f 90       	pop	r0
     b9a:	0f be       	out	0x3f, r0	; 63
     b9c:	0f 90       	pop	r0
     b9e:	1f 90       	pop	r1
     ba0:	18 95       	reti

00000ba2 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     ba2:	1f 92       	push	r1
     ba4:	0f 92       	push	r0
     ba6:	0f b6       	in	r0, 0x3f	; 63
     ba8:	0f 92       	push	r0
     baa:	11 24       	eor	r1, r1
     bac:	2f 93       	push	r18
     bae:	3f 93       	push	r19
     bb0:	4f 93       	push	r20
     bb2:	5f 93       	push	r21
     bb4:	6f 93       	push	r22
     bb6:	7f 93       	push	r23
     bb8:	8f 93       	push	r24
     bba:	9f 93       	push	r25
     bbc:	af 93       	push	r26
     bbe:	bf 93       	push	r27
     bc0:	ef 93       	push	r30
     bc2:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     bc4:	8b e4       	ldi	r24, 0x4B	; 75
     bc6:	91 e0       	ldi	r25, 0x01	; 1
     bc8:	0e 94 b0 04 	call	0x960	; 0x960 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     bcc:	ff 91       	pop	r31
     bce:	ef 91       	pop	r30
     bd0:	bf 91       	pop	r27
     bd2:	af 91       	pop	r26
     bd4:	9f 91       	pop	r25
     bd6:	8f 91       	pop	r24
     bd8:	7f 91       	pop	r23
     bda:	6f 91       	pop	r22
     bdc:	5f 91       	pop	r21
     bde:	4f 91       	pop	r20
     be0:	3f 91       	pop	r19
     be2:	2f 91       	pop	r18
     be4:	0f 90       	pop	r0
     be6:	0f be       	out	0x3f, r0	; 63
     be8:	0f 90       	pop	r0
     bea:	1f 90       	pop	r1
     bec:	18 95       	reti

00000bee <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     bee:	8b e4       	ldi	r24, 0x4B	; 75
     bf0:	91 e0       	ldi	r25, 0x01	; 1
     bf2:	0e 94 74 04 	call	0x8e8	; 0x8e8 <_ZN14HardwareSerial9availableEv>
     bf6:	21 e0       	ldi	r18, 0x01	; 1
     bf8:	89 2b       	or	r24, r25
     bfa:	09 f4       	brne	.+2      	; 0xbfe <_Z17Serial0_availablev+0x10>
     bfc:	20 e0       	ldi	r18, 0x00	; 0
}
     bfe:	82 2f       	mov	r24, r18
     c00:	08 95       	ret

00000c02 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     c02:	eb e4       	ldi	r30, 0x4B	; 75
     c04:	f1 e0       	ldi	r31, 0x01	; 1
     c06:	13 82       	std	Z+3, r1	; 0x03
     c08:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     c0a:	88 ee       	ldi	r24, 0xE8	; 232
     c0c:	93 e0       	ldi	r25, 0x03	; 3
     c0e:	a0 e0       	ldi	r26, 0x00	; 0
     c10:	b0 e0       	ldi	r27, 0x00	; 0
     c12:	84 83       	std	Z+4, r24	; 0x04
     c14:	95 83       	std	Z+5, r25	; 0x05
     c16:	a6 83       	std	Z+6, r26	; 0x06
     c18:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     c1a:	8f e1       	ldi	r24, 0x1F	; 31
     c1c:	91 e0       	ldi	r25, 0x01	; 1
     c1e:	91 83       	std	Z+1, r25	; 0x01
     c20:	80 83       	st	Z, r24
     c22:	85 ec       	ldi	r24, 0xC5	; 197
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	95 87       	std	Z+13, r25	; 0x0d
     c28:	84 87       	std	Z+12, r24	; 0x0c
     c2a:	84 ec       	ldi	r24, 0xC4	; 196
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	97 87       	std	Z+15, r25	; 0x0f
     c30:	86 87       	std	Z+14, r24	; 0x0e
     c32:	80 ec       	ldi	r24, 0xC0	; 192
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	91 8b       	std	Z+17, r25	; 0x11
     c38:	80 8b       	std	Z+16, r24	; 0x10
     c3a:	81 ec       	ldi	r24, 0xC1	; 193
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	93 8b       	std	Z+19, r25	; 0x13
     c40:	82 8b       	std	Z+18, r24	; 0x12
     c42:	82 ec       	ldi	r24, 0xC2	; 194
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	95 8b       	std	Z+21, r25	; 0x15
     c48:	84 8b       	std	Z+20, r24	; 0x14
     c4a:	86 ec       	ldi	r24, 0xC6	; 198
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	97 8b       	std	Z+23, r25	; 0x17
     c50:	86 8b       	std	Z+22, r24	; 0x16
     c52:	11 8e       	std	Z+25, r1	; 0x19
     c54:	12 8e       	std	Z+26, r1	; 0x1a
     c56:	13 8e       	std	Z+27, r1	; 0x1b
     c58:	14 8e       	std	Z+28, r1	; 0x1c
     c5a:	08 95       	ret

00000c5c <initVariant>:
     c5c:	08 95       	ret

00000c5e <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     c5e:	0e 94 a0 08 	call	0x1140	; 0x1140 <init>

	initVariant();
     c62:	0e 94 2e 06 	call	0xc5c	; 0xc5c <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     c66:	0e 94 8d 00 	call	0x11a	; 0x11a <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     c6a:	c2 ea       	ldi	r28, 0xA2	; 162
     c6c:	d4 e0       	ldi	r29, 0x04	; 4
#endif
	
	setup();
    
	for (;;) {
		loop();
     c6e:	0e 94 cf 00 	call	0x19e	; 0x19e <loop>
		if (serialEventRun) serialEventRun();
     c72:	20 97       	sbiw	r28, 0x00	; 0
     c74:	e1 f3       	breq	.-8      	; 0xc6e <main+0x10>
     c76:	0e 94 a2 04 	call	0x944	; 0x944 <_Z14serialEventRunv>
     c7a:	f9 cf       	rjmp	.-14     	; 0xc6e <main+0x10>

00000c7c <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     c7c:	cf 92       	push	r12
     c7e:	df 92       	push	r13
     c80:	ef 92       	push	r14
     c82:	ff 92       	push	r15
     c84:	0f 93       	push	r16
     c86:	1f 93       	push	r17
     c88:	cf 93       	push	r28
     c8a:	df 93       	push	r29
     c8c:	6c 01       	movw	r12, r24
     c8e:	7a 01       	movw	r14, r20
     c90:	8b 01       	movw	r16, r22
     c92:	c0 e0       	ldi	r28, 0x00	; 0
     c94:	d0 e0       	ldi	r29, 0x00	; 0
     c96:	ce 15       	cp	r28, r14
     c98:	df 05       	cpc	r29, r15
     c9a:	81 f0       	breq	.+32     	; 0xcbc <_ZN5Print5writeEPKhj+0x40>
     c9c:	d8 01       	movw	r26, r16
     c9e:	6d 91       	ld	r22, X+
     ca0:	8d 01       	movw	r16, r26
     ca2:	d6 01       	movw	r26, r12
     ca4:	ed 91       	ld	r30, X+
     ca6:	fc 91       	ld	r31, X
     ca8:	01 90       	ld	r0, Z+
     caa:	f0 81       	ld	r31, Z
     cac:	e0 2d       	mov	r30, r0
     cae:	c6 01       	movw	r24, r12
     cb0:	09 95       	icall
     cb2:	89 2b       	or	r24, r25
     cb4:	11 f0       	breq	.+4      	; 0xcba <_ZN5Print5writeEPKhj+0x3e>
     cb6:	21 96       	adiw	r28, 0x01	; 1
     cb8:	ee cf       	rjmp	.-36     	; 0xc96 <_ZN5Print5writeEPKhj+0x1a>
     cba:	7e 01       	movw	r14, r28
     cbc:	c7 01       	movw	r24, r14
     cbe:	df 91       	pop	r29
     cc0:	cf 91       	pop	r28
     cc2:	1f 91       	pop	r17
     cc4:	0f 91       	pop	r16
     cc6:	ff 90       	pop	r15
     cc8:	ef 90       	pop	r14
     cca:	df 90       	pop	r13
     ccc:	cf 90       	pop	r12
     cce:	08 95       	ret

00000cd0 <_ZN5Print5writeEPKc>:
     cd0:	61 15       	cp	r22, r1
     cd2:	71 05       	cpc	r23, r1
     cd4:	79 f0       	breq	.+30     	; 0xcf4 <_ZN5Print5writeEPKc+0x24>
     cd6:	fb 01       	movw	r30, r22
     cd8:	01 90       	ld	r0, Z+
     cda:	00 20       	and	r0, r0
     cdc:	e9 f7       	brne	.-6      	; 0xcd8 <_ZN5Print5writeEPKc+0x8>
     cde:	31 97       	sbiw	r30, 0x01	; 1
     ce0:	af 01       	movw	r20, r30
     ce2:	46 1b       	sub	r20, r22
     ce4:	57 0b       	sbc	r21, r23
     ce6:	dc 01       	movw	r26, r24
     ce8:	ed 91       	ld	r30, X+
     cea:	fc 91       	ld	r31, X
     cec:	02 80       	ldd	r0, Z+2	; 0x02
     cee:	f3 81       	ldd	r31, Z+3	; 0x03
     cf0:	e0 2d       	mov	r30, r0
     cf2:	09 94       	ijmp
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	08 95       	ret

00000cfa <_ZN5Print5printEPKc>:
     cfa:	0c 94 68 06 	jmp	0xcd0	; 0xcd0 <_ZN5Print5writeEPKc>

00000cfe <_ZN5Print5printEc>:
     cfe:	dc 01       	movw	r26, r24
     d00:	ed 91       	ld	r30, X+
     d02:	fc 91       	ld	r31, X
     d04:	01 90       	ld	r0, Z+
     d06:	f0 81       	ld	r31, Z
     d08:	e0 2d       	mov	r30, r0
     d0a:	09 94       	ijmp

00000d0c <_ZN5Print11printNumberEmh>:
     d0c:	8f 92       	push	r8
     d0e:	9f 92       	push	r9
     d10:	af 92       	push	r10
     d12:	bf 92       	push	r11
     d14:	cf 92       	push	r12
     d16:	df 92       	push	r13
     d18:	ef 92       	push	r14
     d1a:	ff 92       	push	r15
     d1c:	0f 93       	push	r16
     d1e:	1f 93       	push	r17
     d20:	cf 93       	push	r28
     d22:	df 93       	push	r29
     d24:	cd b7       	in	r28, 0x3d	; 61
     d26:	de b7       	in	r29, 0x3e	; 62
     d28:	a1 97       	sbiw	r28, 0x21	; 33
     d2a:	0f b6       	in	r0, 0x3f	; 63
     d2c:	f8 94       	cli
     d2e:	de bf       	out	0x3e, r29	; 62
     d30:	0f be       	out	0x3f, r0	; 63
     d32:	cd bf       	out	0x3d, r28	; 61
     d34:	6c 01       	movw	r12, r24
     d36:	14 2f       	mov	r17, r20
     d38:	e5 2f       	mov	r30, r21
     d3a:	cb 01       	movw	r24, r22
     d3c:	02 2f       	mov	r16, r18
     d3e:	19 a2       	std	Y+33, r1	; 0x21
     d40:	22 30       	cpi	r18, 0x02	; 2
     d42:	08 f4       	brcc	.+2      	; 0xd46 <_ZN5Print11printNumberEmh+0x3a>
     d44:	0a e0       	ldi	r16, 0x0A	; 10
     d46:	7e 01       	movw	r14, r28
     d48:	21 e2       	ldi	r18, 0x21	; 33
     d4a:	e2 0e       	add	r14, r18
     d4c:	f1 1c       	adc	r15, r1
     d4e:	80 2e       	mov	r8, r16
     d50:	91 2c       	mov	r9, r1
     d52:	a1 2c       	mov	r10, r1
     d54:	b1 2c       	mov	r11, r1
     d56:	61 2f       	mov	r22, r17
     d58:	7e 2f       	mov	r23, r30
     d5a:	a5 01       	movw	r20, r10
     d5c:	94 01       	movw	r18, r8
     d5e:	0e 94 99 09 	call	0x1332	; 0x1332 <__udivmodsi4>
     d62:	02 9f       	mul	r16, r18
     d64:	10 19       	sub	r17, r0
     d66:	11 24       	eor	r1, r1
     d68:	81 e0       	ldi	r24, 0x01	; 1
     d6a:	e8 1a       	sub	r14, r24
     d6c:	f1 08       	sbc	r15, r1
     d6e:	1a 30       	cpi	r17, 0x0A	; 10
     d70:	10 f4       	brcc	.+4      	; 0xd76 <_ZN5Print11printNumberEmh+0x6a>
     d72:	10 5d       	subi	r17, 0xD0	; 208
     d74:	01 c0       	rjmp	.+2      	; 0xd78 <_ZN5Print11printNumberEmh+0x6c>
     d76:	19 5c       	subi	r17, 0xC9	; 201
     d78:	f7 01       	movw	r30, r14
     d7a:	10 83       	st	Z, r17
     d7c:	12 2f       	mov	r17, r18
     d7e:	e3 2f       	mov	r30, r19
     d80:	ca 01       	movw	r24, r20
     d82:	23 2b       	or	r18, r19
     d84:	24 2b       	or	r18, r20
     d86:	25 2b       	or	r18, r21
     d88:	31 f7       	brne	.-52     	; 0xd56 <_ZN5Print11printNumberEmh+0x4a>
     d8a:	b7 01       	movw	r22, r14
     d8c:	c6 01       	movw	r24, r12
     d8e:	0e 94 68 06 	call	0xcd0	; 0xcd0 <_ZN5Print5writeEPKc>
     d92:	a1 96       	adiw	r28, 0x21	; 33
     d94:	0f b6       	in	r0, 0x3f	; 63
     d96:	f8 94       	cli
     d98:	de bf       	out	0x3e, r29	; 62
     d9a:	0f be       	out	0x3f, r0	; 63
     d9c:	cd bf       	out	0x3d, r28	; 61
     d9e:	df 91       	pop	r29
     da0:	cf 91       	pop	r28
     da2:	1f 91       	pop	r17
     da4:	0f 91       	pop	r16
     da6:	ff 90       	pop	r15
     da8:	ef 90       	pop	r14
     daa:	df 90       	pop	r13
     dac:	cf 90       	pop	r12
     dae:	bf 90       	pop	r11
     db0:	af 90       	pop	r10
     db2:	9f 90       	pop	r9
     db4:	8f 90       	pop	r8
     db6:	08 95       	ret

00000db8 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
     db8:	cf 92       	push	r12
     dba:	df 92       	push	r13
     dbc:	ef 92       	push	r14
     dbe:	ff 92       	push	r15
     dc0:	0f 93       	push	r16
     dc2:	1f 93       	push	r17
     dc4:	cf 93       	push	r28
     dc6:	df 93       	push	r29
  if (base == 0) {
     dc8:	21 15       	cp	r18, r1
     dca:	31 05       	cpc	r19, r1
     dcc:	81 f4       	brne	.+32     	; 0xdee <_ZN5Print5printEli+0x36>
    return write(n);
     dce:	dc 01       	movw	r26, r24
     dd0:	ed 91       	ld	r30, X+
     dd2:	fc 91       	ld	r31, X
     dd4:	01 90       	ld	r0, Z+
     dd6:	f0 81       	ld	r31, Z
     dd8:	e0 2d       	mov	r30, r0
     dda:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     ddc:	df 91       	pop	r29
     dde:	cf 91       	pop	r28
     de0:	1f 91       	pop	r17
     de2:	0f 91       	pop	r16
     de4:	ff 90       	pop	r15
     de6:	ef 90       	pop	r14
     de8:	df 90       	pop	r13
     dea:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
     dec:	09 94       	ijmp
  } else if (base == 10) {
     dee:	2a 30       	cpi	r18, 0x0A	; 10
     df0:	31 05       	cpc	r19, r1
     df2:	01 f5       	brne	.+64     	; 0xe34 <_ZN5Print5printEli+0x7c>
    if (n < 0) {
     df4:	77 ff       	sbrs	r23, 7
     df6:	1d c0       	rjmp	.+58     	; 0xe32 <_ZN5Print5printEli+0x7a>
     df8:	6a 01       	movw	r12, r20
     dfa:	7b 01       	movw	r14, r22
     dfc:	ec 01       	movw	r28, r24
      int t = print('-');
     dfe:	6d e2       	ldi	r22, 0x2D	; 45
     e00:	0e 94 7f 06 	call	0xcfe	; 0xcfe <_ZN5Print5printEc>
     e04:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
     e06:	44 27       	eor	r20, r20
     e08:	55 27       	eor	r21, r21
     e0a:	ba 01       	movw	r22, r20
     e0c:	4c 19       	sub	r20, r12
     e0e:	5d 09       	sbc	r21, r13
     e10:	6e 09       	sbc	r22, r14
     e12:	7f 09       	sbc	r23, r15
     e14:	2a e0       	ldi	r18, 0x0A	; 10
     e16:	ce 01       	movw	r24, r28
     e18:	0e 94 86 06 	call	0xd0c	; 0xd0c <_ZN5Print11printNumberEmh>
     e1c:	80 0f       	add	r24, r16
     e1e:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     e20:	df 91       	pop	r29
     e22:	cf 91       	pop	r28
     e24:	1f 91       	pop	r17
     e26:	0f 91       	pop	r16
     e28:	ff 90       	pop	r15
     e2a:	ef 90       	pop	r14
     e2c:	df 90       	pop	r13
     e2e:	cf 90       	pop	r12
     e30:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
     e32:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
     e34:	df 91       	pop	r29
     e36:	cf 91       	pop	r28
     e38:	1f 91       	pop	r17
     e3a:	0f 91       	pop	r16
     e3c:	ff 90       	pop	r15
     e3e:	ef 90       	pop	r14
     e40:	df 90       	pop	r13
     e42:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
     e44:	0c 94 86 06 	jmp	0xd0c	; 0xd0c <_ZN5Print11printNumberEmh>

00000e48 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
     e48:	9a 01       	movw	r18, r20
  return print((long) n, base);
     e4a:	ab 01       	movw	r20, r22
     e4c:	77 0f       	add	r23, r23
     e4e:	66 0b       	sbc	r22, r22
     e50:	77 0b       	sbc	r23, r23
     e52:	0c 94 dc 06 	jmp	0xdb8	; 0xdb8 <_ZN5Print5printEli>

00000e56 <_ZN6Stream9timedPeekEv>:
// Public Methods
//////////////////////////////////////////////////////////////

void Stream::setTimeout(unsigned long timeout)  // sets the maximum number of milliseconds to wait
{
  _timeout = timeout;
     e56:	0f 93       	push	r16
     e58:	1f 93       	push	r17
     e5a:	cf 93       	push	r28
     e5c:	df 93       	push	r29
     e5e:	ec 01       	movw	r28, r24
     e60:	0e 94 47 08 	call	0x108e	; 0x108e <millis>
     e64:	68 87       	std	Y+8, r22	; 0x08
     e66:	79 87       	std	Y+9, r23	; 0x09
     e68:	8a 87       	std	Y+10, r24	; 0x0a
     e6a:	9b 87       	std	Y+11, r25	; 0x0b
     e6c:	e8 81       	ld	r30, Y
     e6e:	f9 81       	ldd	r31, Y+1	; 0x01
     e70:	00 84       	ldd	r0, Z+8	; 0x08
     e72:	f1 85       	ldd	r31, Z+9	; 0x09
     e74:	e0 2d       	mov	r30, r0
     e76:	ce 01       	movw	r24, r28
     e78:	09 95       	icall
     e7a:	97 ff       	sbrs	r25, 7
     e7c:	17 c0       	rjmp	.+46     	; 0xeac <_ZN6Stream9timedPeekEv+0x56>
     e7e:	0e 94 47 08 	call	0x108e	; 0x108e <millis>
     e82:	08 85       	ldd	r16, Y+8	; 0x08
     e84:	19 85       	ldd	r17, Y+9	; 0x09
     e86:	2a 85       	ldd	r18, Y+10	; 0x0a
     e88:	3b 85       	ldd	r19, Y+11	; 0x0b
     e8a:	dc 01       	movw	r26, r24
     e8c:	cb 01       	movw	r24, r22
     e8e:	80 1b       	sub	r24, r16
     e90:	91 0b       	sbc	r25, r17
     e92:	a2 0b       	sbc	r26, r18
     e94:	b3 0b       	sbc	r27, r19
     e96:	0c 81       	ldd	r16, Y+4	; 0x04
     e98:	1d 81       	ldd	r17, Y+5	; 0x05
     e9a:	2e 81       	ldd	r18, Y+6	; 0x06
     e9c:	3f 81       	ldd	r19, Y+7	; 0x07
     e9e:	80 17       	cp	r24, r16
     ea0:	91 07       	cpc	r25, r17
     ea2:	a2 07       	cpc	r26, r18
     ea4:	b3 07       	cpc	r27, r19
     ea6:	10 f3       	brcs	.-60     	; 0xe6c <_ZN6Stream9timedPeekEv+0x16>
     ea8:	8f ef       	ldi	r24, 0xFF	; 255
     eaa:	9f ef       	ldi	r25, 0xFF	; 255
     eac:	df 91       	pop	r29
     eae:	cf 91       	pop	r28
     eb0:	1f 91       	pop	r17
     eb2:	0f 91       	pop	r16
     eb4:	08 95       	ret

00000eb6 <_ZN6Stream13peekNextDigitE13LookaheadModeb>:
     eb6:	0f 93       	push	r16
     eb8:	1f 93       	push	r17
     eba:	cf 93       	push	r28
     ebc:	df 93       	push	r29
     ebe:	ec 01       	movw	r28, r24
     ec0:	16 2f       	mov	r17, r22
     ec2:	04 2f       	mov	r16, r20
     ec4:	ce 01       	movw	r24, r28
     ec6:	0e 94 2b 07 	call	0xe56	; 0xe56 <_ZN6Stream9timedPeekEv>
     eca:	97 fd       	sbrc	r25, 7
     ecc:	2b c0       	rjmp	.+86     	; 0xf24 <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x6e>
     ece:	8d 32       	cpi	r24, 0x2D	; 45
     ed0:	91 05       	cpc	r25, r1
     ed2:	09 f1       	breq	.+66     	; 0xf16 <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x60>
     ed4:	9c 01       	movw	r18, r24
     ed6:	20 53       	subi	r18, 0x30	; 48
     ed8:	31 09       	sbc	r19, r1
     eda:	2a 30       	cpi	r18, 0x0A	; 10
     edc:	31 05       	cpc	r19, r1
     ede:	10 f1       	brcs	.+68     	; 0xf24 <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x6e>
     ee0:	00 23       	and	r16, r16
     ee2:	19 f0       	breq	.+6      	; 0xeea <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x34>
     ee4:	8e 32       	cpi	r24, 0x2E	; 46
     ee6:	91 05       	cpc	r25, r1
     ee8:	c1 f0       	breq	.+48     	; 0xf1a <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x64>
     eea:	11 30       	cpi	r17, 0x01	; 1
     eec:	c9 f0       	breq	.+50     	; 0xf20 <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x6a>
     eee:	12 30       	cpi	r17, 0x02	; 2
     ef0:	51 f4       	brne	.+20     	; 0xf06 <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x50>
     ef2:	8d 30       	cpi	r24, 0x0D	; 13
     ef4:	91 05       	cpc	r25, r1
     ef6:	39 f0       	breq	.+14     	; 0xf06 <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x50>
     ef8:	24 f4       	brge	.+8      	; 0xf02 <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x4c>
     efa:	09 97       	sbiw	r24, 0x09	; 9
     efc:	02 97       	sbiw	r24, 0x02	; 2
     efe:	18 f0       	brcs	.+6      	; 0xf06 <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x50>
     f00:	0f c0       	rjmp	.+30     	; 0xf20 <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x6a>
     f02:	80 97       	sbiw	r24, 0x20	; 32
     f04:	69 f4       	brne	.+26     	; 0xf20 <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x6a>
     f06:	e8 81       	ld	r30, Y
     f08:	f9 81       	ldd	r31, Y+1	; 0x01
     f0a:	06 80       	ldd	r0, Z+6	; 0x06
     f0c:	f7 81       	ldd	r31, Z+7	; 0x07
     f0e:	e0 2d       	mov	r30, r0
     f10:	ce 01       	movw	r24, r28
     f12:	09 95       	icall
     f14:	d7 cf       	rjmp	.-82     	; 0xec4 <_ZN6Stream13peekNextDigitE13LookaheadModeb+0xe>
     f16:	8d e2       	ldi	r24, 0x2D	; 45
     f18:	01 c0       	rjmp	.+2      	; 0xf1c <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x66>
     f1a:	8e e2       	ldi	r24, 0x2E	; 46
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	02 c0       	rjmp	.+4      	; 0xf24 <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x6e>
     f20:	8f ef       	ldi	r24, 0xFF	; 255
     f22:	9f ef       	ldi	r25, 0xFF	; 255
     f24:	df 91       	pop	r29
     f26:	cf 91       	pop	r28
     f28:	1f 91       	pop	r17
     f2a:	0f 91       	pop	r16
     f2c:	08 95       	ret

00000f2e <_ZN6Stream8parseIntE13LookaheadModec>:
// lookahead determines how parseInt looks ahead in the stream.
// See LookaheadMode enumeration at the top of the file.
// Lookahead is terminated by the first character that is not a valid part of an integer.
// Once parsing commences, 'ignore' will be skipped in the stream.
long Stream::parseInt(LookaheadMode lookahead, char ignore)
{
     f2e:	bf 92       	push	r11
     f30:	cf 92       	push	r12
     f32:	df 92       	push	r13
     f34:	ef 92       	push	r14
     f36:	ff 92       	push	r15
     f38:	0f 93       	push	r16
     f3a:	1f 93       	push	r17
     f3c:	cf 93       	push	r28
     f3e:	df 93       	push	r29
     f40:	8c 01       	movw	r16, r24
     f42:	c4 2f       	mov	r28, r20
  bool isNegative = false;
  long value = 0;
  int c;

  c = peekNextDigit(lookahead, false);
     f44:	40 e0       	ldi	r20, 0x00	; 0
     f46:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <_ZN6Stream13peekNextDigitE13LookaheadModeb>
     f4a:	fc 01       	movw	r30, r24
  // ignore non numeric leading characters
  if(c < 0)
     f4c:	97 fd       	sbrc	r25, 7
     f4e:	45 c0       	rjmp	.+138    	; 0xfda <_ZN6Stream8parseIntE13LookaheadModec+0xac>
     f50:	c1 2c       	mov	r12, r1
     f52:	d1 2c       	mov	r13, r1
     f54:	76 01       	movw	r14, r12
     f56:	b1 2c       	mov	r11, r1
    return 0; // zero returned if timeout

  do{
    if(c == ignore)
     f58:	d0 e0       	ldi	r29, 0x00	; 0
     f5a:	ec 17       	cp	r30, r28
     f5c:	fd 07       	cpc	r31, r29
     f5e:	09 f1       	breq	.+66     	; 0xfa2 <_ZN6Stream8parseIntE13LookaheadModec+0x74>
      ; // ignore this character
    else if(c == '-')
     f60:	ed 32       	cpi	r30, 0x2D	; 45
     f62:	f1 05       	cpc	r31, r1
     f64:	e1 f0       	breq	.+56     	; 0xf9e <_ZN6Stream8parseIntE13LookaheadModec+0x70>
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
     f66:	cf 01       	movw	r24, r30
     f68:	c0 97       	sbiw	r24, 0x30	; 48
     f6a:	0a 97       	sbiw	r24, 0x0a	; 10
     f6c:	d0 f4       	brcc	.+52     	; 0xfa2 <_ZN6Stream8parseIntE13LookaheadModec+0x74>
      value = value * 10 + c - '0';
     f6e:	aa e0       	ldi	r26, 0x0A	; 10
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	a7 01       	movw	r20, r14
     f74:	96 01       	movw	r18, r12
     f76:	0e 94 bb 09 	call	0x1376	; 0x1376 <__muluhisi3>
     f7a:	6f 01       	movw	r12, r30
     f7c:	ff 0f       	add	r31, r31
     f7e:	ee 08       	sbc	r14, r14
     f80:	ff 08       	sbc	r15, r15
     f82:	dc 01       	movw	r26, r24
     f84:	cb 01       	movw	r24, r22
     f86:	8c 0d       	add	r24, r12
     f88:	9d 1d       	adc	r25, r13
     f8a:	ae 1d       	adc	r26, r14
     f8c:	bf 1d       	adc	r27, r15
     f8e:	6c 01       	movw	r12, r24
     f90:	7d 01       	movw	r14, r26
     f92:	20 e3       	ldi	r18, 0x30	; 48
     f94:	c2 1a       	sub	r12, r18
     f96:	d1 08       	sbc	r13, r1
     f98:	e1 08       	sbc	r14, r1
     f9a:	f1 08       	sbc	r15, r1
     f9c:	02 c0       	rjmp	.+4      	; 0xfa2 <_ZN6Stream8parseIntE13LookaheadModec+0x74>

  do{
    if(c == ignore)
      ; // ignore this character
    else if(c == '-')
      isNegative = true;
     f9e:	bb 24       	eor	r11, r11
     fa0:	b3 94       	inc	r11
    else if(c >= '0' && c <= '9')        // is c a digit?
      value = value * 10 + c - '0';
    read();  // consume the character we got with peek
     fa2:	d8 01       	movw	r26, r16
     fa4:	ed 91       	ld	r30, X+
     fa6:	fc 91       	ld	r31, X
     fa8:	06 80       	ldd	r0, Z+6	; 0x06
     faa:	f7 81       	ldd	r31, Z+7	; 0x07
     fac:	e0 2d       	mov	r30, r0
     fae:	c8 01       	movw	r24, r16
     fb0:	09 95       	icall
    c = timedPeek();
     fb2:	c8 01       	movw	r24, r16
     fb4:	0e 94 2b 07 	call	0xe56	; 0xe56 <_ZN6Stream9timedPeekEv>
     fb8:	fc 01       	movw	r30, r24
  }
  while( (c >= '0' && c <= '9') || c == ignore );
     fba:	c0 97       	sbiw	r24, 0x30	; 48
     fbc:	0a 97       	sbiw	r24, 0x0a	; 10
     fbe:	68 f2       	brcs	.-102    	; 0xf5a <_ZN6Stream8parseIntE13LookaheadModec+0x2c>
     fc0:	ce 17       	cp	r28, r30
     fc2:	df 07       	cpc	r29, r31
     fc4:	51 f2       	breq	.-108    	; 0xf5a <_ZN6Stream8parseIntE13LookaheadModec+0x2c>

  if(isNegative)
     fc6:	bb 20       	and	r11, r11
     fc8:	61 f0       	breq	.+24     	; 0xfe2 <_ZN6Stream8parseIntE13LookaheadModec+0xb4>
    value = -value;
     fca:	66 27       	eor	r22, r22
     fcc:	77 27       	eor	r23, r23
     fce:	cb 01       	movw	r24, r22
     fd0:	6c 19       	sub	r22, r12
     fd2:	7d 09       	sbc	r23, r13
     fd4:	8e 09       	sbc	r24, r14
     fd6:	9f 09       	sbc	r25, r15
     fd8:	06 c0       	rjmp	.+12     	; 0xfe6 <_ZN6Stream8parseIntE13LookaheadModec+0xb8>
  int c;

  c = peekNextDigit(lookahead, false);
  // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout
     fda:	60 e0       	ldi	r22, 0x00	; 0
     fdc:	70 e0       	ldi	r23, 0x00	; 0
     fde:	cb 01       	movw	r24, r22
     fe0:	02 c0       	rjmp	.+4      	; 0xfe6 <_ZN6Stream8parseIntE13LookaheadModec+0xb8>
     fe2:	c7 01       	movw	r24, r14
     fe4:	b6 01       	movw	r22, r12
  while( (c >= '0' && c <= '9') || c == ignore );

  if(isNegative)
    value = -value;
  return value;
}
     fe6:	df 91       	pop	r29
     fe8:	cf 91       	pop	r28
     fea:	1f 91       	pop	r17
     fec:	0f 91       	pop	r16
     fee:	ff 90       	pop	r15
     ff0:	ef 90       	pop	r14
     ff2:	df 90       	pop	r13
     ff4:	cf 90       	pop	r12
     ff6:	bf 90       	pop	r11
     ff8:	08 95       	ret

00000ffa <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
     ffa:	1f 92       	push	r1
     ffc:	0f 92       	push	r0
     ffe:	0f b6       	in	r0, 0x3f	; 63
    1000:	0f 92       	push	r0
    1002:	11 24       	eor	r1, r1
    1004:	2f 93       	push	r18
    1006:	3f 93       	push	r19
    1008:	8f 93       	push	r24
    100a:	9f 93       	push	r25
    100c:	af 93       	push	r26
    100e:	bf 93       	push	r27
    1010:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <timer0_millis>
    1014:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <timer0_millis+0x1>
    1018:	a0 91 eb 01 	lds	r26, 0x01EB	; 0x8001eb <timer0_millis+0x2>
    101c:	b0 91 ec 01 	lds	r27, 0x01EC	; 0x8001ec <timer0_millis+0x3>
    1020:	30 91 e8 01 	lds	r19, 0x01E8	; 0x8001e8 <timer0_fract>
    1024:	23 e0       	ldi	r18, 0x03	; 3
    1026:	23 0f       	add	r18, r19
    1028:	2d 37       	cpi	r18, 0x7D	; 125
    102a:	20 f4       	brcc	.+8      	; 0x1034 <__vector_16+0x3a>
    102c:	01 96       	adiw	r24, 0x01	; 1
    102e:	a1 1d       	adc	r26, r1
    1030:	b1 1d       	adc	r27, r1
    1032:	05 c0       	rjmp	.+10     	; 0x103e <__vector_16+0x44>
    1034:	26 e8       	ldi	r18, 0x86	; 134
    1036:	23 0f       	add	r18, r19
    1038:	02 96       	adiw	r24, 0x02	; 2
    103a:	a1 1d       	adc	r26, r1
    103c:	b1 1d       	adc	r27, r1
    103e:	20 93 e8 01 	sts	0x01E8, r18	; 0x8001e8 <timer0_fract>
    1042:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <timer0_millis>
    1046:	90 93 ea 01 	sts	0x01EA, r25	; 0x8001ea <timer0_millis+0x1>
    104a:	a0 93 eb 01 	sts	0x01EB, r26	; 0x8001eb <timer0_millis+0x2>
    104e:	b0 93 ec 01 	sts	0x01EC, r27	; 0x8001ec <timer0_millis+0x3>
    1052:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <timer0_overflow_count>
    1056:	90 91 ee 01 	lds	r25, 0x01EE	; 0x8001ee <timer0_overflow_count+0x1>
    105a:	a0 91 ef 01 	lds	r26, 0x01EF	; 0x8001ef <timer0_overflow_count+0x2>
    105e:	b0 91 f0 01 	lds	r27, 0x01F0	; 0x8001f0 <timer0_overflow_count+0x3>
    1062:	01 96       	adiw	r24, 0x01	; 1
    1064:	a1 1d       	adc	r26, r1
    1066:	b1 1d       	adc	r27, r1
    1068:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <timer0_overflow_count>
    106c:	90 93 ee 01 	sts	0x01EE, r25	; 0x8001ee <timer0_overflow_count+0x1>
    1070:	a0 93 ef 01 	sts	0x01EF, r26	; 0x8001ef <timer0_overflow_count+0x2>
    1074:	b0 93 f0 01 	sts	0x01F0, r27	; 0x8001f0 <timer0_overflow_count+0x3>
    1078:	bf 91       	pop	r27
    107a:	af 91       	pop	r26
    107c:	9f 91       	pop	r25
    107e:	8f 91       	pop	r24
    1080:	3f 91       	pop	r19
    1082:	2f 91       	pop	r18
    1084:	0f 90       	pop	r0
    1086:	0f be       	out	0x3f, r0	; 63
    1088:	0f 90       	pop	r0
    108a:	1f 90       	pop	r1
    108c:	18 95       	reti

0000108e <millis>:
    108e:	2f b7       	in	r18, 0x3f	; 63
    1090:	f8 94       	cli
    1092:	60 91 e9 01 	lds	r22, 0x01E9	; 0x8001e9 <timer0_millis>
    1096:	70 91 ea 01 	lds	r23, 0x01EA	; 0x8001ea <timer0_millis+0x1>
    109a:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <timer0_millis+0x2>
    109e:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <timer0_millis+0x3>
    10a2:	2f bf       	out	0x3f, r18	; 63
    10a4:	08 95       	ret

000010a6 <micros>:
    10a6:	3f b7       	in	r19, 0x3f	; 63
    10a8:	f8 94       	cli
    10aa:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <timer0_overflow_count>
    10ae:	90 91 ee 01 	lds	r25, 0x01EE	; 0x8001ee <timer0_overflow_count+0x1>
    10b2:	a0 91 ef 01 	lds	r26, 0x01EF	; 0x8001ef <timer0_overflow_count+0x2>
    10b6:	b0 91 f0 01 	lds	r27, 0x01F0	; 0x8001f0 <timer0_overflow_count+0x3>
    10ba:	26 b5       	in	r18, 0x26	; 38
    10bc:	a8 9b       	sbis	0x15, 0	; 21
    10be:	05 c0       	rjmp	.+10     	; 0x10ca <micros+0x24>
    10c0:	2f 3f       	cpi	r18, 0xFF	; 255
    10c2:	19 f0       	breq	.+6      	; 0x10ca <micros+0x24>
    10c4:	01 96       	adiw	r24, 0x01	; 1
    10c6:	a1 1d       	adc	r26, r1
    10c8:	b1 1d       	adc	r27, r1
    10ca:	3f bf       	out	0x3f, r19	; 63
    10cc:	ba 2f       	mov	r27, r26
    10ce:	a9 2f       	mov	r26, r25
    10d0:	98 2f       	mov	r25, r24
    10d2:	88 27       	eor	r24, r24
    10d4:	82 0f       	add	r24, r18
    10d6:	91 1d       	adc	r25, r1
    10d8:	a1 1d       	adc	r26, r1
    10da:	b1 1d       	adc	r27, r1
    10dc:	bc 01       	movw	r22, r24
    10de:	cd 01       	movw	r24, r26
    10e0:	42 e0       	ldi	r20, 0x02	; 2
    10e2:	66 0f       	add	r22, r22
    10e4:	77 1f       	adc	r23, r23
    10e6:	88 1f       	adc	r24, r24
    10e8:	99 1f       	adc	r25, r25
    10ea:	4a 95       	dec	r20
    10ec:	d1 f7       	brne	.-12     	; 0x10e2 <micros+0x3c>
    10ee:	08 95       	ret

000010f0 <delay>:
    10f0:	cf 92       	push	r12
    10f2:	df 92       	push	r13
    10f4:	ef 92       	push	r14
    10f6:	ff 92       	push	r15
    10f8:	cf 93       	push	r28
    10fa:	df 93       	push	r29
    10fc:	6b 01       	movw	r12, r22
    10fe:	7c 01       	movw	r14, r24
    1100:	0e 94 53 08 	call	0x10a6	; 0x10a6 <micros>
    1104:	eb 01       	movw	r28, r22
    1106:	c1 14       	cp	r12, r1
    1108:	d1 04       	cpc	r13, r1
    110a:	e1 04       	cpc	r14, r1
    110c:	f1 04       	cpc	r15, r1
    110e:	89 f0       	breq	.+34     	; 0x1132 <delay+0x42>
    1110:	0e 94 98 09 	call	0x1330	; 0x1330 <yield>
    1114:	0e 94 53 08 	call	0x10a6	; 0x10a6 <micros>
    1118:	6c 1b       	sub	r22, r28
    111a:	7d 0b       	sbc	r23, r29
    111c:	68 3e       	cpi	r22, 0xE8	; 232
    111e:	73 40       	sbci	r23, 0x03	; 3
    1120:	90 f3       	brcs	.-28     	; 0x1106 <delay+0x16>
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	c8 1a       	sub	r12, r24
    1126:	d1 08       	sbc	r13, r1
    1128:	e1 08       	sbc	r14, r1
    112a:	f1 08       	sbc	r15, r1
    112c:	c8 51       	subi	r28, 0x18	; 24
    112e:	dc 4f       	sbci	r29, 0xFC	; 252
    1130:	ea cf       	rjmp	.-44     	; 0x1106 <delay+0x16>
    1132:	df 91       	pop	r29
    1134:	cf 91       	pop	r28
    1136:	ff 90       	pop	r15
    1138:	ef 90       	pop	r14
    113a:	df 90       	pop	r13
    113c:	cf 90       	pop	r12
    113e:	08 95       	ret

00001140 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1140:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1142:	84 b5       	in	r24, 0x24	; 36
    1144:	82 60       	ori	r24, 0x02	; 2
    1146:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1148:	84 b5       	in	r24, 0x24	; 36
    114a:	81 60       	ori	r24, 0x01	; 1
    114c:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    114e:	85 b5       	in	r24, 0x25	; 37
    1150:	82 60       	ori	r24, 0x02	; 2
    1152:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1154:	85 b5       	in	r24, 0x25	; 37
    1156:	81 60       	ori	r24, 0x01	; 1
    1158:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    115a:	ee e6       	ldi	r30, 0x6E	; 110
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	81 60       	ori	r24, 0x01	; 1
    1162:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1164:	e1 e8       	ldi	r30, 0x81	; 129
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    116a:	80 81       	ld	r24, Z
    116c:	82 60       	ori	r24, 0x02	; 2
    116e:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1170:	80 81       	ld	r24, Z
    1172:	81 60       	ori	r24, 0x01	; 1
    1174:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1176:	e0 e8       	ldi	r30, 0x80	; 128
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	81 60       	ori	r24, 0x01	; 1
    117e:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1180:	e1 eb       	ldi	r30, 0xB1	; 177
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	80 81       	ld	r24, Z
    1186:	84 60       	ori	r24, 0x04	; 4
    1188:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    118a:	e0 eb       	ldi	r30, 0xB0	; 176
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	81 60       	ori	r24, 0x01	; 1
    1192:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1194:	ea e7       	ldi	r30, 0x7A	; 122
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 81       	ld	r24, Z
    119a:	84 60       	ori	r24, 0x04	; 4
    119c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    119e:	80 81       	ld	r24, Z
    11a0:	82 60       	ori	r24, 0x02	; 2
    11a2:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    11a4:	80 81       	ld	r24, Z
    11a6:	81 60       	ori	r24, 0x01	; 1
    11a8:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    11aa:	80 81       	ld	r24, Z
    11ac:	80 68       	ori	r24, 0x80	; 128
    11ae:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    11b0:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    11b4:	08 95       	ret

000011b6 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    11b6:	83 30       	cpi	r24, 0x03	; 3
    11b8:	81 f0       	breq	.+32     	; 0x11da <turnOffPWM+0x24>
    11ba:	28 f4       	brcc	.+10     	; 0x11c6 <turnOffPWM+0x10>
    11bc:	81 30       	cpi	r24, 0x01	; 1
    11be:	99 f0       	breq	.+38     	; 0x11e6 <turnOffPWM+0x30>
    11c0:	82 30       	cpi	r24, 0x02	; 2
    11c2:	a1 f0       	breq	.+40     	; 0x11ec <turnOffPWM+0x36>
    11c4:	08 95       	ret
    11c6:	87 30       	cpi	r24, 0x07	; 7
    11c8:	a9 f0       	breq	.+42     	; 0x11f4 <turnOffPWM+0x3e>
    11ca:	88 30       	cpi	r24, 0x08	; 8
    11cc:	b9 f0       	breq	.+46     	; 0x11fc <turnOffPWM+0x46>
    11ce:	84 30       	cpi	r24, 0x04	; 4
    11d0:	d1 f4       	brne	.+52     	; 0x1206 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    11d2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    11d6:	8f 7d       	andi	r24, 0xDF	; 223
    11d8:	03 c0       	rjmp	.+6      	; 0x11e0 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    11da:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    11de:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    11e0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    11e4:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    11e6:	84 b5       	in	r24, 0x24	; 36
    11e8:	8f 77       	andi	r24, 0x7F	; 127
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    11ec:	84 b5       	in	r24, 0x24	; 36
    11ee:	8f 7d       	andi	r24, 0xDF	; 223
    11f0:	84 bd       	out	0x24, r24	; 36
    11f2:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    11f4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    11f8:	8f 77       	andi	r24, 0x7F	; 127
    11fa:	03 c0       	rjmp	.+6      	; 0x1202 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    11fc:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1200:	8f 7d       	andi	r24, 0xDF	; 223
    1202:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1206:	08 95       	ret

00001208 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1208:	cf 93       	push	r28
    120a:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	fc 01       	movw	r30, r24
    1210:	e4 58       	subi	r30, 0x84	; 132
    1212:	ff 4f       	sbci	r31, 0xFF	; 255
    1214:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1216:	fc 01       	movw	r30, r24
    1218:	e0 57       	subi	r30, 0x70	; 112
    121a:	ff 4f       	sbci	r31, 0xFF	; 255
    121c:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    121e:	88 23       	and	r24, r24
    1220:	61 f1       	breq	.+88     	; 0x127a <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	fc 01       	movw	r30, r24
    122a:	e8 54       	subi	r30, 0x48	; 72
    122c:	ff 4f       	sbci	r31, 0xFF	; 255
    122e:	c5 91       	lpm	r28, Z+
    1230:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1232:	fc 01       	movw	r30, r24
    1234:	e2 55       	subi	r30, 0x52	; 82
    1236:	ff 4f       	sbci	r31, 0xFF	; 255
    1238:	a5 91       	lpm	r26, Z+
    123a:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    123c:	61 11       	cpse	r22, r1
    123e:	09 c0       	rjmp	.+18     	; 0x1252 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1240:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1242:	f8 94       	cli
		*reg &= ~bit;
    1244:	88 81       	ld	r24, Y
    1246:	20 95       	com	r18
    1248:	82 23       	and	r24, r18
    124a:	88 83       	st	Y, r24
		*out &= ~bit;
    124c:	ec 91       	ld	r30, X
    124e:	2e 23       	and	r18, r30
    1250:	0b c0       	rjmp	.+22     	; 0x1268 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1252:	62 30       	cpi	r22, 0x02	; 2
    1254:	61 f4       	brne	.+24     	; 0x126e <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1256:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1258:	f8 94       	cli
		*reg &= ~bit;
    125a:	88 81       	ld	r24, Y
    125c:	32 2f       	mov	r19, r18
    125e:	30 95       	com	r19
    1260:	83 23       	and	r24, r19
    1262:	88 83       	st	Y, r24
		*out |= bit;
    1264:	ec 91       	ld	r30, X
    1266:	2e 2b       	or	r18, r30
    1268:	2c 93       	st	X, r18
		SREG = oldSREG;
    126a:	9f bf       	out	0x3f, r25	; 63
    126c:	06 c0       	rjmp	.+12     	; 0x127a <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    126e:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1270:	f8 94       	cli
		*reg |= bit;
    1272:	e8 81       	ld	r30, Y
    1274:	2e 2b       	or	r18, r30
    1276:	28 83       	st	Y, r18
		SREG = oldSREG;
    1278:	8f bf       	out	0x3f, r24	; 63
	}
}
    127a:	df 91       	pop	r29
    127c:	cf 91       	pop	r28
    127e:	08 95       	ret

00001280 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1280:	1f 93       	push	r17
    1282:	cf 93       	push	r28
    1284:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1286:	28 2f       	mov	r18, r24
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	f9 01       	movw	r30, r18
    128c:	e8 59       	subi	r30, 0x98	; 152
    128e:	ff 4f       	sbci	r31, 0xFF	; 255
    1290:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1292:	f9 01       	movw	r30, r18
    1294:	e4 58       	subi	r30, 0x84	; 132
    1296:	ff 4f       	sbci	r31, 0xFF	; 255
    1298:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    129a:	f9 01       	movw	r30, r18
    129c:	e0 57       	subi	r30, 0x70	; 112
    129e:	ff 4f       	sbci	r31, 0xFF	; 255
    12a0:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    12a2:	cc 23       	and	r28, r28
    12a4:	c1 f0       	breq	.+48     	; 0x12d6 <digitalWrite+0x56>
    12a6:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    12a8:	81 11       	cpse	r24, r1
    12aa:	0e 94 db 08 	call	0x11b6	; 0x11b6 <turnOffPWM>

	out = portOutputRegister(port);
    12ae:	ec 2f       	mov	r30, r28
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	ee 0f       	add	r30, r30
    12b4:	ff 1f       	adc	r31, r31
    12b6:	e2 55       	subi	r30, 0x52	; 82
    12b8:	ff 4f       	sbci	r31, 0xFF	; 255
    12ba:	a5 91       	lpm	r26, Z+
    12bc:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    12be:	9f b7       	in	r25, 0x3f	; 63
	cli();
    12c0:	f8 94       	cli

	if (val == LOW) {
    12c2:	11 11       	cpse	r17, r1
    12c4:	04 c0       	rjmp	.+8      	; 0x12ce <digitalWrite+0x4e>
		*out &= ~bit;
    12c6:	8c 91       	ld	r24, X
    12c8:	d0 95       	com	r29
    12ca:	d8 23       	and	r29, r24
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <digitalWrite+0x52>
	} else {
		*out |= bit;
    12ce:	ec 91       	ld	r30, X
    12d0:	de 2b       	or	r29, r30
    12d2:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    12d4:	9f bf       	out	0x3f, r25	; 63
}
    12d6:	df 91       	pop	r29
    12d8:	cf 91       	pop	r28
    12da:	1f 91       	pop	r17
    12dc:	08 95       	ret

000012de <digitalRead>:

int digitalRead(uint8_t pin)
{
    12de:	cf 93       	push	r28
    12e0:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    12e2:	28 2f       	mov	r18, r24
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	f9 01       	movw	r30, r18
    12e8:	e8 59       	subi	r30, 0x98	; 152
    12ea:	ff 4f       	sbci	r31, 0xFF	; 255
    12ec:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    12ee:	f9 01       	movw	r30, r18
    12f0:	e4 58       	subi	r30, 0x84	; 132
    12f2:	ff 4f       	sbci	r31, 0xFF	; 255
    12f4:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    12f6:	f9 01       	movw	r30, r18
    12f8:	e0 57       	subi	r30, 0x70	; 112
    12fa:	ff 4f       	sbci	r31, 0xFF	; 255
    12fc:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    12fe:	cc 23       	and	r28, r28
    1300:	91 f0       	breq	.+36     	; 0x1326 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1302:	81 11       	cpse	r24, r1
    1304:	0e 94 db 08 	call	0x11b6	; 0x11b6 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    1308:	ec 2f       	mov	r30, r28
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	ee 0f       	add	r30, r30
    130e:	ff 1f       	adc	r31, r31
    1310:	ec 55       	subi	r30, 0x5C	; 92
    1312:	ff 4f       	sbci	r31, 0xFF	; 255
    1314:	a5 91       	lpm	r26, Z+
    1316:	b4 91       	lpm	r27, Z
    1318:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    131a:	ed 23       	and	r30, r29
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	21 f4       	brne	.+8      	; 0x132a <digitalRead+0x4c>
    1322:	80 e0       	ldi	r24, 0x00	; 0
    1324:	02 c0       	rjmp	.+4      	; 0x132a <digitalRead+0x4c>
    1326:	80 e0       	ldi	r24, 0x00	; 0
    1328:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    132a:	df 91       	pop	r29
    132c:	cf 91       	pop	r28
    132e:	08 95       	ret

00001330 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1330:	08 95       	ret

00001332 <__udivmodsi4>:
    1332:	a1 e2       	ldi	r26, 0x21	; 33
    1334:	1a 2e       	mov	r1, r26
    1336:	aa 1b       	sub	r26, r26
    1338:	bb 1b       	sub	r27, r27
    133a:	fd 01       	movw	r30, r26
    133c:	0d c0       	rjmp	.+26     	; 0x1358 <__udivmodsi4_ep>

0000133e <__udivmodsi4_loop>:
    133e:	aa 1f       	adc	r26, r26
    1340:	bb 1f       	adc	r27, r27
    1342:	ee 1f       	adc	r30, r30
    1344:	ff 1f       	adc	r31, r31
    1346:	a2 17       	cp	r26, r18
    1348:	b3 07       	cpc	r27, r19
    134a:	e4 07       	cpc	r30, r20
    134c:	f5 07       	cpc	r31, r21
    134e:	20 f0       	brcs	.+8      	; 0x1358 <__udivmodsi4_ep>
    1350:	a2 1b       	sub	r26, r18
    1352:	b3 0b       	sbc	r27, r19
    1354:	e4 0b       	sbc	r30, r20
    1356:	f5 0b       	sbc	r31, r21

00001358 <__udivmodsi4_ep>:
    1358:	66 1f       	adc	r22, r22
    135a:	77 1f       	adc	r23, r23
    135c:	88 1f       	adc	r24, r24
    135e:	99 1f       	adc	r25, r25
    1360:	1a 94       	dec	r1
    1362:	69 f7       	brne	.-38     	; 0x133e <__udivmodsi4_loop>
    1364:	60 95       	com	r22
    1366:	70 95       	com	r23
    1368:	80 95       	com	r24
    136a:	90 95       	com	r25
    136c:	9b 01       	movw	r18, r22
    136e:	ac 01       	movw	r20, r24
    1370:	bd 01       	movw	r22, r26
    1372:	cf 01       	movw	r24, r30
    1374:	08 95       	ret

00001376 <__muluhisi3>:
    1376:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <__umulhisi3>
    137a:	a5 9f       	mul	r26, r21
    137c:	90 0d       	add	r25, r0
    137e:	b4 9f       	mul	r27, r20
    1380:	90 0d       	add	r25, r0
    1382:	a4 9f       	mul	r26, r20
    1384:	80 0d       	add	r24, r0
    1386:	91 1d       	adc	r25, r1
    1388:	11 24       	eor	r1, r1
    138a:	08 95       	ret

0000138c <__mulshisi3>:
    138c:	b7 ff       	sbrs	r27, 7
    138e:	0c 94 bb 09 	jmp	0x1376	; 0x1376 <__muluhisi3>

00001392 <__mulohisi3>:
    1392:	0e 94 bb 09 	call	0x1376	; 0x1376 <__muluhisi3>
    1396:	82 1b       	sub	r24, r18
    1398:	93 0b       	sbc	r25, r19
    139a:	08 95       	ret

0000139c <__tablejump2__>:
    139c:	ee 0f       	add	r30, r30
    139e:	ff 1f       	adc	r31, r31
    13a0:	05 90       	lpm	r0, Z+
    13a2:	f4 91       	lpm	r31, Z
    13a4:	e0 2d       	mov	r30, r0
    13a6:	09 94       	ijmp

000013a8 <__umulhisi3>:
    13a8:	a2 9f       	mul	r26, r18
    13aa:	b0 01       	movw	r22, r0
    13ac:	b3 9f       	mul	r27, r19
    13ae:	c0 01       	movw	r24, r0
    13b0:	a3 9f       	mul	r26, r19
    13b2:	70 0d       	add	r23, r0
    13b4:	81 1d       	adc	r24, r1
    13b6:	11 24       	eor	r1, r1
    13b8:	91 1d       	adc	r25, r1
    13ba:	b2 9f       	mul	r27, r18
    13bc:	70 0d       	add	r23, r0
    13be:	81 1d       	adc	r24, r1
    13c0:	11 24       	eor	r1, r1
    13c2:	91 1d       	adc	r25, r1
    13c4:	08 95       	ret

000013c6 <_exit>:
    13c6:	f8 94       	cli

000013c8 <__stop_program>:
    13c8:	ff cf       	rjmp	.-2      	; 0x13c8 <__stop_program>
