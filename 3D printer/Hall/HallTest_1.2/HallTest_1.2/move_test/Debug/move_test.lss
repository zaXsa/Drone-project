
move_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  0000112a  000011be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000112a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c2  0080011e  0080011e  000011dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000120c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f8  00000000  00000000  0000124c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000080ff  00000000  00000000  00001544  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a3a  00000000  00000000  00009643  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a42  00000000  00000000  0000b07d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000095c  00000000  00000000  0000cac0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002100  00000000  00000000  0000d41c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003622  00000000  00000000  0000f51c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b0  00000000  00000000  00012b3e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__ctors_end>
       4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
       8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
       c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      14:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      40:	0c 94 b9 06 	jmp	0xd72	; 0xd72 <__vector_16>
      44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      48:	0c 94 2d 05 	jmp	0xa5a	; 0xa5a <__vector_18>
      4c:	0c 94 5f 05 	jmp	0xabe	; 0xabe <__vector_19>
      50:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      54:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      60:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
      a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
      ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
      b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <__ctors_start>:
      c2:	d7 00       	.word	0x00d7	; ????
      c4:	8f 05       	cpc	r24, r15

000000c6 <__ctors_end>:
      c6:	11 24       	eor	r1, r1
      c8:	1f be       	out	0x3f, r1	; 63
      ca:	cf ef       	ldi	r28, 0xFF	; 255
      cc:	d8 e0       	ldi	r29, 0x08	; 8
      ce:	de bf       	out	0x3e, r29	; 62
      d0:	cd bf       	out	0x3d, r28	; 61

000000d2 <__do_copy_data>:
      d2:	11 e0       	ldi	r17, 0x01	; 1
      d4:	a0 e0       	ldi	r26, 0x00	; 0
      d6:	b1 e0       	ldi	r27, 0x01	; 1
      d8:	ea e2       	ldi	r30, 0x2A	; 42
      da:	f1 e1       	ldi	r31, 0x11	; 17
      dc:	02 c0       	rjmp	.+4      	; 0xe2 <__do_copy_data+0x10>
      de:	05 90       	lpm	r0, Z+
      e0:	0d 92       	st	X+, r0
      e2:	ae 31       	cpi	r26, 0x1E	; 30
      e4:	b1 07       	cpc	r27, r17
      e6:	d9 f7       	brne	.-10     	; 0xde <__do_copy_data+0xc>

000000e8 <__do_clear_bss>:
      e8:	21 e0       	ldi	r18, 0x01	; 1
      ea:	ae e1       	ldi	r26, 0x1E	; 30
      ec:	b1 e0       	ldi	r27, 0x01	; 1
      ee:	01 c0       	rjmp	.+2      	; 0xf2 <.do_clear_bss_start>

000000f0 <.do_clear_bss_loop>:
      f0:	1d 92       	st	X+, r1

000000f2 <.do_clear_bss_start>:
      f2:	a0 3e       	cpi	r26, 0xE0	; 224
      f4:	b2 07       	cpc	r27, r18
      f6:	e1 f7       	brne	.-8      	; 0xf0 <.do_clear_bss_loop>

000000f8 <__do_global_ctors>:
      f8:	10 e0       	ldi	r17, 0x00	; 0
      fa:	c3 e6       	ldi	r28, 0x63	; 99
      fc:	d0 e0       	ldi	r29, 0x00	; 0
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__do_global_ctors+0x10>
     100:	21 97       	sbiw	r28, 0x01	; 1
     102:	fe 01       	movw	r30, r28
     104:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__tablejump2__>
     108:	c1 36       	cpi	r28, 0x61	; 97
     10a:	d1 07       	cpc	r29, r17
     10c:	c9 f7       	brne	.-14     	; 0x100 <__do_global_ctors+0x8>
     10e:	0e 94 bd 05 	call	0xb7a	; 0xb7a <main>
     112:	0c 94 93 08 	jmp	0x1126	; 0x1126 <_exit>

00000116 <__bad_interrupt>:
     116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     11a:	26 e0       	ldi	r18, 0x06	; 6
     11c:	40 e8       	ldi	r20, 0x80	; 128
     11e:	55 e2       	ldi	r21, 0x25	; 37
     120:	60 e0       	ldi	r22, 0x00	; 0
     122:	70 e0       	ldi	r23, 0x00	; 0
     124:	8a e3       	ldi	r24, 0x3A	; 58
     126:	91 e0       	ldi	r25, 0x01	; 1
     128:	0e 94 c8 04 	call	0x990	; 0x990 <_ZN14HardwareSerial5beginEmh>

int StepsTaken = 0;

void setup() { 
	Serial.begin(9600);
	Serial.print("Serial Test\n");
     12c:	60 e0       	ldi	r22, 0x00	; 0
     12e:	71 e0       	ldi	r23, 0x01	; 1
     130:	8a e3       	ldi	r24, 0x3A	; 58
     132:	91 e0       	ldi	r25, 0x01	; 1
     134:	0e 94 0b 06 	call	0xc16	; 0xc16 <_ZN5Print5printEPKc>

	pinMode(inPin, INPUT);        // sets the digital pin 7 as input
     138:	60 e0       	ldi	r22, 0x00	; 0
     13a:	88 e0       	ldi	r24, 0x08	; 8
     13c:	0e 94 b4 07 	call	0xf68	; 0xf68 <pinMode>

	ss.setSpeed(160);
     140:	40 e0       	ldi	r20, 0x00	; 0
     142:	50 e0       	ldi	r21, 0x00	; 0
     144:	60 e2       	ldi	r22, 0x20	; 32
     146:	73 e4       	ldi	r23, 0x43	; 67
     148:	80 e2       	ldi	r24, 0x20	; 32
     14a:	91 e0       	ldi	r25, 0x01	; 1
     14c:	0e 94 22 01 	call	0x244	; 0x244 <_ZN13StepperDriver8setSpeedEf>
	ss.powerEnable(true);
     150:	61 e0       	ldi	r22, 0x01	; 1
     152:	80 e2       	ldi	r24, 0x20	; 32
     154:	91 e0       	ldi	r25, 0x01	; 1
     156:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <_ZN13StepperDriver11powerEnableEb>
	ss.positioning();
     15a:	80 e2       	ldi	r24, 0x20	; 32
     15c:	91 e0       	ldi	r25, 0x01	; 1
     15e:	0e 94 29 02 	call	0x452	; 0x452 <_ZN13StepperDriver11positioningEv>
	delay(1600);
     162:	60 e4       	ldi	r22, 0x40	; 64
     164:	76 e0       	ldi	r23, 0x06	; 6
     166:	80 e0       	ldi	r24, 0x00	; 0
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	0c 94 28 07 	jmp	0xe50	; 0xe50 <delay>

0000016e <loop>:
}

void loop() {
	if (!digitalRead(8)){
     16e:	88 e0       	ldi	r24, 0x08	; 8
     170:	0e 94 1f 08 	call	0x103e	; 0x103e <digitalRead>
     174:	89 2b       	or	r24, r25
     176:	89 f4       	brne	.+34     	; 0x19a <loop+0x2c>
		StepsTaken += 1;
     178:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
     17c:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <__data_end+0x1>
     180:	01 96       	adiw	r24, 0x01	; 1
     182:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <__data_end+0x1>
     186:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end>
		ss.step(1);
     18a:	41 e0       	ldi	r20, 0x01	; 1
     18c:	50 e0       	ldi	r21, 0x00	; 0
     18e:	60 e0       	ldi	r22, 0x00	; 0
     190:	70 e0       	ldi	r23, 0x00	; 0
     192:	80 e2       	ldi	r24, 0x20	; 32
     194:	91 e0       	ldi	r25, 0x01	; 1
     196:	0e 94 ed 01 	call	0x3da	; 0x3da <_ZN13StepperDriver4stepEl>
	}
	Serial.print(StepsTaken);
     19a:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <__data_end>
     19e:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <__data_end+0x1>
     1a2:	4a e0       	ldi	r20, 0x0A	; 10
     1a4:	50 e0       	ldi	r21, 0x00	; 0
     1a6:	8a e3       	ldi	r24, 0x3A	; 58
     1a8:	91 e0       	ldi	r25, 0x01	; 1
     1aa:	0c 94 b2 06 	jmp	0xd64	; 0xd64 <_ZN5Print5printEii>

000001ae <_GLOBAL__sub_I_ss>:
     1ae:	ef 92       	push	r14
     1b0:	ff 92       	push	r15
     1b2:	0f 93       	push	r16
     1b4:	1f 93       	push	r17
#define en_pin 5
#define cw_pin 6
#define clk_pin 7
#define inPin 8

StepperDriver ss(motor_steps, step_divisition, en_pin, cw_pin, clk_pin);  
     1b6:	87 e0       	ldi	r24, 0x07	; 7
     1b8:	e8 2e       	mov	r14, r24
     1ba:	f1 2c       	mov	r15, r1
     1bc:	06 e0       	ldi	r16, 0x06	; 6
     1be:	10 e0       	ldi	r17, 0x00	; 0
     1c0:	25 e0       	ldi	r18, 0x05	; 5
     1c2:	30 e0       	ldi	r19, 0x00	; 0
     1c4:	40 e1       	ldi	r20, 0x10	; 16
     1c6:	50 e0       	ldi	r21, 0x00	; 0
     1c8:	68 ec       	ldi	r22, 0xC8	; 200
     1ca:	70 e0       	ldi	r23, 0x00	; 0
     1cc:	80 e2       	ldi	r24, 0x20	; 32
     1ce:	91 e0       	ldi	r25, 0x01	; 1
     1d0:	0e 94 ef 00 	call	0x1de	; 0x1de <_ZN13StepperDriverC1Eiiiii>
	if (!digitalRead(8)){
		StepsTaken += 1;
		ss.step(1);
	}
	Serial.print(StepsTaken);
     1d4:	1f 91       	pop	r17
     1d6:	0f 91       	pop	r16
     1d8:	ff 90       	pop	r15
     1da:	ef 90       	pop	r14
     1dc:	08 95       	ret

000001de <_ZN13StepperDriverC1Eiiiii>:
#include "Arduino.h"
#include "StepperDriver.h"


StepperDriver::StepperDriver(int number_of_steps, int step_division, int en_pin, int cw_pin, int clk_pin)
     1de:	ef 92       	push	r14
     1e0:	ff 92       	push	r15
     1e2:	0f 93       	push	r16
     1e4:	1f 93       	push	r17
     1e6:	fc 01       	movw	r30, r24
     1e8:	82 2f       	mov	r24, r18
{
	this->number_of_steps = number_of_steps;
     1ea:	71 83       	std	Z+1, r23	; 0x01
     1ec:	60 83       	st	Z, r22
  this->step_division = step_division;
     1ee:	53 83       	std	Z+3, r21	; 0x03
     1f0:	42 83       	std	Z+2, r20	; 0x02
  this->step_interval = 10000;
     1f2:	40 e1       	ldi	r20, 0x10	; 16
     1f4:	57 e2       	ldi	r21, 0x27	; 39
     1f6:	60 e0       	ldi	r22, 0x00	; 0
     1f8:	70 e0       	ldi	r23, 0x00	; 0
     1fa:	44 83       	std	Z+4, r20	; 0x04
     1fc:	55 83       	std	Z+5, r21	; 0x05
     1fe:	66 83       	std	Z+6, r22	; 0x06
     200:	77 83       	std	Z+7, r23	; 0x07
  this->last_step_time = 0;
     202:	10 86       	std	Z+8, r1	; 0x08
     204:	11 86       	std	Z+9, r1	; 0x09
     206:	12 86       	std	Z+10, r1	; 0x0a
     208:	13 86       	std	Z+11, r1	; 0x0b
  this->target_step_time1 = 0;
     20a:	14 86       	std	Z+12, r1	; 0x0c
     20c:	15 86       	std	Z+13, r1	; 0x0d
     20e:	16 86       	std	Z+14, r1	; 0x0e
     210:	17 86       	std	Z+15, r1	; 0x0f
  this->target_step_time2 = 0;
     212:	10 8a       	std	Z+16, r1	; 0x10
     214:	11 8a       	std	Z+17, r1	; 0x11
     216:	12 8a       	std	Z+18, r1	; 0x12
     218:	13 8a       	std	Z+19, r1	; 0x13
  
  // Arduino pins for the motor control connection:
  this->en_pin = en_pin;
     21a:	24 8b       	std	Z+20, r18	; 0x14
     21c:	35 8b       	std	Z+21, r19	; 0x15
  this->cw_pin = cw_pin;
     21e:	06 8b       	std	Z+22, r16	; 0x16
     220:	17 8b       	std	Z+23, r17	; 0x17
  this->clk_pin = clk_pin;
     222:	e0 8e       	std	Z+24, r14	; 0x18
     224:	f1 8e       	std	Z+25, r15	; 0x19

  // setup the pins on the microcontroller:
  pinMode(en_pin, OUTPUT);
     226:	61 e0       	ldi	r22, 0x01	; 1
     228:	0e 94 b4 07 	call	0xf68	; 0xf68 <pinMode>
  pinMode(cw_pin, OUTPUT);
     22c:	61 e0       	ldi	r22, 0x01	; 1
     22e:	80 2f       	mov	r24, r16
     230:	0e 94 b4 07 	call	0xf68	; 0xf68 <pinMode>
  pinMode(clk_pin, OUTPUT);
     234:	61 e0       	ldi	r22, 0x01	; 1
     236:	8e 2d       	mov	r24, r14
}
     238:	1f 91       	pop	r17
     23a:	0f 91       	pop	r16
     23c:	ff 90       	pop	r15
     23e:	ef 90       	pop	r14
  this->clk_pin = clk_pin;

  // setup the pins on the microcontroller:
  pinMode(en_pin, OUTPUT);
  pinMode(cw_pin, OUTPUT);
  pinMode(clk_pin, OUTPUT);
     240:	0c 94 b4 07 	jmp	0xf68	; 0xf68 <pinMode>

00000244 <_ZN13StepperDriver8setSpeedEf>:

/*
  Sets the speed in revs per minute
*/
void StepperDriver::setSpeed(float rpm)
{
     244:	cf 92       	push	r12
     246:	df 92       	push	r13
     248:	ef 92       	push	r14
     24a:	ff 92       	push	r15
     24c:	cf 93       	push	r28
     24e:	df 93       	push	r29
     250:	ec 01       	movw	r28, r24
     252:	6a 01       	movw	r12, r20
     254:	7b 01       	movw	r14, r22
  step_interval = 60000000L / (number_of_steps * rpm * step_division);
     256:	68 81       	ld	r22, Y
     258:	79 81       	ldd	r23, Y+1	; 0x01
     25a:	07 2e       	mov	r0, r23
     25c:	00 0c       	add	r0, r0
     25e:	88 0b       	sbc	r24, r24
     260:	99 0b       	sbc	r25, r25
     262:	0e 94 09 03 	call	0x612	; 0x612 <__floatsisf>
     266:	a7 01       	movw	r20, r14
     268:	96 01       	movw	r18, r12
     26a:	0e 94 95 03 	call	0x72a	; 0x72a <__mulsf3>
     26e:	6b 01       	movw	r12, r22
     270:	7c 01       	movw	r14, r24
     272:	6a 81       	ldd	r22, Y+2	; 0x02
     274:	7b 81       	ldd	r23, Y+3	; 0x03
     276:	07 2e       	mov	r0, r23
     278:	00 0c       	add	r0, r0
     27a:	88 0b       	sbc	r24, r24
     27c:	99 0b       	sbc	r25, r25
     27e:	0e 94 09 03 	call	0x612	; 0x612 <__floatsisf>
     282:	9b 01       	movw	r18, r22
     284:	ac 01       	movw	r20, r24
     286:	c7 01       	movw	r24, r14
     288:	b6 01       	movw	r22, r12
     28a:	0e 94 95 03 	call	0x72a	; 0x72a <__mulsf3>
     28e:	9b 01       	movw	r18, r22
     290:	ac 01       	movw	r20, r24
     292:	60 ec       	ldi	r22, 0xC0	; 192
     294:	71 ee       	ldi	r23, 0xE1	; 225
     296:	84 e6       	ldi	r24, 0x64	; 100
     298:	9c e4       	ldi	r25, 0x4C	; 76
     29a:	0e 94 66 02 	call	0x4cc	; 0x4cc <__divsf3>
     29e:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <__fixunssfsi>
     2a2:	6c 83       	std	Y+4, r22	; 0x04
     2a4:	7d 83       	std	Y+5, r23	; 0x05
     2a6:	8e 83       	std	Y+6, r24	; 0x06
     2a8:	9f 83       	std	Y+7, r25	; 0x07
}
     2aa:	df 91       	pop	r29
     2ac:	cf 91       	pop	r28
     2ae:	ff 90       	pop	r15
     2b0:	ef 90       	pop	r14
     2b2:	df 90       	pop	r13
     2b4:	cf 90       	pop	r12
     2b6:	08 95       	ret

000002b8 <_ZN13StepperDriver11powerEnableEb>:



void StepperDriver::powerEnable(bool ena)
{
  if (ena) {
     2b8:	66 23       	and	r22, r22
     2ba:	11 f0       	breq	.+4      	; 0x2c0 <_ZN13StepperDriver11powerEnableEb+0x8>
    digitalWrite(en_pin, LOW);
     2bc:	60 e0       	ldi	r22, 0x00	; 0
     2be:	01 c0       	rjmp	.+2      	; 0x2c2 <_ZN13StepperDriver11powerEnableEb+0xa>
  } else {
    digitalWrite(en_pin, HIGH);
     2c0:	61 e0       	ldi	r22, 0x01	; 1
     2c2:	fc 01       	movw	r30, r24
     2c4:	84 89       	ldd	r24, Z+20	; 0x14
     2c6:	0c 94 f0 07 	jmp	0xfe0	; 0xfe0 <digitalWrite>

000002ca <_ZN13StepperDriver12setDirectionEl>:



void StepperDriver::setDirection(long steps_to_move)
{
  if (steps_to_move < 0) {
     2ca:	77 ff       	sbrs	r23, 7
     2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <_ZN13StepperDriver12setDirectionEl+0x8>
    digitalWrite(cw_pin, HIGH);
     2ce:	61 e0       	ldi	r22, 0x01	; 1
     2d0:	01 c0       	rjmp	.+2      	; 0x2d4 <_ZN13StepperDriver12setDirectionEl+0xa>
  }
  else {
    digitalWrite(cw_pin, LOW);
     2d2:	60 e0       	ldi	r22, 0x00	; 0
     2d4:	fc 01       	movw	r30, r24
     2d6:	86 89       	ldd	r24, Z+22	; 0x16
     2d8:	0c 94 f0 07 	jmp	0xfe0	; 0xfe0 <digitalWrite>

000002dc <_ZN13StepperDriver12moveIntervalEm>:
}



void StepperDriver::moveInterval(unsigned long target_delay)
{
     2dc:	0f 93       	push	r16
     2de:	1f 93       	push	r17
     2e0:	cf 93       	push	r28
     2e2:	df 93       	push	r29
     2e4:	ec 01       	movw	r28, r24
  target_step_time1 = last_step_time + (target_delay / 2);
     2e6:	08 85       	ldd	r16, Y+8	; 0x08
     2e8:	19 85       	ldd	r17, Y+9	; 0x09
     2ea:	2a 85       	ldd	r18, Y+10	; 0x0a
     2ec:	3b 85       	ldd	r19, Y+11	; 0x0b
     2ee:	db 01       	movw	r26, r22
     2f0:	ca 01       	movw	r24, r20
     2f2:	b6 95       	lsr	r27
     2f4:	a7 95       	ror	r26
     2f6:	97 95       	ror	r25
     2f8:	87 95       	ror	r24
     2fa:	80 0f       	add	r24, r16
     2fc:	91 1f       	adc	r25, r17
     2fe:	a2 1f       	adc	r26, r18
     300:	b3 1f       	adc	r27, r19
     302:	8c 87       	std	Y+12, r24	; 0x0c
     304:	9d 87       	std	Y+13, r25	; 0x0d
     306:	ae 87       	std	Y+14, r26	; 0x0e
     308:	bf 87       	std	Y+15, r27	; 0x0f
  target_step_time2 = last_step_time + target_delay;
     30a:	40 0f       	add	r20, r16
     30c:	51 1f       	adc	r21, r17
     30e:	62 1f       	adc	r22, r18
     310:	73 1f       	adc	r23, r19
     312:	48 8b       	std	Y+16, r20	; 0x10
     314:	59 8b       	std	Y+17, r21	; 0x11
     316:	6a 8b       	std	Y+18, r22	; 0x12
     318:	7b 8b       	std	Y+19, r23	; 0x13

  if (target_step_time1 >= last_step_time) {
     31a:	80 17       	cp	r24, r16
     31c:	91 07       	cpc	r25, r17
     31e:	a2 07       	cpc	r26, r18
     320:	b3 07       	cpc	r27, r19
     322:	e8 f0       	brcs	.+58     	; 0x35e <_ZN13StepperDriver12moveIntervalEm+0x82>
    while (micros() < target_step_time1) {}
     324:	0e 94 03 07 	call	0xe06	; 0xe06 <micros>
     328:	0c 85       	ldd	r16, Y+12	; 0x0c
     32a:	1d 85       	ldd	r17, Y+13	; 0x0d
     32c:	2e 85       	ldd	r18, Y+14	; 0x0e
     32e:	3f 85       	ldd	r19, Y+15	; 0x0f
     330:	60 17       	cp	r22, r16
     332:	71 07       	cpc	r23, r17
     334:	82 07       	cpc	r24, r18
     336:	93 07       	cpc	r25, r19
     338:	a8 f3       	brcs	.-22     	; 0x324 <_ZN13StepperDriver12moveIntervalEm+0x48>
  }
  else {
    while ((long)(micros()) < (long)target_step_time1) {}
  }

	digitalWrite(clk_pin, LOW);
     33a:	60 e0       	ldi	r22, 0x00	; 0
     33c:	88 8d       	ldd	r24, Y+24	; 0x18
     33e:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <digitalWrite>

  if (target_step_time2 >= last_step_time) {
     342:	48 89       	ldd	r20, Y+16	; 0x10
     344:	59 89       	ldd	r21, Y+17	; 0x11
     346:	6a 89       	ldd	r22, Y+18	; 0x12
     348:	7b 89       	ldd	r23, Y+19	; 0x13
     34a:	88 85       	ldd	r24, Y+8	; 0x08
     34c:	99 85       	ldd	r25, Y+9	; 0x09
     34e:	aa 85       	ldd	r26, Y+10	; 0x0a
     350:	bb 85       	ldd	r27, Y+11	; 0x0b
     352:	48 17       	cp	r20, r24
     354:	59 07       	cpc	r21, r25
     356:	6a 07       	cpc	r22, r26
     358:	7b 07       	cpc	r23, r27
     35a:	68 f4       	brcc	.+26     	; 0x376 <_ZN13StepperDriver12moveIntervalEm+0x9a>
     35c:	22 c0       	rjmp	.+68     	; 0x3a2 <_ZN13StepperDriver12moveIntervalEm+0xc6>

  if (target_step_time1 >= last_step_time) {
    while (micros() < target_step_time1) {}
  }
  else {
    while ((long)(micros()) < (long)target_step_time1) {}
     35e:	0e 94 03 07 	call	0xe06	; 0xe06 <micros>
     362:	0c 85       	ldd	r16, Y+12	; 0x0c
     364:	1d 85       	ldd	r17, Y+13	; 0x0d
     366:	2e 85       	ldd	r18, Y+14	; 0x0e
     368:	3f 85       	ldd	r19, Y+15	; 0x0f
     36a:	60 17       	cp	r22, r16
     36c:	71 07       	cpc	r23, r17
     36e:	82 07       	cpc	r24, r18
     370:	93 07       	cpc	r25, r19
     372:	ac f3       	brlt	.-22     	; 0x35e <_ZN13StepperDriver12moveIntervalEm+0x82>
     374:	e2 cf       	rjmp	.-60     	; 0x33a <_ZN13StepperDriver12moveIntervalEm+0x5e>
  }

	digitalWrite(clk_pin, LOW);

  if (target_step_time2 >= last_step_time) {
    while (micros() < target_step_time2) {}
     376:	0e 94 03 07 	call	0xe06	; 0xe06 <micros>
     37a:	08 89       	ldd	r16, Y+16	; 0x10
     37c:	19 89       	ldd	r17, Y+17	; 0x11
     37e:	2a 89       	ldd	r18, Y+18	; 0x12
     380:	3b 89       	ldd	r19, Y+19	; 0x13
     382:	60 17       	cp	r22, r16
     384:	71 07       	cpc	r23, r17
     386:	82 07       	cpc	r24, r18
     388:	93 07       	cpc	r25, r19
     38a:	a8 f3       	brcs	.-22     	; 0x376 <_ZN13StepperDriver12moveIntervalEm+0x9a>
  }
  else {
    while ((long)(micros()) < (long)target_step_time2) {}
  }
  last_step_time = micros();
     38c:	0e 94 03 07 	call	0xe06	; 0xe06 <micros>
     390:	68 87       	std	Y+8, r22	; 0x08
     392:	79 87       	std	Y+9, r23	; 0x09
     394:	8a 87       	std	Y+10, r24	; 0x0a
     396:	9b 87       	std	Y+11, r25	; 0x0b
}
     398:	df 91       	pop	r29
     39a:	cf 91       	pop	r28
     39c:	1f 91       	pop	r17
     39e:	0f 91       	pop	r16
     3a0:	08 95       	ret

  if (target_step_time2 >= last_step_time) {
    while (micros() < target_step_time2) {}
  }
  else {
    while ((long)(micros()) < (long)target_step_time2) {}
     3a2:	0e 94 03 07 	call	0xe06	; 0xe06 <micros>
     3a6:	08 89       	ldd	r16, Y+16	; 0x10
     3a8:	19 89       	ldd	r17, Y+17	; 0x11
     3aa:	2a 89       	ldd	r18, Y+18	; 0x12
     3ac:	3b 89       	ldd	r19, Y+19	; 0x13
     3ae:	60 17       	cp	r22, r16
     3b0:	71 07       	cpc	r23, r17
     3b2:	82 07       	cpc	r24, r18
     3b4:	93 07       	cpc	r25, r19
     3b6:	ac f3       	brlt	.-22     	; 0x3a2 <_ZN13StepperDriver12moveIntervalEm+0xc6>
     3b8:	e9 cf       	rjmp	.-46     	; 0x38c <_ZN13StepperDriver12moveIntervalEm+0xb0>

000003ba <_ZN13StepperDriver4moveEv>:
}



void StepperDriver::move()
{
     3ba:	cf 93       	push	r28
     3bc:	df 93       	push	r29
     3be:	ec 01       	movw	r28, r24
  digitalWrite(clk_pin, HIGH);
     3c0:	61 e0       	ldi	r22, 0x01	; 1
     3c2:	88 8d       	ldd	r24, Y+24	; 0x18
     3c4:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <digitalWrite>
  moveInterval(step_interval);
     3c8:	4c 81       	ldd	r20, Y+4	; 0x04
     3ca:	5d 81       	ldd	r21, Y+5	; 0x05
     3cc:	6e 81       	ldd	r22, Y+6	; 0x06
     3ce:	7f 81       	ldd	r23, Y+7	; 0x07
     3d0:	ce 01       	movw	r24, r28
}
     3d2:	df 91       	pop	r29
     3d4:	cf 91       	pop	r28


void StepperDriver::move()
{
  digitalWrite(clk_pin, HIGH);
  moveInterval(step_interval);
     3d6:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <_ZN13StepperDriver12moveIntervalEm>

000003da <_ZN13StepperDriver4stepEl>:
/*
  Moves the motor steps_to_move steps.  If the number is negative, 
  the motor moves in the reverse direction.
 */
void StepperDriver::step(long steps_to_move)
{
     3da:	cf 92       	push	r12
     3dc:	df 92       	push	r13
     3de:	ef 92       	push	r14
     3e0:	ff 92       	push	r15
     3e2:	cf 93       	push	r28
     3e4:	df 93       	push	r29
     3e6:	ec 01       	movw	r28, r24
	steps_to_move *= step_division;
     3e8:	aa 81       	ldd	r26, Y+2	; 0x02
     3ea:	bb 81       	ldd	r27, Y+3	; 0x03
     3ec:	9a 01       	movw	r18, r20
     3ee:	ab 01       	movw	r20, r22
     3f0:	0e 94 76 08 	call	0x10ec	; 0x10ec <__mulshisi3>
     3f4:	6b 01       	movw	r12, r22
     3f6:	7c 01       	movw	r14, r24
  setDirection(steps_to_move);
     3f8:	ab 01       	movw	r20, r22
     3fa:	bc 01       	movw	r22, r24
     3fc:	ce 01       	movw	r24, r28
     3fe:	0e 94 65 01 	call	0x2ca	; 0x2ca <_ZN13StepperDriver12setDirectionEl>
  last_step_time = micros();
     402:	0e 94 03 07 	call	0xe06	; 0xe06 <micros>
     406:	68 87       	std	Y+8, r22	; 0x08
     408:	79 87       	std	Y+9, r23	; 0x09
     40a:	8a 87       	std	Y+10, r24	; 0x0a
     40c:	9b 87       	std	Y+11, r25	; 0x0b

  for (long i = abs(steps_to_move); i > 0; i--) {
     40e:	c6 01       	movw	r24, r12
     410:	d7 01       	movw	r26, r14
     412:	b7 ff       	sbrs	r27, 7
     414:	07 c0       	rjmp	.+14     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     416:	b0 95       	com	r27
     418:	a0 95       	com	r26
     41a:	90 95       	com	r25
     41c:	81 95       	neg	r24
     41e:	9f 4f       	sbci	r25, 0xFF	; 255
     420:	af 4f       	sbci	r26, 0xFF	; 255
     422:	bf 4f       	sbci	r27, 0xFF	; 255
     424:	6c 01       	movw	r12, r24
     426:	7d 01       	movw	r14, r26
     428:	c1 14       	cp	r12, r1
     42a:	d1 04       	cpc	r13, r1
     42c:	e1 04       	cpc	r14, r1
     42e:	f1 04       	cpc	r15, r1
     430:	49 f0       	breq	.+18     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
    move();
     432:	ce 01       	movw	r24, r28
     434:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_ZN13StepperDriver4moveEv>
{
	steps_to_move *= step_division;
  setDirection(steps_to_move);
  last_step_time = micros();

  for (long i = abs(steps_to_move); i > 0; i--) {
     438:	81 e0       	ldi	r24, 0x01	; 1
     43a:	c8 1a       	sub	r12, r24
     43c:	d1 08       	sbc	r13, r1
     43e:	e1 08       	sbc	r14, r1
     440:	f1 08       	sbc	r15, r1
     442:	f2 cf       	rjmp	.-28     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
    move();
  }
}
     444:	df 91       	pop	r29
     446:	cf 91       	pop	r28
     448:	ff 90       	pop	r15
     44a:	ef 90       	pop	r14
     44c:	df 90       	pop	r13
     44e:	cf 90       	pop	r12
     450:	08 95       	ret

00000452 <_ZN13StepperDriver11positioningEv>:
  }
}


void StepperDriver::positioning()
{
     452:	cf 92       	push	r12
     454:	df 92       	push	r13
     456:	ef 92       	push	r14
     458:	ff 92       	push	r15
     45a:	cf 93       	push	r28
     45c:	df 93       	push	r29
     45e:	ec 01       	movw	r28, r24
	unsigned long step_interval_0 = step_interval;
     460:	cc 80       	ldd	r12, Y+4	; 0x04
     462:	dd 80       	ldd	r13, Y+5	; 0x05
     464:	ee 80       	ldd	r14, Y+6	; 0x06
     466:	ff 80       	ldd	r15, Y+7	; 0x07
	step_interval *= 8;
     468:	d7 01       	movw	r26, r14
     46a:	c6 01       	movw	r24, r12
     46c:	23 e0       	ldi	r18, 0x03	; 3
     46e:	88 0f       	add	r24, r24
     470:	99 1f       	adc	r25, r25
     472:	aa 1f       	adc	r26, r26
     474:	bb 1f       	adc	r27, r27
     476:	2a 95       	dec	r18
     478:	d1 f7       	brne	.-12     	; 0x46e <_ZN13StepperDriver11positioningEv+0x1c>
     47a:	8c 83       	std	Y+4, r24	; 0x04
     47c:	9d 83       	std	Y+5, r25	; 0x05
     47e:	ae 83       	std	Y+6, r26	; 0x06
     480:	bf 83       	std	Y+7, r27	; 0x07

	step(4);
     482:	44 e0       	ldi	r20, 0x04	; 4
     484:	50 e0       	ldi	r21, 0x00	; 0
     486:	60 e0       	ldi	r22, 0x00	; 0
     488:	70 e0       	ldi	r23, 0x00	; 0
     48a:	ce 01       	movw	r24, r28
     48c:	0e 94 ed 01 	call	0x3da	; 0x3da <_ZN13StepperDriver4stepEl>
	delay(200);
     490:	68 ec       	ldi	r22, 0xC8	; 200
     492:	70 e0       	ldi	r23, 0x00	; 0
     494:	80 e0       	ldi	r24, 0x00	; 0
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	0e 94 28 07 	call	0xe50	; 0xe50 <delay>
	step(-4);
     49c:	4c ef       	ldi	r20, 0xFC	; 252
     49e:	5f ef       	ldi	r21, 0xFF	; 255
     4a0:	6f ef       	ldi	r22, 0xFF	; 255
     4a2:	7f ef       	ldi	r23, 0xFF	; 255
     4a4:	ce 01       	movw	r24, r28
     4a6:	0e 94 ed 01 	call	0x3da	; 0x3da <_ZN13StepperDriver4stepEl>
  delay(200);
     4aa:	68 ec       	ldi	r22, 0xC8	; 200
     4ac:	70 e0       	ldi	r23, 0x00	; 0
     4ae:	80 e0       	ldi	r24, 0x00	; 0
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	0e 94 28 07 	call	0xe50	; 0xe50 <delay>

	step_interval = step_interval_0;
     4b6:	cc 82       	std	Y+4, r12	; 0x04
     4b8:	dd 82       	std	Y+5, r13	; 0x05
     4ba:	ee 82       	std	Y+6, r14	; 0x06
     4bc:	ff 82       	std	Y+7, r15	; 0x07
}
     4be:	df 91       	pop	r29
     4c0:	cf 91       	pop	r28
     4c2:	ff 90       	pop	r15
     4c4:	ef 90       	pop	r14
     4c6:	df 90       	pop	r13
     4c8:	cf 90       	pop	r12
     4ca:	08 95       	ret

000004cc <__divsf3>:
     4cc:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <__divsf3x>
     4d0:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <__fp_round>
     4d4:	0e 94 54 03 	call	0x6a8	; 0x6a8 <__fp_pscB>
     4d8:	58 f0       	brcs	.+22     	; 0x4f0 <__divsf3+0x24>
     4da:	0e 94 4d 03 	call	0x69a	; 0x69a <__fp_pscA>
     4de:	40 f0       	brcs	.+16     	; 0x4f0 <__divsf3+0x24>
     4e0:	29 f4       	brne	.+10     	; 0x4ec <__divsf3+0x20>
     4e2:	5f 3f       	cpi	r21, 0xFF	; 255
     4e4:	29 f0       	breq	.+10     	; 0x4f0 <__divsf3+0x24>
     4e6:	0c 94 44 03 	jmp	0x688	; 0x688 <__fp_inf>
     4ea:	51 11       	cpse	r21, r1
     4ec:	0c 94 8f 03 	jmp	0x71e	; 0x71e <__fp_szero>
     4f0:	0c 94 4a 03 	jmp	0x694	; 0x694 <__fp_nan>

000004f4 <__divsf3x>:
     4f4:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <__fp_split3>
     4f8:	68 f3       	brcs	.-38     	; 0x4d4 <__divsf3+0x8>

000004fa <__divsf3_pse>:
     4fa:	99 23       	and	r25, r25
     4fc:	b1 f3       	breq	.-20     	; 0x4ea <__divsf3+0x1e>
     4fe:	55 23       	and	r21, r21
     500:	91 f3       	breq	.-28     	; 0x4e6 <__divsf3+0x1a>
     502:	95 1b       	sub	r25, r21
     504:	55 0b       	sbc	r21, r21
     506:	bb 27       	eor	r27, r27
     508:	aa 27       	eor	r26, r26
     50a:	62 17       	cp	r22, r18
     50c:	73 07       	cpc	r23, r19
     50e:	84 07       	cpc	r24, r20
     510:	38 f0       	brcs	.+14     	; 0x520 <__divsf3_pse+0x26>
     512:	9f 5f       	subi	r25, 0xFF	; 255
     514:	5f 4f       	sbci	r21, 0xFF	; 255
     516:	22 0f       	add	r18, r18
     518:	33 1f       	adc	r19, r19
     51a:	44 1f       	adc	r20, r20
     51c:	aa 1f       	adc	r26, r26
     51e:	a9 f3       	breq	.-22     	; 0x50a <__divsf3_pse+0x10>
     520:	35 d0       	rcall	.+106    	; 0x58c <__divsf3_pse+0x92>
     522:	0e 2e       	mov	r0, r30
     524:	3a f0       	brmi	.+14     	; 0x534 <__divsf3_pse+0x3a>
     526:	e0 e8       	ldi	r30, 0x80	; 128
     528:	32 d0       	rcall	.+100    	; 0x58e <__divsf3_pse+0x94>
     52a:	91 50       	subi	r25, 0x01	; 1
     52c:	50 40       	sbci	r21, 0x00	; 0
     52e:	e6 95       	lsr	r30
     530:	00 1c       	adc	r0, r0
     532:	ca f7       	brpl	.-14     	; 0x526 <__divsf3_pse+0x2c>
     534:	2b d0       	rcall	.+86     	; 0x58c <__divsf3_pse+0x92>
     536:	fe 2f       	mov	r31, r30
     538:	29 d0       	rcall	.+82     	; 0x58c <__divsf3_pse+0x92>
     53a:	66 0f       	add	r22, r22
     53c:	77 1f       	adc	r23, r23
     53e:	88 1f       	adc	r24, r24
     540:	bb 1f       	adc	r27, r27
     542:	26 17       	cp	r18, r22
     544:	37 07       	cpc	r19, r23
     546:	48 07       	cpc	r20, r24
     548:	ab 07       	cpc	r26, r27
     54a:	b0 e8       	ldi	r27, 0x80	; 128
     54c:	09 f0       	breq	.+2      	; 0x550 <__divsf3_pse+0x56>
     54e:	bb 0b       	sbc	r27, r27
     550:	80 2d       	mov	r24, r0
     552:	bf 01       	movw	r22, r30
     554:	ff 27       	eor	r31, r31
     556:	93 58       	subi	r25, 0x83	; 131
     558:	5f 4f       	sbci	r21, 0xFF	; 255
     55a:	3a f0       	brmi	.+14     	; 0x56a <__divsf3_pse+0x70>
     55c:	9e 3f       	cpi	r25, 0xFE	; 254
     55e:	51 05       	cpc	r21, r1
     560:	78 f0       	brcs	.+30     	; 0x580 <__divsf3_pse+0x86>
     562:	0c 94 44 03 	jmp	0x688	; 0x688 <__fp_inf>
     566:	0c 94 8f 03 	jmp	0x71e	; 0x71e <__fp_szero>
     56a:	5f 3f       	cpi	r21, 0xFF	; 255
     56c:	e4 f3       	brlt	.-8      	; 0x566 <__divsf3_pse+0x6c>
     56e:	98 3e       	cpi	r25, 0xE8	; 232
     570:	d4 f3       	brlt	.-12     	; 0x566 <__divsf3_pse+0x6c>
     572:	86 95       	lsr	r24
     574:	77 95       	ror	r23
     576:	67 95       	ror	r22
     578:	b7 95       	ror	r27
     57a:	f7 95       	ror	r31
     57c:	9f 5f       	subi	r25, 0xFF	; 255
     57e:	c9 f7       	brne	.-14     	; 0x572 <__divsf3_pse+0x78>
     580:	88 0f       	add	r24, r24
     582:	91 1d       	adc	r25, r1
     584:	96 95       	lsr	r25
     586:	87 95       	ror	r24
     588:	97 f9       	bld	r25, 7
     58a:	08 95       	ret
     58c:	e1 e0       	ldi	r30, 0x01	; 1
     58e:	66 0f       	add	r22, r22
     590:	77 1f       	adc	r23, r23
     592:	88 1f       	adc	r24, r24
     594:	bb 1f       	adc	r27, r27
     596:	62 17       	cp	r22, r18
     598:	73 07       	cpc	r23, r19
     59a:	84 07       	cpc	r24, r20
     59c:	ba 07       	cpc	r27, r26
     59e:	20 f0       	brcs	.+8      	; 0x5a8 <__divsf3_pse+0xae>
     5a0:	62 1b       	sub	r22, r18
     5a2:	73 0b       	sbc	r23, r19
     5a4:	84 0b       	sbc	r24, r20
     5a6:	ba 0b       	sbc	r27, r26
     5a8:	ee 1f       	adc	r30, r30
     5aa:	88 f7       	brcc	.-30     	; 0x58e <__divsf3_pse+0x94>
     5ac:	e0 95       	com	r30
     5ae:	08 95       	ret

000005b0 <__fixunssfsi>:
     5b0:	0e 94 74 03 	call	0x6e8	; 0x6e8 <__fp_splitA>
     5b4:	88 f0       	brcs	.+34     	; 0x5d8 <__fixunssfsi+0x28>
     5b6:	9f 57       	subi	r25, 0x7F	; 127
     5b8:	98 f0       	brcs	.+38     	; 0x5e0 <__fixunssfsi+0x30>
     5ba:	b9 2f       	mov	r27, r25
     5bc:	99 27       	eor	r25, r25
     5be:	b7 51       	subi	r27, 0x17	; 23
     5c0:	b0 f0       	brcs	.+44     	; 0x5ee <__fixunssfsi+0x3e>
     5c2:	e1 f0       	breq	.+56     	; 0x5fc <__fixunssfsi+0x4c>
     5c4:	66 0f       	add	r22, r22
     5c6:	77 1f       	adc	r23, r23
     5c8:	88 1f       	adc	r24, r24
     5ca:	99 1f       	adc	r25, r25
     5cc:	1a f0       	brmi	.+6      	; 0x5d4 <__fixunssfsi+0x24>
     5ce:	ba 95       	dec	r27
     5d0:	c9 f7       	brne	.-14     	; 0x5c4 <__fixunssfsi+0x14>
     5d2:	14 c0       	rjmp	.+40     	; 0x5fc <__fixunssfsi+0x4c>
     5d4:	b1 30       	cpi	r27, 0x01	; 1
     5d6:	91 f0       	breq	.+36     	; 0x5fc <__fixunssfsi+0x4c>
     5d8:	0e 94 8e 03 	call	0x71c	; 0x71c <__fp_zero>
     5dc:	b1 e0       	ldi	r27, 0x01	; 1
     5de:	08 95       	ret
     5e0:	0c 94 8e 03 	jmp	0x71c	; 0x71c <__fp_zero>
     5e4:	67 2f       	mov	r22, r23
     5e6:	78 2f       	mov	r23, r24
     5e8:	88 27       	eor	r24, r24
     5ea:	b8 5f       	subi	r27, 0xF8	; 248
     5ec:	39 f0       	breq	.+14     	; 0x5fc <__fixunssfsi+0x4c>
     5ee:	b9 3f       	cpi	r27, 0xF9	; 249
     5f0:	cc f3       	brlt	.-14     	; 0x5e4 <__fixunssfsi+0x34>
     5f2:	86 95       	lsr	r24
     5f4:	77 95       	ror	r23
     5f6:	67 95       	ror	r22
     5f8:	b3 95       	inc	r27
     5fa:	d9 f7       	brne	.-10     	; 0x5f2 <__fixunssfsi+0x42>
     5fc:	3e f4       	brtc	.+14     	; 0x60c <__fixunssfsi+0x5c>
     5fe:	90 95       	com	r25
     600:	80 95       	com	r24
     602:	70 95       	com	r23
     604:	61 95       	neg	r22
     606:	7f 4f       	sbci	r23, 0xFF	; 255
     608:	8f 4f       	sbci	r24, 0xFF	; 255
     60a:	9f 4f       	sbci	r25, 0xFF	; 255
     60c:	08 95       	ret

0000060e <__floatunsisf>:
     60e:	e8 94       	clt
     610:	09 c0       	rjmp	.+18     	; 0x624 <__floatsisf+0x12>

00000612 <__floatsisf>:
     612:	97 fb       	bst	r25, 7
     614:	3e f4       	brtc	.+14     	; 0x624 <__floatsisf+0x12>
     616:	90 95       	com	r25
     618:	80 95       	com	r24
     61a:	70 95       	com	r23
     61c:	61 95       	neg	r22
     61e:	7f 4f       	sbci	r23, 0xFF	; 255
     620:	8f 4f       	sbci	r24, 0xFF	; 255
     622:	9f 4f       	sbci	r25, 0xFF	; 255
     624:	99 23       	and	r25, r25
     626:	a9 f0       	breq	.+42     	; 0x652 <__floatsisf+0x40>
     628:	f9 2f       	mov	r31, r25
     62a:	96 e9       	ldi	r25, 0x96	; 150
     62c:	bb 27       	eor	r27, r27
     62e:	93 95       	inc	r25
     630:	f6 95       	lsr	r31
     632:	87 95       	ror	r24
     634:	77 95       	ror	r23
     636:	67 95       	ror	r22
     638:	b7 95       	ror	r27
     63a:	f1 11       	cpse	r31, r1
     63c:	f8 cf       	rjmp	.-16     	; 0x62e <__floatsisf+0x1c>
     63e:	fa f4       	brpl	.+62     	; 0x67e <__floatsisf+0x6c>
     640:	bb 0f       	add	r27, r27
     642:	11 f4       	brne	.+4      	; 0x648 <__floatsisf+0x36>
     644:	60 ff       	sbrs	r22, 0
     646:	1b c0       	rjmp	.+54     	; 0x67e <__floatsisf+0x6c>
     648:	6f 5f       	subi	r22, 0xFF	; 255
     64a:	7f 4f       	sbci	r23, 0xFF	; 255
     64c:	8f 4f       	sbci	r24, 0xFF	; 255
     64e:	9f 4f       	sbci	r25, 0xFF	; 255
     650:	16 c0       	rjmp	.+44     	; 0x67e <__floatsisf+0x6c>
     652:	88 23       	and	r24, r24
     654:	11 f0       	breq	.+4      	; 0x65a <__floatsisf+0x48>
     656:	96 e9       	ldi	r25, 0x96	; 150
     658:	11 c0       	rjmp	.+34     	; 0x67c <__floatsisf+0x6a>
     65a:	77 23       	and	r23, r23
     65c:	21 f0       	breq	.+8      	; 0x666 <__floatsisf+0x54>
     65e:	9e e8       	ldi	r25, 0x8E	; 142
     660:	87 2f       	mov	r24, r23
     662:	76 2f       	mov	r23, r22
     664:	05 c0       	rjmp	.+10     	; 0x670 <__floatsisf+0x5e>
     666:	66 23       	and	r22, r22
     668:	71 f0       	breq	.+28     	; 0x686 <__floatsisf+0x74>
     66a:	96 e8       	ldi	r25, 0x86	; 134
     66c:	86 2f       	mov	r24, r22
     66e:	70 e0       	ldi	r23, 0x00	; 0
     670:	60 e0       	ldi	r22, 0x00	; 0
     672:	2a f0       	brmi	.+10     	; 0x67e <__floatsisf+0x6c>
     674:	9a 95       	dec	r25
     676:	66 0f       	add	r22, r22
     678:	77 1f       	adc	r23, r23
     67a:	88 1f       	adc	r24, r24
     67c:	da f7       	brpl	.-10     	; 0x674 <__floatsisf+0x62>
     67e:	88 0f       	add	r24, r24
     680:	96 95       	lsr	r25
     682:	87 95       	ror	r24
     684:	97 f9       	bld	r25, 7
     686:	08 95       	ret

00000688 <__fp_inf>:
     688:	97 f9       	bld	r25, 7
     68a:	9f 67       	ori	r25, 0x7F	; 127
     68c:	80 e8       	ldi	r24, 0x80	; 128
     68e:	70 e0       	ldi	r23, 0x00	; 0
     690:	60 e0       	ldi	r22, 0x00	; 0
     692:	08 95       	ret

00000694 <__fp_nan>:
     694:	9f ef       	ldi	r25, 0xFF	; 255
     696:	80 ec       	ldi	r24, 0xC0	; 192
     698:	08 95       	ret

0000069a <__fp_pscA>:
     69a:	00 24       	eor	r0, r0
     69c:	0a 94       	dec	r0
     69e:	16 16       	cp	r1, r22
     6a0:	17 06       	cpc	r1, r23
     6a2:	18 06       	cpc	r1, r24
     6a4:	09 06       	cpc	r0, r25
     6a6:	08 95       	ret

000006a8 <__fp_pscB>:
     6a8:	00 24       	eor	r0, r0
     6aa:	0a 94       	dec	r0
     6ac:	12 16       	cp	r1, r18
     6ae:	13 06       	cpc	r1, r19
     6b0:	14 06       	cpc	r1, r20
     6b2:	05 06       	cpc	r0, r21
     6b4:	08 95       	ret

000006b6 <__fp_round>:
     6b6:	09 2e       	mov	r0, r25
     6b8:	03 94       	inc	r0
     6ba:	00 0c       	add	r0, r0
     6bc:	11 f4       	brne	.+4      	; 0x6c2 <__fp_round+0xc>
     6be:	88 23       	and	r24, r24
     6c0:	52 f0       	brmi	.+20     	; 0x6d6 <__fp_round+0x20>
     6c2:	bb 0f       	add	r27, r27
     6c4:	40 f4       	brcc	.+16     	; 0x6d6 <__fp_round+0x20>
     6c6:	bf 2b       	or	r27, r31
     6c8:	11 f4       	brne	.+4      	; 0x6ce <__fp_round+0x18>
     6ca:	60 ff       	sbrs	r22, 0
     6cc:	04 c0       	rjmp	.+8      	; 0x6d6 <__fp_round+0x20>
     6ce:	6f 5f       	subi	r22, 0xFF	; 255
     6d0:	7f 4f       	sbci	r23, 0xFF	; 255
     6d2:	8f 4f       	sbci	r24, 0xFF	; 255
     6d4:	9f 4f       	sbci	r25, 0xFF	; 255
     6d6:	08 95       	ret

000006d8 <__fp_split3>:
     6d8:	57 fd       	sbrc	r21, 7
     6da:	90 58       	subi	r25, 0x80	; 128
     6dc:	44 0f       	add	r20, r20
     6de:	55 1f       	adc	r21, r21
     6e0:	59 f0       	breq	.+22     	; 0x6f8 <__fp_splitA+0x10>
     6e2:	5f 3f       	cpi	r21, 0xFF	; 255
     6e4:	71 f0       	breq	.+28     	; 0x702 <__fp_splitA+0x1a>
     6e6:	47 95       	ror	r20

000006e8 <__fp_splitA>:
     6e8:	88 0f       	add	r24, r24
     6ea:	97 fb       	bst	r25, 7
     6ec:	99 1f       	adc	r25, r25
     6ee:	61 f0       	breq	.+24     	; 0x708 <__fp_splitA+0x20>
     6f0:	9f 3f       	cpi	r25, 0xFF	; 255
     6f2:	79 f0       	breq	.+30     	; 0x712 <__fp_splitA+0x2a>
     6f4:	87 95       	ror	r24
     6f6:	08 95       	ret
     6f8:	12 16       	cp	r1, r18
     6fa:	13 06       	cpc	r1, r19
     6fc:	14 06       	cpc	r1, r20
     6fe:	55 1f       	adc	r21, r21
     700:	f2 cf       	rjmp	.-28     	; 0x6e6 <__fp_split3+0xe>
     702:	46 95       	lsr	r20
     704:	f1 df       	rcall	.-30     	; 0x6e8 <__fp_splitA>
     706:	08 c0       	rjmp	.+16     	; 0x718 <__fp_splitA+0x30>
     708:	16 16       	cp	r1, r22
     70a:	17 06       	cpc	r1, r23
     70c:	18 06       	cpc	r1, r24
     70e:	99 1f       	adc	r25, r25
     710:	f1 cf       	rjmp	.-30     	; 0x6f4 <__fp_splitA+0xc>
     712:	86 95       	lsr	r24
     714:	71 05       	cpc	r23, r1
     716:	61 05       	cpc	r22, r1
     718:	08 94       	sec
     71a:	08 95       	ret

0000071c <__fp_zero>:
     71c:	e8 94       	clt

0000071e <__fp_szero>:
     71e:	bb 27       	eor	r27, r27
     720:	66 27       	eor	r22, r22
     722:	77 27       	eor	r23, r23
     724:	cb 01       	movw	r24, r22
     726:	97 f9       	bld	r25, 7
     728:	08 95       	ret

0000072a <__mulsf3>:
     72a:	0e 94 a8 03 	call	0x750	; 0x750 <__mulsf3x>
     72e:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <__fp_round>
     732:	0e 94 4d 03 	call	0x69a	; 0x69a <__fp_pscA>
     736:	38 f0       	brcs	.+14     	; 0x746 <__mulsf3+0x1c>
     738:	0e 94 54 03 	call	0x6a8	; 0x6a8 <__fp_pscB>
     73c:	20 f0       	brcs	.+8      	; 0x746 <__mulsf3+0x1c>
     73e:	95 23       	and	r25, r21
     740:	11 f0       	breq	.+4      	; 0x746 <__mulsf3+0x1c>
     742:	0c 94 44 03 	jmp	0x688	; 0x688 <__fp_inf>
     746:	0c 94 4a 03 	jmp	0x694	; 0x694 <__fp_nan>
     74a:	11 24       	eor	r1, r1
     74c:	0c 94 8f 03 	jmp	0x71e	; 0x71e <__fp_szero>

00000750 <__mulsf3x>:
     750:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <__fp_split3>
     754:	70 f3       	brcs	.-36     	; 0x732 <__mulsf3+0x8>

00000756 <__mulsf3_pse>:
     756:	95 9f       	mul	r25, r21
     758:	c1 f3       	breq	.-16     	; 0x74a <__mulsf3+0x20>
     75a:	95 0f       	add	r25, r21
     75c:	50 e0       	ldi	r21, 0x00	; 0
     75e:	55 1f       	adc	r21, r21
     760:	62 9f       	mul	r22, r18
     762:	f0 01       	movw	r30, r0
     764:	72 9f       	mul	r23, r18
     766:	bb 27       	eor	r27, r27
     768:	f0 0d       	add	r31, r0
     76a:	b1 1d       	adc	r27, r1
     76c:	63 9f       	mul	r22, r19
     76e:	aa 27       	eor	r26, r26
     770:	f0 0d       	add	r31, r0
     772:	b1 1d       	adc	r27, r1
     774:	aa 1f       	adc	r26, r26
     776:	64 9f       	mul	r22, r20
     778:	66 27       	eor	r22, r22
     77a:	b0 0d       	add	r27, r0
     77c:	a1 1d       	adc	r26, r1
     77e:	66 1f       	adc	r22, r22
     780:	82 9f       	mul	r24, r18
     782:	22 27       	eor	r18, r18
     784:	b0 0d       	add	r27, r0
     786:	a1 1d       	adc	r26, r1
     788:	62 1f       	adc	r22, r18
     78a:	73 9f       	mul	r23, r19
     78c:	b0 0d       	add	r27, r0
     78e:	a1 1d       	adc	r26, r1
     790:	62 1f       	adc	r22, r18
     792:	83 9f       	mul	r24, r19
     794:	a0 0d       	add	r26, r0
     796:	61 1d       	adc	r22, r1
     798:	22 1f       	adc	r18, r18
     79a:	74 9f       	mul	r23, r20
     79c:	33 27       	eor	r19, r19
     79e:	a0 0d       	add	r26, r0
     7a0:	61 1d       	adc	r22, r1
     7a2:	23 1f       	adc	r18, r19
     7a4:	84 9f       	mul	r24, r20
     7a6:	60 0d       	add	r22, r0
     7a8:	21 1d       	adc	r18, r1
     7aa:	82 2f       	mov	r24, r18
     7ac:	76 2f       	mov	r23, r22
     7ae:	6a 2f       	mov	r22, r26
     7b0:	11 24       	eor	r1, r1
     7b2:	9f 57       	subi	r25, 0x7F	; 127
     7b4:	50 40       	sbci	r21, 0x00	; 0
     7b6:	9a f0       	brmi	.+38     	; 0x7de <__mulsf3_pse+0x88>
     7b8:	f1 f0       	breq	.+60     	; 0x7f6 <__mulsf3_pse+0xa0>
     7ba:	88 23       	and	r24, r24
     7bc:	4a f0       	brmi	.+18     	; 0x7d0 <__mulsf3_pse+0x7a>
     7be:	ee 0f       	add	r30, r30
     7c0:	ff 1f       	adc	r31, r31
     7c2:	bb 1f       	adc	r27, r27
     7c4:	66 1f       	adc	r22, r22
     7c6:	77 1f       	adc	r23, r23
     7c8:	88 1f       	adc	r24, r24
     7ca:	91 50       	subi	r25, 0x01	; 1
     7cc:	50 40       	sbci	r21, 0x00	; 0
     7ce:	a9 f7       	brne	.-22     	; 0x7ba <__mulsf3_pse+0x64>
     7d0:	9e 3f       	cpi	r25, 0xFE	; 254
     7d2:	51 05       	cpc	r21, r1
     7d4:	80 f0       	brcs	.+32     	; 0x7f6 <__mulsf3_pse+0xa0>
     7d6:	0c 94 44 03 	jmp	0x688	; 0x688 <__fp_inf>
     7da:	0c 94 8f 03 	jmp	0x71e	; 0x71e <__fp_szero>
     7de:	5f 3f       	cpi	r21, 0xFF	; 255
     7e0:	e4 f3       	brlt	.-8      	; 0x7da <__mulsf3_pse+0x84>
     7e2:	98 3e       	cpi	r25, 0xE8	; 232
     7e4:	d4 f3       	brlt	.-12     	; 0x7da <__mulsf3_pse+0x84>
     7e6:	86 95       	lsr	r24
     7e8:	77 95       	ror	r23
     7ea:	67 95       	ror	r22
     7ec:	b7 95       	ror	r27
     7ee:	f7 95       	ror	r31
     7f0:	e7 95       	ror	r30
     7f2:	9f 5f       	subi	r25, 0xFF	; 255
     7f4:	c1 f7       	brne	.-16     	; 0x7e6 <__mulsf3_pse+0x90>
     7f6:	fe 2b       	or	r31, r30
     7f8:	88 0f       	add	r24, r24
     7fa:	91 1d       	adc	r25, r1
     7fc:	96 95       	lsr	r25
     7fe:	87 95       	ror	r24
     800:	97 f9       	bld	r25, 7
     802:	08 95       	ret

00000804 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     804:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     806:	91 8d       	ldd	r25, Z+25	; 0x19
     808:	22 8d       	ldd	r18, Z+26	; 0x1a
     80a:	89 2f       	mov	r24, r25
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	80 5c       	subi	r24, 0xC0	; 192
     810:	9f 4f       	sbci	r25, 0xFF	; 255
     812:	82 1b       	sub	r24, r18
     814:	91 09       	sbc	r25, r1
}
     816:	8f 73       	andi	r24, 0x3F	; 63
     818:	99 27       	eor	r25, r25
     81a:	08 95       	ret

0000081c <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     81c:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     81e:	91 8d       	ldd	r25, Z+25	; 0x19
     820:	82 8d       	ldd	r24, Z+26	; 0x1a
     822:	98 17       	cp	r25, r24
     824:	31 f0       	breq	.+12     	; 0x832 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     826:	82 8d       	ldd	r24, Z+26	; 0x1a
     828:	e8 0f       	add	r30, r24
     82a:	f1 1d       	adc	r31, r1
     82c:	85 8d       	ldd	r24, Z+29	; 0x1d
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     832:	8f ef       	ldi	r24, 0xFF	; 255
     834:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     836:	08 95       	ret

00000838 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     838:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     83a:	91 8d       	ldd	r25, Z+25	; 0x19
     83c:	82 8d       	ldd	r24, Z+26	; 0x1a
     83e:	98 17       	cp	r25, r24
     840:	61 f0       	breq	.+24     	; 0x85a <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     842:	82 8d       	ldd	r24, Z+26	; 0x1a
     844:	df 01       	movw	r26, r30
     846:	a8 0f       	add	r26, r24
     848:	b1 1d       	adc	r27, r1
     84a:	5d 96       	adiw	r26, 0x1d	; 29
     84c:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     84e:	92 8d       	ldd	r25, Z+26	; 0x1a
     850:	9f 5f       	subi	r25, 0xFF	; 255
     852:	9f 73       	andi	r25, 0x3F	; 63
     854:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     85a:	8f ef       	ldi	r24, 0xFF	; 255
     85c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     85e:	08 95       	ret

00000860 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     860:	85 e8       	ldi	r24, 0x85	; 133
     862:	95 e0       	ldi	r25, 0x05	; 5
     864:	89 2b       	or	r24, r25
     866:	49 f0       	breq	.+18     	; 0x87a <_Z14serialEventRunv+0x1a>
     868:	80 e0       	ldi	r24, 0x00	; 0
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	89 2b       	or	r24, r25
     86e:	29 f0       	breq	.+10     	; 0x87a <_Z14serialEventRunv+0x1a>
     870:	0e 94 85 05 	call	0xb0a	; 0xb0a <_Z17Serial0_availablev>
     874:	81 11       	cpse	r24, r1
     876:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     87a:	08 95       	ret

0000087c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     87c:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     87e:	84 8d       	ldd	r24, Z+28	; 0x1c
     880:	df 01       	movw	r26, r30
     882:	a8 0f       	add	r26, r24
     884:	b1 1d       	adc	r27, r1
     886:	a3 5a       	subi	r26, 0xA3	; 163
     888:	bf 4f       	sbci	r27, 0xFF	; 255
     88a:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     88c:	84 8d       	ldd	r24, Z+28	; 0x1c
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	01 96       	adiw	r24, 0x01	; 1
     892:	8f 73       	andi	r24, 0x3F	; 63
     894:	99 27       	eor	r25, r25
     896:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     898:	a6 89       	ldd	r26, Z+22	; 0x16
     89a:	b7 89       	ldd	r27, Z+23	; 0x17
     89c:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     89e:	a0 89       	ldd	r26, Z+16	; 0x10
     8a0:	b1 89       	ldd	r27, Z+17	; 0x11
     8a2:	8c 91       	ld	r24, X
     8a4:	80 64       	ori	r24, 0x40	; 64
     8a6:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     8a8:	93 8d       	ldd	r25, Z+27	; 0x1b
     8aa:	84 8d       	ldd	r24, Z+28	; 0x1c
     8ac:	98 13       	cpse	r25, r24
     8ae:	06 c0       	rjmp	.+12     	; 0x8bc <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     8b0:	02 88       	ldd	r0, Z+18	; 0x12
     8b2:	f3 89       	ldd	r31, Z+19	; 0x13
     8b4:	e0 2d       	mov	r30, r0
     8b6:	80 81       	ld	r24, Z
     8b8:	8f 7d       	andi	r24, 0xDF	; 223
     8ba:	80 83       	st	Z, r24
     8bc:	08 95       	ret

000008be <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     8be:	ef 92       	push	r14
     8c0:	ff 92       	push	r15
     8c2:	0f 93       	push	r16
     8c4:	1f 93       	push	r17
     8c6:	cf 93       	push	r28
     8c8:	df 93       	push	r29
     8ca:	ec 01       	movw	r28, r24
  _written = true;
     8cc:	81 e0       	ldi	r24, 0x01	; 1
     8ce:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     8d0:	9b 8d       	ldd	r25, Y+27	; 0x1b
     8d2:	8c 8d       	ldd	r24, Y+28	; 0x1c
     8d4:	98 13       	cpse	r25, r24
     8d6:	05 c0       	rjmp	.+10     	; 0x8e2 <_ZN14HardwareSerial5writeEh+0x24>
     8d8:	e8 89       	ldd	r30, Y+16	; 0x10
     8da:	f9 89       	ldd	r31, Y+17	; 0x11
     8dc:	80 81       	ld	r24, Z
     8de:	85 fd       	sbrc	r24, 5
     8e0:	24 c0       	rjmp	.+72     	; 0x92a <__stack+0x2b>
     8e2:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     8e4:	0b 8d       	ldd	r16, Y+27	; 0x1b
     8e6:	10 e0       	ldi	r17, 0x00	; 0
     8e8:	0f 5f       	subi	r16, 0xFF	; 255
     8ea:	1f 4f       	sbci	r17, 0xFF	; 255
     8ec:	0f 73       	andi	r16, 0x3F	; 63
     8ee:	11 27       	eor	r17, r17
     8f0:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     8f2:	8c 8d       	ldd	r24, Y+28	; 0x1c
     8f4:	e8 12       	cpse	r14, r24
     8f6:	0c c0       	rjmp	.+24     	; 0x910 <__stack+0x11>
    if (bit_is_clear(SREG, SREG_I)) {
     8f8:	0f b6       	in	r0, 0x3f	; 63
     8fa:	07 fc       	sbrc	r0, 7
     8fc:	fa cf       	rjmp	.-12     	; 0x8f2 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     8fe:	e8 89       	ldd	r30, Y+16	; 0x10
     900:	f9 89       	ldd	r31, Y+17	; 0x11
     902:	80 81       	ld	r24, Z
     904:	85 ff       	sbrs	r24, 5
     906:	f5 cf       	rjmp	.-22     	; 0x8f2 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     908:	ce 01       	movw	r24, r28
     90a:	0e 94 3e 04 	call	0x87c	; 0x87c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     90e:	f1 cf       	rjmp	.-30     	; 0x8f2 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     910:	8b 8d       	ldd	r24, Y+27	; 0x1b
     912:	fe 01       	movw	r30, r28
     914:	e8 0f       	add	r30, r24
     916:	f1 1d       	adc	r31, r1
     918:	e3 5a       	subi	r30, 0xA3	; 163
     91a:	ff 4f       	sbci	r31, 0xFF	; 255
     91c:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
     91e:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
     920:	ea 89       	ldd	r30, Y+18	; 0x12
     922:	fb 89       	ldd	r31, Y+19	; 0x13
     924:	80 81       	ld	r24, Z
     926:	80 62       	ori	r24, 0x20	; 32
     928:	07 c0       	rjmp	.+14     	; 0x938 <__stack+0x39>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
     92a:	ee 89       	ldd	r30, Y+22	; 0x16
     92c:	ff 89       	ldd	r31, Y+23	; 0x17
     92e:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
     930:	e8 89       	ldd	r30, Y+16	; 0x10
     932:	f9 89       	ldd	r31, Y+17	; 0x11
     934:	80 81       	ld	r24, Z
     936:	80 64       	ori	r24, 0x40	; 64
     938:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
     93a:	81 e0       	ldi	r24, 0x01	; 1
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	df 91       	pop	r29
     940:	cf 91       	pop	r28
     942:	1f 91       	pop	r17
     944:	0f 91       	pop	r16
     946:	ff 90       	pop	r15
     948:	ef 90       	pop	r14
     94a:	08 95       	ret

0000094c <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     94c:	cf 93       	push	r28
     94e:	df 93       	push	r29
     950:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     952:	88 8d       	ldd	r24, Y+24	; 0x18
     954:	88 23       	and	r24, r24
     956:	c9 f0       	breq	.+50     	; 0x98a <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     958:	ea 89       	ldd	r30, Y+18	; 0x12
     95a:	fb 89       	ldd	r31, Y+19	; 0x13
     95c:	80 81       	ld	r24, Z
     95e:	85 fd       	sbrc	r24, 5
     960:	05 c0       	rjmp	.+10     	; 0x96c <_ZN14HardwareSerial5flushEv+0x20>
     962:	a8 89       	ldd	r26, Y+16	; 0x10
     964:	b9 89       	ldd	r27, Y+17	; 0x11
     966:	8c 91       	ld	r24, X
     968:	86 fd       	sbrc	r24, 6
     96a:	0f c0       	rjmp	.+30     	; 0x98a <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     96c:	0f b6       	in	r0, 0x3f	; 63
     96e:	07 fc       	sbrc	r0, 7
     970:	f5 cf       	rjmp	.-22     	; 0x95c <_ZN14HardwareSerial5flushEv+0x10>
     972:	80 81       	ld	r24, Z
     974:	85 ff       	sbrs	r24, 5
     976:	f2 cf       	rjmp	.-28     	; 0x95c <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     978:	a8 89       	ldd	r26, Y+16	; 0x10
     97a:	b9 89       	ldd	r27, Y+17	; 0x11
     97c:	8c 91       	ld	r24, X
     97e:	85 ff       	sbrs	r24, 5
     980:	ed cf       	rjmp	.-38     	; 0x95c <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     982:	ce 01       	movw	r24, r28
     984:	0e 94 3e 04 	call	0x87c	; 0x87c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     988:	e7 cf       	rjmp	.-50     	; 0x958 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     98a:	df 91       	pop	r29
     98c:	cf 91       	pop	r28
     98e:	08 95       	ret

00000990 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     990:	cf 92       	push	r12
     992:	df 92       	push	r13
     994:	ef 92       	push	r14
     996:	ff 92       	push	r15
     998:	1f 93       	push	r17
     99a:	cf 93       	push	r28
     99c:	df 93       	push	r29
     99e:	ec 01       	movw	r28, r24
     9a0:	6a 01       	movw	r12, r20
     9a2:	7b 01       	movw	r14, r22
     9a4:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     9a6:	e8 89       	ldd	r30, Y+16	; 0x10
     9a8:	f9 89       	ldd	r31, Y+17	; 0x11
     9aa:	82 e0       	ldi	r24, 0x02	; 2
     9ac:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     9ae:	41 15       	cp	r20, r1
     9b0:	51 4e       	sbci	r21, 0xE1	; 225
     9b2:	61 05       	cpc	r22, r1
     9b4:	71 05       	cpc	r23, r1
     9b6:	b1 f0       	breq	.+44     	; 0x9e4 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	79 e0       	ldi	r23, 0x09	; 9
     9bc:	8d e3       	ldi	r24, 0x3D	; 61
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a7 01       	movw	r20, r14
     9c2:	96 01       	movw	r18, r12
     9c4:	0e 94 49 08 	call	0x1092	; 0x1092 <__udivmodsi4>
     9c8:	da 01       	movw	r26, r20
     9ca:	c9 01       	movw	r24, r18
     9cc:	01 97       	sbiw	r24, 0x01	; 1
     9ce:	a1 09       	sbc	r26, r1
     9d0:	b1 09       	sbc	r27, r1
     9d2:	b6 95       	lsr	r27
     9d4:	a7 95       	ror	r26
     9d6:	97 95       	ror	r25
     9d8:	87 95       	ror	r24
     9da:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     9dc:	21 15       	cp	r18, r1
     9de:	80 e1       	ldi	r24, 0x10	; 16
     9e0:	38 07       	cpc	r19, r24
     9e2:	a8 f0       	brcs	.+42     	; 0xa0e <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     9e4:	e8 89       	ldd	r30, Y+16	; 0x10
     9e6:	f9 89       	ldd	r31, Y+17	; 0x11
     9e8:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     9ea:	60 e8       	ldi	r22, 0x80	; 128
     9ec:	74 e8       	ldi	r23, 0x84	; 132
     9ee:	8e e1       	ldi	r24, 0x1E	; 30
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	a7 01       	movw	r20, r14
     9f4:	96 01       	movw	r18, r12
     9f6:	0e 94 49 08 	call	0x1092	; 0x1092 <__udivmodsi4>
     9fa:	da 01       	movw	r26, r20
     9fc:	c9 01       	movw	r24, r18
     9fe:	01 97       	sbiw	r24, 0x01	; 1
     a00:	a1 09       	sbc	r26, r1
     a02:	b1 09       	sbc	r27, r1
     a04:	b6 95       	lsr	r27
     a06:	a7 95       	ror	r26
     a08:	97 95       	ror	r25
     a0a:	87 95       	ror	r24
     a0c:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     a0e:	ec 85       	ldd	r30, Y+12	; 0x0c
     a10:	fd 85       	ldd	r31, Y+13	; 0x0d
     a12:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     a14:	ee 85       	ldd	r30, Y+14	; 0x0e
     a16:	ff 85       	ldd	r31, Y+15	; 0x0f
     a18:	20 83       	st	Z, r18

  _written = false;
     a1a:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     a1c:	ec 89       	ldd	r30, Y+20	; 0x14
     a1e:	fd 89       	ldd	r31, Y+21	; 0x15
     a20:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     a22:	ea 89       	ldd	r30, Y+18	; 0x12
     a24:	fb 89       	ldd	r31, Y+19	; 0x13
     a26:	80 81       	ld	r24, Z
     a28:	80 61       	ori	r24, 0x10	; 16
     a2a:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     a2c:	ea 89       	ldd	r30, Y+18	; 0x12
     a2e:	fb 89       	ldd	r31, Y+19	; 0x13
     a30:	80 81       	ld	r24, Z
     a32:	88 60       	ori	r24, 0x08	; 8
     a34:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     a36:	ea 89       	ldd	r30, Y+18	; 0x12
     a38:	fb 89       	ldd	r31, Y+19	; 0x13
     a3a:	80 81       	ld	r24, Z
     a3c:	80 68       	ori	r24, 0x80	; 128
     a3e:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     a40:	ea 89       	ldd	r30, Y+18	; 0x12
     a42:	fb 89       	ldd	r31, Y+19	; 0x13
     a44:	80 81       	ld	r24, Z
     a46:	8f 7d       	andi	r24, 0xDF	; 223
     a48:	80 83       	st	Z, r24
}
     a4a:	df 91       	pop	r29
     a4c:	cf 91       	pop	r28
     a4e:	1f 91       	pop	r17
     a50:	ff 90       	pop	r15
     a52:	ef 90       	pop	r14
     a54:	df 90       	pop	r13
     a56:	cf 90       	pop	r12
     a58:	08 95       	ret

00000a5a <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     a5a:	1f 92       	push	r1
     a5c:	0f 92       	push	r0
     a5e:	0f b6       	in	r0, 0x3f	; 63
     a60:	0f 92       	push	r0
     a62:	11 24       	eor	r1, r1
     a64:	2f 93       	push	r18
     a66:	8f 93       	push	r24
     a68:	9f 93       	push	r25
     a6a:	ef 93       	push	r30
     a6c:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     a6e:	e0 91 4a 01 	lds	r30, 0x014A	; 0x80014a <Serial+0x10>
     a72:	f0 91 4b 01 	lds	r31, 0x014B	; 0x80014b <Serial+0x11>
     a76:	80 81       	ld	r24, Z
     a78:	e0 91 50 01 	lds	r30, 0x0150	; 0x800150 <Serial+0x16>
     a7c:	f0 91 51 01 	lds	r31, 0x0151	; 0x800151 <Serial+0x17>
     a80:	82 fd       	sbrc	r24, 2
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     a84:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     a86:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <Serial+0x19>
     a8a:	8f 5f       	subi	r24, 0xFF	; 255
     a8c:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     a8e:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <Serial+0x1a>
     a92:	82 17       	cp	r24, r18
     a94:	51 f0       	breq	.+20     	; 0xaaa <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
     a96:	e0 91 53 01 	lds	r30, 0x0153	; 0x800153 <Serial+0x19>
     a9a:	f0 e0       	ldi	r31, 0x00	; 0
     a9c:	e6 5c       	subi	r30, 0xC6	; 198
     a9e:	fe 4f       	sbci	r31, 0xFE	; 254
     aa0:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     aa2:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <Serial+0x19>
     aa6:	01 c0       	rjmp	.+2      	; 0xaaa <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     aa8:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     aaa:	ff 91       	pop	r31
     aac:	ef 91       	pop	r30
     aae:	9f 91       	pop	r25
     ab0:	8f 91       	pop	r24
     ab2:	2f 91       	pop	r18
     ab4:	0f 90       	pop	r0
     ab6:	0f be       	out	0x3f, r0	; 63
     ab8:	0f 90       	pop	r0
     aba:	1f 90       	pop	r1
     abc:	18 95       	reti

00000abe <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     abe:	1f 92       	push	r1
     ac0:	0f 92       	push	r0
     ac2:	0f b6       	in	r0, 0x3f	; 63
     ac4:	0f 92       	push	r0
     ac6:	11 24       	eor	r1, r1
     ac8:	2f 93       	push	r18
     aca:	3f 93       	push	r19
     acc:	4f 93       	push	r20
     ace:	5f 93       	push	r21
     ad0:	6f 93       	push	r22
     ad2:	7f 93       	push	r23
     ad4:	8f 93       	push	r24
     ad6:	9f 93       	push	r25
     ad8:	af 93       	push	r26
     ada:	bf 93       	push	r27
     adc:	ef 93       	push	r30
     ade:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     ae0:	8a e3       	ldi	r24, 0x3A	; 58
     ae2:	91 e0       	ldi	r25, 0x01	; 1
     ae4:	0e 94 3e 04 	call	0x87c	; 0x87c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     ae8:	ff 91       	pop	r31
     aea:	ef 91       	pop	r30
     aec:	bf 91       	pop	r27
     aee:	af 91       	pop	r26
     af0:	9f 91       	pop	r25
     af2:	8f 91       	pop	r24
     af4:	7f 91       	pop	r23
     af6:	6f 91       	pop	r22
     af8:	5f 91       	pop	r21
     afa:	4f 91       	pop	r20
     afc:	3f 91       	pop	r19
     afe:	2f 91       	pop	r18
     b00:	0f 90       	pop	r0
     b02:	0f be       	out	0x3f, r0	; 63
     b04:	0f 90       	pop	r0
     b06:	1f 90       	pop	r1
     b08:	18 95       	reti

00000b0a <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     b0a:	8a e3       	ldi	r24, 0x3A	; 58
     b0c:	91 e0       	ldi	r25, 0x01	; 1
     b0e:	0e 94 02 04 	call	0x804	; 0x804 <_ZN14HardwareSerial9availableEv>
     b12:	21 e0       	ldi	r18, 0x01	; 1
     b14:	89 2b       	or	r24, r25
     b16:	09 f4       	brne	.+2      	; 0xb1a <_Z17Serial0_availablev+0x10>
     b18:	20 e0       	ldi	r18, 0x00	; 0
}
     b1a:	82 2f       	mov	r24, r18
     b1c:	08 95       	ret

00000b1e <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     b1e:	ea e3       	ldi	r30, 0x3A	; 58
     b20:	f1 e0       	ldi	r31, 0x01	; 1
     b22:	13 82       	std	Z+3, r1	; 0x03
     b24:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     b26:	88 ee       	ldi	r24, 0xE8	; 232
     b28:	93 e0       	ldi	r25, 0x03	; 3
     b2a:	a0 e0       	ldi	r26, 0x00	; 0
     b2c:	b0 e0       	ldi	r27, 0x00	; 0
     b2e:	84 83       	std	Z+4, r24	; 0x04
     b30:	95 83       	std	Z+5, r25	; 0x05
     b32:	a6 83       	std	Z+6, r26	; 0x06
     b34:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     b36:	81 e1       	ldi	r24, 0x11	; 17
     b38:	91 e0       	ldi	r25, 0x01	; 1
     b3a:	91 83       	std	Z+1, r25	; 0x01
     b3c:	80 83       	st	Z, r24
     b3e:	85 ec       	ldi	r24, 0xC5	; 197
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	95 87       	std	Z+13, r25	; 0x0d
     b44:	84 87       	std	Z+12, r24	; 0x0c
     b46:	84 ec       	ldi	r24, 0xC4	; 196
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	97 87       	std	Z+15, r25	; 0x0f
     b4c:	86 87       	std	Z+14, r24	; 0x0e
     b4e:	80 ec       	ldi	r24, 0xC0	; 192
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	91 8b       	std	Z+17, r25	; 0x11
     b54:	80 8b       	std	Z+16, r24	; 0x10
     b56:	81 ec       	ldi	r24, 0xC1	; 193
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	93 8b       	std	Z+19, r25	; 0x13
     b5c:	82 8b       	std	Z+18, r24	; 0x12
     b5e:	82 ec       	ldi	r24, 0xC2	; 194
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	95 8b       	std	Z+21, r25	; 0x15
     b64:	84 8b       	std	Z+20, r24	; 0x14
     b66:	86 ec       	ldi	r24, 0xC6	; 198
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	97 8b       	std	Z+23, r25	; 0x17
     b6c:	86 8b       	std	Z+22, r24	; 0x16
     b6e:	11 8e       	std	Z+25, r1	; 0x19
     b70:	12 8e       	std	Z+26, r1	; 0x1a
     b72:	13 8e       	std	Z+27, r1	; 0x1b
     b74:	14 8e       	std	Z+28, r1	; 0x1c
     b76:	08 95       	ret

00000b78 <initVariant>:
     b78:	08 95       	ret

00000b7a <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     b7a:	0e 94 50 07 	call	0xea0	; 0xea0 <init>

	initVariant();
     b7e:	0e 94 bc 05 	call	0xb78	; 0xb78 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     b82:	0e 94 8d 00 	call	0x11a	; 0x11a <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     b86:	c0 e3       	ldi	r28, 0x30	; 48
     b88:	d4 e0       	ldi	r29, 0x04	; 4
#endif
	
	setup();
    
	for (;;) {
		loop();
     b8a:	0e 94 b7 00 	call	0x16e	; 0x16e <loop>
		if (serialEventRun) serialEventRun();
     b8e:	20 97       	sbiw	r28, 0x00	; 0
     b90:	e1 f3       	breq	.-8      	; 0xb8a <main+0x10>
     b92:	0e 94 30 04 	call	0x860	; 0x860 <_Z14serialEventRunv>
     b96:	f9 cf       	rjmp	.-14     	; 0xb8a <main+0x10>

00000b98 <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     b98:	cf 92       	push	r12
     b9a:	df 92       	push	r13
     b9c:	ef 92       	push	r14
     b9e:	ff 92       	push	r15
     ba0:	0f 93       	push	r16
     ba2:	1f 93       	push	r17
     ba4:	cf 93       	push	r28
     ba6:	df 93       	push	r29
     ba8:	6c 01       	movw	r12, r24
     baa:	7a 01       	movw	r14, r20
     bac:	8b 01       	movw	r16, r22
     bae:	c0 e0       	ldi	r28, 0x00	; 0
     bb0:	d0 e0       	ldi	r29, 0x00	; 0
     bb2:	ce 15       	cp	r28, r14
     bb4:	df 05       	cpc	r29, r15
     bb6:	81 f0       	breq	.+32     	; 0xbd8 <_ZN5Print5writeEPKhj+0x40>
     bb8:	d8 01       	movw	r26, r16
     bba:	6d 91       	ld	r22, X+
     bbc:	8d 01       	movw	r16, r26
     bbe:	d6 01       	movw	r26, r12
     bc0:	ed 91       	ld	r30, X+
     bc2:	fc 91       	ld	r31, X
     bc4:	01 90       	ld	r0, Z+
     bc6:	f0 81       	ld	r31, Z
     bc8:	e0 2d       	mov	r30, r0
     bca:	c6 01       	movw	r24, r12
     bcc:	09 95       	icall
     bce:	89 2b       	or	r24, r25
     bd0:	11 f0       	breq	.+4      	; 0xbd6 <_ZN5Print5writeEPKhj+0x3e>
     bd2:	21 96       	adiw	r28, 0x01	; 1
     bd4:	ee cf       	rjmp	.-36     	; 0xbb2 <_ZN5Print5writeEPKhj+0x1a>
     bd6:	7e 01       	movw	r14, r28
     bd8:	c7 01       	movw	r24, r14
     bda:	df 91       	pop	r29
     bdc:	cf 91       	pop	r28
     bde:	1f 91       	pop	r17
     be0:	0f 91       	pop	r16
     be2:	ff 90       	pop	r15
     be4:	ef 90       	pop	r14
     be6:	df 90       	pop	r13
     be8:	cf 90       	pop	r12
     bea:	08 95       	ret

00000bec <_ZN5Print5writeEPKc>:
     bec:	61 15       	cp	r22, r1
     bee:	71 05       	cpc	r23, r1
     bf0:	79 f0       	breq	.+30     	; 0xc10 <_ZN5Print5writeEPKc+0x24>
     bf2:	fb 01       	movw	r30, r22
     bf4:	01 90       	ld	r0, Z+
     bf6:	00 20       	and	r0, r0
     bf8:	e9 f7       	brne	.-6      	; 0xbf4 <_ZN5Print5writeEPKc+0x8>
     bfa:	31 97       	sbiw	r30, 0x01	; 1
     bfc:	af 01       	movw	r20, r30
     bfe:	46 1b       	sub	r20, r22
     c00:	57 0b       	sbc	r21, r23
     c02:	dc 01       	movw	r26, r24
     c04:	ed 91       	ld	r30, X+
     c06:	fc 91       	ld	r31, X
     c08:	02 80       	ldd	r0, Z+2	; 0x02
     c0a:	f3 81       	ldd	r31, Z+3	; 0x03
     c0c:	e0 2d       	mov	r30, r0
     c0e:	09 94       	ijmp
     c10:	80 e0       	ldi	r24, 0x00	; 0
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	08 95       	ret

00000c16 <_ZN5Print5printEPKc>:
     c16:	0c 94 f6 05 	jmp	0xbec	; 0xbec <_ZN5Print5writeEPKc>

00000c1a <_ZN5Print5printEc>:
     c1a:	dc 01       	movw	r26, r24
     c1c:	ed 91       	ld	r30, X+
     c1e:	fc 91       	ld	r31, X
     c20:	01 90       	ld	r0, Z+
     c22:	f0 81       	ld	r31, Z
     c24:	e0 2d       	mov	r30, r0
     c26:	09 94       	ijmp

00000c28 <_ZN5Print11printNumberEmh>:
     c28:	8f 92       	push	r8
     c2a:	9f 92       	push	r9
     c2c:	af 92       	push	r10
     c2e:	bf 92       	push	r11
     c30:	cf 92       	push	r12
     c32:	df 92       	push	r13
     c34:	ef 92       	push	r14
     c36:	ff 92       	push	r15
     c38:	0f 93       	push	r16
     c3a:	1f 93       	push	r17
     c3c:	cf 93       	push	r28
     c3e:	df 93       	push	r29
     c40:	cd b7       	in	r28, 0x3d	; 61
     c42:	de b7       	in	r29, 0x3e	; 62
     c44:	a1 97       	sbiw	r28, 0x21	; 33
     c46:	0f b6       	in	r0, 0x3f	; 63
     c48:	f8 94       	cli
     c4a:	de bf       	out	0x3e, r29	; 62
     c4c:	0f be       	out	0x3f, r0	; 63
     c4e:	cd bf       	out	0x3d, r28	; 61
     c50:	6c 01       	movw	r12, r24
     c52:	14 2f       	mov	r17, r20
     c54:	e5 2f       	mov	r30, r21
     c56:	cb 01       	movw	r24, r22
     c58:	02 2f       	mov	r16, r18
     c5a:	19 a2       	std	Y+33, r1	; 0x21
     c5c:	22 30       	cpi	r18, 0x02	; 2
     c5e:	08 f4       	brcc	.+2      	; 0xc62 <_ZN5Print11printNumberEmh+0x3a>
     c60:	0a e0       	ldi	r16, 0x0A	; 10
     c62:	7e 01       	movw	r14, r28
     c64:	21 e2       	ldi	r18, 0x21	; 33
     c66:	e2 0e       	add	r14, r18
     c68:	f1 1c       	adc	r15, r1
     c6a:	80 2e       	mov	r8, r16
     c6c:	91 2c       	mov	r9, r1
     c6e:	a1 2c       	mov	r10, r1
     c70:	b1 2c       	mov	r11, r1
     c72:	61 2f       	mov	r22, r17
     c74:	7e 2f       	mov	r23, r30
     c76:	a5 01       	movw	r20, r10
     c78:	94 01       	movw	r18, r8
     c7a:	0e 94 49 08 	call	0x1092	; 0x1092 <__udivmodsi4>
     c7e:	02 9f       	mul	r16, r18
     c80:	10 19       	sub	r17, r0
     c82:	11 24       	eor	r1, r1
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	e8 1a       	sub	r14, r24
     c88:	f1 08       	sbc	r15, r1
     c8a:	1a 30       	cpi	r17, 0x0A	; 10
     c8c:	10 f4       	brcc	.+4      	; 0xc92 <_ZN5Print11printNumberEmh+0x6a>
     c8e:	10 5d       	subi	r17, 0xD0	; 208
     c90:	01 c0       	rjmp	.+2      	; 0xc94 <_ZN5Print11printNumberEmh+0x6c>
     c92:	19 5c       	subi	r17, 0xC9	; 201
     c94:	f7 01       	movw	r30, r14
     c96:	10 83       	st	Z, r17
     c98:	12 2f       	mov	r17, r18
     c9a:	e3 2f       	mov	r30, r19
     c9c:	ca 01       	movw	r24, r20
     c9e:	23 2b       	or	r18, r19
     ca0:	24 2b       	or	r18, r20
     ca2:	25 2b       	or	r18, r21
     ca4:	31 f7       	brne	.-52     	; 0xc72 <_ZN5Print11printNumberEmh+0x4a>
     ca6:	b7 01       	movw	r22, r14
     ca8:	c6 01       	movw	r24, r12
     caa:	0e 94 f6 05 	call	0xbec	; 0xbec <_ZN5Print5writeEPKc>
     cae:	a1 96       	adiw	r28, 0x21	; 33
     cb0:	0f b6       	in	r0, 0x3f	; 63
     cb2:	f8 94       	cli
     cb4:	de bf       	out	0x3e, r29	; 62
     cb6:	0f be       	out	0x3f, r0	; 63
     cb8:	cd bf       	out	0x3d, r28	; 61
     cba:	df 91       	pop	r29
     cbc:	cf 91       	pop	r28
     cbe:	1f 91       	pop	r17
     cc0:	0f 91       	pop	r16
     cc2:	ff 90       	pop	r15
     cc4:	ef 90       	pop	r14
     cc6:	df 90       	pop	r13
     cc8:	cf 90       	pop	r12
     cca:	bf 90       	pop	r11
     ccc:	af 90       	pop	r10
     cce:	9f 90       	pop	r9
     cd0:	8f 90       	pop	r8
     cd2:	08 95       	ret

00000cd4 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
     cd4:	cf 92       	push	r12
     cd6:	df 92       	push	r13
     cd8:	ef 92       	push	r14
     cda:	ff 92       	push	r15
     cdc:	0f 93       	push	r16
     cde:	1f 93       	push	r17
     ce0:	cf 93       	push	r28
     ce2:	df 93       	push	r29
  if (base == 0) {
     ce4:	21 15       	cp	r18, r1
     ce6:	31 05       	cpc	r19, r1
     ce8:	81 f4       	brne	.+32     	; 0xd0a <_ZN5Print5printEli+0x36>
    return write(n);
     cea:	dc 01       	movw	r26, r24
     cec:	ed 91       	ld	r30, X+
     cee:	fc 91       	ld	r31, X
     cf0:	01 90       	ld	r0, Z+
     cf2:	f0 81       	ld	r31, Z
     cf4:	e0 2d       	mov	r30, r0
     cf6:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     cf8:	df 91       	pop	r29
     cfa:	cf 91       	pop	r28
     cfc:	1f 91       	pop	r17
     cfe:	0f 91       	pop	r16
     d00:	ff 90       	pop	r15
     d02:	ef 90       	pop	r14
     d04:	df 90       	pop	r13
     d06:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
     d08:	09 94       	ijmp
  } else if (base == 10) {
     d0a:	2a 30       	cpi	r18, 0x0A	; 10
     d0c:	31 05       	cpc	r19, r1
     d0e:	01 f5       	brne	.+64     	; 0xd50 <_ZN5Print5printEli+0x7c>
    if (n < 0) {
     d10:	77 ff       	sbrs	r23, 7
     d12:	1d c0       	rjmp	.+58     	; 0xd4e <_ZN5Print5printEli+0x7a>
     d14:	6a 01       	movw	r12, r20
     d16:	7b 01       	movw	r14, r22
     d18:	ec 01       	movw	r28, r24
      int t = print('-');
     d1a:	6d e2       	ldi	r22, 0x2D	; 45
     d1c:	0e 94 0d 06 	call	0xc1a	; 0xc1a <_ZN5Print5printEc>
     d20:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
     d22:	44 27       	eor	r20, r20
     d24:	55 27       	eor	r21, r21
     d26:	ba 01       	movw	r22, r20
     d28:	4c 19       	sub	r20, r12
     d2a:	5d 09       	sbc	r21, r13
     d2c:	6e 09       	sbc	r22, r14
     d2e:	7f 09       	sbc	r23, r15
     d30:	2a e0       	ldi	r18, 0x0A	; 10
     d32:	ce 01       	movw	r24, r28
     d34:	0e 94 14 06 	call	0xc28	; 0xc28 <_ZN5Print11printNumberEmh>
     d38:	80 0f       	add	r24, r16
     d3a:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     d3c:	df 91       	pop	r29
     d3e:	cf 91       	pop	r28
     d40:	1f 91       	pop	r17
     d42:	0f 91       	pop	r16
     d44:	ff 90       	pop	r15
     d46:	ef 90       	pop	r14
     d48:	df 90       	pop	r13
     d4a:	cf 90       	pop	r12
     d4c:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
     d4e:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
     d50:	df 91       	pop	r29
     d52:	cf 91       	pop	r28
     d54:	1f 91       	pop	r17
     d56:	0f 91       	pop	r16
     d58:	ff 90       	pop	r15
     d5a:	ef 90       	pop	r14
     d5c:	df 90       	pop	r13
     d5e:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
     d60:	0c 94 14 06 	jmp	0xc28	; 0xc28 <_ZN5Print11printNumberEmh>

00000d64 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
     d64:	9a 01       	movw	r18, r20
  return print((long) n, base);
     d66:	ab 01       	movw	r20, r22
     d68:	77 0f       	add	r23, r23
     d6a:	66 0b       	sbc	r22, r22
     d6c:	77 0b       	sbc	r23, r23
     d6e:	0c 94 6a 06 	jmp	0xcd4	; 0xcd4 <_ZN5Print5printEli>

00000d72 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
     d72:	1f 92       	push	r1
     d74:	0f 92       	push	r0
     d76:	0f b6       	in	r0, 0x3f	; 63
     d78:	0f 92       	push	r0
     d7a:	11 24       	eor	r1, r1
     d7c:	2f 93       	push	r18
     d7e:	3f 93       	push	r19
     d80:	8f 93       	push	r24
     d82:	9f 93       	push	r25
     d84:	af 93       	push	r26
     d86:	bf 93       	push	r27
     d88:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <timer0_millis>
     d8c:	90 91 d9 01 	lds	r25, 0x01D9	; 0x8001d9 <timer0_millis+0x1>
     d90:	a0 91 da 01 	lds	r26, 0x01DA	; 0x8001da <timer0_millis+0x2>
     d94:	b0 91 db 01 	lds	r27, 0x01DB	; 0x8001db <timer0_millis+0x3>
     d98:	30 91 d7 01 	lds	r19, 0x01D7	; 0x8001d7 <timer0_fract>
     d9c:	23 e0       	ldi	r18, 0x03	; 3
     d9e:	23 0f       	add	r18, r19
     da0:	2d 37       	cpi	r18, 0x7D	; 125
     da2:	20 f4       	brcc	.+8      	; 0xdac <__vector_16+0x3a>
     da4:	01 96       	adiw	r24, 0x01	; 1
     da6:	a1 1d       	adc	r26, r1
     da8:	b1 1d       	adc	r27, r1
     daa:	05 c0       	rjmp	.+10     	; 0xdb6 <__vector_16+0x44>
     dac:	26 e8       	ldi	r18, 0x86	; 134
     dae:	23 0f       	add	r18, r19
     db0:	02 96       	adiw	r24, 0x02	; 2
     db2:	a1 1d       	adc	r26, r1
     db4:	b1 1d       	adc	r27, r1
     db6:	20 93 d7 01 	sts	0x01D7, r18	; 0x8001d7 <timer0_fract>
     dba:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <timer0_millis>
     dbe:	90 93 d9 01 	sts	0x01D9, r25	; 0x8001d9 <timer0_millis+0x1>
     dc2:	a0 93 da 01 	sts	0x01DA, r26	; 0x8001da <timer0_millis+0x2>
     dc6:	b0 93 db 01 	sts	0x01DB, r27	; 0x8001db <timer0_millis+0x3>
     dca:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <timer0_overflow_count>
     dce:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <timer0_overflow_count+0x1>
     dd2:	a0 91 de 01 	lds	r26, 0x01DE	; 0x8001de <timer0_overflow_count+0x2>
     dd6:	b0 91 df 01 	lds	r27, 0x01DF	; 0x8001df <timer0_overflow_count+0x3>
     dda:	01 96       	adiw	r24, 0x01	; 1
     ddc:	a1 1d       	adc	r26, r1
     dde:	b1 1d       	adc	r27, r1
     de0:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <timer0_overflow_count>
     de4:	90 93 dd 01 	sts	0x01DD, r25	; 0x8001dd <timer0_overflow_count+0x1>
     de8:	a0 93 de 01 	sts	0x01DE, r26	; 0x8001de <timer0_overflow_count+0x2>
     dec:	b0 93 df 01 	sts	0x01DF, r27	; 0x8001df <timer0_overflow_count+0x3>
     df0:	bf 91       	pop	r27
     df2:	af 91       	pop	r26
     df4:	9f 91       	pop	r25
     df6:	8f 91       	pop	r24
     df8:	3f 91       	pop	r19
     dfa:	2f 91       	pop	r18
     dfc:	0f 90       	pop	r0
     dfe:	0f be       	out	0x3f, r0	; 63
     e00:	0f 90       	pop	r0
     e02:	1f 90       	pop	r1
     e04:	18 95       	reti

00000e06 <micros>:
     e06:	3f b7       	in	r19, 0x3f	; 63
     e08:	f8 94       	cli
     e0a:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <timer0_overflow_count>
     e0e:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <timer0_overflow_count+0x1>
     e12:	a0 91 de 01 	lds	r26, 0x01DE	; 0x8001de <timer0_overflow_count+0x2>
     e16:	b0 91 df 01 	lds	r27, 0x01DF	; 0x8001df <timer0_overflow_count+0x3>
     e1a:	26 b5       	in	r18, 0x26	; 38
     e1c:	a8 9b       	sbis	0x15, 0	; 21
     e1e:	05 c0       	rjmp	.+10     	; 0xe2a <micros+0x24>
     e20:	2f 3f       	cpi	r18, 0xFF	; 255
     e22:	19 f0       	breq	.+6      	; 0xe2a <micros+0x24>
     e24:	01 96       	adiw	r24, 0x01	; 1
     e26:	a1 1d       	adc	r26, r1
     e28:	b1 1d       	adc	r27, r1
     e2a:	3f bf       	out	0x3f, r19	; 63
     e2c:	ba 2f       	mov	r27, r26
     e2e:	a9 2f       	mov	r26, r25
     e30:	98 2f       	mov	r25, r24
     e32:	88 27       	eor	r24, r24
     e34:	82 0f       	add	r24, r18
     e36:	91 1d       	adc	r25, r1
     e38:	a1 1d       	adc	r26, r1
     e3a:	b1 1d       	adc	r27, r1
     e3c:	bc 01       	movw	r22, r24
     e3e:	cd 01       	movw	r24, r26
     e40:	42 e0       	ldi	r20, 0x02	; 2
     e42:	66 0f       	add	r22, r22
     e44:	77 1f       	adc	r23, r23
     e46:	88 1f       	adc	r24, r24
     e48:	99 1f       	adc	r25, r25
     e4a:	4a 95       	dec	r20
     e4c:	d1 f7       	brne	.-12     	; 0xe42 <micros+0x3c>
     e4e:	08 95       	ret

00000e50 <delay>:
     e50:	cf 92       	push	r12
     e52:	df 92       	push	r13
     e54:	ef 92       	push	r14
     e56:	ff 92       	push	r15
     e58:	cf 93       	push	r28
     e5a:	df 93       	push	r29
     e5c:	6b 01       	movw	r12, r22
     e5e:	7c 01       	movw	r14, r24
     e60:	0e 94 03 07 	call	0xe06	; 0xe06 <micros>
     e64:	eb 01       	movw	r28, r22
     e66:	c1 14       	cp	r12, r1
     e68:	d1 04       	cpc	r13, r1
     e6a:	e1 04       	cpc	r14, r1
     e6c:	f1 04       	cpc	r15, r1
     e6e:	89 f0       	breq	.+34     	; 0xe92 <delay+0x42>
     e70:	0e 94 48 08 	call	0x1090	; 0x1090 <yield>
     e74:	0e 94 03 07 	call	0xe06	; 0xe06 <micros>
     e78:	6c 1b       	sub	r22, r28
     e7a:	7d 0b       	sbc	r23, r29
     e7c:	68 3e       	cpi	r22, 0xE8	; 232
     e7e:	73 40       	sbci	r23, 0x03	; 3
     e80:	90 f3       	brcs	.-28     	; 0xe66 <delay+0x16>
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	c8 1a       	sub	r12, r24
     e86:	d1 08       	sbc	r13, r1
     e88:	e1 08       	sbc	r14, r1
     e8a:	f1 08       	sbc	r15, r1
     e8c:	c8 51       	subi	r28, 0x18	; 24
     e8e:	dc 4f       	sbci	r29, 0xFC	; 252
     e90:	ea cf       	rjmp	.-44     	; 0xe66 <delay+0x16>
     e92:	df 91       	pop	r29
     e94:	cf 91       	pop	r28
     e96:	ff 90       	pop	r15
     e98:	ef 90       	pop	r14
     e9a:	df 90       	pop	r13
     e9c:	cf 90       	pop	r12
     e9e:	08 95       	ret

00000ea0 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     ea0:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     ea2:	84 b5       	in	r24, 0x24	; 36
     ea4:	82 60       	ori	r24, 0x02	; 2
     ea6:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     ea8:	84 b5       	in	r24, 0x24	; 36
     eaa:	81 60       	ori	r24, 0x01	; 1
     eac:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     eae:	85 b5       	in	r24, 0x25	; 37
     eb0:	82 60       	ori	r24, 0x02	; 2
     eb2:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     eb4:	85 b5       	in	r24, 0x25	; 37
     eb6:	81 60       	ori	r24, 0x01	; 1
     eb8:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     eba:	ee e6       	ldi	r30, 0x6E	; 110
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	81 60       	ori	r24, 0x01	; 1
     ec2:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     ec4:	e1 e8       	ldi	r30, 0x81	; 129
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     eca:	80 81       	ld	r24, Z
     ecc:	82 60       	ori	r24, 0x02	; 2
     ece:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     ed0:	80 81       	ld	r24, Z
     ed2:	81 60       	ori	r24, 0x01	; 1
     ed4:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     ed6:	e0 e8       	ldi	r30, 0x80	; 128
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	81 60       	ori	r24, 0x01	; 1
     ede:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     ee0:	e1 eb       	ldi	r30, 0xB1	; 177
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	84 60       	ori	r24, 0x04	; 4
     ee8:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     eea:	e0 eb       	ldi	r30, 0xB0	; 176
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	81 60       	ori	r24, 0x01	; 1
     ef2:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     ef4:	ea e7       	ldi	r30, 0x7A	; 122
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	84 60       	ori	r24, 0x04	; 4
     efc:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     efe:	80 81       	ld	r24, Z
     f00:	82 60       	ori	r24, 0x02	; 2
     f02:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     f04:	80 81       	ld	r24, Z
     f06:	81 60       	ori	r24, 0x01	; 1
     f08:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     f0a:	80 81       	ld	r24, Z
     f0c:	80 68       	ori	r24, 0x80	; 128
     f0e:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     f10:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     f14:	08 95       	ret

00000f16 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     f16:	83 30       	cpi	r24, 0x03	; 3
     f18:	81 f0       	breq	.+32     	; 0xf3a <turnOffPWM+0x24>
     f1a:	28 f4       	brcc	.+10     	; 0xf26 <turnOffPWM+0x10>
     f1c:	81 30       	cpi	r24, 0x01	; 1
     f1e:	99 f0       	breq	.+38     	; 0xf46 <turnOffPWM+0x30>
     f20:	82 30       	cpi	r24, 0x02	; 2
     f22:	a1 f0       	breq	.+40     	; 0xf4c <turnOffPWM+0x36>
     f24:	08 95       	ret
     f26:	87 30       	cpi	r24, 0x07	; 7
     f28:	a9 f0       	breq	.+42     	; 0xf54 <turnOffPWM+0x3e>
     f2a:	88 30       	cpi	r24, 0x08	; 8
     f2c:	b9 f0       	breq	.+46     	; 0xf5c <turnOffPWM+0x46>
     f2e:	84 30       	cpi	r24, 0x04	; 4
     f30:	d1 f4       	brne	.+52     	; 0xf66 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     f32:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     f36:	8f 7d       	andi	r24, 0xDF	; 223
     f38:	03 c0       	rjmp	.+6      	; 0xf40 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     f3a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     f3e:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     f40:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     f44:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     f46:	84 b5       	in	r24, 0x24	; 36
     f48:	8f 77       	andi	r24, 0x7F	; 127
     f4a:	02 c0       	rjmp	.+4      	; 0xf50 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     f4c:	84 b5       	in	r24, 0x24	; 36
     f4e:	8f 7d       	andi	r24, 0xDF	; 223
     f50:	84 bd       	out	0x24, r24	; 36
     f52:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     f54:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     f58:	8f 77       	andi	r24, 0x7F	; 127
     f5a:	03 c0       	rjmp	.+6      	; 0xf62 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     f5c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     f60:	8f 7d       	andi	r24, 0xDF	; 223
     f62:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     f66:	08 95       	ret

00000f68 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     f68:	cf 93       	push	r28
     f6a:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	fc 01       	movw	r30, r24
     f70:	e4 58       	subi	r30, 0x84	; 132
     f72:	ff 4f       	sbci	r31, 0xFF	; 255
     f74:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     f76:	fc 01       	movw	r30, r24
     f78:	e0 57       	subi	r30, 0x70	; 112
     f7a:	ff 4f       	sbci	r31, 0xFF	; 255
     f7c:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     f7e:	88 23       	and	r24, r24
     f80:	61 f1       	breq	.+88     	; 0xfda <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	88 0f       	add	r24, r24
     f86:	99 1f       	adc	r25, r25
     f88:	fc 01       	movw	r30, r24
     f8a:	e8 54       	subi	r30, 0x48	; 72
     f8c:	ff 4f       	sbci	r31, 0xFF	; 255
     f8e:	c5 91       	lpm	r28, Z+
     f90:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
     f92:	fc 01       	movw	r30, r24
     f94:	e2 55       	subi	r30, 0x52	; 82
     f96:	ff 4f       	sbci	r31, 0xFF	; 255
     f98:	a5 91       	lpm	r26, Z+
     f9a:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
     f9c:	61 11       	cpse	r22, r1
     f9e:	09 c0       	rjmp	.+18     	; 0xfb2 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
     fa0:	9f b7       	in	r25, 0x3f	; 63
                cli();
     fa2:	f8 94       	cli
		*reg &= ~bit;
     fa4:	88 81       	ld	r24, Y
     fa6:	20 95       	com	r18
     fa8:	82 23       	and	r24, r18
     faa:	88 83       	st	Y, r24
		*out &= ~bit;
     fac:	ec 91       	ld	r30, X
     fae:	2e 23       	and	r18, r30
     fb0:	0b c0       	rjmp	.+22     	; 0xfc8 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     fb2:	62 30       	cpi	r22, 0x02	; 2
     fb4:	61 f4       	brne	.+24     	; 0xfce <pinMode+0x66>
		uint8_t oldSREG = SREG;
     fb6:	9f b7       	in	r25, 0x3f	; 63
                cli();
     fb8:	f8 94       	cli
		*reg &= ~bit;
     fba:	88 81       	ld	r24, Y
     fbc:	32 2f       	mov	r19, r18
     fbe:	30 95       	com	r19
     fc0:	83 23       	and	r24, r19
     fc2:	88 83       	st	Y, r24
		*out |= bit;
     fc4:	ec 91       	ld	r30, X
     fc6:	2e 2b       	or	r18, r30
     fc8:	2c 93       	st	X, r18
		SREG = oldSREG;
     fca:	9f bf       	out	0x3f, r25	; 63
     fcc:	06 c0       	rjmp	.+12     	; 0xfda <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
     fce:	8f b7       	in	r24, 0x3f	; 63
                cli();
     fd0:	f8 94       	cli
		*reg |= bit;
     fd2:	e8 81       	ld	r30, Y
     fd4:	2e 2b       	or	r18, r30
     fd6:	28 83       	st	Y, r18
		SREG = oldSREG;
     fd8:	8f bf       	out	0x3f, r24	; 63
	}
}
     fda:	df 91       	pop	r29
     fdc:	cf 91       	pop	r28
     fde:	08 95       	ret

00000fe0 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     fe0:	1f 93       	push	r17
     fe2:	cf 93       	push	r28
     fe4:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     fe6:	28 2f       	mov	r18, r24
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	f9 01       	movw	r30, r18
     fec:	e8 59       	subi	r30, 0x98	; 152
     fee:	ff 4f       	sbci	r31, 0xFF	; 255
     ff0:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     ff2:	f9 01       	movw	r30, r18
     ff4:	e4 58       	subi	r30, 0x84	; 132
     ff6:	ff 4f       	sbci	r31, 0xFF	; 255
     ff8:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     ffa:	f9 01       	movw	r30, r18
     ffc:	e0 57       	subi	r30, 0x70	; 112
     ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    1000:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1002:	cc 23       	and	r28, r28
    1004:	c1 f0       	breq	.+48     	; 0x1036 <digitalWrite+0x56>
    1006:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1008:	81 11       	cpse	r24, r1
    100a:	0e 94 8b 07 	call	0xf16	; 0xf16 <turnOffPWM>

	out = portOutputRegister(port);
    100e:	ec 2f       	mov	r30, r28
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	ee 0f       	add	r30, r30
    1014:	ff 1f       	adc	r31, r31
    1016:	e2 55       	subi	r30, 0x52	; 82
    1018:	ff 4f       	sbci	r31, 0xFF	; 255
    101a:	a5 91       	lpm	r26, Z+
    101c:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    101e:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1020:	f8 94       	cli

	if (val == LOW) {
    1022:	11 11       	cpse	r17, r1
    1024:	04 c0       	rjmp	.+8      	; 0x102e <digitalWrite+0x4e>
		*out &= ~bit;
    1026:	8c 91       	ld	r24, X
    1028:	d0 95       	com	r29
    102a:	d8 23       	and	r29, r24
    102c:	02 c0       	rjmp	.+4      	; 0x1032 <digitalWrite+0x52>
	} else {
		*out |= bit;
    102e:	ec 91       	ld	r30, X
    1030:	de 2b       	or	r29, r30
    1032:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1034:	9f bf       	out	0x3f, r25	; 63
}
    1036:	df 91       	pop	r29
    1038:	cf 91       	pop	r28
    103a:	1f 91       	pop	r17
    103c:	08 95       	ret

0000103e <digitalRead>:

int digitalRead(uint8_t pin)
{
    103e:	cf 93       	push	r28
    1040:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1042:	28 2f       	mov	r18, r24
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	f9 01       	movw	r30, r18
    1048:	e8 59       	subi	r30, 0x98	; 152
    104a:	ff 4f       	sbci	r31, 0xFF	; 255
    104c:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    104e:	f9 01       	movw	r30, r18
    1050:	e4 58       	subi	r30, 0x84	; 132
    1052:	ff 4f       	sbci	r31, 0xFF	; 255
    1054:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1056:	f9 01       	movw	r30, r18
    1058:	e0 57       	subi	r30, 0x70	; 112
    105a:	ff 4f       	sbci	r31, 0xFF	; 255
    105c:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    105e:	cc 23       	and	r28, r28
    1060:	91 f0       	breq	.+36     	; 0x1086 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1062:	81 11       	cpse	r24, r1
    1064:	0e 94 8b 07 	call	0xf16	; 0xf16 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    1068:	ec 2f       	mov	r30, r28
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	ee 0f       	add	r30, r30
    106e:	ff 1f       	adc	r31, r31
    1070:	ec 55       	subi	r30, 0x5C	; 92
    1072:	ff 4f       	sbci	r31, 0xFF	; 255
    1074:	a5 91       	lpm	r26, Z+
    1076:	b4 91       	lpm	r27, Z
    1078:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    107a:	ed 23       	and	r30, r29
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	21 f4       	brne	.+8      	; 0x108a <digitalRead+0x4c>
    1082:	80 e0       	ldi	r24, 0x00	; 0
    1084:	02 c0       	rjmp	.+4      	; 0x108a <digitalRead+0x4c>
    1086:	80 e0       	ldi	r24, 0x00	; 0
    1088:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    108a:	df 91       	pop	r29
    108c:	cf 91       	pop	r28
    108e:	08 95       	ret

00001090 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1090:	08 95       	ret

00001092 <__udivmodsi4>:
    1092:	a1 e2       	ldi	r26, 0x21	; 33
    1094:	1a 2e       	mov	r1, r26
    1096:	aa 1b       	sub	r26, r26
    1098:	bb 1b       	sub	r27, r27
    109a:	fd 01       	movw	r30, r26
    109c:	0d c0       	rjmp	.+26     	; 0x10b8 <__udivmodsi4_ep>

0000109e <__udivmodsi4_loop>:
    109e:	aa 1f       	adc	r26, r26
    10a0:	bb 1f       	adc	r27, r27
    10a2:	ee 1f       	adc	r30, r30
    10a4:	ff 1f       	adc	r31, r31
    10a6:	a2 17       	cp	r26, r18
    10a8:	b3 07       	cpc	r27, r19
    10aa:	e4 07       	cpc	r30, r20
    10ac:	f5 07       	cpc	r31, r21
    10ae:	20 f0       	brcs	.+8      	; 0x10b8 <__udivmodsi4_ep>
    10b0:	a2 1b       	sub	r26, r18
    10b2:	b3 0b       	sbc	r27, r19
    10b4:	e4 0b       	sbc	r30, r20
    10b6:	f5 0b       	sbc	r31, r21

000010b8 <__udivmodsi4_ep>:
    10b8:	66 1f       	adc	r22, r22
    10ba:	77 1f       	adc	r23, r23
    10bc:	88 1f       	adc	r24, r24
    10be:	99 1f       	adc	r25, r25
    10c0:	1a 94       	dec	r1
    10c2:	69 f7       	brne	.-38     	; 0x109e <__udivmodsi4_loop>
    10c4:	60 95       	com	r22
    10c6:	70 95       	com	r23
    10c8:	80 95       	com	r24
    10ca:	90 95       	com	r25
    10cc:	9b 01       	movw	r18, r22
    10ce:	ac 01       	movw	r20, r24
    10d0:	bd 01       	movw	r22, r26
    10d2:	cf 01       	movw	r24, r30
    10d4:	08 95       	ret

000010d6 <__muluhisi3>:
    10d6:	0e 94 84 08 	call	0x1108	; 0x1108 <__umulhisi3>
    10da:	a5 9f       	mul	r26, r21
    10dc:	90 0d       	add	r25, r0
    10de:	b4 9f       	mul	r27, r20
    10e0:	90 0d       	add	r25, r0
    10e2:	a4 9f       	mul	r26, r20
    10e4:	80 0d       	add	r24, r0
    10e6:	91 1d       	adc	r25, r1
    10e8:	11 24       	eor	r1, r1
    10ea:	08 95       	ret

000010ec <__mulshisi3>:
    10ec:	b7 ff       	sbrs	r27, 7
    10ee:	0c 94 6b 08 	jmp	0x10d6	; 0x10d6 <__muluhisi3>

000010f2 <__mulohisi3>:
    10f2:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <__muluhisi3>
    10f6:	82 1b       	sub	r24, r18
    10f8:	93 0b       	sbc	r25, r19
    10fa:	08 95       	ret

000010fc <__tablejump2__>:
    10fc:	ee 0f       	add	r30, r30
    10fe:	ff 1f       	adc	r31, r31
    1100:	05 90       	lpm	r0, Z+
    1102:	f4 91       	lpm	r31, Z
    1104:	e0 2d       	mov	r30, r0
    1106:	09 94       	ijmp

00001108 <__umulhisi3>:
    1108:	a2 9f       	mul	r26, r18
    110a:	b0 01       	movw	r22, r0
    110c:	b3 9f       	mul	r27, r19
    110e:	c0 01       	movw	r24, r0
    1110:	a3 9f       	mul	r26, r19
    1112:	70 0d       	add	r23, r0
    1114:	81 1d       	adc	r24, r1
    1116:	11 24       	eor	r1, r1
    1118:	91 1d       	adc	r25, r1
    111a:	b2 9f       	mul	r27, r18
    111c:	70 0d       	add	r23, r0
    111e:	81 1d       	adc	r24, r1
    1120:	11 24       	eor	r1, r1
    1122:	91 1d       	adc	r25, r1
    1124:	08 95       	ret

00001126 <_exit>:
    1126:	f8 94       	cli

00001128 <__stop_program>:
    1128:	ff cf       	rjmp	.-2      	; 0x1128 <__stop_program>
