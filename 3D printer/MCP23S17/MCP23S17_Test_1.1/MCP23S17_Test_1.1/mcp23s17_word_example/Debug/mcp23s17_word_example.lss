
mcp23s17_word_example.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000654  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005e0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  00800100  00800100  00000654  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000654  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000684  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  000006c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a91  00000000  00000000  00000874  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001104  00000000  00000000  00003305  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010c5  00000000  00000000  00004409  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003f8  00000000  00000000  000054d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000dac  00000000  00000000  000058c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001456  00000000  00000000  00006674  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  00007aca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5d 00 	jmp	0xba	; 0xba <__ctors_end>
   4:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
   8:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
   c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  10:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  14:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  18:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  1c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  20:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  24:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  28:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  2c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  30:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  34:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  38:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  3c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  40:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__vector_16>
  44:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  48:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  4c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  50:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  54:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  58:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  5c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  60:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  64:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
  a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
  ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_start>:
  b8:	7d 01       	movw	r14, r26

000000ba <__ctors_end>:
  ba:	11 24       	eor	r1, r1
  bc:	1f be       	out	0x3f, r1	; 63
  be:	cf ef       	ldi	r28, 0xFF	; 255
  c0:	d8 e0       	ldi	r29, 0x08	; 8
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_clear_bss>:
  c6:	21 e0       	ldi	r18, 0x01	; 1
  c8:	a0 e0       	ldi	r26, 0x00	; 0
  ca:	b1 e0       	ldi	r27, 0x01	; 1
  cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
  ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
  d0:	ae 31       	cpi	r26, 0x1E	; 30
  d2:	b2 07       	cpc	r27, r18
  d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>

000000d6 <__do_global_ctors>:
  d6:	10 e0       	ldi	r17, 0x00	; 0
  d8:	cd e5       	ldi	r28, 0x5D	; 93
  da:	d0 e0       	ldi	r29, 0x00	; 0
  dc:	04 c0       	rjmp	.+8      	; 0xe6 <__do_global_ctors+0x10>
  de:	21 97       	sbiw	r28, 0x01	; 1
  e0:	fe 01       	movw	r30, r28
  e2:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <__tablejump2__>
  e6:	cc 35       	cpi	r28, 0x5C	; 92
  e8:	d1 07       	cpc	r29, r17
  ea:	c9 f7       	brne	.-14     	; 0xde <__do_global_ctors+0x8>
  ec:	0e 94 c0 01 	call	0x380	; 0x380 <main>
  f0:	0c 94 ee 02 	jmp	0x5dc	; 0x5dc <_exit>

000000f4 <__bad_interrupt>:
  f4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f8 <_ZN8SPIClass8transferEh>:
  if (value) {
    _outputCache |= 1 << (pin - 1);
  } else {
    _outputCache &= ~(1 << (pin - 1));
  }
  wordWrite(GPIOA, _outputCache);
  f8:	8e bd       	out	0x2e, r24	; 46
  fa:	00 00       	nop
  fc:	0d b4       	in	r0, 0x2d	; 45
  fe:	07 fe       	sbrs	r0, 7
 100:	fd cf       	rjmp	.-6      	; 0xfc <_ZN8SPIClass8transferEh+0x4>
 102:	8e b5       	in	r24, 0x2e	; 46
 104:	08 95       	ret

00000106 <_ZN3MCPC1Ehh>:
 106:	fc 01       	movw	r30, r24
 108:	68 30       	cpi	r22, 0x08	; 8
 10a:	08 f0       	brcs	.+2      	; 0x10e <_ZN3MCPC1Ehh+0x8>
 10c:	67 e0       	ldi	r22, 0x07	; 7
 10e:	60 83       	st	Z, r22
 110:	41 83       	std	Z+1, r20	; 0x01
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	9f ef       	ldi	r25, 0xFF	; 255
 116:	93 83       	std	Z+3, r25	; 0x03
 118:	82 83       	std	Z+2, r24	; 0x02
 11a:	11 86       	std	Z+9, r1	; 0x09
 11c:	10 86       	std	Z+8, r1	; 0x08
 11e:	15 82       	std	Z+5, r1	; 0x05
 120:	14 82       	std	Z+4, r1	; 0x04
 122:	17 82       	std	Z+7, r1	; 0x07
 124:	16 82       	std	Z+6, r1	; 0x06
 126:	08 95       	ret

00000128 <_ZN3MCP9byteWriteEhh>:
 128:	0f 93       	push	r16
 12a:	1f 93       	push	r17
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	ec 01       	movw	r28, r24
 132:	06 2f       	mov	r16, r22
 134:	14 2f       	mov	r17, r20
 136:	60 e0       	ldi	r22, 0x00	; 0
 138:	89 81       	ldd	r24, Y+1	; 0x01
 13a:	0e 94 b9 02 	call	0x572	; 0x572 <digitalWrite>
 13e:	88 81       	ld	r24, Y
 140:	88 0f       	add	r24, r24
 142:	80 64       	ori	r24, 0x40	; 64
 144:	0e 94 7c 00 	call	0xf8	; 0xf8 <_ZN8SPIClass8transferEh>
 148:	80 2f       	mov	r24, r16
 14a:	0e 94 7c 00 	call	0xf8	; 0xf8 <_ZN8SPIClass8transferEh>
 14e:	81 2f       	mov	r24, r17
 150:	0e 94 7c 00 	call	0xf8	; 0xf8 <_ZN8SPIClass8transferEh>
 154:	61 e0       	ldi	r22, 0x01	; 1
 156:	89 81       	ldd	r24, Y+1	; 0x01
 158:	df 91       	pop	r29
 15a:	cf 91       	pop	r28
 15c:	1f 91       	pop	r17
 15e:	0f 91       	pop	r16
 160:	0c 94 b9 02 	jmp	0x572	; 0x572 <digitalWrite>

00000164 <_ZN3MCP5beginEv>:
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	ec 01       	movw	r28, r24
 16a:	61 e0       	ldi	r22, 0x01	; 1
 16c:	89 81       	ldd	r24, Y+1	; 0x01
 16e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <pinMode>
 172:	61 e0       	ldi	r22, 0x01	; 1
 174:	89 81       	ldd	r24, Y+1	; 0x01
 176:	0e 94 b9 02 	call	0x572	; 0x572 <digitalWrite>
 17a:	0e 94 89 01 	call	0x312	; 0x312 <_ZN8SPIClass5beginEv>
 17e:	48 e0       	ldi	r20, 0x08	; 8
 180:	6a e0       	ldi	r22, 0x0A	; 10
 182:	ce 01       	movw	r24, r28
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	0c 94 94 00 	jmp	0x128	; 0x128 <_ZN3MCP9byteWriteEhh>

0000018c <_ZN3MCP9wordWriteEhj>:
 18c:	ff 92       	push	r15
 18e:	0f 93       	push	r16
 190:	1f 93       	push	r17
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	ec 01       	movw	r28, r24
 198:	f6 2e       	mov	r15, r22
 19a:	8a 01       	movw	r16, r20
 19c:	60 e0       	ldi	r22, 0x00	; 0
 19e:	89 81       	ldd	r24, Y+1	; 0x01
 1a0:	0e 94 b9 02 	call	0x572	; 0x572 <digitalWrite>
 1a4:	88 81       	ld	r24, Y
 1a6:	88 0f       	add	r24, r24
 1a8:	80 64       	ori	r24, 0x40	; 64
 1aa:	0e 94 7c 00 	call	0xf8	; 0xf8 <_ZN8SPIClass8transferEh>
 1ae:	8f 2d       	mov	r24, r15
 1b0:	0e 94 7c 00 	call	0xf8	; 0xf8 <_ZN8SPIClass8transferEh>
 1b4:	80 2f       	mov	r24, r16
 1b6:	0e 94 7c 00 	call	0xf8	; 0xf8 <_ZN8SPIClass8transferEh>
 1ba:	81 2f       	mov	r24, r17
 1bc:	0e 94 7c 00 	call	0xf8	; 0xf8 <_ZN8SPIClass8transferEh>
 1c0:	61 e0       	ldi	r22, 0x01	; 1
 1c2:	89 81       	ldd	r24, Y+1	; 0x01
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
 1c8:	1f 91       	pop	r17
 1ca:	0f 91       	pop	r16
 1cc:	ff 90       	pop	r15
 1ce:	0c 94 b9 02 	jmp	0x572	; 0x572 <digitalWrite>

000001d2 <_ZN3MCP7pinModeEj>:
 1d2:	0f 93       	push	r16
 1d4:	1f 93       	push	r17
 1d6:	cf 93       	push	r28
 1d8:	df 93       	push	r29
 1da:	ec 01       	movw	r28, r24
 1dc:	8b 01       	movw	r16, r22
 1de:	ab 01       	movw	r20, r22
 1e0:	60 e0       	ldi	r22, 0x00	; 0
 1e2:	0e 94 c6 00 	call	0x18c	; 0x18c <_ZN3MCP9wordWriteEhj>
 1e6:	1b 83       	std	Y+3, r17	; 0x03
 1e8:	0a 83       	std	Y+2, r16	; 0x02
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	1f 91       	pop	r17
 1f0:	0f 91       	pop	r16
 1f2:	08 95       	ret

000001f4 <_ZN3MCP10pullupModeEj>:
 1f4:	0f 93       	push	r16
 1f6:	1f 93       	push	r17
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	ec 01       	movw	r28, r24
 1fe:	8b 01       	movw	r16, r22
 200:	ab 01       	movw	r20, r22
 202:	6c e0       	ldi	r22, 0x0C	; 12
 204:	0e 94 c6 00 	call	0x18c	; 0x18c <_ZN3MCP9wordWriteEhj>
 208:	1d 83       	std	Y+5, r17	; 0x05
 20a:	0c 83       	std	Y+4, r16	; 0x04
 20c:	df 91       	pop	r29
 20e:	cf 91       	pop	r28
 210:	1f 91       	pop	r17
 212:	0f 91       	pop	r16
 214:	08 95       	ret

00000216 <_ZN3MCP11inputInvertEj>:
 216:	0f 93       	push	r16
 218:	1f 93       	push	r17
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
 21e:	ec 01       	movw	r28, r24
 220:	8b 01       	movw	r16, r22
 222:	ab 01       	movw	r20, r22
 224:	62 e0       	ldi	r22, 0x02	; 2
 226:	0e 94 c6 00 	call	0x18c	; 0x18c <_ZN3MCP9wordWriteEhj>
 22a:	1f 83       	std	Y+7, r17	; 0x07
 22c:	0e 83       	std	Y+6, r16	; 0x06
 22e:	df 91       	pop	r29
 230:	cf 91       	pop	r28
 232:	1f 91       	pop	r17
 234:	0f 91       	pop	r16
 236:	08 95       	ret

00000238 <_ZN3MCP12digitalWriteEj>:
}

void MCP::digitalWrite(unsigned int value) { 
 238:	0f 93       	push	r16
 23a:	1f 93       	push	r17
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	ec 01       	movw	r28, r24
 242:	8b 01       	movw	r16, r22
  wordWrite(GPIOA, value);
 244:	ab 01       	movw	r20, r22
 246:	62 e1       	ldi	r22, 0x12	; 18
 248:	0e 94 c6 00 	call	0x18c	; 0x18c <_ZN3MCP9wordWriteEhj>
  _outputCache = value;
 24c:	19 87       	std	Y+9, r17	; 0x09
 24e:	08 87       	std	Y+8, r16	; 0x08
}
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	1f 91       	pop	r17
 256:	0f 91       	pop	r16
 258:	08 95       	ret

0000025a <_ZN3MCP11digitalReadEv>:


// READ FUNCTIONS - BY WORD, BYTE AND BY PIN

unsigned int MCP::digitalRead(void) {       // This function will read all 16 bits of I/O, and return them as a word in the format 0x(portB)(portA)
 25a:	0f 93       	push	r16
 25c:	1f 93       	push	r17
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
 262:	8c 01       	movw	r16, r24
  unsigned int value = 0;                   // Initialize a variable to hold the read values to be returned
  ::digitalWrite(_ss, LOW);                 // Take slave-select low
 264:	60 e0       	ldi	r22, 0x00	; 0
 266:	fc 01       	movw	r30, r24
 268:	81 81       	ldd	r24, Z+1	; 0x01
 26a:	0e 94 b9 02 	call	0x572	; 0x572 <digitalWrite>
  SPI.transfer(OPCODER | (_address << 1));  // Send the MCP23S17 opcode, chip address, and read bit
 26e:	f8 01       	movw	r30, r16
 270:	80 81       	ld	r24, Z
 272:	88 0f       	add	r24, r24
 274:	81 64       	ori	r24, 0x41	; 65
 276:	0e 94 7c 00 	call	0xf8	; 0xf8 <_ZN8SPIClass8transferEh>
  SPI.transfer(GPIOA);                      // Send the register we want to read
 27a:	82 e1       	ldi	r24, 0x12	; 18
 27c:	0e 94 7c 00 	call	0xf8	; 0xf8 <_ZN8SPIClass8transferEh>
  value = SPI.transfer(0x00);               // Send any byte, the function will return the read value (register address pointer will auto-increment after write)
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	0e 94 7c 00 	call	0xf8	; 0xf8 <_ZN8SPIClass8transferEh>
 286:	c8 2f       	mov	r28, r24
 288:	d0 e0       	ldi	r29, 0x00	; 0
  value |= (SPI.transfer(0x00) << 8);       // Read in the "high byte" (portB) and shift it up to the high location and merge with the "low byte"
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	0e 94 7c 00 	call	0xf8	; 0xf8 <_ZN8SPIClass8transferEh>
 290:	d8 2b       	or	r29, r24
  ::digitalWrite(_ss, HIGH);                // Take slave-select high
 292:	61 e0       	ldi	r22, 0x01	; 1
 294:	f8 01       	movw	r30, r16
 296:	81 81       	ldd	r24, Z+1	; 0x01
 298:	0e 94 b9 02 	call	0x572	; 0x572 <digitalWrite>
  return value;                             // Return the constructed word, the format is 0x(portB)(portA)
}
 29c:	ce 01       	movw	r24, r28
 29e:	df 91       	pop	r29
 2a0:	cf 91       	pop	r28
 2a2:	1f 91       	pop	r17
 2a4:	0f 91       	pop	r16
 2a6:	08 95       	ret

000002a8 <setup>:
    							  // and slave-select on Arduino pin 10
MCP outputchip(2, 10);            // Instantiate an object called "outputchip" on an MCP23S17 device at address 2
  								  // and slave-select on Arduino pin 10

void setup() {
  inputchip.begin();
 2a8:	8a e0       	ldi	r24, 0x0A	; 10
 2aa:	91 e0       	ldi	r25, 0x01	; 1
 2ac:	0e 94 b2 00 	call	0x164	; 0x164 <_ZN3MCP5beginEv>
  outputchip.begin();
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	91 e0       	ldi	r25, 0x01	; 1
 2b4:	0e 94 b2 00 	call	0x164	; 0x164 <_ZN3MCP5beginEv>
  inputchip.pinMode(0xFFFF);     // Use word-write mode to set all of the pins on inputchip to be inputs
 2b8:	6f ef       	ldi	r22, 0xFF	; 255
 2ba:	7f ef       	ldi	r23, 0xFF	; 255
 2bc:	8a e0       	ldi	r24, 0x0A	; 10
 2be:	91 e0       	ldi	r25, 0x01	; 1
 2c0:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <_ZN3MCP7pinModeEj>
  inputchip.pullupMode(0xFFFF);  // Use word-write mode to Turn on the internal pull-up resistors.
 2c4:	6f ef       	ldi	r22, 0xFF	; 255
 2c6:	7f ef       	ldi	r23, 0xFF	; 255
 2c8:	8a e0       	ldi	r24, 0x0A	; 10
 2ca:	91 e0       	ldi	r25, 0x01	; 1
 2cc:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <_ZN3MCP10pullupModeEj>
  inputchip.inputInvert(0xFFFF); // Use word-write mode to invert the inputs so that logic 0 is read as HIGH
 2d0:	6f ef       	ldi	r22, 0xFF	; 255
 2d2:	7f ef       	ldi	r23, 0xFF	; 255
 2d4:	8a e0       	ldi	r24, 0x0A	; 10
 2d6:	91 e0       	ldi	r25, 0x01	; 1
 2d8:	0e 94 0b 01 	call	0x216	; 0x216 <_ZN3MCP11inputInvertEj>
  outputchip.pinMode(0x0000);    // Use word-write mode to Set all of the pins on outputchip to be outputs
 2dc:	60 e0       	ldi	r22, 0x00	; 0
 2de:	70 e0       	ldi	r23, 0x00	; 0
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	91 e0       	ldi	r25, 0x01	; 1
 2e4:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <_ZN3MCP7pinModeEj>

000002e8 <loop>:
}

void loop() {
  int value;                        // declare an integer to hold the value temporarily.
  value = inputchip.digitalRead();  // read the input chip in word-mode, storing the result in "value"
 2e8:	8a e0       	ldi	r24, 0x0A	; 10
 2ea:	91 e0       	ldi	r25, 0x01	; 1
 2ec:	0e 94 2d 01 	call	0x25a	; 0x25a <_ZN3MCP11digitalReadEv>
  outputchip.digitalWrite(value);   // write the output chip in word-mode, using our variable "value" as the argument
 2f0:	bc 01       	movw	r22, r24
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	91 e0       	ldi	r25, 0x01	; 1
 2f6:	0c 94 1c 01 	jmp	0x238	; 0x238 <_ZN3MCP12digitalWriteEj>

000002fa <_GLOBAL__sub_I_inputchip>:
//Beginning of Auto generated function prototypes by Atmel Studio
//End of Auto generated function prototypes by Atmel Studio



MCP inputchip(1, 10);             // Instantiate an object called "inputchip" on an MCP23S17 device at address 1
 2fa:	4a e0       	ldi	r20, 0x0A	; 10
 2fc:	61 e0       	ldi	r22, 0x01	; 1
 2fe:	8a e0       	ldi	r24, 0x0A	; 10
 300:	91 e0       	ldi	r25, 0x01	; 1
 302:	0e 94 83 00 	call	0x106	; 0x106 <_ZN3MCPC1Ehh>
    							  // and slave-select on Arduino pin 10
MCP outputchip(2, 10);            // Instantiate an object called "outputchip" on an MCP23S17 device at address 2
 306:	4a e0       	ldi	r20, 0x0A	; 10
 308:	62 e0       	ldi	r22, 0x02	; 2
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	91 e0       	ldi	r25, 0x01	; 1
 30e:	0c 94 83 00 	jmp	0x106	; 0x106 <_ZN3MCPC1Ehh>

00000312 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
 312:	cf 93       	push	r28
  uint8_t sreg = SREG;
 314:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
 316:	f8 94       	cli
  if (!initialized) {
 318:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <_ZN8SPIClass11initializedE>
 31c:	81 11       	cpse	r24, r1
 31e:	27 c0       	rjmp	.+78     	; 0x36e <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
 320:	ea e9       	ldi	r30, 0x9A	; 154
 322:	f0 e0       	ldi	r31, 0x00	; 0
 324:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
 326:	e6 e8       	ldi	r30, 0x86	; 134
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
 32c:	e8 2f       	mov	r30, r24
 32e:	f0 e0       	ldi	r31, 0x00	; 0
 330:	ee 0f       	add	r30, r30
 332:	ff 1f       	adc	r31, r31
 334:	e2 55       	subi	r30, 0x52	; 82
 336:	ff 4f       	sbci	r31, 0xFF	; 255
 338:	a5 91       	lpm	r26, Z+
 33a:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
 33c:	ec 91       	ld	r30, X
 33e:	e9 23       	and	r30, r25
 340:	21 f4       	brne	.+8      	; 0x34a <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
 342:	61 e0       	ldi	r22, 0x01	; 1
 344:	8a e0       	ldi	r24, 0x0A	; 10
 346:	0e 94 b9 02 	call	0x572	; 0x572 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
 34a:	61 e0       	ldi	r22, 0x01	; 1
 34c:	8a e0       	ldi	r24, 0x0A	; 10
 34e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
 352:	8c b5       	in	r24, 0x2c	; 44
 354:	80 61       	ori	r24, 0x10	; 16
 356:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
 358:	8c b5       	in	r24, 0x2c	; 44
 35a:	80 64       	ori	r24, 0x40	; 64
 35c:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
 35e:	61 e0       	ldi	r22, 0x01	; 1
 360:	8d e0       	ldi	r24, 0x0D	; 13
 362:	0e 94 7d 02 	call	0x4fa	; 0x4fa <pinMode>
    pinMode(MOSI, OUTPUT);
 366:	61 e0       	ldi	r22, 0x01	; 1
 368:	8b e0       	ldi	r24, 0x0B	; 11
 36a:	0e 94 7d 02 	call	0x4fa	; 0x4fa <pinMode>
  }
  initialized++; // reference count
 36e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <_ZN8SPIClass11initializedE>
 372:	8f 5f       	subi	r24, 0xFF	; 255
 374:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <_ZN8SPIClass11initializedE>
  SREG = sreg;
 378:	cf bf       	out	0x3f, r28	; 63
}
 37a:	cf 91       	pop	r28
 37c:	08 95       	ret

0000037e <initVariant>:
 37e:	08 95       	ret

00000380 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 380:	0e 94 19 02 	call	0x432	; 0x432 <init>

	initVariant();
 384:	0e 94 bf 01 	call	0x37e	; 0x37e <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 388:	0e 94 54 01 	call	0x2a8	; 0x2a8 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 38c:	c0 e0       	ldi	r28, 0x00	; 0
 38e:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 390:	0e 94 74 01 	call	0x2e8	; 0x2e8 <loop>
		if (serialEventRun) serialEventRun();
 394:	20 97       	sbiw	r28, 0x00	; 0
 396:	e1 f3       	breq	.-8      	; 0x390 <main+0x10>
 398:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 39c:	f9 cf       	rjmp	.-14     	; 0x390 <main+0x10>

0000039e <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 39e:	1f 92       	push	r1
 3a0:	0f 92       	push	r0
 3a2:	0f b6       	in	r0, 0x3f	; 63
 3a4:	0f 92       	push	r0
 3a6:	11 24       	eor	r1, r1
 3a8:	2f 93       	push	r18
 3aa:	3f 93       	push	r19
 3ac:	8f 93       	push	r24
 3ae:	9f 93       	push	r25
 3b0:	af 93       	push	r26
 3b2:	bf 93       	push	r27
 3b4:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <timer0_millis>
 3b8:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <timer0_millis+0x1>
 3bc:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <timer0_millis+0x2>
 3c0:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <timer0_millis+0x3>
 3c4:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <timer0_fract>
 3c8:	23 e0       	ldi	r18, 0x03	; 3
 3ca:	23 0f       	add	r18, r19
 3cc:	2d 37       	cpi	r18, 0x7D	; 125
 3ce:	20 f4       	brcc	.+8      	; 0x3d8 <__vector_16+0x3a>
 3d0:	01 96       	adiw	r24, 0x01	; 1
 3d2:	a1 1d       	adc	r26, r1
 3d4:	b1 1d       	adc	r27, r1
 3d6:	05 c0       	rjmp	.+10     	; 0x3e2 <__vector_16+0x44>
 3d8:	26 e8       	ldi	r18, 0x86	; 134
 3da:	23 0f       	add	r18, r19
 3dc:	02 96       	adiw	r24, 0x02	; 2
 3de:	a1 1d       	adc	r26, r1
 3e0:	b1 1d       	adc	r27, r1
 3e2:	20 93 15 01 	sts	0x0115, r18	; 0x800115 <timer0_fract>
 3e6:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <timer0_millis>
 3ea:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <timer0_millis+0x1>
 3ee:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <timer0_millis+0x2>
 3f2:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <timer0_millis+0x3>
 3f6:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <timer0_overflow_count>
 3fa:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <timer0_overflow_count+0x1>
 3fe:	a0 91 1c 01 	lds	r26, 0x011C	; 0x80011c <timer0_overflow_count+0x2>
 402:	b0 91 1d 01 	lds	r27, 0x011D	; 0x80011d <timer0_overflow_count+0x3>
 406:	01 96       	adiw	r24, 0x01	; 1
 408:	a1 1d       	adc	r26, r1
 40a:	b1 1d       	adc	r27, r1
 40c:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <timer0_overflow_count>
 410:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <timer0_overflow_count+0x1>
 414:	a0 93 1c 01 	sts	0x011C, r26	; 0x80011c <timer0_overflow_count+0x2>
 418:	b0 93 1d 01 	sts	0x011D, r27	; 0x80011d <timer0_overflow_count+0x3>
 41c:	bf 91       	pop	r27
 41e:	af 91       	pop	r26
 420:	9f 91       	pop	r25
 422:	8f 91       	pop	r24
 424:	3f 91       	pop	r19
 426:	2f 91       	pop	r18
 428:	0f 90       	pop	r0
 42a:	0f be       	out	0x3f, r0	; 63
 42c:	0f 90       	pop	r0
 42e:	1f 90       	pop	r1
 430:	18 95       	reti

00000432 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 432:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 434:	84 b5       	in	r24, 0x24	; 36
 436:	82 60       	ori	r24, 0x02	; 2
 438:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 43a:	84 b5       	in	r24, 0x24	; 36
 43c:	81 60       	ori	r24, 0x01	; 1
 43e:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 440:	85 b5       	in	r24, 0x25	; 37
 442:	82 60       	ori	r24, 0x02	; 2
 444:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 446:	85 b5       	in	r24, 0x25	; 37
 448:	81 60       	ori	r24, 0x01	; 1
 44a:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 44c:	ee e6       	ldi	r30, 0x6E	; 110
 44e:	f0 e0       	ldi	r31, 0x00	; 0
 450:	80 81       	ld	r24, Z
 452:	81 60       	ori	r24, 0x01	; 1
 454:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 456:	e1 e8       	ldi	r30, 0x81	; 129
 458:	f0 e0       	ldi	r31, 0x00	; 0
 45a:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 45c:	80 81       	ld	r24, Z
 45e:	82 60       	ori	r24, 0x02	; 2
 460:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 462:	80 81       	ld	r24, Z
 464:	81 60       	ori	r24, 0x01	; 1
 466:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 468:	e0 e8       	ldi	r30, 0x80	; 128
 46a:	f0 e0       	ldi	r31, 0x00	; 0
 46c:	80 81       	ld	r24, Z
 46e:	81 60       	ori	r24, 0x01	; 1
 470:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 472:	e1 eb       	ldi	r30, 0xB1	; 177
 474:	f0 e0       	ldi	r31, 0x00	; 0
 476:	80 81       	ld	r24, Z
 478:	84 60       	ori	r24, 0x04	; 4
 47a:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 47c:	e0 eb       	ldi	r30, 0xB0	; 176
 47e:	f0 e0       	ldi	r31, 0x00	; 0
 480:	80 81       	ld	r24, Z
 482:	81 60       	ori	r24, 0x01	; 1
 484:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 486:	ea e7       	ldi	r30, 0x7A	; 122
 488:	f0 e0       	ldi	r31, 0x00	; 0
 48a:	80 81       	ld	r24, Z
 48c:	84 60       	ori	r24, 0x04	; 4
 48e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 490:	80 81       	ld	r24, Z
 492:	82 60       	ori	r24, 0x02	; 2
 494:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 496:	80 81       	ld	r24, Z
 498:	81 60       	ori	r24, 0x01	; 1
 49a:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 49c:	80 81       	ld	r24, Z
 49e:	80 68       	ori	r24, 0x80	; 128
 4a0:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 4a2:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 4a6:	08 95       	ret

000004a8 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 4a8:	83 30       	cpi	r24, 0x03	; 3
 4aa:	81 f0       	breq	.+32     	; 0x4cc <turnOffPWM+0x24>
 4ac:	28 f4       	brcc	.+10     	; 0x4b8 <turnOffPWM+0x10>
 4ae:	81 30       	cpi	r24, 0x01	; 1
 4b0:	99 f0       	breq	.+38     	; 0x4d8 <turnOffPWM+0x30>
 4b2:	82 30       	cpi	r24, 0x02	; 2
 4b4:	a1 f0       	breq	.+40     	; 0x4de <turnOffPWM+0x36>
 4b6:	08 95       	ret
 4b8:	87 30       	cpi	r24, 0x07	; 7
 4ba:	a9 f0       	breq	.+42     	; 0x4e6 <turnOffPWM+0x3e>
 4bc:	88 30       	cpi	r24, 0x08	; 8
 4be:	b9 f0       	breq	.+46     	; 0x4ee <turnOffPWM+0x46>
 4c0:	84 30       	cpi	r24, 0x04	; 4
 4c2:	d1 f4       	brne	.+52     	; 0x4f8 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 4c4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 4c8:	8f 7d       	andi	r24, 0xDF	; 223
 4ca:	03 c0       	rjmp	.+6      	; 0x4d2 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 4cc:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 4d0:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 4d2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 4d6:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 4d8:	84 b5       	in	r24, 0x24	; 36
 4da:	8f 77       	andi	r24, 0x7F	; 127
 4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 4de:	84 b5       	in	r24, 0x24	; 36
 4e0:	8f 7d       	andi	r24, 0xDF	; 223
 4e2:	84 bd       	out	0x24, r24	; 36
 4e4:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 4e6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 4ea:	8f 77       	andi	r24, 0x7F	; 127
 4ec:	03 c0       	rjmp	.+6      	; 0x4f4 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 4ee:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 4f2:	8f 7d       	andi	r24, 0xDF	; 223
 4f4:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 4f8:	08 95       	ret

000004fa <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 4fa:	cf 93       	push	r28
 4fc:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	fc 01       	movw	r30, r24
 502:	e4 58       	subi	r30, 0x84	; 132
 504:	ff 4f       	sbci	r31, 0xFF	; 255
 506:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 508:	fc 01       	movw	r30, r24
 50a:	e0 57       	subi	r30, 0x70	; 112
 50c:	ff 4f       	sbci	r31, 0xFF	; 255
 50e:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 510:	88 23       	and	r24, r24
 512:	61 f1       	breq	.+88     	; 0x56c <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	88 0f       	add	r24, r24
 518:	99 1f       	adc	r25, r25
 51a:	fc 01       	movw	r30, r24
 51c:	e2 55       	subi	r30, 0x52	; 82
 51e:	ff 4f       	sbci	r31, 0xFF	; 255
 520:	c5 91       	lpm	r28, Z+
 522:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 524:	fc 01       	movw	r30, r24
 526:	ec 55       	subi	r30, 0x5C	; 92
 528:	ff 4f       	sbci	r31, 0xFF	; 255
 52a:	a5 91       	lpm	r26, Z+
 52c:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 52e:	61 11       	cpse	r22, r1
 530:	09 c0       	rjmp	.+18     	; 0x544 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 532:	9f b7       	in	r25, 0x3f	; 63
                cli();
 534:	f8 94       	cli
		*reg &= ~bit;
 536:	88 81       	ld	r24, Y
 538:	20 95       	com	r18
 53a:	82 23       	and	r24, r18
 53c:	88 83       	st	Y, r24
		*out &= ~bit;
 53e:	ec 91       	ld	r30, X
 540:	2e 23       	and	r18, r30
 542:	0b c0       	rjmp	.+22     	; 0x55a <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 544:	62 30       	cpi	r22, 0x02	; 2
 546:	61 f4       	brne	.+24     	; 0x560 <pinMode+0x66>
		uint8_t oldSREG = SREG;
 548:	9f b7       	in	r25, 0x3f	; 63
                cli();
 54a:	f8 94       	cli
		*reg &= ~bit;
 54c:	88 81       	ld	r24, Y
 54e:	32 2f       	mov	r19, r18
 550:	30 95       	com	r19
 552:	83 23       	and	r24, r19
 554:	88 83       	st	Y, r24
		*out |= bit;
 556:	ec 91       	ld	r30, X
 558:	2e 2b       	or	r18, r30
 55a:	2c 93       	st	X, r18
		SREG = oldSREG;
 55c:	9f bf       	out	0x3f, r25	; 63
 55e:	06 c0       	rjmp	.+12     	; 0x56c <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 560:	8f b7       	in	r24, 0x3f	; 63
                cli();
 562:	f8 94       	cli
		*reg |= bit;
 564:	e8 81       	ld	r30, Y
 566:	2e 2b       	or	r18, r30
 568:	28 83       	st	Y, r18
		SREG = oldSREG;
 56a:	8f bf       	out	0x3f, r24	; 63
	}
}
 56c:	df 91       	pop	r29
 56e:	cf 91       	pop	r28
 570:	08 95       	ret

00000572 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 572:	1f 93       	push	r17
 574:	cf 93       	push	r28
 576:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 578:	28 2f       	mov	r18, r24
 57a:	30 e0       	ldi	r19, 0x00	; 0
 57c:	f9 01       	movw	r30, r18
 57e:	e8 59       	subi	r30, 0x98	; 152
 580:	ff 4f       	sbci	r31, 0xFF	; 255
 582:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 584:	f9 01       	movw	r30, r18
 586:	e4 58       	subi	r30, 0x84	; 132
 588:	ff 4f       	sbci	r31, 0xFF	; 255
 58a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 58c:	f9 01       	movw	r30, r18
 58e:	e0 57       	subi	r30, 0x70	; 112
 590:	ff 4f       	sbci	r31, 0xFF	; 255
 592:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 594:	cc 23       	and	r28, r28
 596:	c1 f0       	breq	.+48     	; 0x5c8 <digitalWrite+0x56>
 598:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 59a:	81 11       	cpse	r24, r1
 59c:	0e 94 54 02 	call	0x4a8	; 0x4a8 <turnOffPWM>

	out = portOutputRegister(port);
 5a0:	ec 2f       	mov	r30, r28
 5a2:	f0 e0       	ldi	r31, 0x00	; 0
 5a4:	ee 0f       	add	r30, r30
 5a6:	ff 1f       	adc	r31, r31
 5a8:	ec 55       	subi	r30, 0x5C	; 92
 5aa:	ff 4f       	sbci	r31, 0xFF	; 255
 5ac:	a5 91       	lpm	r26, Z+
 5ae:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 5b0:	9f b7       	in	r25, 0x3f	; 63
	cli();
 5b2:	f8 94       	cli

	if (val == LOW) {
 5b4:	11 11       	cpse	r17, r1
 5b6:	04 c0       	rjmp	.+8      	; 0x5c0 <digitalWrite+0x4e>
		*out &= ~bit;
 5b8:	8c 91       	ld	r24, X
 5ba:	d0 95       	com	r29
 5bc:	d8 23       	and	r29, r24
 5be:	02 c0       	rjmp	.+4      	; 0x5c4 <digitalWrite+0x52>
	} else {
		*out |= bit;
 5c0:	ec 91       	ld	r30, X
 5c2:	de 2b       	or	r29, r30
 5c4:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
 5c6:	9f bf       	out	0x3f, r25	; 63
}
 5c8:	df 91       	pop	r29
 5ca:	cf 91       	pop	r28
 5cc:	1f 91       	pop	r17
 5ce:	08 95       	ret

000005d0 <__tablejump2__>:
 5d0:	ee 0f       	add	r30, r30
 5d2:	ff 1f       	adc	r31, r31
 5d4:	05 90       	lpm	r0, Z+
 5d6:	f4 91       	lpm	r31, Z
 5d8:	e0 2d       	mov	r30, r0
 5da:	09 94       	ijmp

000005dc <_exit>:
 5dc:	f8 94       	cli

000005de <__stop_program>:
 5de:	ff cf       	rjmp	.-2      	; 0x5de <__stop_program>
